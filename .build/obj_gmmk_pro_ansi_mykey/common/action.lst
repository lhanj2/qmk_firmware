   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"action.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.pre_process_record_quantum,"ax",%progbits
  18              		.align	1
  19              		.weak	pre_process_record_quantum
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	pre_process_record_quantum:
  27              	.LFB317:
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 0120     		movs	r0, #1
  33 0002 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE317:
  37              		.section	.text.action_exec,"ax",%progbits
  38              		.align	1
  39              		.global	action_exec
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu fpv4-sp-d16
  45              	action_exec:
  46              	.LFB288:
  47              		.file 1 "tmk_core/common/action.c"
   1:tmk_core/common/action.c **** /*
   2:tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action.c **** 
   4:tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action.c **** (at your option) any later version.
   8:tmk_core/common/action.c **** 
   9:tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action.c **** GNU General Public License for more details.
  13:tmk_core/common/action.c **** 
  14:tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action.c **** */
  17:tmk_core/common/action.c **** #include "host.h"
  18:tmk_core/common/action.c **** #include "keycode.h"
  19:tmk_core/common/action.c **** #include "keyboard.h"
  20:tmk_core/common/action.c **** #include "mousekey.h"
  21:tmk_core/common/action.c **** #include "command.h"
  22:tmk_core/common/action.c **** #include "led.h"
  23:tmk_core/common/action.c **** #include "action_layer.h"
  24:tmk_core/common/action.c **** #include "action_tapping.h"
  25:tmk_core/common/action.c **** #include "action_macro.h"
  26:tmk_core/common/action.c **** #include "action_util.h"
  27:tmk_core/common/action.c **** #include "action.h"
  28:tmk_core/common/action.c **** #include "wait.h"
  29:tmk_core/common/action.c **** 
  30:tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
  31:tmk_core/common/action.c **** #    include "backlight.h"
  32:tmk_core/common/action.c **** #endif
  33:tmk_core/common/action.c **** 
  34:tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  35:tmk_core/common/action.c **** #    include "debug.h"
  36:tmk_core/common/action.c **** #else
  37:tmk_core/common/action.c **** #    include "nodebug.h"
  38:tmk_core/common/action.c **** #endif
  39:tmk_core/common/action.c **** 
  40:tmk_core/common/action.c **** #ifdef POINTING_DEVICE_ENABLE
  41:tmk_core/common/action.c **** #    include "pointing_device.h"
  42:tmk_core/common/action.c **** #endif
  43:tmk_core/common/action.c **** 
  44:tmk_core/common/action.c **** int tp_buttons;
  45:tmk_core/common/action.c **** 
  46:tmk_core/common/action.c **** #if defined(RETRO_TAPPING) || defined(RETRO_TAPPING_PER_KEY)
  47:tmk_core/common/action.c **** int retro_tapping_counter = 0;
  48:tmk_core/common/action.c **** #endif
  49:tmk_core/common/action.c **** 
  50:tmk_core/common/action.c **** #ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
  51:tmk_core/common/action.c **** __attribute__((weak)) bool get_ignore_mod_tap_interrupt(uint16_t keycode, keyrecord_t *record) { re
  52:tmk_core/common/action.c **** #endif
  53:tmk_core/common/action.c **** 
  54:tmk_core/common/action.c **** #ifdef RETRO_TAPPING_PER_KEY
  55:tmk_core/common/action.c **** __attribute__((weak)) bool get_retro_tapping(uint16_t keycode, keyrecord_t *record) { return false;
  56:tmk_core/common/action.c **** #endif
  57:tmk_core/common/action.c **** 
  58:tmk_core/common/action.c **** __attribute__((weak)) bool pre_process_record_quantum(keyrecord_t *record) { return true; }
  59:tmk_core/common/action.c **** 
  60:tmk_core/common/action.c **** #ifndef TAP_CODE_DELAY
  61:tmk_core/common/action.c **** #    define TAP_CODE_DELAY 0
  62:tmk_core/common/action.c **** #endif
  63:tmk_core/common/action.c **** #ifndef TAP_HOLD_CAPS_DELAY
  64:tmk_core/common/action.c **** #    define TAP_HOLD_CAPS_DELAY 80
  65:tmk_core/common/action.c **** #endif
  66:tmk_core/common/action.c **** /** \brief Called to execute an action.
  67:tmk_core/common/action.c ****  *
  68:tmk_core/common/action.c ****  * FIXME: Needs documentation.
  69:tmk_core/common/action.c ****  */
  70:tmk_core/common/action.c **** void action_exec(keyevent_t event) {
  48              		.loc 1 70 36 view -0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 24
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		.loc 1 70 36 is_stmt 0 view .LVU1
  53 0000 30B5     		push	{r4, r5, lr}
  54              		.cfi_def_cfa_offset 12
  55              		.cfi_offset 4, -12
  56              		.cfi_offset 5, -8
  57              		.cfi_offset 14, -4
  58 0002 87B0     		sub	sp, sp, #28
  59              		.cfi_def_cfa_offset 40
  60              	.LVL0:
  71:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  61              		.loc 1 71 5 is_stmt 1 view .LVU2
  70:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  62              		.loc 1 70 36 is_stmt 0 view .LVU3
  63 0004 6C46     		mov	r4, sp
  64 0006 84E80300 		stm	r4, {r0, r1}
  65              	.LVL1:
  72:tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  73:tmk_core/common/action.c ****         dprint("EVENT: ");
  74:tmk_core/common/action.c ****         debug_event(event);
  75:tmk_core/common/action.c ****         dprintln();
  76:tmk_core/common/action.c **** #if defined(RETRO_TAPPING) || defined(RETRO_TAPPING_PER_KEY)
  77:tmk_core/common/action.c ****         retro_tapping_counter++;
  78:tmk_core/common/action.c **** #endif
  79:tmk_core/common/action.c ****     }
  80:tmk_core/common/action.c **** 
  81:tmk_core/common/action.c ****     if (event.pressed) {
  66              		.loc 1 81 8 view .LVU4
  67 000a 9DF80230 		ldrb	r3, [sp, #2]	@ zero_extendqisi2
  68 000e BDF80450 		ldrh	r5, [sp, #4]
  69              	.LVL2:
  70              	.LBB16:
  71              	.LBI16:
  72              		.file 2 "tmk_core/common/keyboard.h"
   1:tmk_core/common/keyboard.h **** /*
   2:tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/keyboard.h **** 
   4:tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/keyboard.h **** (at your option) any later version.
   8:tmk_core/common/keyboard.h **** 
   9:tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:tmk_core/common/keyboard.h **** 
  14:tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/keyboard.h **** */
  17:tmk_core/common/keyboard.h **** 
  18:tmk_core/common/keyboard.h **** #pragma once
  19:tmk_core/common/keyboard.h **** 
  20:tmk_core/common/keyboard.h **** #include <stdbool.h>
  21:tmk_core/common/keyboard.h **** #include <stdint.h>
  22:tmk_core/common/keyboard.h **** 
  23:tmk_core/common/keyboard.h **** #ifdef __cplusplus
  24:tmk_core/common/keyboard.h **** extern "C" {
  25:tmk_core/common/keyboard.h **** #endif
  26:tmk_core/common/keyboard.h **** 
  27:tmk_core/common/keyboard.h **** /* key matrix position */
  28:tmk_core/common/keyboard.h **** typedef struct {
  29:tmk_core/common/keyboard.h ****     uint8_t col;
  30:tmk_core/common/keyboard.h ****     uint8_t row;
  31:tmk_core/common/keyboard.h **** } keypos_t;
  32:tmk_core/common/keyboard.h **** 
  33:tmk_core/common/keyboard.h **** /* key event */
  34:tmk_core/common/keyboard.h **** typedef struct {
  35:tmk_core/common/keyboard.h ****     keypos_t key;
  36:tmk_core/common/keyboard.h ****     bool     pressed;
  37:tmk_core/common/keyboard.h ****     uint16_t time;
  38:tmk_core/common/keyboard.h **** } keyevent_t;
  39:tmk_core/common/keyboard.h **** 
  40:tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  41:tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb) ((keya).row == (keyb).row && (keya).col == (keyb).col)
  42:tmk_core/common/keyboard.h **** 
  43:tmk_core/common/keyboard.h **** /* Rules for No Event:
  44:tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  45:tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  46:tmk_core/common/keyboard.h ****  */
  47:tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
  73              		.loc 2 47 20 is_stmt 1 view .LVU5
  74              	.LBE16:
  75              		.loc 2 47 51 view .LVU6
  75:tmk_core/common/action.c **** #if defined(RETRO_TAPPING) || defined(RETRO_TAPPING_PER_KEY)
  76              		.loc 1 75 19 view .LVU7
  77              		.loc 1 81 5 view .LVU8
  78              		.loc 1 81 8 is_stmt 0 view .LVU9
  79 0012 0BB1     		cbz	r3, .L3
  82:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
  83:tmk_core/common/action.c ****         clear_weak_mods();
  80              		.loc 1 83 9 is_stmt 1 view .LVU10
  81 0014 FFF7FEFF 		bl	clear_weak_mods
  82              	.LVL3:
  83              	.L3:
  84:tmk_core/common/action.c ****     }
  85:tmk_core/common/action.c **** 
  86:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
  87:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  88:tmk_core/common/action.c ****         process_hand_swap(&event);
  89:tmk_core/common/action.c ****     }
  90:tmk_core/common/action.c **** #endif
  91:tmk_core/common/action.c **** 
  92:tmk_core/common/action.c ****     keyrecord_t record = {.event = event};
  84              		.loc 1 92 5 view .LVU11
  85              		.loc 1 92 17 is_stmt 0 view .LVU12
  86 0018 0023     		movs	r3, #0
  87 001a ADF81630 		strh	r3, [sp, #22]	@ movhi
  88 001e 94E80300 		ldm	r4, {r0, r1}
  89 0022 04AC     		add	r4, sp, #16
  90 0024 0490     		str	r0, [sp, #16]
  91 0026 ADF81410 		strh	r1, [sp, #20]	@ movhi
  93:tmk_core/common/action.c **** 
  94:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
  95:tmk_core/common/action.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  96:tmk_core/common/action.c ****     if (has_oneshot_layer_timed_out()) {
  97:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
  98:tmk_core/common/action.c ****     }
  99:tmk_core/common/action.c ****     if (has_oneshot_mods_timed_out()) {
 100:tmk_core/common/action.c ****         clear_oneshot_mods();
 101:tmk_core/common/action.c ****     }
 102:tmk_core/common/action.c **** #        ifdef SWAP_HANDS_ENABLE
 103:tmk_core/common/action.c ****     if (has_oneshot_swaphands_timed_out()) {
 104:tmk_core/common/action.c ****         clear_oneshot_swaphands();
 105:tmk_core/common/action.c ****     }
 106:tmk_core/common/action.c **** #        endif
 107:tmk_core/common/action.c **** #    endif
 108:tmk_core/common/action.c **** #endif
 109:tmk_core/common/action.c **** 
 110:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 111:tmk_core/common/action.c ****     if (IS_NOEVENT(record.event) || pre_process_record_quantum(&record)) {
  92              		.loc 1 111 5 is_stmt 1 view .LVU13
  93 002a 94E80300 		ldm	r4, {r0, r1}
  94 002e 0290     		str	r0, [sp, #8]
  95              	.LVL4:
  96              	.LBB17:
  97              	.LBI17:
  98              		.loc 2 47 20 view .LVU14
  99              	.LBB18:
 100              		.loc 2 47 51 view .LVU15
 101              		.loc 2 47 74 is_stmt 0 view .LVU16
 102 0030 4DB1     		cbz	r5, .L5
 103              		.loc 2 47 99 view .LVU17
 104 0032 BDF80820 		ldrh	r2, [sp, #8]
 105              	.LVL5:
 106              		.loc 2 47 99 view .LVU18
 107              	.LBE18:
 108              	.LBE17:
 109              		.loc 1 111 8 view .LVU19
 110 0036 4FF6FF73 		movw	r3, #65535
 111 003a 9A42     		cmp	r2, r3
 112 003c 03D0     		beq	.L5
 113              		.loc 1 111 37 discriminator 1 view .LVU20
 114 003e 2046     		mov	r0, r4
 115 0040 FFF7FEFF 		bl	pre_process_record_quantum
 116              	.LVL6:
 117              		.loc 1 111 34 discriminator 1 view .LVU21
 118 0044 18B1     		cbz	r0, .L2
 119              	.L5:
 112:tmk_core/common/action.c ****         action_tapping_process(record);
 120              		.loc 1 112 9 is_stmt 1 view .LVU22
 121 0046 94E80300 		ldm	r4, {r0, r1}
 122 004a FFF7FEFF 		bl	action_tapping_process
 123              	.LVL7:
 124              	.L2:
 113:tmk_core/common/action.c ****     }
 114:tmk_core/common/action.c **** #else
 115:tmk_core/common/action.c ****     if (IS_NOEVENT(record.event) || pre_process_record_quantum(&record)) {
 116:tmk_core/common/action.c ****         process_record(&record);
 117:tmk_core/common/action.c ****     }
 118:tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
 119:tmk_core/common/action.c ****         dprint("processed: ");
 120:tmk_core/common/action.c ****         debug_record(record);
 121:tmk_core/common/action.c ****         dprintln();
 122:tmk_core/common/action.c ****     }
 123:tmk_core/common/action.c **** #endif
 124:tmk_core/common/action.c **** }
 125              		.loc 1 124 1 is_stmt 0 view .LVU23
 126 004e 07B0     		add	sp, sp, #28
 127              		.cfi_def_cfa_offset 12
 128              		@ sp needed
 129 0050 30BD     		pop	{r4, r5, pc}
 130              		.cfi_endproc
 131              	.LFE288:
 133              		.section	.text.process_record_quantum,"ax",%progbits
 134              		.align	1
 135              		.weak	process_record_quantum
 136              		.syntax unified
 137              		.thumb
 138              		.thumb_func
 139              		.fpu fpv4-sp-d16
 141              	process_record_quantum:
 142              	.LVL8:
 143              	.LFB290:
 125:tmk_core/common/action.c **** 
 126:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 127:tmk_core/common/action.c **** bool swap_hands = false;
 128:tmk_core/common/action.c **** bool swap_held  = false;
 129:tmk_core/common/action.c **** 
 130:tmk_core/common/action.c **** /** \brief Process Hand Swap
 131:tmk_core/common/action.c ****  *
 132:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 133:tmk_core/common/action.c ****  */
 134:tmk_core/common/action.c **** void process_hand_swap(keyevent_t *event) {
 135:tmk_core/common/action.c ****     static swap_state_row_t swap_state[MATRIX_ROWS];
 136:tmk_core/common/action.c **** 
 137:tmk_core/common/action.c ****     keypos_t         pos     = event->key;
 138:tmk_core/common/action.c ****     swap_state_row_t col_bit = (swap_state_row_t)1 << pos.col;
 139:tmk_core/common/action.c ****     bool             do_swap = event->pressed ? swap_hands : swap_state[pos.row] & (col_bit);
 140:tmk_core/common/action.c **** 
 141:tmk_core/common/action.c ****     if (do_swap) {
 142:tmk_core/common/action.c ****         event->key.row = pgm_read_byte(&hand_swap_config[pos.row][pos.col].row);
 143:tmk_core/common/action.c ****         event->key.col = pgm_read_byte(&hand_swap_config[pos.row][pos.col].col);
 144:tmk_core/common/action.c ****         swap_state[pos.row] |= col_bit;
 145:tmk_core/common/action.c ****     } else {
 146:tmk_core/common/action.c ****         swap_state[pos.row] &= ~(col_bit);
 147:tmk_core/common/action.c ****     }
 148:tmk_core/common/action.c **** }
 149:tmk_core/common/action.c **** #endif
 150:tmk_core/common/action.c **** 
 151:tmk_core/common/action.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 152:tmk_core/common/action.c **** bool disable_action_cache = false;
 153:tmk_core/common/action.c **** 
 154:tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record) {
 155:tmk_core/common/action.c ****     disable_action_cache = true;
 156:tmk_core/common/action.c ****     process_record(record);
 157:tmk_core/common/action.c ****     disable_action_cache = false;
 158:tmk_core/common/action.c **** }
 159:tmk_core/common/action.c **** #else
 160:tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record) { process_record(record); }
 161:tmk_core/common/action.c **** #endif
 162:tmk_core/common/action.c **** 
 163:tmk_core/common/action.c **** __attribute__((weak)) bool process_record_quantum(keyrecord_t *record) { return true; }
 144              		.loc 1 163 72 is_stmt 1 view -0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148              		@ link register save eliminated.
 149              		.loc 1 163 74 view .LVU25
 150              		.loc 1 163 87 is_stmt 0 view .LVU26
 151 0000 0120     		movs	r0, #1
 152              	.LVL9:
 153              		.loc 1 163 87 view .LVU27
 154 0002 7047     		bx	lr
 155              		.cfi_endproc
 156              	.LFE290:
 158              		.section	.text.post_process_record_quantum,"ax",%progbits
 159              		.align	1
 160              		.weak	post_process_record_quantum
 161              		.syntax unified
 162              		.thumb
 163              		.thumb_func
 164              		.fpu fpv4-sp-d16
 166              	post_process_record_quantum:
 167              	.LVL10:
 168              	.LFB291:
 164:tmk_core/common/action.c **** 
 165:tmk_core/common/action.c **** __attribute__((weak)) void post_process_record_quantum(keyrecord_t *record) {}
 169              		.loc 1 165 77 is_stmt 1 view -0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173              		@ link register save eliminated.
 174              		.loc 1 165 78 view .LVU29
 175 0000 7047     		bx	lr
 176              		.cfi_endproc
 177              	.LFE291:
 179              		.section	.text.process_record_tap_hint,"ax",%progbits
 180              		.align	1
 181              		.global	process_record_tap_hint
 182              		.syntax unified
 183              		.thumb
 184              		.thumb_func
 185              		.fpu fpv4-sp-d16
 187              	process_record_tap_hint:
 188              	.LVL11:
 189              	.LFB292:
 166:tmk_core/common/action.c **** 
 167:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 168:tmk_core/common/action.c **** /** \brief Allows for handling tap-hold actions immediately instead of waiting for TAPPING_TERM or 
 169:tmk_core/common/action.c ****  *
 170:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 171:tmk_core/common/action.c ****  */
 172:tmk_core/common/action.c **** void process_record_tap_hint(keyrecord_t *record) {
 190              		.loc 1 172 51 view -0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		@ link register save eliminated.
 173:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(record->event.key);
 195              		.loc 1 173 5 view .LVU31
 196              		.loc 1 173 23 is_stmt 0 view .LVU32
 197 0000 0088     		ldrh	r0, [r0]
 198              	.LVL12:
 199              		.loc 1 173 23 view .LVU33
 200 0002 FFF7FEBF 		b	layer_switch_get_action
 201              	.LVL13:
 202              		.cfi_endproc
 203              	.LFE292:
 205              		.section	.text.register_code,"ax",%progbits
 206              		.align	1
 207              		.global	register_code
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 211              		.fpu fpv4-sp-d16
 213              	register_code:
 214              	.LVL14:
 215              	.LFB296:
 174:tmk_core/common/action.c **** 
 175:tmk_core/common/action.c ****     switch (action.kind.id) {
 176:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 177:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 178:tmk_core/common/action.c ****             switch (action.swap.code) {
 179:tmk_core/common/action.c ****                 case OP_SH_ONESHOT:
 180:tmk_core/common/action.c ****                     break;
 181:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 182:tmk_core/common/action.c ****                 default:
 183:tmk_core/common/action.c ****                     swap_hands = !swap_hands;
 184:tmk_core/common/action.c ****                     swap_held  = true;
 185:tmk_core/common/action.c ****             }
 186:tmk_core/common/action.c ****             break;
 187:tmk_core/common/action.c **** #    endif
 188:tmk_core/common/action.c ****     }
 189:tmk_core/common/action.c **** }
 190:tmk_core/common/action.c **** #endif
 191:tmk_core/common/action.c **** 
 192:tmk_core/common/action.c **** /** \brief Take a key event (key press or key release) and processes it.
 193:tmk_core/common/action.c ****  *
 194:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 195:tmk_core/common/action.c ****  */
 196:tmk_core/common/action.c **** void process_record(keyrecord_t *record) {
 197:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 198:tmk_core/common/action.c ****         return;
 199:tmk_core/common/action.c ****     }
 200:tmk_core/common/action.c **** 
 201:tmk_core/common/action.c ****     if (!process_record_quantum(record)) {
 202:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 203:tmk_core/common/action.c ****         if (is_oneshot_layer_active() && record->event.pressed) {
 204:tmk_core/common/action.c ****             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 205:tmk_core/common/action.c ****         }
 206:tmk_core/common/action.c **** #endif
 207:tmk_core/common/action.c ****         return;
 208:tmk_core/common/action.c ****     }
 209:tmk_core/common/action.c **** 
 210:tmk_core/common/action.c ****     process_record_handler(record);
 211:tmk_core/common/action.c ****     post_process_record_quantum(record);
 212:tmk_core/common/action.c **** }
 213:tmk_core/common/action.c **** 
 214:tmk_core/common/action.c **** void process_record_handler(keyrecord_t *record) {
 215:tmk_core/common/action.c **** #ifdef COMBO_ENABLE
 216:tmk_core/common/action.c ****     action_t action;
 217:tmk_core/common/action.c ****     if (record->keycode) {
 218:tmk_core/common/action.c ****         action = action_for_keycode(record->keycode);
 219:tmk_core/common/action.c ****     } else {
 220:tmk_core/common/action.c ****         action = store_or_get_action(record->event.pressed, record->event.key);
 221:tmk_core/common/action.c ****     }
 222:tmk_core/common/action.c **** #else
 223:tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 224:tmk_core/common/action.c **** #endif
 225:tmk_core/common/action.c ****     dprint("ACTION: ");
 226:tmk_core/common/action.c ****     debug_action(action);
 227:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 228:tmk_core/common/action.c ****     dprint(" layer_state: ");
 229:tmk_core/common/action.c ****     layer_debug();
 230:tmk_core/common/action.c ****     dprint(" default_layer_state: ");
 231:tmk_core/common/action.c ****     default_layer_debug();
 232:tmk_core/common/action.c **** #endif
 233:tmk_core/common/action.c ****     dprintln();
 234:tmk_core/common/action.c **** 
 235:tmk_core/common/action.c ****     process_action(record, action);
 236:tmk_core/common/action.c **** }
 237:tmk_core/common/action.c **** 
 238:tmk_core/common/action.c **** #if defined(PS2_MOUSE_ENABLE) || defined(POINTING_DEVICE_ENABLE)
 239:tmk_core/common/action.c **** void register_button(bool pressed, enum mouse_buttons button) {
 240:tmk_core/common/action.c **** #    ifdef PS2_MOUSE_ENABLE
 241:tmk_core/common/action.c ****     tp_buttons = pressed ? tp_buttons | button : tp_buttons & ~button;
 242:tmk_core/common/action.c **** #    endif
 243:tmk_core/common/action.c **** #    ifdef POINTING_DEVICE_ENABLE
 244:tmk_core/common/action.c ****     report_mouse_t currentReport = pointing_device_get_report();
 245:tmk_core/common/action.c ****     currentReport.buttons        = pressed ? currentReport.buttons | button : currentReport.buttons
 246:tmk_core/common/action.c ****     pointing_device_set_report(currentReport);
 247:tmk_core/common/action.c **** #    endif
 248:tmk_core/common/action.c **** }
 249:tmk_core/common/action.c **** #endif
 250:tmk_core/common/action.c **** 
 251:tmk_core/common/action.c **** /** \brief Take an action and processes it.
 252:tmk_core/common/action.c ****  *
 253:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 254:tmk_core/common/action.c ****  */
 255:tmk_core/common/action.c **** void process_action(keyrecord_t *record, action_t action) {
 256:tmk_core/common/action.c ****     keyevent_t event = record->event;
 257:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 258:tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 259:tmk_core/common/action.c **** #endif
 260:tmk_core/common/action.c **** 
 261:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 262:tmk_core/common/action.c ****     bool do_release_oneshot = false;
 263:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 264:tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && (action.kind.id == ACT_USAGE || !IS_MOD(actio
 265:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 266:tmk_core/common/action.c ****         && !(action.kind.id == ACT_SWAP_HANDS && action.swap.code == OP_SH_ONESHOT)
 267:tmk_core/common/action.c **** #    endif
 268:tmk_core/common/action.c ****     ) {
 269:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 270:tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 271:tmk_core/common/action.c ****     }
 272:tmk_core/common/action.c **** #endif
 273:tmk_core/common/action.c **** 
 274:tmk_core/common/action.c ****     switch (action.kind.id) {
 275:tmk_core/common/action.c ****         /* Key and Mods */
 276:tmk_core/common/action.c ****         case ACT_LMODS:
 277:tmk_core/common/action.c ****         case ACT_RMODS: {
 278:tmk_core/common/action.c ****             uint8_t mods = (action.kind.id == ACT_LMODS) ? action.key.mods : action.key.mods << 4;
 279:tmk_core/common/action.c ****             if (event.pressed) {
 280:tmk_core/common/action.c ****                 if (mods) {
 281:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 282:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 283:tmk_core/common/action.c ****                         // This also makes LSFT(KC_LGUI) behave exactly the same as LGUI(KC_LSFT).
 284:tmk_core/common/action.c ****                         // Same applies for some keys like KC_MEH which are declared as MEH(KC_NO).
 285:tmk_core/common/action.c ****                         add_mods(mods);
 286:tmk_core/common/action.c ****                     } else {
 287:tmk_core/common/action.c ****                         add_weak_mods(mods);
 288:tmk_core/common/action.c ****                     }
 289:tmk_core/common/action.c ****                     send_keyboard_report();
 290:tmk_core/common/action.c ****                 }
 291:tmk_core/common/action.c ****                 register_code(action.key.code);
 292:tmk_core/common/action.c ****             } else {
 293:tmk_core/common/action.c ****                 unregister_code(action.key.code);
 294:tmk_core/common/action.c ****                 if (mods) {
 295:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 296:tmk_core/common/action.c ****                         del_mods(mods);
 297:tmk_core/common/action.c ****                     } else {
 298:tmk_core/common/action.c ****                         del_weak_mods(mods);
 299:tmk_core/common/action.c ****                     }
 300:tmk_core/common/action.c ****                     send_keyboard_report();
 301:tmk_core/common/action.c ****                 }
 302:tmk_core/common/action.c ****             }
 303:tmk_core/common/action.c ****         } break;
 304:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 305:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 306:tmk_core/common/action.c ****         case ACT_RMODS_TAP: {
 307:tmk_core/common/action.c ****             uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ? action.key.mods : action.key.mods <<
 308:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 309:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 310:tmk_core/common/action.c ****                 case MODS_ONESHOT:
 311:tmk_core/common/action.c ****                     // Oneshot modifier
 312:tmk_core/common/action.c ****                     if (event.pressed) {
 313:tmk_core/common/action.c ****                         if (tap_count == 0) {
 314:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: 0\n");
 315:tmk_core/common/action.c ****                             register_mods(mods | get_oneshot_mods());
 316:tmk_core/common/action.c ****                         } else if (tap_count == 1) {
 317:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: start\n");
 318:tmk_core/common/action.c ****                             set_oneshot_mods(mods | get_oneshot_mods());
 319:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 320:tmk_core/common/action.c ****                         } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 321:tmk_core/common/action.c ****                             dprint("MODS_TAP: Toggling oneshot");
 322:tmk_core/common/action.c ****                             clear_oneshot_mods();
 323:tmk_core/common/action.c ****                             set_oneshot_locked_mods(mods);
 324:tmk_core/common/action.c ****                             register_mods(mods);
 325:tmk_core/common/action.c **** #        endif
 326:tmk_core/common/action.c ****                         } else {
 327:tmk_core/common/action.c ****                             register_mods(mods | get_oneshot_mods());
 328:tmk_core/common/action.c ****                         }
 329:tmk_core/common/action.c ****                     } else {
 330:tmk_core/common/action.c ****                         if (tap_count == 0) {
 331:tmk_core/common/action.c ****                             clear_oneshot_mods();
 332:tmk_core/common/action.c ****                             unregister_mods(mods);
 333:tmk_core/common/action.c ****                         } else if (tap_count == 1) {
 334:tmk_core/common/action.c ****                             // Retain Oneshot mods
 335:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 336:tmk_core/common/action.c ****                             if (mods & get_mods()) {
 337:tmk_core/common/action.c ****                                 clear_oneshot_locked_mods();
 338:tmk_core/common/action.c ****                                 clear_oneshot_mods();
 339:tmk_core/common/action.c ****                                 unregister_mods(mods);
 340:tmk_core/common/action.c ****                             }
 341:tmk_core/common/action.c ****                         } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 342:tmk_core/common/action.c ****                             // Toggle Oneshot Layer
 343:tmk_core/common/action.c **** #        endif
 344:tmk_core/common/action.c ****                         } else {
 345:tmk_core/common/action.c ****                             clear_oneshot_mods();
 346:tmk_core/common/action.c ****                             unregister_mods(mods);
 347:tmk_core/common/action.c ****                         }
 348:tmk_core/common/action.c ****                     }
 349:tmk_core/common/action.c ****                     break;
 350:tmk_core/common/action.c **** #    endif
 351:tmk_core/common/action.c ****                 case MODS_TAP_TOGGLE:
 352:tmk_core/common/action.c ****                     if (event.pressed) {
 353:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 354:tmk_core/common/action.c ****                             register_mods(mods);
 355:tmk_core/common/action.c ****                         }
 356:tmk_core/common/action.c ****                     } else {
 357:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 358:tmk_core/common/action.c ****                             unregister_mods(mods);
 359:tmk_core/common/action.c ****                         }
 360:tmk_core/common/action.c ****                     }
 361:tmk_core/common/action.c ****                     break;
 362:tmk_core/common/action.c ****                 default:
 363:tmk_core/common/action.c ****                     if (event.pressed) {
 364:tmk_core/common/action.c ****                         if (tap_count > 0) {
 365:tmk_core/common/action.c **** #    if !defined(IGNORE_MOD_TAP_INTERRUPT) || defined(IGNORE_MOD_TAP_INTERRUPT_PER_KEY)
 366:tmk_core/common/action.c ****                             if (
 367:tmk_core/common/action.c **** #        ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
 368:tmk_core/common/action.c ****                                 !get_ignore_mod_tap_interrupt(get_event_keycode(record->event, fals
 369:tmk_core/common/action.c **** #        endif
 370:tmk_core/common/action.c ****                                 record->tap.interrupted) {
 371:tmk_core/common/action.c ****                                 dprint("mods_tap: tap: cancel: add_mods\n");
 372:tmk_core/common/action.c ****                                 // ad hoc: set 0 to cancel tap
 373:tmk_core/common/action.c ****                                 record->tap.count = 0;
 374:tmk_core/common/action.c ****                                 register_mods(mods);
 375:tmk_core/common/action.c ****                             } else
 376:tmk_core/common/action.c **** #    endif
 377:tmk_core/common/action.c ****                             {
 378:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: register_code\n");
 379:tmk_core/common/action.c ****                                 register_code(action.key.code);
 380:tmk_core/common/action.c ****                             }
 381:tmk_core/common/action.c ****                         } else {
 382:tmk_core/common/action.c ****                             dprint("MODS_TAP: No tap: add_mods\n");
 383:tmk_core/common/action.c ****                             register_mods(mods);
 384:tmk_core/common/action.c ****                         }
 385:tmk_core/common/action.c ****                     } else {
 386:tmk_core/common/action.c ****                         if (tap_count > 0) {
 387:tmk_core/common/action.c ****                             dprint("MODS_TAP: Tap: unregister_code\n");
 388:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 389:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 390:tmk_core/common/action.c ****                             } else {
 391:tmk_core/common/action.c ****                                 wait_ms(TAP_CODE_DELAY);
 392:tmk_core/common/action.c ****                             }
 393:tmk_core/common/action.c ****                             unregister_code(action.key.code);
 394:tmk_core/common/action.c ****                         } else {
 395:tmk_core/common/action.c ****                             dprint("MODS_TAP: No tap: add_mods\n");
 396:tmk_core/common/action.c ****                             unregister_mods(mods);
 397:tmk_core/common/action.c ****                         }
 398:tmk_core/common/action.c ****                     }
 399:tmk_core/common/action.c ****                     break;
 400:tmk_core/common/action.c ****             }
 401:tmk_core/common/action.c ****         } break;
 402:tmk_core/common/action.c **** #endif
 403:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 404:tmk_core/common/action.c ****         /* other HID usage */
 405:tmk_core/common/action.c ****         case ACT_USAGE:
 406:tmk_core/common/action.c ****             switch (action.usage.page) {
 407:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 408:tmk_core/common/action.c ****                     if (event.pressed) {
 409:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 410:tmk_core/common/action.c ****                     } else {
 411:tmk_core/common/action.c ****                         host_system_send(0);
 412:tmk_core/common/action.c ****                     }
 413:tmk_core/common/action.c ****                     break;
 414:tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 415:tmk_core/common/action.c ****                     if (event.pressed) {
 416:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 417:tmk_core/common/action.c ****                     } else {
 418:tmk_core/common/action.c ****                         host_consumer_send(0);
 419:tmk_core/common/action.c ****                     }
 420:tmk_core/common/action.c ****                     break;
 421:tmk_core/common/action.c ****             }
 422:tmk_core/common/action.c ****             break;
 423:tmk_core/common/action.c **** #endif
 424:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 425:tmk_core/common/action.c ****         /* Mouse key */
 426:tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 427:tmk_core/common/action.c ****             if (event.pressed) {
 428:tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 429:tmk_core/common/action.c ****             } else {
 430:tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 431:tmk_core/common/action.c ****             }
 432:tmk_core/common/action.c ****             switch (action.key.code) {
 433:tmk_core/common/action.c **** #    if defined(PS2_MOUSE_ENABLE) || defined(POINTING_DEVICE_ENABLE)
 434:tmk_core/common/action.c **** #        ifdef POINTING_DEVICE_ENABLE
 435:tmk_core/common/action.c ****                 case KC_MS_BTN1 ... KC_MS_BTN8:
 436:tmk_core/common/action.c **** #        else
 437:tmk_core/common/action.c ****                 case KC_MS_BTN1 ... KC_MS_BTN3:
 438:tmk_core/common/action.c **** #        endif
 439:tmk_core/common/action.c ****                     register_button(event.pressed, MOUSE_BTN_MASK(action.key.code - KC_MS_BTN1));
 440:tmk_core/common/action.c ****                     break;
 441:tmk_core/common/action.c **** #    endif
 442:tmk_core/common/action.c ****                 default:
 443:tmk_core/common/action.c ****                     mousekey_send();
 444:tmk_core/common/action.c ****                     break;
 445:tmk_core/common/action.c ****             }
 446:tmk_core/common/action.c ****             break;
 447:tmk_core/common/action.c **** #endif
 448:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 449:tmk_core/common/action.c ****         case ACT_LAYER:
 450:tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 451:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 452:tmk_core/common/action.c ****                 if (!event.pressed) {
 453:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 454:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 455:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 456:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 457:tmk_core/common/action.c ****                         case OP_BIT_AND:
 458:tmk_core/common/action.c ****                             default_layer_and(bits | mask);
 459:tmk_core/common/action.c ****                             break;
 460:tmk_core/common/action.c ****                         case OP_BIT_OR:
 461:tmk_core/common/action.c ****                             default_layer_or(bits | mask);
 462:tmk_core/common/action.c ****                             break;
 463:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 464:tmk_core/common/action.c ****                             default_layer_xor(bits | mask);
 465:tmk_core/common/action.c ****                             break;
 466:tmk_core/common/action.c ****                         case OP_BIT_SET:
 467:tmk_core/common/action.c ****                             default_layer_set(bits | mask);
 468:tmk_core/common/action.c ****                             break;
 469:tmk_core/common/action.c ****                     }
 470:tmk_core/common/action.c ****                 }
 471:tmk_core/common/action.c ****             } else {
 472:tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 473:tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) : (action.layer_bitop.on & O
 474:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 475:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 476:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 477:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 478:tmk_core/common/action.c ****                         case OP_BIT_AND:
 479:tmk_core/common/action.c ****                             layer_and(bits | mask);
 480:tmk_core/common/action.c ****                             break;
 481:tmk_core/common/action.c ****                         case OP_BIT_OR:
 482:tmk_core/common/action.c ****                             layer_or(bits | mask);
 483:tmk_core/common/action.c ****                             break;
 484:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 485:tmk_core/common/action.c ****                             layer_xor(bits | mask);
 486:tmk_core/common/action.c ****                             break;
 487:tmk_core/common/action.c ****                         case OP_BIT_SET:
 488:tmk_core/common/action.c ****                             layer_state_set(bits | mask);
 489:tmk_core/common/action.c ****                             break;
 490:tmk_core/common/action.c ****                     }
 491:tmk_core/common/action.c ****                 }
 492:tmk_core/common/action.c ****             }
 493:tmk_core/common/action.c ****             break;
 494:tmk_core/common/action.c ****         case ACT_LAYER_MODS:
 495:tmk_core/common/action.c ****             if (event.pressed) {
 496:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 497:tmk_core/common/action.c ****                 register_mods(action.layer_mods.mods);
 498:tmk_core/common/action.c ****             } else {
 499:tmk_core/common/action.c ****                 unregister_mods(action.layer_mods.mods);
 500:tmk_core/common/action.c ****                 layer_off(action.layer_mods.layer);
 501:tmk_core/common/action.c ****             }
 502:tmk_core/common/action.c ****             break;
 503:tmk_core/common/action.c **** #    ifndef NO_ACTION_TAPPING
 504:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 505:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 506:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 507:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 508:tmk_core/common/action.c ****                     /* tap toggle */
 509:tmk_core/common/action.c ****                     if (event.pressed) {
 510:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 511:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 512:tmk_core/common/action.c ****                         }
 513:tmk_core/common/action.c ****                     } else {
 514:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 515:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 516:tmk_core/common/action.c ****                         }
 517:tmk_core/common/action.c ****                     }
 518:tmk_core/common/action.c ****                     break;
 519:tmk_core/common/action.c ****                 case OP_ON_OFF:
 520:tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) : layer_off(action.layer_tap.val
 521:tmk_core/common/action.c ****                     break;
 522:tmk_core/common/action.c ****                 case OP_OFF_ON:
 523:tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) : layer_on(action.layer_tap.val
 524:tmk_core/common/action.c ****                     break;
 525:tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 526:tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) : layer_clear();
 527:tmk_core/common/action.c ****                     break;
 528:tmk_core/common/action.c **** #        ifndef NO_ACTION_ONESHOT
 529:tmk_core/common/action.c ****                 case OP_ONESHOT:
 530:tmk_core/common/action.c ****                     // Oneshot modifier
 531:tmk_core/common/action.c **** #            if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 532:tmk_core/common/action.c ****                     do_release_oneshot = false;
 533:tmk_core/common/action.c ****                     if (event.pressed) {
 534:tmk_core/common/action.c ****                         del_mods(get_oneshot_locked_mods());
 535:tmk_core/common/action.c ****                         if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
 536:tmk_core/common/action.c ****                             reset_oneshot_layer();
 537:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 538:tmk_core/common/action.c ****                             break;
 539:tmk_core/common/action.c ****                         } else if (tap_count < ONESHOT_TAP_TOGGLE) {
 540:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 541:tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 542:tmk_core/common/action.c ****                         }
 543:tmk_core/common/action.c ****                     } else {
 544:tmk_core/common/action.c ****                         add_mods(get_oneshot_locked_mods());
 545:tmk_core/common/action.c ****                         if (tap_count >= ONESHOT_TAP_TOGGLE) {
 546:tmk_core/common/action.c ****                             reset_oneshot_layer();
 547:tmk_core/common/action.c ****                             clear_oneshot_locked_mods();
 548:tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
 549:tmk_core/common/action.c ****                         } else {
 550:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_PRESSED);
 551:tmk_core/common/action.c ****                         }
 552:tmk_core/common/action.c ****                     }
 553:tmk_core/common/action.c **** #            else
 554:tmk_core/common/action.c ****                     if (event.pressed) {
 555:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 556:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 557:tmk_core/common/action.c ****                     } else {
 558:tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 559:tmk_core/common/action.c ****                         if (tap_count > 1) {
 560:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 561:tmk_core/common/action.c ****                         }
 562:tmk_core/common/action.c ****                     }
 563:tmk_core/common/action.c **** #            endif
 564:tmk_core/common/action.c ****                     break;
 565:tmk_core/common/action.c **** #        endif
 566:tmk_core/common/action.c ****                 default:
 567:tmk_core/common/action.c ****                     /* tap key */
 568:tmk_core/common/action.c ****                     if (event.pressed) {
 569:tmk_core/common/action.c ****                         if (tap_count > 0) {
 570:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 571:tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 572:tmk_core/common/action.c ****                         } else {
 573:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 574:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 575:tmk_core/common/action.c ****                         }
 576:tmk_core/common/action.c ****                     } else {
 577:tmk_core/common/action.c ****                         if (tap_count > 0) {
 578:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 579:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 580:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 581:tmk_core/common/action.c ****                             } else {
 582:tmk_core/common/action.c ****                                 wait_ms(TAP_CODE_DELAY);
 583:tmk_core/common/action.c ****                             }
 584:tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 585:tmk_core/common/action.c ****                         } else {
 586:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 587:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 588:tmk_core/common/action.c ****                         }
 589:tmk_core/common/action.c ****                     }
 590:tmk_core/common/action.c ****                     break;
 591:tmk_core/common/action.c ****             }
 592:tmk_core/common/action.c ****             break;
 593:tmk_core/common/action.c **** #    endif
 594:tmk_core/common/action.c **** #endif
 595:tmk_core/common/action.c ****             /* Extentions */
 596:tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 597:tmk_core/common/action.c ****         case ACT_MACRO:
 598:tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 599:tmk_core/common/action.c ****             break;
 600:tmk_core/common/action.c **** #endif
 601:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 602:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 603:tmk_core/common/action.c ****             switch (action.swap.code) {
 604:tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 605:tmk_core/common/action.c ****                     if (event.pressed) {
 606:tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 607:tmk_core/common/action.c ****                     }
 608:tmk_core/common/action.c ****                     break;
 609:tmk_core/common/action.c ****                 case OP_SH_ON_OFF:
 610:tmk_core/common/action.c ****                     swap_hands = event.pressed;
 611:tmk_core/common/action.c ****                     break;
 612:tmk_core/common/action.c ****                 case OP_SH_OFF_ON:
 613:tmk_core/common/action.c ****                     swap_hands = !event.pressed;
 614:tmk_core/common/action.c ****                     break;
 615:tmk_core/common/action.c ****                 case OP_SH_ON:
 616:tmk_core/common/action.c ****                     if (!event.pressed) {
 617:tmk_core/common/action.c ****                         swap_hands = true;
 618:tmk_core/common/action.c ****                     }
 619:tmk_core/common/action.c ****                     break;
 620:tmk_core/common/action.c ****                 case OP_SH_OFF:
 621:tmk_core/common/action.c ****                     if (!event.pressed) {
 622:tmk_core/common/action.c ****                         swap_hands = false;
 623:tmk_core/common/action.c ****                     }
 624:tmk_core/common/action.c ****                     break;
 625:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 626:tmk_core/common/action.c ****                 case OP_SH_ONESHOT:
 627:tmk_core/common/action.c ****                     if (event.pressed) {
 628:tmk_core/common/action.c ****                         set_oneshot_swaphands();
 629:tmk_core/common/action.c ****                     } else {
 630:tmk_core/common/action.c ****                         release_oneshot_swaphands();
 631:tmk_core/common/action.c ****                     }
 632:tmk_core/common/action.c ****                     break;
 633:tmk_core/common/action.c **** #    endif
 634:tmk_core/common/action.c **** 
 635:tmk_core/common/action.c **** #    ifndef NO_ACTION_TAPPING
 636:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 637:tmk_core/common/action.c ****                     /* tap toggle */
 638:tmk_core/common/action.c **** 
 639:tmk_core/common/action.c ****                     if (event.pressed) {
 640:tmk_core/common/action.c ****                         if (swap_held) {
 641:tmk_core/common/action.c ****                             swap_held = false;
 642:tmk_core/common/action.c ****                         } else {
 643:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 644:tmk_core/common/action.c ****                         }
 645:tmk_core/common/action.c ****                     } else {
 646:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 647:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 648:tmk_core/common/action.c ****                         }
 649:tmk_core/common/action.c ****                     }
 650:tmk_core/common/action.c ****                     break;
 651:tmk_core/common/action.c ****                 default:
 652:tmk_core/common/action.c ****                     /* tap key */
 653:tmk_core/common/action.c ****                     if (tap_count > 0) {
 654:tmk_core/common/action.c ****                         if (swap_held) {
 655:tmk_core/common/action.c ****                             swap_hands = !swap_hands;  // undo hold set up in _tap_hint
 656:tmk_core/common/action.c ****                             swap_held  = false;
 657:tmk_core/common/action.c ****                         }
 658:tmk_core/common/action.c ****                         if (event.pressed) {
 659:tmk_core/common/action.c ****                             register_code(action.swap.code);
 660:tmk_core/common/action.c ****                         } else {
 661:tmk_core/common/action.c ****                             wait_ms(TAP_CODE_DELAY);
 662:tmk_core/common/action.c ****                             unregister_code(action.swap.code);
 663:tmk_core/common/action.c ****                             *record = (keyrecord_t){};  // hack: reset tap mode
 664:tmk_core/common/action.c ****                         }
 665:tmk_core/common/action.c ****                     } else {
 666:tmk_core/common/action.c ****                         if (swap_held && !event.pressed) {
 667:tmk_core/common/action.c ****                             swap_hands = !swap_hands;  // undo hold set up in _tap_hint
 668:tmk_core/common/action.c ****                             swap_held  = false;
 669:tmk_core/common/action.c ****                         }
 670:tmk_core/common/action.c ****                     }
 671:tmk_core/common/action.c **** #    endif
 672:tmk_core/common/action.c ****             }
 673:tmk_core/common/action.c **** #endif
 674:tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 675:tmk_core/common/action.c ****         case ACT_FUNCTION:
 676:tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 677:tmk_core/common/action.c ****             break;
 678:tmk_core/common/action.c **** #endif
 679:tmk_core/common/action.c ****         default:
 680:tmk_core/common/action.c ****             break;
 681:tmk_core/common/action.c ****     }
 682:tmk_core/common/action.c **** 
 683:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 684:tmk_core/common/action.c ****     // if this event is a layer action, update the leds
 685:tmk_core/common/action.c ****     switch (action.kind.id) {
 686:tmk_core/common/action.c ****         case ACT_LAYER:
 687:tmk_core/common/action.c ****         case ACT_LAYER_MODS:
 688:tmk_core/common/action.c **** #    ifndef NO_ACTION_TAPPING
 689:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 690:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 691:tmk_core/common/action.c **** #    endif
 692:tmk_core/common/action.c ****             led_set(host_keyboard_leds());
 693:tmk_core/common/action.c ****             break;
 694:tmk_core/common/action.c ****         default:
 695:tmk_core/common/action.c ****             break;
 696:tmk_core/common/action.c ****     }
 697:tmk_core/common/action.c **** #endif
 698:tmk_core/common/action.c **** 
 699:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 700:tmk_core/common/action.c **** #    if defined(RETRO_TAPPING) || defined(RETRO_TAPPING_PER_KEY)
 701:tmk_core/common/action.c ****     if (!is_tap_action(action)) {
 702:tmk_core/common/action.c ****         retro_tapping_counter = 0;
 703:tmk_core/common/action.c ****     } else {
 704:tmk_core/common/action.c ****         if (event.pressed) {
 705:tmk_core/common/action.c ****             if (tap_count > 0) {
 706:tmk_core/common/action.c ****                 retro_tapping_counter = 0;
 707:tmk_core/common/action.c ****             }
 708:tmk_core/common/action.c ****         } else {
 709:tmk_core/common/action.c ****             if (tap_count > 0) {
 710:tmk_core/common/action.c ****                 retro_tapping_counter = 0;
 711:tmk_core/common/action.c ****             } else {
 712:tmk_core/common/action.c ****                 if (
 713:tmk_core/common/action.c **** #        ifdef RETRO_TAPPING_PER_KEY
 714:tmk_core/common/action.c ****                     get_retro_tapping(get_event_keycode(record->event, false), record) &&
 715:tmk_core/common/action.c **** #        endif
 716:tmk_core/common/action.c ****                     retro_tapping_counter == 2) {
 717:tmk_core/common/action.c ****                     tap_code(action.layer_tap.code);
 718:tmk_core/common/action.c ****                 }
 719:tmk_core/common/action.c ****                 retro_tapping_counter = 0;
 720:tmk_core/common/action.c ****             }
 721:tmk_core/common/action.c ****         }
 722:tmk_core/common/action.c ****     }
 723:tmk_core/common/action.c **** #    endif
 724:tmk_core/common/action.c **** #endif
 725:tmk_core/common/action.c **** 
 726:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 727:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 728:tmk_core/common/action.c ****     if (event.pressed && !(action.kind.id == ACT_SWAP_HANDS && action.swap.code == OP_SH_ONESHOT)) 
 729:tmk_core/common/action.c ****         use_oneshot_swaphands();
 730:tmk_core/common/action.c ****     }
 731:tmk_core/common/action.c **** #    endif
 732:tmk_core/common/action.c **** #endif
 733:tmk_core/common/action.c **** 
 734:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 735:tmk_core/common/action.c ****     /* Because we switch layers after a oneshot event, we need to release the
 736:tmk_core/common/action.c ****      * key before we leave the layer or no key up event will be generated.
 737:tmk_core/common/action.c ****      */
 738:tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED)) {
 739:tmk_core/common/action.c ****         record->event.pressed = false;
 740:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 741:tmk_core/common/action.c ****         process_record(record);
 742:tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 743:tmk_core/common/action.c ****     }
 744:tmk_core/common/action.c **** #endif
 745:tmk_core/common/action.c **** }
 746:tmk_core/common/action.c **** 
 747:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 748:tmk_core/common/action.c ****  *
 749:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 750:tmk_core/common/action.c ****  */
 751:tmk_core/common/action.c **** void register_code(uint8_t code) {
 216              		.loc 1 751 34 is_stmt 1 view -0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 752:tmk_core/common/action.c ****     if (code == KC_NO) {
 220              		.loc 1 752 5 view .LVU35
 751:tmk_core/common/action.c ****     if (code == KC_NO) {
 221              		.loc 1 751 34 is_stmt 0 view .LVU36
 222 0000 10B5     		push	{r4, lr}
 223              		.cfi_def_cfa_offset 8
 224              		.cfi_offset 4, -8
 225              		.cfi_offset 14, -4
 226              		.loc 1 752 8 view .LVU37
 227 0002 0446     		mov	r4, r0
 228 0004 0028     		cmp	r0, #0
 229 0006 7AD0     		beq	.L15
 753:tmk_core/common/action.c ****         return;
 754:tmk_core/common/action.c ****     }
 755:tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 756:tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 230              		.loc 1 756 10 is_stmt 1 view .LVU38
 231              		.loc 1 756 13 is_stmt 0 view .LVU39
 232 0008 8228     		cmp	r0, #130
 233 000a 13D1     		bne	.L18
 757:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 758:tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 759:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1 << USB_LED_CAPS_LOCK)) return;
 234              		.loc 1 759 9 is_stmt 1 view .LVU40
 235              		.loc 1 759 13 is_stmt 0 view .LVU41
 236 000c FFF7FEFF 		bl	host_keyboard_leds
 237              	.LVL15:
 238              		.loc 1 759 12 view .LVU42
 239 0010 8107     		lsls	r1, r0, #30
 240 0012 74D4     		bmi	.L15
 760:tmk_core/common/action.c **** #    endif
 761:tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 241              		.loc 1 761 9 is_stmt 1 view .LVU43
 242 0014 3920     		movs	r0, #57
 243 0016 FFF7FEFF 		bl	add_key
 244              	.LVL16:
 762:tmk_core/common/action.c ****         send_keyboard_report();
 245              		.loc 1 762 9 view .LVU44
 246 001a FFF7FEFF 		bl	send_keyboard_report
 247              	.LVL17:
 763:tmk_core/common/action.c ****         wait_ms(100);
 248              		.loc 1 763 9 view .LVU45
 249              		.loc 1 763 9 view .LVU46
 250              		.loc 1 763 9 view .LVU47
 251 001e 42F21070 		movw	r0, #10000
 252 0022 FFF7FEFF 		bl	chThdSleep
 253              	.LVL18:
 254              		.loc 1 763 9 view .LVU48
 764:tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 255              		.loc 1 764 9 view .LVU49
 256 0026 3920     		movs	r0, #57
 257              	.L30:
 258              	.LBB25:
 259              	.LBB26:
 765:tmk_core/common/action.c ****         send_keyboard_report();
 766:tmk_core/common/action.c ****     }
 767:tmk_core/common/action.c **** 
 768:tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 769:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 770:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1 << USB_LED_NUM_LOCK)) return;
 771:tmk_core/common/action.c **** #    endif
 772:tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 773:tmk_core/common/action.c ****         send_keyboard_report();
 774:tmk_core/common/action.c ****         wait_ms(100);
 775:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 260              		.loc 1 775 9 is_stmt 0 view .LVU50
 261 0028 FFF7FEFF 		bl	del_key
 262              	.LVL19:
 263              	.L31:
 776:tmk_core/common/action.c ****         send_keyboard_report();
 264              		.loc 1 776 9 is_stmt 1 view .LVU51
 265              	.LBE26:
 266              	.LBE25:
 777:tmk_core/common/action.c ****     }
 778:tmk_core/common/action.c **** 
 779:tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 780:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 781:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1 << USB_LED_SCROLL_LOCK)) return;
 782:tmk_core/common/action.c **** #    endif
 783:tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 784:tmk_core/common/action.c ****         send_keyboard_report();
 785:tmk_core/common/action.c ****         wait_ms(100);
 786:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 787:tmk_core/common/action.c ****         send_keyboard_report();
 788:tmk_core/common/action.c ****     }
 789:tmk_core/common/action.c **** #endif
 790:tmk_core/common/action.c **** 
 791:tmk_core/common/action.c ****     else if IS_KEY (code) {
 792:tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 793:tmk_core/common/action.c ****         if (command_proc(code)) return;
 794:tmk_core/common/action.c **** 
 795:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 796:tmk_core/common/action.c **** /* TODO: remove
 797:tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 798:tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 799:tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 800:tmk_core/common/action.c **** 
 801:tmk_core/common/action.c ****             add_key(code);
 802:tmk_core/common/action.c ****             send_keyboard_report();
 803:tmk_core/common/action.c **** 
 804:tmk_core/common/action.c ****             set_mods(tmp_mods);
 805:tmk_core/common/action.c ****             send_keyboard_report();
 806:tmk_core/common/action.c ****             oneshot_cancel();
 807:tmk_core/common/action.c ****         } else
 808:tmk_core/common/action.c **** */
 809:tmk_core/common/action.c **** #endif
 810:tmk_core/common/action.c ****         {
 811:tmk_core/common/action.c ****             // Force a new key press if the key is already pressed
 812:tmk_core/common/action.c ****             // without this, keys with the same keycode, but different
 813:tmk_core/common/action.c ****             // modifiers will be reported incorrectly, see issue #1708
 814:tmk_core/common/action.c ****             if (is_key_pressed(keyboard_report, code)) {
 815:tmk_core/common/action.c ****                 del_key(code);
 816:tmk_core/common/action.c ****                 send_keyboard_report();
 817:tmk_core/common/action.c ****             }
 818:tmk_core/common/action.c ****             add_key(code);
 819:tmk_core/common/action.c ****             send_keyboard_report();
 820:tmk_core/common/action.c ****         }
 821:tmk_core/common/action.c ****     } else if IS_MOD (code) {
 822:tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 823:tmk_core/common/action.c ****         send_keyboard_report();
 824:tmk_core/common/action.c ****     }
 825:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 826:tmk_core/common/action.c ****     else if IS_SYSTEM (code) {
 827:tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 828:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 829:tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 830:tmk_core/common/action.c ****     }
 831:tmk_core/common/action.c **** #endif
 832:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 833:tmk_core/common/action.c ****     else if IS_MOUSEKEY (code) {
 834:tmk_core/common/action.c ****         mousekey_on(code);
 835:tmk_core/common/action.c ****         mousekey_send();
 836:tmk_core/common/action.c ****     }
 837:tmk_core/common/action.c **** #endif
 838:tmk_core/common/action.c **** }
 267              		.loc 1 838 1 is_stmt 0 view .LVU52
 268 002c BDE81040 		pop	{r4, lr}
 269              		.cfi_remember_state
 270              		.cfi_restore 14
 271              		.cfi_restore 4
 272              		.cfi_def_cfa_offset 0
 273              	.LBB35:
 274              	.LBB28:
 776:tmk_core/common/action.c ****         send_keyboard_report();
 275              		.loc 1 776 9 view .LVU53
 276 0030 FFF7FEBF 		b	send_keyboard_report
 277              	.LVL20:
 278              	.L18:
 279              		.cfi_restore_state
 776:tmk_core/common/action.c ****         send_keyboard_report();
 280              		.loc 1 776 9 view .LVU54
 281              	.LBE28:
 282              	.LBI25:
 751:tmk_core/common/action.c ****     if (code == KC_NO) {
 283              		.loc 1 751 6 is_stmt 1 view .LVU55
 284              	.LBB29:
 768:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 285              		.loc 1 768 10 view .LVU56
 768:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 286              		.loc 1 768 13 is_stmt 0 view .LVU57
 287 0034 8328     		cmp	r0, #131
 288 0036 0ED1     		bne	.L20
 770:tmk_core/common/action.c **** #    endif
 289              		.loc 1 770 9 is_stmt 1 view .LVU58
 770:tmk_core/common/action.c **** #    endif
 290              		.loc 1 770 13 is_stmt 0 view .LVU59
 291 0038 FFF7FEFF 		bl	host_keyboard_leds
 292              	.LVL21:
 770:tmk_core/common/action.c **** #    endif
 293              		.loc 1 770 12 view .LVU60
 294 003c C207     		lsls	r2, r0, #31
 295 003e 5ED4     		bmi	.L15
 772:tmk_core/common/action.c ****         send_keyboard_report();
 296              		.loc 1 772 9 is_stmt 1 view .LVU61
 297 0040 5320     		movs	r0, #83
 298 0042 FFF7FEFF 		bl	add_key
 299              	.LVL22:
 773:tmk_core/common/action.c ****         wait_ms(100);
 300              		.loc 1 773 9 view .LVU62
 301 0046 FFF7FEFF 		bl	send_keyboard_report
 302              	.LVL23:
 774:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 303              		.loc 1 774 9 view .LVU63
 774:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 304              		.loc 1 774 9 view .LVU64
 774:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 305              		.loc 1 774 9 view .LVU65
 306 004a 42F21070 		movw	r0, #10000
 307 004e FFF7FEFF 		bl	chThdSleep
 308              	.LVL24:
 774:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 309              		.loc 1 774 9 view .LVU66
 775:tmk_core/common/action.c ****         send_keyboard_report();
 310              		.loc 1 775 9 view .LVU67
 311 0052 5320     		movs	r0, #83
 312 0054 E8E7     		b	.L30
 313              	.LVL25:
 314              	.L20:
 779:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 315              		.loc 1 779 10 view .LVU68
 779:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 316              		.loc 1 779 13 is_stmt 0 view .LVU69
 317 0056 8428     		cmp	r0, #132
 318 0058 0ED1     		bne	.L21
 781:tmk_core/common/action.c **** #    endif
 319              		.loc 1 781 9 is_stmt 1 view .LVU70
 781:tmk_core/common/action.c **** #    endif
 320              		.loc 1 781 13 is_stmt 0 view .LVU71
 321 005a FFF7FEFF 		bl	host_keyboard_leds
 322              	.LVL26:
 781:tmk_core/common/action.c **** #    endif
 323              		.loc 1 781 12 view .LVU72
 324 005e 4307     		lsls	r3, r0, #29
 325 0060 4DD4     		bmi	.L15
 783:tmk_core/common/action.c ****         send_keyboard_report();
 326              		.loc 1 783 9 is_stmt 1 view .LVU73
 327 0062 4720     		movs	r0, #71
 328 0064 FFF7FEFF 		bl	add_key
 329              	.LVL27:
 784:tmk_core/common/action.c ****         wait_ms(100);
 330              		.loc 1 784 9 view .LVU74
 331 0068 FFF7FEFF 		bl	send_keyboard_report
 332              	.LVL28:
 785:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 333              		.loc 1 785 9 view .LVU75
 785:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 334              		.loc 1 785 9 view .LVU76
 785:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 335              		.loc 1 785 9 view .LVU77
 336 006c 42F21070 		movw	r0, #10000
 337 0070 FFF7FEFF 		bl	chThdSleep
 338              	.LVL29:
 785:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 339              		.loc 1 785 9 view .LVU78
 786:tmk_core/common/action.c ****         send_keyboard_report();
 340              		.loc 1 786 9 view .LVU79
 341 0074 4720     		movs	r0, #71
 342 0076 D7E7     		b	.L30
 343              	.LVL30:
 344              	.L21:
 791:tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 345              		.loc 1 791 10 view .LVU80
 791:tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 346              		.loc 1 791 13 is_stmt 0 view .LVU81
 347 0078 031F     		subs	r3, r0, #4
 348 007a DBB2     		uxtb	r3, r3
 349 007c A02B     		cmp	r3, #160
 350 007e 12D8     		bhi	.L22
 793:tmk_core/common/action.c **** 
 351              		.loc 1 793 9 is_stmt 1 view .LVU82
 793:tmk_core/common/action.c **** 
 352              		.loc 1 793 13 is_stmt 0 view .LVU83
 353 0080 FFF7FEFF 		bl	command_proc
 354              	.LVL31:
 793:tmk_core/common/action.c **** 
 355              		.loc 1 793 12 view .LVU84
 356 0084 0028     		cmp	r0, #0
 357 0086 3AD1     		bne	.L15
 814:tmk_core/common/action.c ****                 del_key(code);
 358              		.loc 1 814 13 is_stmt 1 view .LVU85
 814:tmk_core/common/action.c ****                 del_key(code);
 359              		.loc 1 814 17 is_stmt 0 view .LVU86
 360 0088 1D4B     		ldr	r3, .L32
 361 008a 2146     		mov	r1, r4
 362 008c 1868     		ldr	r0, [r3]
 363 008e FFF7FEFF 		bl	is_key_pressed
 364              	.LVL32:
 814:tmk_core/common/action.c ****                 del_key(code);
 365              		.loc 1 814 16 view .LVU87
 366 0092 20B1     		cbz	r0, .L23
 815:tmk_core/common/action.c ****                 send_keyboard_report();
 367              		.loc 1 815 17 is_stmt 1 view .LVU88
 368 0094 2046     		mov	r0, r4
 369 0096 FFF7FEFF 		bl	del_key
 370              	.LVL33:
 816:tmk_core/common/action.c ****             }
 371              		.loc 1 816 17 view .LVU89
 372 009a FFF7FEFF 		bl	send_keyboard_report
 373              	.LVL34:
 374              	.L23:
 818:tmk_core/common/action.c ****             send_keyboard_report();
 375              		.loc 1 818 13 view .LVU90
 376 009e 2046     		mov	r0, r4
 377 00a0 FFF7FEFF 		bl	add_key
 378              	.LVL35:
 819:tmk_core/common/action.c ****         }
 379              		.loc 1 819 13 view .LVU91
 380 00a4 C2E7     		b	.L31
 381              	.LVL36:
 382              	.L22:
 821:tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 383              		.loc 1 821 12 view .LVU92
 821:tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 384              		.loc 1 821 15 is_stmt 0 view .LVU93
 385 00a6 00F12003 		add	r3, r0, #32
 386 00aa DBB2     		uxtb	r3, r3
 387 00ac 072B     		cmp	r3, #7
 388 00ae 07D8     		bhi	.L24
 822:tmk_core/common/action.c ****         send_keyboard_report();
 389              		.loc 1 822 9 is_stmt 1 view .LVU94
 822:tmk_core/common/action.c ****         send_keyboard_report();
 390              		.loc 1 822 18 is_stmt 0 view .LVU95
 391 00b0 00F00704 		and	r4, r0, #7
 392 00b4 0120     		movs	r0, #1
 393              	.LVL37:
 822:tmk_core/common/action.c ****         send_keyboard_report();
 394              		.loc 1 822 18 view .LVU96
 395 00b6 A040     		lsls	r0, r0, r4
 822:tmk_core/common/action.c ****         send_keyboard_report();
 396              		.loc 1 822 9 view .LVU97
 397 00b8 C0B2     		uxtb	r0, r0
 398 00ba FFF7FEFF 		bl	add_mods
 399              	.LVL38:
 823:tmk_core/common/action.c ****     }
 400              		.loc 1 823 9 is_stmt 1 view .LVU98
 401 00be B5E7     		b	.L31
 402              	.LVL39:
 403              	.L24:
 826:tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 404              		.loc 1 826 10 view .LVU99
 826:tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 405              		.loc 1 826 13 is_stmt 0 view .LVU100
 406 00c0 00F15B03 		add	r3, r0, #91
 407 00c4 DBB2     		uxtb	r3, r3
 408 00c6 022B     		cmp	r3, #2
 409 00c8 05D8     		bhi	.L25
 827:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 410              		.loc 1 827 9 is_stmt 1 view .LVU101
 411              	.LVL40:
 827:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 412              		.loc 1 827 9 is_stmt 0 view .LVU102
 413              	.LBE29:
 414              	.LBE35:
 415              		.file 3 "tmk_core/common/report.h"
   1:tmk_core/common/report.h **** /*
   2:tmk_core/common/report.h **** Copyright 2011,2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/report.h **** 
   4:tmk_core/common/report.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/report.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/report.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/report.h **** (at your option) any later version.
   8:tmk_core/common/report.h **** 
   9:tmk_core/common/report.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/report.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/report.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/report.h **** GNU General Public License for more details.
  13:tmk_core/common/report.h **** 
  14:tmk_core/common/report.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/report.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/report.h **** */
  17:tmk_core/common/report.h **** 
  18:tmk_core/common/report.h **** #pragma once
  19:tmk_core/common/report.h **** 
  20:tmk_core/common/report.h **** #include <stdint.h>
  21:tmk_core/common/report.h **** #include <stdbool.h>
  22:tmk_core/common/report.h **** #include "keycode.h"
  23:tmk_core/common/report.h **** 
  24:tmk_core/common/report.h **** // clang-format off
  25:tmk_core/common/report.h **** 
  26:tmk_core/common/report.h **** /* HID report IDs */
  27:tmk_core/common/report.h **** enum hid_report_ids {
  28:tmk_core/common/report.h ****     REPORT_ID_KEYBOARD = 1,
  29:tmk_core/common/report.h ****     REPORT_ID_MOUSE,
  30:tmk_core/common/report.h ****     REPORT_ID_SYSTEM,
  31:tmk_core/common/report.h ****     REPORT_ID_CONSUMER,
  32:tmk_core/common/report.h ****     REPORT_ID_NKRO,
  33:tmk_core/common/report.h ****     REPORT_ID_JOYSTICK
  34:tmk_core/common/report.h **** };
  35:tmk_core/common/report.h **** 
  36:tmk_core/common/report.h **** /* Mouse buttons */
  37:tmk_core/common/report.h **** #define MOUSE_BTN_MASK(n) (1 << (n))
  38:tmk_core/common/report.h **** enum mouse_buttons {
  39:tmk_core/common/report.h ****     MOUSE_BTN1 = MOUSE_BTN_MASK(0),
  40:tmk_core/common/report.h ****     MOUSE_BTN2 = MOUSE_BTN_MASK(1),
  41:tmk_core/common/report.h ****     MOUSE_BTN3 = MOUSE_BTN_MASK(2),
  42:tmk_core/common/report.h ****     MOUSE_BTN4 = MOUSE_BTN_MASK(3),
  43:tmk_core/common/report.h ****     MOUSE_BTN5 = MOUSE_BTN_MASK(4),
  44:tmk_core/common/report.h ****     MOUSE_BTN6 = MOUSE_BTN_MASK(5),
  45:tmk_core/common/report.h ****     MOUSE_BTN7 = MOUSE_BTN_MASK(6),
  46:tmk_core/common/report.h ****     MOUSE_BTN8 = MOUSE_BTN_MASK(7)
  47:tmk_core/common/report.h **** };
  48:tmk_core/common/report.h **** 
  49:tmk_core/common/report.h **** /* Consumer Page (0x0C)
  50:tmk_core/common/report.h ****  *
  51:tmk_core/common/report.h ****  * See https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf#page=75
  52:tmk_core/common/report.h ****  */
  53:tmk_core/common/report.h **** enum consumer_usages {
  54:tmk_core/common/report.h ****     // 15.5 Display Controls
  55:tmk_core/common/report.h ****     SNAPSHOT               = 0x065,
  56:tmk_core/common/report.h ****     BRIGHTNESS_UP          = 0x06F, // https://www.usb.org/sites/default/files/hutrr41_0.pdf
  57:tmk_core/common/report.h ****     BRIGHTNESS_DOWN        = 0x070,
  58:tmk_core/common/report.h ****     // 15.7 Transport Controls
  59:tmk_core/common/report.h ****     TRANSPORT_RECORD       = 0x0B2,
  60:tmk_core/common/report.h ****     TRANSPORT_FAST_FORWARD = 0x0B3,
  61:tmk_core/common/report.h ****     TRANSPORT_REWIND       = 0x0B4,
  62:tmk_core/common/report.h ****     TRANSPORT_NEXT_TRACK   = 0x0B5,
  63:tmk_core/common/report.h ****     TRANSPORT_PREV_TRACK   = 0x0B6,
  64:tmk_core/common/report.h ****     TRANSPORT_STOP         = 0x0B7,
  65:tmk_core/common/report.h ****     TRANSPORT_EJECT        = 0x0B8,
  66:tmk_core/common/report.h ****     TRANSPORT_RANDOM_PLAY  = 0x0B9,
  67:tmk_core/common/report.h ****     TRANSPORT_STOP_EJECT   = 0x0CC,
  68:tmk_core/common/report.h ****     TRANSPORT_PLAY_PAUSE   = 0x0CD,
  69:tmk_core/common/report.h ****     // 15.9.1 Audio Controls - Volume
  70:tmk_core/common/report.h ****     AUDIO_MUTE             = 0x0E2,
  71:tmk_core/common/report.h ****     AUDIO_VOL_UP           = 0x0E9,
  72:tmk_core/common/report.h ****     AUDIO_VOL_DOWN         = 0x0EA,
  73:tmk_core/common/report.h ****     // 15.15 Application Launch Buttons
  74:tmk_core/common/report.h ****     AL_CC_CONFIG           = 0x183,
  75:tmk_core/common/report.h ****     AL_EMAIL               = 0x18A,
  76:tmk_core/common/report.h ****     AL_CALCULATOR          = 0x192,
  77:tmk_core/common/report.h ****     AL_LOCAL_BROWSER       = 0x194,
  78:tmk_core/common/report.h ****     AL_LOCK                = 0x19E,
  79:tmk_core/common/report.h ****     AL_CONTROL_PANEL       = 0x19F,
  80:tmk_core/common/report.h ****     AL_ASSISTANT           = 0x1CB,
  81:tmk_core/common/report.h ****     AL_KEYBOARD_LAYOUT     = 0x1AE,
  82:tmk_core/common/report.h ****     // 15.16 Generic GUI Application Controls
  83:tmk_core/common/report.h ****     AC_NEW                 = 0x201,
  84:tmk_core/common/report.h ****     AC_OPEN                = 0x202,
  85:tmk_core/common/report.h ****     AC_CLOSE               = 0x203,
  86:tmk_core/common/report.h ****     AC_EXIT                = 0x204,
  87:tmk_core/common/report.h ****     AC_MAXIMIZE            = 0x205,
  88:tmk_core/common/report.h ****     AC_MINIMIZE            = 0x206,
  89:tmk_core/common/report.h ****     AC_SAVE                = 0x207,
  90:tmk_core/common/report.h ****     AC_PRINT               = 0x208,
  91:tmk_core/common/report.h ****     AC_PROPERTIES          = 0x209,
  92:tmk_core/common/report.h ****     AC_UNDO                = 0x21A,
  93:tmk_core/common/report.h ****     AC_COPY                = 0x21B,
  94:tmk_core/common/report.h ****     AC_CUT                 = 0x21C,
  95:tmk_core/common/report.h ****     AC_PASTE               = 0x21D,
  96:tmk_core/common/report.h ****     AC_SELECT_ALL          = 0x21E,
  97:tmk_core/common/report.h ****     AC_FIND                = 0x21F,
  98:tmk_core/common/report.h ****     AC_SEARCH              = 0x221,
  99:tmk_core/common/report.h ****     AC_HOME                = 0x223,
 100:tmk_core/common/report.h ****     AC_BACK                = 0x224,
 101:tmk_core/common/report.h ****     AC_FORWARD             = 0x225,
 102:tmk_core/common/report.h ****     AC_STOP                = 0x226,
 103:tmk_core/common/report.h ****     AC_REFRESH             = 0x227,
 104:tmk_core/common/report.h ****     AC_BOOKMARKS           = 0x22A
 105:tmk_core/common/report.h **** };
 106:tmk_core/common/report.h **** 
 107:tmk_core/common/report.h **** /* Generic Desktop Page (0x01)
 108:tmk_core/common/report.h ****  *
 109:tmk_core/common/report.h ****  * See https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf#page=26
 110:tmk_core/common/report.h ****  */
 111:tmk_core/common/report.h **** enum desktop_usages {
 112:tmk_core/common/report.h ****     // 4.5.1 System Controls - Power Controls
 113:tmk_core/common/report.h ****     SYSTEM_POWER_DOWN             = 0x81,
 114:tmk_core/common/report.h ****     SYSTEM_SLEEP                  = 0x82,
 115:tmk_core/common/report.h ****     SYSTEM_WAKE_UP                = 0x83,
 116:tmk_core/common/report.h ****     SYSTEM_RESTART                = 0x8F,
 117:tmk_core/common/report.h ****     // 4.10 System Display Controls
 118:tmk_core/common/report.h ****     SYSTEM_DISPLAY_TOGGLE_INT_EXT = 0xB5
 119:tmk_core/common/report.h **** };
 120:tmk_core/common/report.h **** 
 121:tmk_core/common/report.h **** // clang-format on
 122:tmk_core/common/report.h **** 
 123:tmk_core/common/report.h **** #define NKRO_SHARED_EP
 124:tmk_core/common/report.h **** /* key report size(NKRO or boot mode) */
 125:tmk_core/common/report.h **** #if defined(NKRO_ENABLE)
 126:tmk_core/common/report.h **** #    if defined(PROTOCOL_LUFA) || defined(PROTOCOL_CHIBIOS)
 127:tmk_core/common/report.h **** #        include "protocol/usb_descriptor.h"
 128:tmk_core/common/report.h **** #        define KEYBOARD_REPORT_BITS (SHARED_EPSIZE - 2)
 129:tmk_core/common/report.h **** #    elif defined(PROTOCOL_ARM_ATSAM)
 130:tmk_core/common/report.h **** #        include "protocol/arm_atsam/usb/udi_device_epsize.h"
 131:tmk_core/common/report.h **** #        define KEYBOARD_REPORT_BITS (NKRO_EPSIZE - 1)
 132:tmk_core/common/report.h **** #        undef NKRO_SHARED_EP
 133:tmk_core/common/report.h **** #        undef MOUSE_SHARED_EP
 134:tmk_core/common/report.h **** #    else
 135:tmk_core/common/report.h **** #        error "NKRO not supported with this protocol"
 136:tmk_core/common/report.h **** #    endif
 137:tmk_core/common/report.h **** #endif
 138:tmk_core/common/report.h **** 
 139:tmk_core/common/report.h **** #ifdef KEYBOARD_SHARED_EP
 140:tmk_core/common/report.h **** #    define KEYBOARD_REPORT_SIZE 9
 141:tmk_core/common/report.h **** #else
 142:tmk_core/common/report.h **** #    define KEYBOARD_REPORT_SIZE 8
 143:tmk_core/common/report.h **** #endif
 144:tmk_core/common/report.h **** 
 145:tmk_core/common/report.h **** #define KEYBOARD_REPORT_KEYS 6
 146:tmk_core/common/report.h **** 
 147:tmk_core/common/report.h **** #ifdef __cplusplus
 148:tmk_core/common/report.h **** extern "C" {
 149:tmk_core/common/report.h **** #endif
 150:tmk_core/common/report.h **** 
 151:tmk_core/common/report.h **** /*
 152:tmk_core/common/report.h ****  * keyboard report is 8-byte array retains state of 8 modifiers and 6 keys.
 153:tmk_core/common/report.h ****  *
 154:tmk_core/common/report.h ****  * byte |0       |1       |2       |3       |4       |5       |6       |7
 155:tmk_core/common/report.h ****  * -----+--------+--------+--------+--------+--------+--------+--------+--------
 156:tmk_core/common/report.h ****  * desc |mods    |reserved|keys[0] |keys[1] |keys[2] |keys[3] |keys[4] |keys[5]
 157:tmk_core/common/report.h ****  *
 158:tmk_core/common/report.h ****  * It is exended to 16 bytes to retain 120keys+8mods when NKRO mode.
 159:tmk_core/common/report.h ****  *
 160:tmk_core/common/report.h ****  * byte |0       |1       |2       |3       |4       |5       |6       |7        ... |15
 161:tmk_core/common/report.h ****  * -----+--------+--------+--------+--------+--------+--------+--------+--------     +--------
 162:tmk_core/common/report.h ****  * desc |mods    |bits[0] |bits[1] |bits[2] |bits[3] |bits[4] |bits[5] |bits[6]  ... |bit[14]
 163:tmk_core/common/report.h ****  *
 164:tmk_core/common/report.h ****  * mods retains state of 8 modifiers.
 165:tmk_core/common/report.h ****  *
 166:tmk_core/common/report.h ****  *  bit |0       |1       |2       |3       |4       |5       |6       |7
 167:tmk_core/common/report.h ****  * -----+--------+--------+--------+--------+--------+--------+--------+--------
 168:tmk_core/common/report.h ****  * desc |Lcontrol|Lshift  |Lalt    |Lgui    |Rcontrol|Rshift  |Ralt    |Rgui
 169:tmk_core/common/report.h ****  *
 170:tmk_core/common/report.h ****  */
 171:tmk_core/common/report.h **** typedef union {
 172:tmk_core/common/report.h ****     uint8_t raw[KEYBOARD_REPORT_SIZE];
 173:tmk_core/common/report.h ****     struct {
 174:tmk_core/common/report.h **** #ifdef KEYBOARD_SHARED_EP
 175:tmk_core/common/report.h ****         uint8_t report_id;
 176:tmk_core/common/report.h **** #endif
 177:tmk_core/common/report.h ****         uint8_t mods;
 178:tmk_core/common/report.h ****         uint8_t reserved;
 179:tmk_core/common/report.h ****         uint8_t keys[KEYBOARD_REPORT_KEYS];
 180:tmk_core/common/report.h ****     };
 181:tmk_core/common/report.h **** #ifdef NKRO_ENABLE
 182:tmk_core/common/report.h ****     struct nkro_report {
 183:tmk_core/common/report.h **** #    ifdef NKRO_SHARED_EP
 184:tmk_core/common/report.h ****         uint8_t report_id;
 185:tmk_core/common/report.h **** #    endif
 186:tmk_core/common/report.h ****         uint8_t mods;
 187:tmk_core/common/report.h ****         uint8_t bits[KEYBOARD_REPORT_BITS];
 188:tmk_core/common/report.h ****     } nkro;
 189:tmk_core/common/report.h **** #endif
 190:tmk_core/common/report.h **** } __attribute__((packed)) report_keyboard_t;
 191:tmk_core/common/report.h **** 
 192:tmk_core/common/report.h **** typedef struct {
 193:tmk_core/common/report.h ****     uint8_t  report_id;
 194:tmk_core/common/report.h ****     uint16_t usage;
 195:tmk_core/common/report.h **** } __attribute__((packed)) report_extra_t;
 196:tmk_core/common/report.h **** 
 197:tmk_core/common/report.h **** typedef struct {
 198:tmk_core/common/report.h **** #ifdef MOUSE_SHARED_EP
 199:tmk_core/common/report.h ****     uint8_t report_id;
 200:tmk_core/common/report.h **** #endif
 201:tmk_core/common/report.h ****     uint8_t buttons;
 202:tmk_core/common/report.h ****     int8_t  x;
 203:tmk_core/common/report.h ****     int8_t  y;
 204:tmk_core/common/report.h ****     int8_t  v;
 205:tmk_core/common/report.h ****     int8_t  h;
 206:tmk_core/common/report.h **** } __attribute__((packed)) report_mouse_t;
 207:tmk_core/common/report.h **** 
 208:tmk_core/common/report.h **** typedef struct {
 209:tmk_core/common/report.h **** #if JOYSTICK_AXES_COUNT > 0
 210:tmk_core/common/report.h **** #    if JOYSTICK_AXES_RESOLUTION > 8
 211:tmk_core/common/report.h ****     int16_t axes[JOYSTICK_AXES_COUNT];
 212:tmk_core/common/report.h **** #    else
 213:tmk_core/common/report.h ****     int8_t axes[JOYSTICK_AXES_COUNT];
 214:tmk_core/common/report.h **** #    endif
 215:tmk_core/common/report.h **** #endif
 216:tmk_core/common/report.h **** 
 217:tmk_core/common/report.h **** #if JOYSTICK_BUTTON_COUNT > 0
 218:tmk_core/common/report.h ****     uint8_t buttons[(JOYSTICK_BUTTON_COUNT - 1) / 8 + 1];
 219:tmk_core/common/report.h **** #endif
 220:tmk_core/common/report.h **** } __attribute__((packed)) joystick_report_t;
 221:tmk_core/common/report.h **** 
 222:tmk_core/common/report.h **** /* keycode to system usage */
 223:tmk_core/common/report.h **** static inline uint16_t KEYCODE2SYSTEM(uint8_t key) {
 224:tmk_core/common/report.h ****     switch (key) {
 416              		.loc 3 224 5 is_stmt 1 view .LVU103
 417              	.LBB36:
 418              	.LBB30:
 827:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 419              		.loc 1 827 9 is_stmt 0 view .LVU104
 420 00ca 2438     		subs	r0, r0, #36
 421              	.LVL41:
 827:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 422              		.loc 1 827 9 view .LVU105
 423              	.LBE30:
 424              	.LBE36:
 425              		.loc 1 838 1 view .LVU106
 426 00cc BDE81040 		pop	{r4, lr}
 427              		.cfi_remember_state
 428              		.cfi_restore 14
 429              		.cfi_restore 4
 430              		.cfi_def_cfa_offset 0
 431              	.LVL42:
 432              	.LBB37:
 433              	.LBB31:
 827:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 434              		.loc 1 827 9 view .LVU107
 435 00d0 80B2     		uxth	r0, r0
 436              	.LVL43:
 827:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 437              		.loc 1 827 9 view .LVU108
 438 00d2 FFF7FEBF 		b	host_system_send
 439              	.LVL44:
 440              	.L25:
 441              		.cfi_restore_state
 828:tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 442              		.loc 1 828 12 is_stmt 1 view .LVU109
 828:tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 443              		.loc 1 828 15 is_stmt 0 view .LVU110
 444 00d6 00F15803 		add	r3, r0, #88
 445 00da DBB2     		uxtb	r3, r3
 446 00dc 162B     		cmp	r3, #22
 447 00de 06D8     		bhi	.L26
 829:tmk_core/common/action.c ****     }
 448              		.loc 1 829 9 is_stmt 1 view .LVU111
 449              	.LVL45:
 450              	.LBB27:
 451              	.LBI27:
 225:tmk_core/common/report.h ****         case KC_SYSTEM_POWER:
 226:tmk_core/common/report.h ****             return SYSTEM_POWER_DOWN;
 227:tmk_core/common/report.h ****         case KC_SYSTEM_SLEEP:
 228:tmk_core/common/report.h ****             return SYSTEM_SLEEP;
 229:tmk_core/common/report.h ****         case KC_SYSTEM_WAKE:
 230:tmk_core/common/report.h ****             return SYSTEM_WAKE_UP;
 231:tmk_core/common/report.h ****         default:
 232:tmk_core/common/report.h ****             return 0;
 233:tmk_core/common/report.h ****     }
 234:tmk_core/common/report.h **** }
 235:tmk_core/common/report.h **** 
 236:tmk_core/common/report.h **** /* keycode to consumer usage */
 237:tmk_core/common/report.h **** static inline uint16_t KEYCODE2CONSUMER(uint8_t key) {
 452              		.loc 3 237 24 view .LVU112
 453              	.LBE27:
 454              	.LBE31:
 455              	.LBE37:
 238:tmk_core/common/report.h ****     switch (key) {
 456              		.loc 3 238 5 view .LVU113
 457              	.LBB38:
 458              	.LBB32:
 829:tmk_core/common/action.c ****     }
 459              		.loc 1 829 9 is_stmt 0 view .LVU114
 460 00e0 084A     		ldr	r2, .L32+4
 461              	.LBE32:
 462              	.LBE38:
 463              		.loc 1 838 1 view .LVU115
 464 00e2 BDE81040 		pop	{r4, lr}
 465              		.cfi_remember_state
 466              		.cfi_restore 14
 467              		.cfi_restore 4
 468              		.cfi_def_cfa_offset 0
 469              	.LBB39:
 470              	.LBB33:
 829:tmk_core/common/action.c ****     }
 471              		.loc 1 829 9 view .LVU116
 472 00e6 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 473              	.LVL46:
 829:tmk_core/common/action.c ****     }
 474              		.loc 1 829 9 view .LVU117
 475 00ea FFF7FEBF 		b	host_consumer_send
 476              	.LVL47:
 477              	.L26:
 478              		.cfi_restore_state
 833:tmk_core/common/action.c ****         mousekey_on(code);
 479              		.loc 1 833 10 is_stmt 1 view .LVU118
 833:tmk_core/common/action.c ****         mousekey_on(code);
 480              		.loc 1 833 13 is_stmt 0 view .LVU119
 481 00ee EC28     		cmp	r0, #236
 482 00f0 05D9     		bls	.L15
 834:tmk_core/common/action.c ****         mousekey_send();
 483              		.loc 1 834 9 is_stmt 1 view .LVU120
 484 00f2 FFF7FEFF 		bl	mousekey_on
 485              	.LVL48:
 835:tmk_core/common/action.c ****     }
 486              		.loc 1 835 9 view .LVU121
 487              	.LBE33:
 488              	.LBE39:
 489              		.loc 1 838 1 is_stmt 0 view .LVU122
 490 00f6 BDE81040 		pop	{r4, lr}
 491              		.cfi_remember_state
 492              		.cfi_restore 14
 493              		.cfi_restore 4
 494              		.cfi_def_cfa_offset 0
 495              	.LVL49:
 496              	.LBB40:
 497              	.LBB34:
 835:tmk_core/common/action.c ****     }
 498              		.loc 1 835 9 view .LVU123
 499 00fa FFF7FEBF 		b	mousekey_send
 500              	.LVL50:
 501              	.L15:
 502              		.cfi_restore_state
 835:tmk_core/common/action.c ****     }
 503              		.loc 1 835 9 view .LVU124
 504              	.LBE34:
 505              	.LBE40:
 506              		.loc 1 838 1 view .LVU125
 507 00fe 10BD     		pop	{r4, pc}
 508              	.L33:
 509              		.align	2
 510              	.L32:
 511 0100 00000000 		.word	keyboard_report
 512 0104 00000000 		.word	.LANCHOR0
 513              		.cfi_endproc
 514              	.LFE296:
 516              		.section	.text.unregister_code,"ax",%progbits
 517              		.align	1
 518              		.global	unregister_code
 519              		.syntax unified
 520              		.thumb
 521              		.thumb_func
 522              		.fpu fpv4-sp-d16
 524              	unregister_code:
 525              	.LVL51:
 526              	.LFB297:
 839:tmk_core/common/action.c **** 
 840:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 841:tmk_core/common/action.c ****  *
 842:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 843:tmk_core/common/action.c ****  */
 844:tmk_core/common/action.c **** void unregister_code(uint8_t code) {
 527              		.loc 1 844 36 is_stmt 1 view -0
 528              		.cfi_startproc
 529              		@ args = 0, pretend = 0, frame = 0
 530              		@ frame_needed = 0, uses_anonymous_args = 0
 845:tmk_core/common/action.c ****     if (code == KC_NO) {
 531              		.loc 1 845 5 view .LVU127
 844:tmk_core/common/action.c ****     if (code == KC_NO) {
 532              		.loc 1 844 36 is_stmt 0 view .LVU128
 533 0000 08B5     		push	{r3, lr}
 534              		.cfi_def_cfa_offset 8
 535              		.cfi_offset 3, -8
 536              		.cfi_offset 14, -4
 537              		.loc 1 845 8 view .LVU129
 538 0002 0028     		cmp	r0, #0
 539 0004 58D0     		beq	.L34
 846:tmk_core/common/action.c ****         return;
 847:tmk_core/common/action.c ****     }
 848:tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 849:tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 540              		.loc 1 849 10 is_stmt 1 view .LVU130
 541              		.loc 1 849 13 is_stmt 0 view .LVU131
 542 0006 8228     		cmp	r0, #130
 543 0008 0FD1     		bne	.L37
 850:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 851:tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 852:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1 << USB_LED_CAPS_LOCK))) return;
 544              		.loc 1 852 9 is_stmt 1 view .LVU132
 545              		.loc 1 852 15 is_stmt 0 view .LVU133
 546 000a FFF7FEFF 		bl	host_keyboard_leds
 547              	.LVL52:
 548              		.loc 1 852 12 view .LVU134
 549 000e 8107     		lsls	r1, r0, #30
 550 0010 52D5     		bpl	.L34
 853:tmk_core/common/action.c **** #    endif
 854:tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 551              		.loc 1 854 9 is_stmt 1 view .LVU135
 552 0012 3920     		movs	r0, #57
 553 0014 FFF7FEFF 		bl	add_key
 554              	.LVL53:
 855:tmk_core/common/action.c ****         send_keyboard_report();
 555              		.loc 1 855 9 view .LVU136
 556 0018 FFF7FEFF 		bl	send_keyboard_report
 557              	.LVL54:
 856:tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 558              		.loc 1 856 9 view .LVU137
 559 001c 3920     		movs	r0, #57
 560              	.L54:
 561              	.LBB43:
 562              	.LBB44:
 857:tmk_core/common/action.c ****         send_keyboard_report();
 858:tmk_core/common/action.c ****     }
 859:tmk_core/common/action.c **** 
 860:tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 861:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 862:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1 << USB_LED_NUM_LOCK))) return;
 863:tmk_core/common/action.c **** #    endif
 864:tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 865:tmk_core/common/action.c ****         send_keyboard_report();
 866:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 563              		.loc 1 866 9 is_stmt 0 view .LVU138
 564 001e FFF7FEFF 		bl	del_key
 565              	.LVL55:
 566              	.L55:
 867:tmk_core/common/action.c ****         send_keyboard_report();
 567              		.loc 1 867 9 is_stmt 1 view .LVU139
 568              	.LBE44:
 569              	.LBE43:
 868:tmk_core/common/action.c ****     }
 869:tmk_core/common/action.c **** 
 870:tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 871:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 872:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1 << USB_LED_SCROLL_LOCK))) return;
 873:tmk_core/common/action.c **** #    endif
 874:tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 875:tmk_core/common/action.c ****         send_keyboard_report();
 876:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 877:tmk_core/common/action.c ****         send_keyboard_report();
 878:tmk_core/common/action.c ****     }
 879:tmk_core/common/action.c **** #endif
 880:tmk_core/common/action.c **** 
 881:tmk_core/common/action.c ****     else if IS_KEY (code) {
 882:tmk_core/common/action.c ****         del_key(code);
 883:tmk_core/common/action.c ****         send_keyboard_report();
 884:tmk_core/common/action.c ****     } else if IS_MOD (code) {
 885:tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 886:tmk_core/common/action.c ****         send_keyboard_report();
 887:tmk_core/common/action.c ****     } else if IS_SYSTEM (code) {
 888:tmk_core/common/action.c ****         host_system_send(0);
 889:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 890:tmk_core/common/action.c ****         host_consumer_send(0);
 891:tmk_core/common/action.c ****     }
 892:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 893:tmk_core/common/action.c ****     else if IS_MOUSEKEY (code) {
 894:tmk_core/common/action.c ****         mousekey_off(code);
 895:tmk_core/common/action.c ****         mousekey_send();
 896:tmk_core/common/action.c ****     }
 897:tmk_core/common/action.c **** #endif
 898:tmk_core/common/action.c **** }
 570              		.loc 1 898 1 is_stmt 0 view .LVU140
 571 0022 BDE80840 		pop	{r3, lr}
 572              		.cfi_remember_state
 573              		.cfi_restore 14
 574              		.cfi_restore 3
 575              		.cfi_def_cfa_offset 0
 576              	.LBB50:
 577              	.LBB45:
 867:tmk_core/common/action.c ****         send_keyboard_report();
 578              		.loc 1 867 9 view .LVU141
 579 0026 FFF7FEBF 		b	send_keyboard_report
 580              	.LVL56:
 581              	.L37:
 582              		.cfi_restore_state
 867:tmk_core/common/action.c ****         send_keyboard_report();
 583              		.loc 1 867 9 view .LVU142
 584              	.LBE45:
 585              	.LBI43:
 844:tmk_core/common/action.c ****     if (code == KC_NO) {
 586              		.loc 1 844 6 is_stmt 1 view .LVU143
 587              	.LBB46:
 860:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 588              		.loc 1 860 10 view .LVU144
 860:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 589              		.loc 1 860 13 is_stmt 0 view .LVU145
 590 002a 8328     		cmp	r0, #131
 591 002c 0AD1     		bne	.L39
 862:tmk_core/common/action.c **** #    endif
 592              		.loc 1 862 9 is_stmt 1 view .LVU146
 862:tmk_core/common/action.c **** #    endif
 593              		.loc 1 862 15 is_stmt 0 view .LVU147
 594 002e FFF7FEFF 		bl	host_keyboard_leds
 595              	.LVL57:
 862:tmk_core/common/action.c **** #    endif
 596              		.loc 1 862 12 view .LVU148
 597 0032 C207     		lsls	r2, r0, #31
 598 0034 40D5     		bpl	.L34
 864:tmk_core/common/action.c ****         send_keyboard_report();
 599              		.loc 1 864 9 is_stmt 1 view .LVU149
 600 0036 5320     		movs	r0, #83
 601 0038 FFF7FEFF 		bl	add_key
 602              	.LVL58:
 865:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 603              		.loc 1 865 9 view .LVU150
 604 003c FFF7FEFF 		bl	send_keyboard_report
 605              	.LVL59:
 866:tmk_core/common/action.c ****         send_keyboard_report();
 606              		.loc 1 866 9 view .LVU151
 607 0040 5320     		movs	r0, #83
 608 0042 ECE7     		b	.L54
 609              	.LVL60:
 610              	.L39:
 870:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 611              		.loc 1 870 10 view .LVU152
 870:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 612              		.loc 1 870 13 is_stmt 0 view .LVU153
 613 0044 8428     		cmp	r0, #132
 614 0046 0AD1     		bne	.L40
 872:tmk_core/common/action.c **** #    endif
 615              		.loc 1 872 9 is_stmt 1 view .LVU154
 872:tmk_core/common/action.c **** #    endif
 616              		.loc 1 872 15 is_stmt 0 view .LVU155
 617 0048 FFF7FEFF 		bl	host_keyboard_leds
 618              	.LVL61:
 872:tmk_core/common/action.c **** #    endif
 619              		.loc 1 872 12 view .LVU156
 620 004c 4307     		lsls	r3, r0, #29
 621 004e 33D5     		bpl	.L34
 874:tmk_core/common/action.c ****         send_keyboard_report();
 622              		.loc 1 874 9 is_stmt 1 view .LVU157
 623 0050 4720     		movs	r0, #71
 624 0052 FFF7FEFF 		bl	add_key
 625              	.LVL62:
 875:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 626              		.loc 1 875 9 view .LVU158
 627 0056 FFF7FEFF 		bl	send_keyboard_report
 628              	.LVL63:
 876:tmk_core/common/action.c ****         send_keyboard_report();
 629              		.loc 1 876 9 view .LVU159
 630 005a 4720     		movs	r0, #71
 631 005c DFE7     		b	.L54
 632              	.LVL64:
 633              	.L40:
 881:tmk_core/common/action.c ****         del_key(code);
 634              		.loc 1 881 10 view .LVU160
 881:tmk_core/common/action.c ****         del_key(code);
 635              		.loc 1 881 13 is_stmt 0 view .LVU161
 636 005e 021F     		subs	r2, r0, #4
 637 0060 D2B2     		uxtb	r2, r2
 638 0062 A02A     		cmp	r2, #160
 639 0064 DBD9     		bls	.L54
 884:tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 640              		.loc 1 884 12 is_stmt 1 view .LVU162
 884:tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 641              		.loc 1 884 15 is_stmt 0 view .LVU163
 642 0066 00F12002 		add	r2, r0, #32
 643 006a D2B2     		uxtb	r2, r2
 644 006c 072A     		cmp	r2, #7
 645 006e 07D8     		bhi	.L42
 885:tmk_core/common/action.c ****         send_keyboard_report();
 646              		.loc 1 885 9 is_stmt 1 view .LVU164
 885:tmk_core/common/action.c ****         send_keyboard_report();
 647              		.loc 1 885 18 is_stmt 0 view .LVU165
 648 0070 00F00703 		and	r3, r0, #7
 649 0074 0120     		movs	r0, #1
 650              	.LVL65:
 885:tmk_core/common/action.c ****         send_keyboard_report();
 651              		.loc 1 885 18 view .LVU166
 652 0076 9840     		lsls	r0, r0, r3
 885:tmk_core/common/action.c ****         send_keyboard_report();
 653              		.loc 1 885 9 view .LVU167
 654 0078 C0B2     		uxtb	r0, r0
 655 007a FFF7FEFF 		bl	del_mods
 656              	.LVL66:
 886:tmk_core/common/action.c ****     } else if IS_SYSTEM (code) {
 657              		.loc 1 886 9 is_stmt 1 view .LVU168
 658 007e D0E7     		b	.L55
 659              	.LVL67:
 660              	.L42:
 887:tmk_core/common/action.c ****         host_system_send(0);
 661              		.loc 1 887 12 view .LVU169
 887:tmk_core/common/action.c ****         host_system_send(0);
 662              		.loc 1 887 15 is_stmt 0 view .LVU170
 663 0080 00F15B02 		add	r2, r0, #91
 664 0084 D2B2     		uxtb	r2, r2
 665 0086 022A     		cmp	r2, #2
 666 0088 04D8     		bhi	.L43
 888:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 667              		.loc 1 888 9 is_stmt 1 view .LVU171
 668              	.LBE46:
 669              	.LBE50:
 670              		.loc 1 898 1 is_stmt 0 view .LVU172
 671 008a BDE80840 		pop	{r3, lr}
 672              		.cfi_remember_state
 673              		.cfi_restore 14
 674              		.cfi_restore 3
 675              		.cfi_def_cfa_offset 0
 676              	.LBB51:
 677              	.LBB47:
 888:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 678              		.loc 1 888 9 view .LVU173
 679 008e 0020     		movs	r0, #0
 680              	.LVL68:
 888:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 681              		.loc 1 888 9 view .LVU174
 682 0090 FFF7FEBF 		b	host_system_send
 683              	.LVL69:
 684              	.L43:
 685              		.cfi_restore_state
 889:tmk_core/common/action.c ****         host_consumer_send(0);
 686              		.loc 1 889 12 is_stmt 1 view .LVU175
 889:tmk_core/common/action.c ****         host_consumer_send(0);
 687              		.loc 1 889 15 is_stmt 0 view .LVU176
 688 0094 00F15802 		add	r2, r0, #88
 689 0098 D2B2     		uxtb	r2, r2
 690 009a 162A     		cmp	r2, #22
 691 009c 04D8     		bhi	.L44
 890:tmk_core/common/action.c ****     }
 692              		.loc 1 890 9 is_stmt 1 view .LVU177
 693              	.LBE47:
 694              	.LBE51:
 695              		.loc 1 898 1 is_stmt 0 view .LVU178
 696 009e BDE80840 		pop	{r3, lr}
 697              		.cfi_remember_state
 698              		.cfi_restore 14
 699              		.cfi_restore 3
 700              		.cfi_def_cfa_offset 0
 701              	.LBB52:
 702              	.LBB48:
 890:tmk_core/common/action.c ****     }
 703              		.loc 1 890 9 view .LVU179
 704 00a2 0020     		movs	r0, #0
 705              	.LVL70:
 890:tmk_core/common/action.c ****     }
 706              		.loc 1 890 9 view .LVU180
 707 00a4 FFF7FEBF 		b	host_consumer_send
 708              	.LVL71:
 709              	.L44:
 710              		.cfi_restore_state
 893:tmk_core/common/action.c ****         mousekey_off(code);
 711              		.loc 1 893 10 is_stmt 1 view .LVU181
 893:tmk_core/common/action.c ****         mousekey_off(code);
 712              		.loc 1 893 13 is_stmt 0 view .LVU182
 713 00a8 EC28     		cmp	r0, #236
 714 00aa 05D9     		bls	.L34
 894:tmk_core/common/action.c ****         mousekey_send();
 715              		.loc 1 894 9 is_stmt 1 view .LVU183
 716 00ac FFF7FEFF 		bl	mousekey_off
 717              	.LVL72:
 895:tmk_core/common/action.c ****     }
 718              		.loc 1 895 9 view .LVU184
 719              	.LBE48:
 720              	.LBE52:
 721              		.loc 1 898 1 is_stmt 0 view .LVU185
 722 00b0 BDE80840 		pop	{r3, lr}
 723              		.cfi_remember_state
 724              		.cfi_restore 14
 725              		.cfi_restore 3
 726              		.cfi_def_cfa_offset 0
 727              	.LBB53:
 728              	.LBB49:
 895:tmk_core/common/action.c ****     }
 729              		.loc 1 895 9 view .LVU186
 730 00b4 FFF7FEBF 		b	mousekey_send
 731              	.LVL73:
 732              	.L34:
 733              		.cfi_restore_state
 895:tmk_core/common/action.c ****     }
 734              		.loc 1 895 9 view .LVU187
 735              	.LBE49:
 736              	.LBE53:
 737              		.loc 1 898 1 view .LVU188
 738 00b8 08BD     		pop	{r3, pc}
 739              		.cfi_endproc
 740              	.LFE297:
 742              		.section	.text.tap_code_delay,"ax",%progbits
 743              		.align	1
 744              		.global	tap_code_delay
 745              		.syntax unified
 746              		.thumb
 747              		.thumb_func
 748              		.fpu fpv4-sp-d16
 750              	tap_code_delay:
 751              	.LVL74:
 752              	.LFB298:
 899:tmk_core/common/action.c **** 
 900:tmk_core/common/action.c **** /** \brief Tap a keycode with a delay.
 901:tmk_core/common/action.c ****  *
 902:tmk_core/common/action.c ****  * \param code The basic keycode to tap.
 903:tmk_core/common/action.c ****  * \param delay The amount of time in milliseconds to leave the keycode registered, before unregist
 904:tmk_core/common/action.c ****  */
 905:tmk_core/common/action.c **** void tap_code_delay(uint8_t code, uint16_t delay) {
 753              		.loc 1 905 51 is_stmt 1 view -0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 0
 756              		@ frame_needed = 0, uses_anonymous_args = 0
 906:tmk_core/common/action.c ****     register_code(code);
 757              		.loc 1 906 5 view .LVU190
 905:tmk_core/common/action.c ****     register_code(code);
 758              		.loc 1 905 51 is_stmt 0 view .LVU191
 759 0000 38B5     		push	{r3, r4, r5, lr}
 760              		.cfi_def_cfa_offset 16
 761              		.cfi_offset 3, -16
 762              		.cfi_offset 4, -12
 763              		.cfi_offset 5, -8
 764              		.cfi_offset 14, -4
 905:tmk_core/common/action.c ****     register_code(code);
 765              		.loc 1 905 51 view .LVU192
 766 0002 0546     		mov	r5, r0
 767 0004 0C46     		mov	r4, r1
 768              		.loc 1 906 5 view .LVU193
 769 0006 FFF7FEFF 		bl	register_code
 770              	.LVL75:
 907:tmk_core/common/action.c ****     for (uint16_t i = delay; i > 0; i--) {
 771              		.loc 1 907 5 is_stmt 1 view .LVU194
 772              	.LBB54:
 773              		.loc 1 907 10 view .LVU195
 774              	.L57:
 775              		.loc 1 907 30 discriminator 2 view .LVU196
 776              		.loc 1 907 5 is_stmt 0 discriminator 2 view .LVU197
 777 000a 24B9     		cbnz	r4, .L58
 778              		.loc 1 907 5 discriminator 2 view .LVU198
 779              	.LBE54:
 908:tmk_core/common/action.c ****         wait_ms(1);
 909:tmk_core/common/action.c ****     }
 910:tmk_core/common/action.c ****     unregister_code(code);
 780              		.loc 1 910 5 is_stmt 1 view .LVU199
 781 000c 2846     		mov	r0, r5
 911:tmk_core/common/action.c **** }
 782              		.loc 1 911 1 is_stmt 0 view .LVU200
 783 000e BDE83840 		pop	{r3, r4, r5, lr}
 784              		.cfi_remember_state
 785              		.cfi_restore 14
 786              		.cfi_restore 5
 787              		.cfi_restore 4
 788              		.cfi_restore 3
 789              		.cfi_def_cfa_offset 0
 790              	.LVL76:
 910:tmk_core/common/action.c **** }
 791              		.loc 1 910 5 view .LVU201
 792 0012 FFF7FEBF 		b	unregister_code
 793              	.LVL77:
 794              	.L58:
 795              		.cfi_restore_state
 796              	.LBB55:
 908:tmk_core/common/action.c ****         wait_ms(1);
 797              		.loc 1 908 9 is_stmt 1 discriminator 1 view .LVU202
 908:tmk_core/common/action.c ****         wait_ms(1);
 798              		.loc 1 908 9 discriminator 1 view .LVU203
 908:tmk_core/common/action.c ****         wait_ms(1);
 799              		.loc 1 908 9 discriminator 1 view .LVU204
 800 0016 6420     		movs	r0, #100
 907:tmk_core/common/action.c ****         wait_ms(1);
 801              		.loc 1 907 38 is_stmt 0 discriminator 1 view .LVU205
 802 0018 013C     		subs	r4, r4, #1
 803              	.LVL78:
 908:tmk_core/common/action.c ****     }
 804              		.loc 1 908 9 discriminator 1 view .LVU206
 805 001a FFF7FEFF 		bl	chThdSleep
 806              	.LVL79:
 908:tmk_core/common/action.c ****     }
 807              		.loc 1 908 9 is_stmt 1 discriminator 1 view .LVU207
 907:tmk_core/common/action.c ****         wait_ms(1);
 808              		.loc 1 907 37 discriminator 1 view .LVU208
 907:tmk_core/common/action.c ****         wait_ms(1);
 809              		.loc 1 907 38 is_stmt 0 discriminator 1 view .LVU209
 810 001e A4B2     		uxth	r4, r4
 811              	.LVL80:
 907:tmk_core/common/action.c ****         wait_ms(1);
 812              		.loc 1 907 38 discriminator 1 view .LVU210
 813 0020 F3E7     		b	.L57
 814              	.LBE55:
 815              		.cfi_endproc
 816              	.LFE298:
 818              		.section	.text.tap_code,"ax",%progbits
 819              		.align	1
 820              		.global	tap_code
 821              		.syntax unified
 822              		.thumb
 823              		.thumb_func
 824              		.fpu fpv4-sp-d16
 826              	tap_code:
 827              	.LVL81:
 828              	.LFB299:
 912:tmk_core/common/action.c **** 
 913:tmk_core/common/action.c **** /** \brief Tap a keycode with the default delay.
 914:tmk_core/common/action.c ****  *
 915:tmk_core/common/action.c ****  * \param code The basic keycode to tap. If `code` is `KC_CAPS`, the delay will be `TAP_HOLD_CAPS_D
 916:tmk_core/common/action.c ****  */
 917:tmk_core/common/action.c **** void tap_code(uint8_t code) { tap_code_delay(code, code == KC_CAPS ? TAP_HOLD_CAPS_DELAY : TAP_CODE
 829              		.loc 1 917 29 is_stmt 1 view -0
 830              		.cfi_startproc
 831              		@ args = 0, pretend = 0, frame = 0
 832              		@ frame_needed = 0, uses_anonymous_args = 0
 833              		@ link register save eliminated.
 834              		.loc 1 917 31 view .LVU212
 835 0000 3928     		cmp	r0, #57
 836 0002 0CBF     		ite	eq
 837 0004 5021     		moveq	r1, #80
 838 0006 0A21     		movne	r1, #10
 839 0008 FFF7FEBF 		b	tap_code_delay
 840              	.LVL82:
 841              		.loc 1 917 31 is_stmt 0 view .LVU213
 842              		.cfi_endproc
 843              	.LFE299:
 845              		.section	.text.register_mods,"ax",%progbits
 846              		.align	1
 847              		.global	register_mods
 848              		.syntax unified
 849              		.thumb
 850              		.thumb_func
 851              		.fpu fpv4-sp-d16
 853              	register_mods:
 854              	.LVL83:
 855              	.LFB300:
 918:tmk_core/common/action.c **** 
 919:tmk_core/common/action.c **** /** \brief Adds the given physically pressed modifiers and sends a keyboard report immediately.
 920:tmk_core/common/action.c ****  *
 921:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to register.
 922:tmk_core/common/action.c ****  */
 923:tmk_core/common/action.c **** void register_mods(uint8_t mods) {
 856              		.loc 1 923 34 is_stmt 1 view -0
 857              		.cfi_startproc
 858              		@ args = 0, pretend = 0, frame = 0
 859              		@ frame_needed = 0, uses_anonymous_args = 0
 924:tmk_core/common/action.c ****     if (mods) {
 860              		.loc 1 924 5 view .LVU215
 923:tmk_core/common/action.c ****     if (mods) {
 861              		.loc 1 923 34 is_stmt 0 view .LVU216
 862 0000 08B5     		push	{r3, lr}
 863              		.cfi_def_cfa_offset 8
 864              		.cfi_offset 3, -8
 865              		.cfi_offset 14, -4
 866              		.loc 1 924 8 view .LVU217
 867 0002 28B1     		cbz	r0, .L62
 925:tmk_core/common/action.c ****         add_mods(mods);
 868              		.loc 1 925 9 is_stmt 1 view .LVU218
 869 0004 FFF7FEFF 		bl	add_mods
 870              	.LVL84:
 926:tmk_core/common/action.c ****         send_keyboard_report();
 871              		.loc 1 926 9 view .LVU219
 927:tmk_core/common/action.c ****     }
 928:tmk_core/common/action.c **** }
 872              		.loc 1 928 1 is_stmt 0 view .LVU220
 873 0008 BDE80840 		pop	{r3, lr}
 874              		.cfi_remember_state
 875              		.cfi_restore 14
 876              		.cfi_restore 3
 877              		.cfi_def_cfa_offset 0
 926:tmk_core/common/action.c ****         send_keyboard_report();
 878              		.loc 1 926 9 view .LVU221
 879 000c FFF7FEBF 		b	send_keyboard_report
 880              	.LVL85:
 881              	.L62:
 882              		.cfi_restore_state
 883              		.loc 1 928 1 view .LVU222
 884 0010 08BD     		pop	{r3, pc}
 885              		.cfi_endproc
 886              	.LFE300:
 888              		.section	.text.unregister_mods,"ax",%progbits
 889              		.align	1
 890              		.global	unregister_mods
 891              		.syntax unified
 892              		.thumb
 893              		.thumb_func
 894              		.fpu fpv4-sp-d16
 896              	unregister_mods:
 897              	.LVL86:
 898              	.LFB301:
 929:tmk_core/common/action.c **** 
 930:tmk_core/common/action.c **** /** \brief Removes the given physically pressed modifiers and sends a keyboard report immediately.
 931:tmk_core/common/action.c ****  *
 932:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to unregister.
 933:tmk_core/common/action.c ****  */
 934:tmk_core/common/action.c **** void unregister_mods(uint8_t mods) {
 899              		.loc 1 934 36 is_stmt 1 view -0
 900              		.cfi_startproc
 901              		@ args = 0, pretend = 0, frame = 0
 902              		@ frame_needed = 0, uses_anonymous_args = 0
 935:tmk_core/common/action.c ****     if (mods) {
 903              		.loc 1 935 5 view .LVU224
 934:tmk_core/common/action.c ****     if (mods) {
 904              		.loc 1 934 36 is_stmt 0 view .LVU225
 905 0000 08B5     		push	{r3, lr}
 906              		.cfi_def_cfa_offset 8
 907              		.cfi_offset 3, -8
 908              		.cfi_offset 14, -4
 909              		.loc 1 935 8 view .LVU226
 910 0002 28B1     		cbz	r0, .L64
 936:tmk_core/common/action.c ****         del_mods(mods);
 911              		.loc 1 936 9 is_stmt 1 view .LVU227
 912 0004 FFF7FEFF 		bl	del_mods
 913              	.LVL87:
 937:tmk_core/common/action.c ****         send_keyboard_report();
 914              		.loc 1 937 9 view .LVU228
 938:tmk_core/common/action.c ****     }
 939:tmk_core/common/action.c **** }
 915              		.loc 1 939 1 is_stmt 0 view .LVU229
 916 0008 BDE80840 		pop	{r3, lr}
 917              		.cfi_remember_state
 918              		.cfi_restore 14
 919              		.cfi_restore 3
 920              		.cfi_def_cfa_offset 0
 937:tmk_core/common/action.c ****         send_keyboard_report();
 921              		.loc 1 937 9 view .LVU230
 922 000c FFF7FEBF 		b	send_keyboard_report
 923              	.LVL88:
 924              	.L64:
 925              		.cfi_restore_state
 926              		.loc 1 939 1 view .LVU231
 927 0010 08BD     		pop	{r3, pc}
 928              		.cfi_endproc
 929              	.LFE301:
 931              		.section	.text.process_action,"ax",%progbits
 932              		.align	1
 933              		.global	process_action
 934              		.syntax unified
 935              		.thumb
 936              		.thumb_func
 937              		.fpu fpv4-sp-d16
 939              	process_action:
 940              	.LVL89:
 941              	.LFB295:
 255:tmk_core/common/action.c ****     keyevent_t event = record->event;
 942              		.loc 1 255 59 is_stmt 1 view -0
 943              		.cfi_startproc
 944              		@ args = 0, pretend = 0, frame = 8
 945              		@ frame_needed = 0, uses_anonymous_args = 0
 256:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 946              		.loc 1 256 5 view .LVU233
 255:tmk_core/common/action.c ****     keyevent_t event = record->event;
 947              		.loc 1 255 59 is_stmt 0 view .LVU234
 948 0000 2DE9F347 		push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
 949              		.cfi_def_cfa_offset 40
 950              		.cfi_offset 4, -32
 951              		.cfi_offset 5, -28
 952              		.cfi_offset 6, -24
 953              		.cfi_offset 7, -20
 954              		.cfi_offset 8, -16
 955              		.cfi_offset 9, -12
 956              		.cfi_offset 10, -8
 957              		.cfi_offset 14, -4
 958              	.LVL90:
 258:tmk_core/common/action.c **** #endif
 959              		.loc 1 258 36 view .LVU235
 960 0004 8679     		ldrb	r6, [r0, #6]	@ zero_extendqisi2
 256:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 961              		.loc 1 256 16 view .LVU236
 962 0006 8578     		ldrb	r5, [r0, #2]	@ zero_extendqisi2
 963              	.LVL91:
 258:tmk_core/common/action.c **** #endif
 964              		.loc 1 258 5 is_stmt 1 view .LVU237
 255:tmk_core/common/action.c ****     keyevent_t event = record->event;
 965              		.loc 1 255 59 is_stmt 0 view .LVU238
 966 0008 8046     		mov	r8, r0
 967 000a 0C46     		mov	r4, r1	@ movhi
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 968              		.loc 1 264 9 view .LVU239
 969 000c FFF7FEFF 		bl	is_oneshot_layer_active
 970              	.LVL92:
 258:tmk_core/common/action.c **** #endif
 971              		.loc 1 258 13 view .LVU240
 972 0010 3609     		lsrs	r6, r6, #4
 973              	.LVL93:
 262:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 974              		.loc 1 262 5 is_stmt 1 view .LVU241
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 975              		.loc 1 264 5 view .LVU242
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 976              		.loc 1 264 8 is_stmt 0 view .LVU243
 977 0012 0746     		mov	r7, r0
 978 0014 A0B1     		cbz	r0, .L67
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 979              		.loc 1 264 43 discriminator 1 view .LVU244
 980 0016 2F46     		mov	r7, r5
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 981              		.loc 1 264 35 discriminator 1 view .LVU245
 982 0018 95B1     		cbz	r5, .L67
 983              	.LVL94:
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 984              		.loc 1 264 71 discriminator 2 view .LVU246
 985 001a C4F30723 		ubfx	r3, r4, #8, #8
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 986              		.loc 1 264 52 discriminator 2 view .LVU247
 987 001e 03F0F003 		and	r3, r3, #240
 988 0022 402B     		cmp	r3, #64
 989 0024 04D0     		beq	.L68
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 990              		.loc 1 264 87 discriminator 3 view .LVU248
 991 0026 04F12003 		add	r3, r4, #32
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 992              		.loc 1 264 84 discriminator 3 view .LVU249
 993 002a DBB2     		uxtb	r3, r3
 994 002c 072B     		cmp	r3, #7
 995 002e 1ED9     		bls	.L146
 996              	.L68:
 269:tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 997              		.loc 1 269 9 is_stmt 1 view .LVU250
 998 0030 0220     		movs	r0, #2
 999 0032 FFF7FEFF 		bl	clear_oneshot_layer_state
 1000              	.LVL95:
 270:tmk_core/common/action.c ****     }
 1001              		.loc 1 270 9 view .LVU251
 270:tmk_core/common/action.c ****     }
 1002              		.loc 1 270 31 is_stmt 0 view .LVU252
 1003 0036 FFF7FEFF 		bl	is_oneshot_layer_active
 1004              	.LVL96:
 270:tmk_core/common/action.c ****     }
 1005              		.loc 1 270 9 view .LVU253
 1006 003a 80F00100 		eor	r0, r0, #1
 1007 003e C7B2     		uxtb	r7, r0
 1008              	.LVL97:
 1009              	.L67:
 274:tmk_core/common/action.c ****         /* Key and Mods */
 1010              		.loc 1 274 5 is_stmt 1 view .LVU254
 274:tmk_core/common/action.c ****         /* Key and Mods */
 1011              		.loc 1 274 24 is_stmt 0 view .LVU255
 1012 0040 C4F30339 		ubfx	r9, r4, #12, #4
 1013 0044 B9F10F0F 		cmp	r9, #15
 1014 0048 3FD8     		bhi	.L69
 1015 004a DFE819F0 		tbh	[pc, r9, lsl #1]
 1016              	.L71:
 1017 004e 1200     		.2byte	(.L79-.L71)/2
 1018 0050 1200     		.2byte	(.L79-.L71)/2
 1019 0052 6300     		.2byte	(.L78-.L71)/2
 1020 0054 6300     		.2byte	(.L78-.L71)/2
 1021 0056 B000     		.2byte	(.L77-.L71)/2
 1022 0058 C700     		.2byte	(.L76-.L71)/2
 1023 005a 3E00     		.2byte	(.L69-.L71)/2
 1024 005c 3E00     		.2byte	(.L69-.L71)/2
 1025 005e D100     		.2byte	(.L75-.L71)/2
 1026 0060 2C01     		.2byte	(.L74-.L71)/2
 1027 0062 3C01     		.2byte	(.L73-.L71)/2
 1028 0064 3C01     		.2byte	(.L73-.L71)/2
 1029 0066 9201     		.2byte	(.L72-.L71)/2
 1030 0068 3E00     		.2byte	(.L69-.L71)/2
 1031 006a 3E00     		.2byte	(.L69-.L71)/2
 1032 006c 9B01     		.2byte	(.L70-.L71)/2
 1033              	.LVL98:
 1034              		.p2align 1
 1035              	.L146:
 262:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 1036              		.loc 1 262 10 view .LVU256
 1037 006e 0027     		movs	r7, #0
 1038 0070 E6E7     		b	.L67
 1039              	.LVL99:
 1040              	.L79:
 1041              	.LBB56:
 278:tmk_core/common/action.c ****             if (event.pressed) {
 1042              		.loc 1 278 13 is_stmt 1 view .LVU257
 278:tmk_core/common/action.c ****             if (event.pressed) {
 1043              		.loc 1 278 44 is_stmt 0 view .LVU258
 1044 0072 C4F30723 		ubfx	r3, r4, #8, #8
 278:tmk_core/common/action.c ****             if (event.pressed) {
 1045              		.loc 1 278 21 view .LVU259
 1046 0076 C4F30326 		ubfx	r6, r4, #8, #4
 1047 007a 13F0F00F 		tst	r3, #240
 1048 007e 18BF     		it	ne
 1049 0080 3601     		lslne	r6, r6, #4
 1050              	.LVL100:
 279:tmk_core/common/action.c ****                 if (mods) {
 1051              		.loc 1 279 13 is_stmt 1 view .LVU260
 1052              	.LBE56:
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 1053              		.loc 1 264 88 is_stmt 0 view .LVU261
 1054 0082 E4B2     		uxtb	r4, r4
 1055              	.LVL101:
 1056              	.LBB57:
 279:tmk_core/common/action.c ****                 if (mods) {
 1057              		.loc 1 279 16 view .LVU262
 1058 0084 95B1     		cbz	r5, .L81
 280:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 1059              		.loc 1 280 17 is_stmt 1 view .LVU263
 280:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 1060              		.loc 1 280 20 is_stmt 0 view .LVU264
 1061 0086 56B1     		cbz	r6, .L102
 281:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 1062              		.loc 1 281 21 is_stmt 1 view .LVU265
 281:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 1063              		.loc 1 281 25 is_stmt 0 view .LVU266
 1064 0088 04F12003 		add	r3, r4, #32
 281:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 1065              		.loc 1 281 24 view .LVU267
 1066 008c DBB2     		uxtb	r3, r3
 1067 008e 072B     		cmp	r3, #7
 285:tmk_core/common/action.c ****                     } else {
 1068              		.loc 1 285 25 view .LVU268
 1069 0090 3046     		mov	r0, r6
 281:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 1070              		.loc 1 281 24 view .LVU269
 1071 0092 00D9     		bls	.L83
 281:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 1072              		.loc 1 281 49 discriminator 1 view .LVU270
 1073 0094 3CB9     		cbnz	r4, .L84
 1074              	.L83:
 285:tmk_core/common/action.c ****                     } else {
 1075              		.loc 1 285 25 is_stmt 1 view .LVU271
 1076 0096 FFF7FEFF 		bl	add_mods
 1077              	.LVL102:
 1078              	.L85:
 289:tmk_core/common/action.c ****                 }
 1079              		.loc 1 289 21 view .LVU272
 1080 009a FFF7FEFF 		bl	send_keyboard_report
 1081              	.LVL103:
 291:tmk_core/common/action.c ****             } else {
 1082              		.loc 1 291 17 view .LVU273
 1083              	.L102:
 291:tmk_core/common/action.c ****             } else {
 1084              		.loc 1 291 17 is_stmt 0 view .LVU274
 1085              	.LBE57:
 1086              	.LBB58:
 378:tmk_core/common/action.c ****                                 register_code(action.key.code);
 1087              		.loc 1 378 73 is_stmt 1 view .LVU275
 379:tmk_core/common/action.c ****                             }
 1088              		.loc 1 379 33 view .LVU276
 1089 009e 2046     		mov	r0, r4
 1090              	.LVL104:
 1091              	.L184:
 379:tmk_core/common/action.c ****                             }
 1092              		.loc 1 379 33 is_stmt 0 view .LVU277
 1093              	.LBE58:
 571:tmk_core/common/action.c ****                         } else {
 1094              		.loc 1 571 29 view .LVU278
 1095 00a0 FFF7FEFF 		bl	register_code
 1096              	.LVL105:
 1097 00a4 11E0     		b	.L69
 1098              	.LVL106:
 1099              	.L84:
 1100              	.LBB59:
 287:tmk_core/common/action.c ****                     }
 1101              		.loc 1 287 25 is_stmt 1 view .LVU279
 1102 00a6 FFF7FEFF 		bl	add_weak_mods
 1103              	.LVL107:
 1104 00aa F6E7     		b	.L85
 1105              	.L81:
 293:tmk_core/common/action.c ****                 if (mods) {
 1106              		.loc 1 293 17 view .LVU280
 1107 00ac 2046     		mov	r0, r4
 1108 00ae FFF7FEFF 		bl	unregister_code
 1109              	.LVL108:
 294:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 1110              		.loc 1 294 17 view .LVU281
 294:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 1111              		.loc 1 294 20 is_stmt 0 view .LVU282
 1112 00b2 56B1     		cbz	r6, .L69
 295:tmk_core/common/action.c ****                         del_mods(mods);
 1113              		.loc 1 295 21 is_stmt 1 view .LVU283
 295:tmk_core/common/action.c ****                         del_mods(mods);
 1114              		.loc 1 295 25 is_stmt 0 view .LVU284
 1115 00b4 04F12003 		add	r3, r4, #32
 295:tmk_core/common/action.c ****                         del_mods(mods);
 1116              		.loc 1 295 24 view .LVU285
 1117 00b8 DBB2     		uxtb	r3, r3
 1118 00ba 072B     		cmp	r3, #7
 296:tmk_core/common/action.c ****                     } else {
 1119              		.loc 1 296 25 view .LVU286
 1120 00bc 3046     		mov	r0, r6
 295:tmk_core/common/action.c ****                         del_mods(mods);
 1121              		.loc 1 295 24 view .LVU287
 1122 00be 00D9     		bls	.L87
 295:tmk_core/common/action.c ****                         del_mods(mods);
 1123              		.loc 1 295 49 discriminator 1 view .LVU288
 1124 00c0 2CBB     		cbnz	r4, .L88
 1125              	.L87:
 296:tmk_core/common/action.c ****                     } else {
 1126              		.loc 1 296 25 is_stmt 1 view .LVU289
 1127 00c2 FFF7FEFF 		bl	del_mods
 1128              	.LVL109:
 1129              	.L89:
 300:tmk_core/common/action.c ****                 }
 1130              		.loc 1 300 21 view .LVU290
 1131 00c6 FFF7FEFF 		bl	send_keyboard_report
 1132              	.LVL110:
 1133              	.L69:
 300:tmk_core/common/action.c ****                 }
 1134              		.loc 1 300 21 is_stmt 0 view .LVU291
 1135              	.LBE59:
 685:tmk_core/common/action.c ****         case ACT_LAYER:
 1136              		.loc 1 685 5 is_stmt 1 view .LVU292
 1137 00ca A9F10809 		sub	r9, r9, #8
 1138 00ce B9F1030F 		cmp	r9, #3
 1139 00d2 03D8     		bhi	.L142
 692:tmk_core/common/action.c ****             break;
 1140              		.loc 1 692 13 view .LVU293
 1141 00d4 FFF7FEFF 		bl	host_keyboard_leds
 1142              	.LVL111:
 1143 00d8 FFF7FEFF 		bl	led_set
 1144              	.LVL112:
 693:tmk_core/common/action.c ****         default:
 1145              		.loc 1 693 13 view .LVU294
 1146              	.L142:
 738:tmk_core/common/action.c ****         record->event.pressed = false;
 1147              		.loc 1 738 5 view .LVU295
 738:tmk_core/common/action.c ****         record->event.pressed = false;
 1148              		.loc 1 738 8 is_stmt 0 view .LVU296
 1149 00dc 002F     		cmp	r7, #0
 1150 00de 00F05881 		beq	.L66
 738:tmk_core/common/action.c ****         record->event.pressed = false;
 1151              		.loc 1 738 33 discriminator 1 view .LVU297
 1152 00e2 FFF7FEFF 		bl	get_oneshot_layer_state
 1153              	.LVL113:
 738:tmk_core/common/action.c ****         record->event.pressed = false;
 1154              		.loc 1 738 28 discriminator 1 view .LVU298
 1155 00e6 10F00100 		ands	r0, r0, #1
 1156 00ea 40F05281 		bne	.L66
 739:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 1157              		.loc 1 739 9 is_stmt 1 view .LVU299
 739:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 1158              		.loc 1 739 31 is_stmt 0 view .LVU300
 1159 00ee 88F80200 		strb	r0, [r8, #2]
 740:tmk_core/common/action.c ****         process_record(record);
 1160              		.loc 1 740 9 is_stmt 1 view .LVU301
 1161 00f2 FFF7FEFF 		bl	get_oneshot_layer
 1162              	.LVL114:
 1163 00f6 FFF7FEFF 		bl	layer_on
 1164              	.LVL115:
 741:tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 1165              		.loc 1 741 9 view .LVU302
 1166 00fa 4046     		mov	r0, r8
 1167 00fc FFF7FEFF 		bl	process_record
 1168              	.LVL116:
 742:tmk_core/common/action.c ****     }
 1169              		.loc 1 742 9 view .LVU303
 1170 0100 FFF7FEFF 		bl	get_oneshot_layer
 1171              	.LVL117:
 745:tmk_core/common/action.c **** 
 1172              		.loc 1 745 1 is_stmt 0 view .LVU304
 1173 0104 02B0     		add	sp, sp, #8
 1174              		.cfi_remember_state
 1175              		.cfi_def_cfa_offset 32
 1176              		@ sp needed
 1177 0106 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 1178              		.cfi_restore 14
 1179              		.cfi_restore 10
 1180              		.cfi_restore 9
 1181              		.cfi_restore 8
 1182              		.cfi_restore 7
 1183              		.cfi_restore 6
 1184              		.cfi_restore 5
 1185              		.cfi_restore 4
 1186              		.cfi_def_cfa_offset 0
 1187              	.LVL118:
 742:tmk_core/common/action.c ****     }
 1188              		.loc 1 742 9 view .LVU305
 1189 010a FFF7FEBF 		b	layer_off
 1190              	.LVL119:
 1191              	.L88:
 1192              		.cfi_restore_state
 1193              	.LBB60:
 298:tmk_core/common/action.c ****                     }
 1194              		.loc 1 298 25 is_stmt 1 view .LVU306
 1195 010e FFF7FEFF 		bl	del_weak_mods
 1196              	.LVL120:
 1197 0112 D8E7     		b	.L89
 1198              	.LVL121:
 1199              	.L78:
 298:tmk_core/common/action.c ****                     }
 1200              		.loc 1 298 25 is_stmt 0 view .LVU307
 1201              	.LBE60:
 1202              	.LBB61:
 307:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1203              		.loc 1 307 13 is_stmt 1 view .LVU308
 307:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1204              		.loc 1 307 44 is_stmt 0 view .LVU309
 1205 0114 C4F30723 		ubfx	r3, r4, #8, #8
 307:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1206              		.loc 1 307 21 view .LVU310
 1207 0118 03F0F003 		and	r3, r3, #240
 1208              	.LBE61:
 1209              	.LBB62:
 278:tmk_core/common/action.c ****             if (event.pressed) {
 1210              		.loc 1 278 21 view .LVU311
 1211 011c C4F3032A 		ubfx	r10, r4, #8, #4
 1212              	.LBE62:
 1213              	.LBB63:
 307:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1214              		.loc 1 307 21 view .LVU312
 1215 0120 202B     		cmp	r3, #32
 308:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 1216              		.loc 1 308 37 view .LVU313
 1217 0122 E4B2     		uxtb	r4, r4
 1218              	.LVL122:
 307:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1219              		.loc 1 307 21 view .LVU314
 1220 0124 18BF     		it	ne
 1221 0126 4FEA0A1A 		lslne	r10, r10, #4
 1222              	.LVL123:
 308:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 1223              		.loc 1 308 13 is_stmt 1 view .LVU315
 1224 012a 64B1     		cbz	r4, .L91
 1225 012c 012C     		cmp	r4, #1
 1226 012e 28D0     		beq	.L92
 363:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1227              		.loc 1 363 21 view .LVU316
 363:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1228              		.loc 1 363 24 is_stmt 0 view .LVU317
 1229 0130 7DB3     		cbz	r5, .L100
 364:tmk_core/common/action.c **** #    if !defined(IGNORE_MOD_TAP_INTERRUPT) || defined(IGNORE_MOD_TAP_INTERRUPT_PER_KEY)
 1230              		.loc 1 364 25 is_stmt 1 view .LVU318
 364:tmk_core/common/action.c **** #    if !defined(IGNORE_MOD_TAP_INTERRUPT) || defined(IGNORE_MOD_TAP_INTERRUPT_PER_KEY)
 1231              		.loc 1 364 28 is_stmt 0 view .LVU319
 1232 0132 4EB3     		cbz	r6, .L101
 366:tmk_core/common/action.c **** #        ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
 1233              		.loc 1 366 29 is_stmt 1 view .LVU320
 370:tmk_core/common/action.c ****                                 dprint("mods_tap: tap: cancel: add_mods\n");
 1234              		.loc 1 370 33 is_stmt 0 view .LVU321
 1235 0134 98F80630 		ldrb	r3, [r8, #6]	@ zero_extendqisi2
 366:tmk_core/common/action.c **** #        ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
 1236              		.loc 1 366 32 view .LVU322
 1237 0138 D907     		lsls	r1, r3, #31
 1238 013a B0D5     		bpl	.L102
 371:tmk_core/common/action.c ****                                 // ad hoc: set 0 to cancel tap
 1239              		.loc 1 371 76 is_stmt 1 view .LVU323
 373:tmk_core/common/action.c ****                                 register_mods(mods);
 1240              		.loc 1 373 33 view .LVU324
 373:tmk_core/common/action.c ****                                 register_mods(mods);
 1241              		.loc 1 373 51 is_stmt 0 view .LVU325
 1242 013c 6FF30713 		bfc	r3, #4, #4
 1243 0140 88F80630 		strb	r3, [r8, #6]
 374:tmk_core/common/action.c ****                             } else
 1244              		.loc 1 374 33 is_stmt 1 view .LVU326
 1245 0144 20E0     		b	.L101
 1246              	.L91:
 312:tmk_core/common/action.c ****                         if (tap_count == 0) {
 1247              		.loc 1 312 21 view .LVU327
 312:tmk_core/common/action.c ****                         if (tap_count == 0) {
 1248              		.loc 1 312 24 is_stmt 0 view .LVU328
 1249 0146 95B1     		cbz	r5, .L94
 313:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: 0\n");
 1250              		.loc 1 313 25 is_stmt 1 view .LVU329
 313:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: 0\n");
 1251              		.loc 1 313 28 is_stmt 0 view .LVU330
 1252 0148 3EB9     		cbnz	r6, .L95
 1253              	.L96:
 327:tmk_core/common/action.c ****                         }
 1254              		.loc 1 327 29 is_stmt 1 view .LVU331
 327:tmk_core/common/action.c ****                         }
 1255              		.loc 1 327 50 is_stmt 0 view .LVU332
 1256 014a FFF7FEFF 		bl	get_oneshot_mods
 1257              	.LVL124:
 327:tmk_core/common/action.c ****                         }
 1258              		.loc 1 327 29 view .LVU333
 1259 014e 40EA0A00 		orr	r0, r0, r10
 1260 0152 C0B2     		uxtb	r0, r0
 1261              	.LVL125:
 1262              	.L182:
 327:tmk_core/common/action.c ****                         }
 1263              		.loc 1 327 29 view .LVU334
 1264              	.LBE63:
 497:tmk_core/common/action.c ****             } else {
 1265              		.loc 1 497 17 view .LVU335
 1266 0154 FFF7FEFF 		bl	register_mods
 1267              	.LVL126:
 1268 0158 B7E7     		b	.L69
 1269              	.LVL127:
 1270              	.L95:
 1271              	.LBB64:
 316:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: start\n");
 1272              		.loc 1 316 32 is_stmt 1 view .LVU336
 316:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: start\n");
 1273              		.loc 1 316 35 is_stmt 0 view .LVU337
 1274 015a 012E     		cmp	r6, #1
 1275 015c F5D1     		bne	.L96
 317:tmk_core/common/action.c ****                             set_oneshot_mods(mods | get_oneshot_mods());
 1276              		.loc 1 317 65 is_stmt 1 view .LVU338
 318:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1277              		.loc 1 318 29 view .LVU339
 318:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1278              		.loc 1 318 53 is_stmt 0 view .LVU340
 1279 015e FFF7FEFF 		bl	get_oneshot_mods
 1280              	.LVL128:
 318:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1281              		.loc 1 318 29 view .LVU341
 1282 0162 40EA0A00 		orr	r0, r0, r10
 1283 0166 C0B2     		uxtb	r0, r0
 1284 0168 FFF7FEFF 		bl	set_oneshot_mods
 1285              	.LVL129:
 1286 016c ADE7     		b	.L69
 1287              	.L94:
 330:tmk_core/common/action.c ****                             clear_oneshot_mods();
 1288              		.loc 1 330 25 is_stmt 1 view .LVU342
 330:tmk_core/common/action.c ****                             clear_oneshot_mods();
 1289              		.loc 1 330 28 is_stmt 0 view .LVU343
 1290 016e 2EB9     		cbnz	r6, .L97
 1291              	.L186:
 345:tmk_core/common/action.c ****                             unregister_mods(mods);
 1292              		.loc 1 345 29 is_stmt 1 view .LVU344
 1293 0170 FFF7FEFF 		bl	clear_oneshot_mods
 1294              	.LVL130:
 346:tmk_core/common/action.c ****                         }
 1295              		.loc 1 346 29 view .LVU345
 1296              	.L103:
 395:tmk_core/common/action.c ****                             unregister_mods(mods);
 1297              		.loc 1 395 67 view .LVU346
 396:tmk_core/common/action.c ****                         }
 1298              		.loc 1 396 29 view .LVU347
 1299 0174 5046     		mov	r0, r10
 1300 0176 FFF7FEFF 		bl	unregister_mods
 1301              	.LVL131:
 1302 017a A6E7     		b	.L69
 1303              	.L97:
 333:tmk_core/common/action.c ****                             // Retain Oneshot mods
 1304              		.loc 1 333 32 view .LVU348
 333:tmk_core/common/action.c ****                             // Retain Oneshot mods
 1305              		.loc 1 333 35 is_stmt 0 view .LVU349
 1306 017c 012E     		cmp	r6, #1
 1307 017e A4D0     		beq	.L69
 1308 0180 F6E7     		b	.L186
 1309              	.L92:
 352:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 1310              		.loc 1 352 21 is_stmt 1 view .LVU350
 352:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 1311              		.loc 1 352 24 is_stmt 0 view .LVU351
 1312 0182 1DB1     		cbz	r5, .L99
 353:tmk_core/common/action.c ****                             register_mods(mods);
 1313              		.loc 1 353 25 is_stmt 1 view .LVU352
 353:tmk_core/common/action.c ****                             register_mods(mods);
 1314              		.loc 1 353 28 is_stmt 0 view .LVU353
 1315 0184 022E     		cmp	r6, #2
 1316 0186 A0D8     		bhi	.L69
 1317              	.L101:
 382:tmk_core/common/action.c ****                             register_mods(mods);
 1318              		.loc 1 382 67 is_stmt 1 view .LVU354
 383:tmk_core/common/action.c ****                         }
 1319              		.loc 1 383 29 view .LVU355
 1320 0188 5046     		mov	r0, r10
 1321 018a E3E7     		b	.L182
 1322              	.L99:
 357:tmk_core/common/action.c ****                             unregister_mods(mods);
 1323              		.loc 1 357 25 view .LVU356
 357:tmk_core/common/action.c ****                             unregister_mods(mods);
 1324              		.loc 1 357 28 is_stmt 0 view .LVU357
 1325 018c 012E     		cmp	r6, #1
 1326 018e 9CD8     		bhi	.L69
 1327 0190 F0E7     		b	.L103
 1328              	.L100:
 386:tmk_core/common/action.c ****                             dprint("MODS_TAP: Tap: unregister_code\n");
 1329              		.loc 1 386 25 is_stmt 1 view .LVU358
 386:tmk_core/common/action.c ****                             dprint("MODS_TAP: Tap: unregister_code\n");
 1330              		.loc 1 386 28 is_stmt 0 view .LVU359
 1331 0192 002E     		cmp	r6, #0
 1332 0194 EED0     		beq	.L103
 387:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 1333              		.loc 1 387 71 is_stmt 1 view .LVU360
 388:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1334              		.loc 1 388 29 view .LVU361
 388:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1335              		.loc 1 388 32 is_stmt 0 view .LVU362
 1336 0196 392C     		cmp	r4, #57
 389:tmk_core/common/action.c ****                             } else {
 1337              		.loc 1 389 33 is_stmt 1 view .LVU363
 389:tmk_core/common/action.c ****                             } else {
 1338              		.loc 1 389 33 view .LVU364
 389:tmk_core/common/action.c ****                             } else {
 1339              		.loc 1 389 33 view .LVU365
 1340 0198 0CBF     		ite	eq
 1341 019a 4FF4FA50 		moveq	r0, #8000
 391:tmk_core/common/action.c ****                             }
 1342              		.loc 1 391 33 view .LVU366
 391:tmk_core/common/action.c ****                             }
 1343              		.loc 1 391 33 view .LVU367
 391:tmk_core/common/action.c ****                             }
 1344              		.loc 1 391 33 view .LVU368
 1345 019e 4FF47A70 		movne	r0, #1000
 1346 01a2 FFF7FEFF 		bl	chThdSleep
 1347              	.LVL132:
 391:tmk_core/common/action.c ****                             }
 1348              		.loc 1 391 33 view .LVU369
 393:tmk_core/common/action.c ****                         } else {
 1349              		.loc 1 393 29 view .LVU370
 1350 01a6 2046     		mov	r0, r4
 1351              	.LVL133:
 1352              	.L183:
 393:tmk_core/common/action.c ****                         } else {
 1353              		.loc 1 393 29 is_stmt 0 view .LVU371
 1354              	.LBE64:
 584:tmk_core/common/action.c ****                         } else {
 1355              		.loc 1 584 29 discriminator 4 view .LVU372
 1356 01a8 FFF7FEFF 		bl	unregister_code
 1357              	.LVL134:
 1358 01ac 8DE7     		b	.L69
 1359              	.L77:
 406:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1360              		.loc 1 406 13 is_stmt 1 view .LVU373
 1361 01ae 14F4406F 		tst	r4, #3072
 406:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1362              		.loc 1 406 33 is_stmt 0 view .LVU374
 1363 01b2 C4F38123 		ubfx	r3, r4, #10, #2
 1364 01b6 07D0     		beq	.L106
 1365 01b8 012B     		cmp	r3, #1
 1366 01ba 86D1     		bne	.L69
 415:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1367              		.loc 1 415 21 is_stmt 1 view .LVU375
 415:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1368              		.loc 1 415 24 is_stmt 0 view .LVU376
 1369 01bc 65B1     		cbz	r5, .L109
 416:tmk_core/common/action.c ****                     } else {
 1370              		.loc 1 416 25 is_stmt 1 view .LVU377
 1371 01be C4F30900 		ubfx	r0, r4, #0, #10
 1372              	.L185:
 418:tmk_core/common/action.c ****                     }
 1373              		.loc 1 418 25 is_stmt 0 view .LVU378
 1374 01c2 FFF7FEFF 		bl	host_consumer_send
 1375              	.LVL135:
 1376 01c6 80E7     		b	.L69
 1377              	.L106:
 408:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1378              		.loc 1 408 21 is_stmt 1 view .LVU379
 408:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1379              		.loc 1 408 24 is_stmt 0 view .LVU380
 1380 01c8 25B1     		cbz	r5, .L108
 409:tmk_core/common/action.c ****                     } else {
 1381              		.loc 1 409 25 is_stmt 1 view .LVU381
 1382 01ca C4F30900 		ubfx	r0, r4, #0, #10
 1383              	.L180:
 411:tmk_core/common/action.c ****                     }
 1384              		.loc 1 411 25 is_stmt 0 view .LVU382
 1385 01ce FFF7FEFF 		bl	host_system_send
 1386              	.LVL136:
 1387 01d2 7AE7     		b	.L69
 1388              	.L108:
 411:tmk_core/common/action.c ****                     }
 1389              		.loc 1 411 25 is_stmt 1 view .LVU383
 1390 01d4 2846     		mov	r0, r5
 1391 01d6 FAE7     		b	.L180
 1392              	.L109:
 418:tmk_core/common/action.c ****                     }
 1393              		.loc 1 418 25 view .LVU384
 1394 01d8 2846     		mov	r0, r5
 1395 01da F2E7     		b	.L185
 1396              	.L76:
 427:tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1397              		.loc 1 427 13 view .LVU385
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 1398              		.loc 1 264 88 is_stmt 0 view .LVU386
 1399 01dc E0B2     		uxtb	r0, r4
 427:tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1400              		.loc 1 427 16 view .LVU387
 1401 01de 25B1     		cbz	r5, .L110
 428:tmk_core/common/action.c ****             } else {
 1402              		.loc 1 428 17 is_stmt 1 view .LVU388
 1403 01e0 FFF7FEFF 		bl	mousekey_on
 1404              	.LVL137:
 1405              	.L111:
 432:tmk_core/common/action.c **** #    if defined(PS2_MOUSE_ENABLE) || defined(POINTING_DEVICE_ENABLE)
 1406              		.loc 1 432 13 view .LVU389
 443:tmk_core/common/action.c ****                     break;
 1407              		.loc 1 443 21 view .LVU390
 1408 01e4 FFF7FEFF 		bl	mousekey_send
 1409              	.LVL138:
 444:tmk_core/common/action.c ****             }
 1410              		.loc 1 444 21 view .LVU391
 1411 01e8 6FE7     		b	.L69
 1412              	.L110:
 430:tmk_core/common/action.c ****             }
 1413              		.loc 1 430 17 view .LVU392
 1414 01ea FFF7FEFF 		bl	mousekey_off
 1415              	.LVL139:
 1416 01ee F9E7     		b	.L111
 1417              	.L75:
 450:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1418              		.loc 1 450 13 view .LVU393
 450:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1419              		.loc 1 450 16 is_stmt 0 view .LVU394
 1420 01f0 14F4407F 		tst	r4, #768
 1421 01f4 27D1     		bne	.L112
 452:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1422              		.loc 1 452 17 is_stmt 1 view .LVU395
 452:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1423              		.loc 1 452 20 is_stmt 0 view .LVU396
 1424 01f6 002D     		cmp	r5, #0
 1425 01f8 7FF467AF 		bne	.L69
 1426              	.LBB65:
 453:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1427              		.loc 1 453 21 is_stmt 1 view .LVU397
 1428              	.LVL140:
 454:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1429              		.loc 1 454 21 view .LVU398
 453:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1430              		.loc 1 453 61 is_stmt 0 view .LVU399
 1431 01fc C4F34210 		ubfx	r0, r4, #5, #3
 455:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1432              		.loc 1 455 104 view .LVU400
 1433 0200 E206     		lsls	r2, r4, #27
 453:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1434              		.loc 1 453 35 view .LVU401
 1435 0202 4FEA8000 		lsl	r0, r0, #2
 455:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1436              		.loc 1 455 94 view .LVU402
 1437 0206 48BF     		it	mi
 1438 0208 0F25     		movmi	r5, #15
 1439              	.LVL141:
 454:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1440              		.loc 1 454 84 view .LVU403
 1441 020a C0B2     		uxtb	r0, r0
 455:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1442              		.loc 1 455 94 view .LVU404
 1443 020c 48BF     		it	mi
 1444 020e 8540     		lslmi	r5, r5, r0
 454:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1445              		.loc 1 454 44 view .LVU405
 1446 0210 04F00F03 		and	r3, r4, #15
 456:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1447              		.loc 1 456 47 view .LVU406
 1448 0214 C4F38124 		ubfx	r4, r4, #10, #2
 1449              	.LVL142:
 455:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1450              		.loc 1 455 104 view .LVU407
 1451 0218 48BF     		it	mi
 1452 021a ED43     		mvnmi	r5, r5
 454:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1453              		.loc 1 454 35 view .LVU408
 1454 021c 8340     		lsls	r3, r3, r0
 1455              	.LVL143:
 455:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1456              		.loc 1 455 21 is_stmt 1 view .LVU409
 456:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1457              		.loc 1 456 21 view .LVU410
 1458 021e 022C     		cmp	r4, #2
 458:tmk_core/common/action.c ****                             break;
 1459              		.loc 1 458 29 is_stmt 0 view .LVU411
 1460 0220 45EA0300 		orr	r0, r5, r3
 1461 0224 09D0     		beq	.L114
 1462 0226 032C     		cmp	r4, #3
 1463 0228 0AD0     		beq	.L115
 1464 022a 012C     		cmp	r4, #1
 1465 022c 02D0     		beq	.L116
 458:tmk_core/common/action.c ****                             break;
 1466              		.loc 1 458 29 is_stmt 1 view .LVU412
 1467 022e FFF7FEFF 		bl	default_layer_and
 1468              	.LVL144:
 459:tmk_core/common/action.c ****                         case OP_BIT_OR:
 1469              		.loc 1 459 29 view .LVU413
 1470 0232 4AE7     		b	.L69
 1471              	.LVL145:
 1472              	.L116:
 461:tmk_core/common/action.c ****                             break;
 1473              		.loc 1 461 29 view .LVU414
 1474 0234 FFF7FEFF 		bl	default_layer_or
 1475              	.LVL146:
 462:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 1476              		.loc 1 462 29 view .LVU415
 1477 0238 47E7     		b	.L69
 1478              	.LVL147:
 1479              	.L114:
 464:tmk_core/common/action.c ****                             break;
 1480              		.loc 1 464 29 view .LVU416
 1481 023a FFF7FEFF 		bl	default_layer_xor
 1482              	.LVL148:
 465:tmk_core/common/action.c ****                         case OP_BIT_SET:
 1483              		.loc 1 465 29 view .LVU417
 1484 023e 44E7     		b	.L69
 1485              	.LVL149:
 1486              	.L115:
 467:tmk_core/common/action.c ****                             break;
 1487              		.loc 1 467 29 view .LVU418
 1488 0240 FFF7FEFF 		bl	default_layer_set
 1489              	.LVL150:
 468:tmk_core/common/action.c ****                     }
 1490              		.loc 1 468 29 view .LVU419
 1491 0244 41E7     		b	.L69
 1492              	.LVL151:
 1493              	.L112:
 468:tmk_core/common/action.c ****                     }
 1494              		.loc 1 468 29 is_stmt 0 view .LVU420
 1495              	.LBE65:
 473:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1496              		.loc 1 473 17 is_stmt 1 view .LVU421
 473:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1497              		.loc 1 473 56 is_stmt 0 view .LVU422
 1498 0246 C4F30122 		ubfx	r2, r4, #8, #2
 473:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1499              		.loc 1 473 21 view .LVU423
 1500 024a 05B3     		cbz	r5, .L117
 473:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1501              		.loc 1 473 20 discriminator 1 view .LVU424
 1502 024c 12F0010F 		tst	r2, #1
 1503              	.L175:
 473:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1504              		.loc 1 473 20 discriminator 2 view .LVU425
 1505 0250 3FF43BAF 		beq	.L69
 1506              	.LBB66:
 474:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1507              		.loc 1 474 21 is_stmt 1 view .LVU426
 1508              	.LVL152:
 475:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1509              		.loc 1 475 21 view .LVU427
 474:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1510              		.loc 1 474 61 is_stmt 0 view .LVU428
 1511 0254 C4F34213 		ubfx	r3, r4, #5, #3
 474:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1512              		.loc 1 474 35 view .LVU429
 1513 0258 9B00     		lsls	r3, r3, #2
 475:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1514              		.loc 1 475 84 view .LVU430
 1515 025a DBB2     		uxtb	r3, r3
 475:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1516              		.loc 1 475 44 view .LVU431
 1517 025c 04F00F00 		and	r0, r4, #15
 475:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1518              		.loc 1 475 35 view .LVU432
 1519 0260 00FA03F2 		lsl	r2, r0, r3
 1520              	.LVL153:
 476:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1521              		.loc 1 476 21 is_stmt 1 view .LVU433
 476:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1522              		.loc 1 476 104 is_stmt 0 view .LVU434
 1523 0264 14F01000 		ands	r0, r4, #16
 476:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1524              		.loc 1 476 94 view .LVU435
 1525 0268 1CBF     		itt	ne
 1526 026a 0F20     		movne	r0, #15
 1527 026c 9840     		lslne	r0, r0, r3
 477:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1528              		.loc 1 477 47 view .LVU436
 1529 026e C4F38124 		ubfx	r4, r4, #10, #2
 1530              	.LVL154:
 476:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1531              		.loc 1 476 104 view .LVU437
 1532 0272 14BF     		ite	ne
 1533 0274 C343     		mvnne	r3, r0
 1534 0276 0346     		moveq	r3, r0
 1535              	.LVL155:
 477:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1536              		.loc 1 477 21 is_stmt 1 view .LVU438
 1537 0278 022C     		cmp	r4, #2
 479:tmk_core/common/action.c ****                             break;
 1538              		.loc 1 479 29 is_stmt 0 view .LVU439
 1539 027a 43EA0200 		orr	r0, r3, r2
 1540 027e 0CD0     		beq	.L120
 1541 0280 032C     		cmp	r4, #3
 1542 0282 0DD0     		beq	.L121
 1543 0284 012C     		cmp	r4, #1
 1544 0286 05D0     		beq	.L122
 479:tmk_core/common/action.c ****                             break;
 1545              		.loc 1 479 29 is_stmt 1 view .LVU440
 1546 0288 FFF7FEFF 		bl	layer_and
 1547              	.LVL156:
 480:tmk_core/common/action.c ****                         case OP_BIT_OR:
 1548              		.loc 1 480 29 view .LVU441
 1549 028c 1DE7     		b	.L69
 1550              	.LVL157:
 1551              	.L117:
 480:tmk_core/common/action.c ****                         case OP_BIT_OR:
 1552              		.loc 1 480 29 is_stmt 0 view .LVU442
 1553              	.LBE66:
 473:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1554              		.loc 1 473 20 discriminator 2 view .LVU443
 1555 028e 12F0020F 		tst	r2, #2
 1556 0292 DDE7     		b	.L175
 1557              	.LVL158:
 1558              	.L122:
 1559              	.LBB67:
 482:tmk_core/common/action.c ****                             break;
 1560              		.loc 1 482 29 is_stmt 1 view .LVU444
 1561 0294 FFF7FEFF 		bl	layer_or
 1562              	.LVL159:
 483:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 1563              		.loc 1 483 29 view .LVU445
 1564 0298 17E7     		b	.L69
 1565              	.LVL160:
 1566              	.L120:
 485:tmk_core/common/action.c ****                             break;
 1567              		.loc 1 485 29 view .LVU446
 1568 029a FFF7FEFF 		bl	layer_xor
 1569              	.LVL161:
 486:tmk_core/common/action.c ****                         case OP_BIT_SET:
 1570              		.loc 1 486 29 view .LVU447
 1571 029e 14E7     		b	.L69
 1572              	.LVL162:
 1573              	.L121:
 488:tmk_core/common/action.c ****                             break;
 1574              		.loc 1 488 29 view .LVU448
 1575 02a0 FFF7FEFF 		bl	layer_state_set
 1576              	.LVL163:
 489:tmk_core/common/action.c ****                     }
 1577              		.loc 1 489 29 view .LVU449
 1578 02a4 11E7     		b	.L69
 1579              	.LVL164:
 1580              	.L74:
 489:tmk_core/common/action.c ****                     }
 1581              		.loc 1 489 29 is_stmt 0 view .LVU450
 1582              	.LBE67:
 495:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 1583              		.loc 1 495 13 is_stmt 1 view .LVU451
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 1584              		.loc 1 264 88 is_stmt 0 view .LVU452
 1585 02a6 E6B2     		uxtb	r6, r4
 1586              	.LBB68:
 278:tmk_core/common/action.c ****             if (event.pressed) {
 1587              		.loc 1 278 21 view .LVU453
 1588 02a8 C4F30324 		ubfx	r4, r4, #8, #4
 1589              	.LVL165:
 278:tmk_core/common/action.c ****             if (event.pressed) {
 1590              		.loc 1 278 21 view .LVU454
 1591              	.LBE68:
 495:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 1592              		.loc 1 495 16 view .LVU455
 1593 02ac 25B1     		cbz	r5, .L123
 496:tmk_core/common/action.c ****                 register_mods(action.layer_mods.mods);
 1594              		.loc 1 496 17 is_stmt 1 view .LVU456
 1595 02ae 2046     		mov	r0, r4
 1596 02b0 FFF7FEFF 		bl	layer_on
 1597              	.LVL166:
 497:tmk_core/common/action.c ****             } else {
 1598              		.loc 1 497 17 view .LVU457
 1599 02b4 3046     		mov	r0, r6
 1600 02b6 4DE7     		b	.L182
 1601              	.L123:
 499:tmk_core/common/action.c ****                 layer_off(action.layer_mods.layer);
 1602              		.loc 1 499 17 view .LVU458
 1603 02b8 3046     		mov	r0, r6
 1604 02ba FFF7FEFF 		bl	unregister_mods
 1605              	.LVL167:
 500:tmk_core/common/action.c ****             }
 1606              		.loc 1 500 17 view .LVU459
 1607 02be 2046     		mov	r0, r4
 1608              	.LVL168:
 1609              	.L179:
 587:tmk_core/common/action.c ****                         }
 1610              		.loc 1 587 29 is_stmt 0 view .LVU460
 1611 02c0 FFF7FEFF 		bl	layer_off
 1612              	.LVL169:
 1613 02c4 01E7     		b	.L69
 1614              	.L73:
 506:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 1615              		.loc 1 506 13 is_stmt 1 view .LVU461
 506:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 1616              		.loc 1 506 37 is_stmt 0 view .LVU462
 1617 02c6 5FFA84FA 		uxtb	r10, r4
 1618 02ca AAF1F003 		sub	r3, r10, #240
 1619 02ce 042B     		cmp	r3, #4
 1620 02d0 39D8     		bhi	.L124
 1621 02d2 DFE803F0 		tbb	[pc, r3]
 1622              	.L126:
 1623 02d6 03       		.byte	(.L130-.L126)/2
 1624 02d7 0E       		.byte	(.L129-.L126)/2
 1625 02d8 15       		.byte	(.L128-.L126)/2
 1626 02d9 1A       		.byte	(.L127-.L126)/2
 1627 02da 23       		.byte	(.L125-.L126)/2
 1628 02db 00       		.p2align 1
 1629              	.L130:
 509:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1630              		.loc 1 509 21 is_stmt 1 view .LVU463
 509:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1631              		.loc 1 509 24 is_stmt 0 view .LVU464
 1632 02dc 3DB1     		cbz	r5, .L131
 510:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1633              		.loc 1 510 25 is_stmt 1 view .LVU465
 510:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1634              		.loc 1 510 28 is_stmt 0 view .LVU466
 1635 02de 012E     		cmp	r6, #1
 1636              	.L177:
 1637 02e0 3FF6F3AE 		bhi	.L69
 511:tmk_core/common/action.c ****                         }
 1638              		.loc 1 511 29 is_stmt 1 view .LVU467
 1639 02e4 C4F30420 		ubfx	r0, r4, #8, #5
 1640 02e8 FFF7FEFF 		bl	layer_invert
 1641              	.LVL170:
 1642 02ec EDE6     		b	.L69
 1643              	.L131:
 514:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1644              		.loc 1 514 25 view .LVU468
 514:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1645              		.loc 1 514 28 is_stmt 0 view .LVU469
 1646 02ee 022E     		cmp	r6, #2
 1647 02f0 F6E7     		b	.L177
 1648              	.L129:
 520:tmk_core/common/action.c ****                     break;
 1649              		.loc 1 520 21 is_stmt 1 view .LVU470
 511:tmk_core/common/action.c ****                         }
 1650              		.loc 1 511 29 is_stmt 0 view .LVU471
 1651 02f2 C4F30420 		ubfx	r0, r4, #8, #5
 520:tmk_core/common/action.c ****                     break;
 1652              		.loc 1 520 68 view .LVU472
 1653 02f6 002D     		cmp	r5, #0
 1654 02f8 E2D0     		beq	.L179
 1655              	.L181:
 574:tmk_core/common/action.c ****                         }
 1656              		.loc 1 574 29 view .LVU473
 1657 02fa FFF7FEFF 		bl	layer_on
 1658              	.LVL171:
 1659 02fe E4E6     		b	.L69
 1660              	.L128:
 523:tmk_core/common/action.c ****                     break;
 1661              		.loc 1 523 21 is_stmt 1 view .LVU474
 511:tmk_core/common/action.c ****                         }
 1662              		.loc 1 511 29 is_stmt 0 view .LVU475
 1663 0300 C4F30420 		ubfx	r0, r4, #8, #5
 523:tmk_core/common/action.c ****                     break;
 1664              		.loc 1 523 69 view .LVU476
 1665 0304 002D     		cmp	r5, #0
 1666 0306 F8D0     		beq	.L181
 1667 0308 DAE7     		b	.L179
 1668              	.L127:
 526:tmk_core/common/action.c ****                     break;
 1669              		.loc 1 526 21 is_stmt 1 view .LVU477
 526:tmk_core/common/action.c ****                     break;
 1670              		.loc 1 526 70 is_stmt 0 view .LVU478
 1671 030a 25B1     		cbz	r5, .L135
 526:tmk_core/common/action.c ****                     break;
 1672              		.loc 1 526 37 discriminator 1 view .LVU479
 1673 030c C4F30420 		ubfx	r0, r4, #8, #5
 1674 0310 FFF7FEFF 		bl	layer_move
 1675              	.LVL172:
 1676 0314 D9E6     		b	.L69
 1677              	.L135:
 526:tmk_core/common/action.c ****                     break;
 1678              		.loc 1 526 72 discriminator 2 view .LVU480
 1679 0316 FFF7FEFF 		bl	layer_clear
 1680              	.LVL173:
 1681 031a D6E6     		b	.L69
 1682              	.L125:
 554:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1683              		.loc 1 554 21 is_stmt 1 view .LVU481
 554:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1684              		.loc 1 554 24 is_stmt 0 view .LVU482
 1685 031c 4DB1     		cbz	r5, .L136
 555:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1686              		.loc 1 555 25 is_stmt 1 view .LVU483
 1687 031e C4F30420 		ubfx	r0, r4, #8, #5
 1688 0322 0190     		str	r0, [sp, #4]
 1689 0324 FFF7FEFF 		bl	layer_on
 1690              	.LVL174:
 556:tmk_core/common/action.c ****                     } else {
 1691              		.loc 1 556 25 view .LVU484
 1692 0328 0198     		ldr	r0, [sp, #4]
 1693 032a 0321     		movs	r1, #3
 1694 032c FFF7FEFF 		bl	set_oneshot_layer
 1695              	.LVL175:
 1696 0330 CBE6     		b	.L69
 1697              	.L136:
 558:tmk_core/common/action.c ****                         if (tap_count > 1) {
 1698              		.loc 1 558 25 view .LVU485
 1699 0332 0120     		movs	r0, #1
 1700 0334 FFF7FEFF 		bl	clear_oneshot_layer_state
 1701              	.LVL176:
 559:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1702              		.loc 1 559 25 view .LVU486
 559:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1703              		.loc 1 559 28 is_stmt 0 view .LVU487
 1704 0338 012E     		cmp	r6, #1
 1705 033a 7FF6C6AE 		bls	.L69
 560:tmk_core/common/action.c ****                         }
 1706              		.loc 1 560 29 is_stmt 1 view .LVU488
 1707 033e 0220     		movs	r0, #2
 1708 0340 FFF7FEFF 		bl	clear_oneshot_layer_state
 1709              	.LVL177:
 1710 0344 C1E6     		b	.L69
 1711              	.L124:
 568:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1712              		.loc 1 568 21 view .LVU489
 568:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1713              		.loc 1 568 24 is_stmt 0 view .LVU490
 1714 0346 2DB1     		cbz	r5, .L137
 569:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1715              		.loc 1 569 25 is_stmt 1 view .LVU491
 569:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1716              		.loc 1 569 28 is_stmt 0 view .LVU492
 1717 0348 0EB1     		cbz	r6, .L138
 570:tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 1718              		.loc 1 570 75 is_stmt 1 view .LVU493
 571:tmk_core/common/action.c ****                         } else {
 1719              		.loc 1 571 29 view .LVU494
 1720 034a 5046     		mov	r0, r10
 1721 034c A8E6     		b	.L184
 1722              	.L138:
 573:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 1723              		.loc 1 573 76 view .LVU495
 574:tmk_core/common/action.c ****                         }
 1724              		.loc 1 574 29 view .LVU496
 1725 034e C4F30420 		ubfx	r0, r4, #8, #5
 1726 0352 D2E7     		b	.L181
 1727              	.L137:
 577:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1728              		.loc 1 577 25 view .LVU497
 577:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1729              		.loc 1 577 28 is_stmt 0 view .LVU498
 1730 0354 56B1     		cbz	r6, .L139
 578:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 1731              		.loc 1 578 77 is_stmt 1 view .LVU499
 579:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1732              		.loc 1 579 29 view .LVU500
 579:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1733              		.loc 1 579 32 is_stmt 0 view .LVU501
 1734 0356 BAF1390F 		cmp	r10, #57
 580:tmk_core/common/action.c ****                             } else {
 1735              		.loc 1 580 33 is_stmt 1 view .LVU502
 580:tmk_core/common/action.c ****                             } else {
 1736              		.loc 1 580 33 view .LVU503
 580:tmk_core/common/action.c ****                             } else {
 1737              		.loc 1 580 33 view .LVU504
 1738 035a 0CBF     		ite	eq
 1739 035c 4FF4FA50 		moveq	r0, #8000
 582:tmk_core/common/action.c ****                             }
 1740              		.loc 1 582 33 view .LVU505
 582:tmk_core/common/action.c ****                             }
 1741              		.loc 1 582 33 view .LVU506
 582:tmk_core/common/action.c ****                             }
 1742              		.loc 1 582 33 view .LVU507
 1743 0360 4FF47A70 		movne	r0, #1000
 1744 0364 FFF7FEFF 		bl	chThdSleep
 1745              	.LVL178:
 582:tmk_core/common/action.c ****                             }
 1746              		.loc 1 582 33 view .LVU508
 584:tmk_core/common/action.c ****                         } else {
 1747              		.loc 1 584 29 view .LVU509
 1748 0368 5046     		mov	r0, r10
 1749 036a 1DE7     		b	.L183
 1750              	.L139:
 586:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 1751              		.loc 1 586 79 view .LVU510
 587:tmk_core/common/action.c ****                         }
 1752              		.loc 1 587 29 view .LVU511
 1753 036c C4F30420 		ubfx	r0, r4, #8, #5
 1754 0370 A6E7     		b	.L179
 1755              	.L72:
 598:tmk_core/common/action.c ****             break;
 1756              		.loc 1 598 13 view .LVU512
 1757 0372 C4F30322 		ubfx	r2, r4, #8, #4
 1758 0376 E1B2     		uxtb	r1, r4
 1759 0378 4046     		mov	r0, r8
 1760 037a FFF7FEFF 		bl	action_get_macro
 1761              	.LVL179:
 1762 037e FFF7FEFF 		bl	action_macro_play
 1763              	.LVL180:
 599:tmk_core/common/action.c **** #endif
 1764              		.loc 1 599 13 view .LVU513
 1765 0382 A2E6     		b	.L69
 1766              	.L70:
 676:tmk_core/common/action.c ****             break;
 1767              		.loc 1 676 13 view .LVU514
 1768 0384 C4F30322 		ubfx	r2, r4, #8, #4
 1769 0388 E1B2     		uxtb	r1, r4
 1770 038a 4046     		mov	r0, r8
 1771 038c FFF7FEFF 		bl	action_function
 1772              	.LVL181:
 677:tmk_core/common/action.c **** #endif
 1773              		.loc 1 677 13 view .LVU515
 1774 0390 9BE6     		b	.L69
 1775              	.LVL182:
 1776              	.L66:
 745:tmk_core/common/action.c **** 
 1777              		.loc 1 745 1 is_stmt 0 view .LVU516
 1778 0392 02B0     		add	sp, sp, #8
 1779              		.cfi_def_cfa_offset 32
 1780              		@ sp needed
 1781 0394 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 745:tmk_core/common/action.c **** 
 1782              		.loc 1 745 1 view .LVU517
 1783              		.cfi_endproc
 1784              	.LFE295:
 1786              		.section	.text.process_record_handler,"ax",%progbits
 1787              		.align	1
 1788              		.global	process_record_handler
 1789              		.syntax unified
 1790              		.thumb
 1791              		.thumb_func
 1792              		.fpu fpv4-sp-d16
 1794              	process_record_handler:
 1795              	.LVL183:
 1796              	.LFB294:
 214:tmk_core/common/action.c **** #ifdef COMBO_ENABLE
 1797              		.loc 1 214 50 is_stmt 1 view -0
 1798              		.cfi_startproc
 1799              		@ args = 0, pretend = 0, frame = 8
 1800              		@ frame_needed = 0, uses_anonymous_args = 0
 223:tmk_core/common/action.c **** #endif
 1801              		.loc 1 223 5 view .LVU519
 214:tmk_core/common/action.c **** #ifdef COMBO_ENABLE
 1802              		.loc 1 214 50 is_stmt 0 view .LVU520
 1803 0000 13B5     		push	{r0, r1, r4, lr}
 1804              		.cfi_def_cfa_offset 16
 1805              		.cfi_offset 4, -8
 1806              		.cfi_offset 14, -4
 223:tmk_core/common/action.c **** #endif
 1807              		.loc 1 223 23 view .LVU521
 1808 0002 0188     		ldrh	r1, [r0]
 214:tmk_core/common/action.c **** #ifdef COMBO_ENABLE
 1809              		.loc 1 214 50 view .LVU522
 1810 0004 0446     		mov	r4, r0
 223:tmk_core/common/action.c **** #endif
 1811              		.loc 1 223 23 view .LVU523
 1812 0006 8078     		ldrb	r0, [r0, #2]	@ zero_extendqisi2
 1813              	.LVL184:
 223:tmk_core/common/action.c **** #endif
 1814              		.loc 1 223 23 view .LVU524
 1815 0008 FFF7FEFF 		bl	store_or_get_action
 1816              	.LVL185:
 1817 000c 0146     		mov	r1, r0	@ movhi
 1818              	.LVL186:
 223:tmk_core/common/action.c **** #endif
 1819              		.loc 1 223 23 view .LVU525
 1820 000e 0191     		str	r1, [sp, #4]
 225:tmk_core/common/action.c ****     debug_action(action);
 1821              		.loc 1 225 23 is_stmt 1 view .LVU526
 226:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 1822              		.loc 1 226 5 view .LVU527
 940:tmk_core/common/action.c **** 
 941:tmk_core/common/action.c **** /** \brief Adds the given weak modifiers and sends a keyboard report immediately.
 942:tmk_core/common/action.c ****  *
 943:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to register.
 944:tmk_core/common/action.c ****  */
 945:tmk_core/common/action.c **** void register_weak_mods(uint8_t mods) {
 946:tmk_core/common/action.c ****     if (mods) {
 947:tmk_core/common/action.c ****         add_weak_mods(mods);
 948:tmk_core/common/action.c ****         send_keyboard_report();
 949:tmk_core/common/action.c ****     }
 950:tmk_core/common/action.c **** }
 951:tmk_core/common/action.c **** 
 952:tmk_core/common/action.c **** /** \brief Removes the given weak modifiers and sends a keyboard report immediately.
 953:tmk_core/common/action.c ****  *
 954:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to unregister.
 955:tmk_core/common/action.c ****  */
 956:tmk_core/common/action.c **** void unregister_weak_mods(uint8_t mods) {
 957:tmk_core/common/action.c ****     if (mods) {
 958:tmk_core/common/action.c ****         del_weak_mods(mods);
 959:tmk_core/common/action.c ****         send_keyboard_report();
 960:tmk_core/common/action.c ****     }
 961:tmk_core/common/action.c **** }
 962:tmk_core/common/action.c **** 
 963:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 964:tmk_core/common/action.c ****  *
 965:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 966:tmk_core/common/action.c ****  */
 967:tmk_core/common/action.c **** void clear_keyboard(void) {
 968:tmk_core/common/action.c ****     clear_mods();
 969:tmk_core/common/action.c ****     clear_keyboard_but_mods();
 970:tmk_core/common/action.c **** }
 971:tmk_core/common/action.c **** 
 972:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 973:tmk_core/common/action.c ****  *
 974:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 975:tmk_core/common/action.c ****  */
 976:tmk_core/common/action.c **** void clear_keyboard_but_mods(void) {
 977:tmk_core/common/action.c ****     clear_keys();
 978:tmk_core/common/action.c ****     clear_keyboard_but_mods_and_keys();
 979:tmk_core/common/action.c **** }
 980:tmk_core/common/action.c **** 
 981:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 982:tmk_core/common/action.c ****  *
 983:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 984:tmk_core/common/action.c ****  */
 985:tmk_core/common/action.c **** void clear_keyboard_but_mods_and_keys() {
 986:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 987:tmk_core/common/action.c ****     host_system_send(0);
 988:tmk_core/common/action.c ****     host_consumer_send(0);
 989:tmk_core/common/action.c **** #endif
 990:tmk_core/common/action.c ****     clear_weak_mods();
 991:tmk_core/common/action.c ****     clear_macro_mods();
 992:tmk_core/common/action.c ****     send_keyboard_report();
 993:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 994:tmk_core/common/action.c ****     mousekey_clear();
 995:tmk_core/common/action.c ****     mousekey_send();
 996:tmk_core/common/action.c **** #endif
 997:tmk_core/common/action.c **** }
 998:tmk_core/common/action.c **** 
 999:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
1000:tmk_core/common/action.c ****  *
1001:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1002:tmk_core/common/action.c ****  */
1003:tmk_core/common/action.c **** bool is_tap_key(keypos_t key) {
1004:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
1005:tmk_core/common/action.c ****     return is_tap_action(action);
1006:tmk_core/common/action.c **** }
1007:tmk_core/common/action.c **** 
1008:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
1009:tmk_core/common/action.c ****  *
1010:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1011:tmk_core/common/action.c ****  */
1012:tmk_core/common/action.c **** bool is_tap_record(keyrecord_t *record) {
1013:tmk_core/common/action.c **** #ifdef COMBO_ENABLE
1014:tmk_core/common/action.c ****     action_t action;
1015:tmk_core/common/action.c ****     if (record->keycode) {
1016:tmk_core/common/action.c ****         action = action_for_keycode(record->keycode);
1017:tmk_core/common/action.c ****     } else {
1018:tmk_core/common/action.c ****         action = layer_switch_get_action(record->event.key);
1019:tmk_core/common/action.c ****     }
1020:tmk_core/common/action.c **** #else
1021:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(record->event.key);
1022:tmk_core/common/action.c **** #endif
1023:tmk_core/common/action.c ****     return is_tap_action(action);
1024:tmk_core/common/action.c **** }
1025:tmk_core/common/action.c **** 
1026:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
1027:tmk_core/common/action.c ****  *
1028:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1029:tmk_core/common/action.c ****  */
1030:tmk_core/common/action.c **** bool is_tap_action(action_t action) {
1031:tmk_core/common/action.c ****     switch (action.kind.id) {
1032:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
1033:tmk_core/common/action.c ****         case ACT_RMODS_TAP:
1034:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
1035:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
1036:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
1037:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
1038:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
1039:tmk_core/common/action.c ****                 case OP_ONESHOT:
1040:tmk_core/common/action.c ****                     return true;
1041:tmk_core/common/action.c ****             }
1042:tmk_core/common/action.c ****             return false;
1043:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
1044:tmk_core/common/action.c ****             switch (action.swap.code) {
1045:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
1046:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
1047:tmk_core/common/action.c ****                     return true;
1048:tmk_core/common/action.c ****             }
1049:tmk_core/common/action.c ****             return false;
1050:tmk_core/common/action.c ****         case ACT_MACRO:
1051:tmk_core/common/action.c ****         case ACT_FUNCTION:
1052:tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) {
1053:tmk_core/common/action.c ****                 return true;
1054:tmk_core/common/action.c ****             }
1055:tmk_core/common/action.c ****             return false;
1056:tmk_core/common/action.c ****     }
1057:tmk_core/common/action.c ****     return false;
1058:tmk_core/common/action.c **** }
1059:tmk_core/common/action.c **** 
1060:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
1061:tmk_core/common/action.c ****  *
1062:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1063:tmk_core/common/action.c ****  */
1064:tmk_core/common/action.c **** void debug_event(keyevent_t event) { dprintf("%04X%c(%u)", (event.key.row << 8 | event.key.col), (e
1065:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
1066:tmk_core/common/action.c ****  *
1067:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1068:tmk_core/common/action.c ****  */
1069:tmk_core/common/action.c **** void debug_record(keyrecord_t record) {
1070:tmk_core/common/action.c ****     debug_event(record.event);
1071:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
1072:tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
1073:tmk_core/common/action.c **** #endif
1074:tmk_core/common/action.c **** }
1075:tmk_core/common/action.c **** 
1076:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
1077:tmk_core/common/action.c ****  *
1078:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1079:tmk_core/common/action.c ****  */
1080:tmk_core/common/action.c **** void debug_action(action_t action) {
1081:tmk_core/common/action.c ****     switch (action.kind.id) {
 1823              		.loc 1 1081 5 view .LVU528
1082:tmk_core/common/action.c ****         case ACT_LMODS:
1083:tmk_core/common/action.c ****             dprint("ACT_LMODS");
1084:tmk_core/common/action.c ****             break;
1085:tmk_core/common/action.c ****         case ACT_RMODS:
1086:tmk_core/common/action.c ****             dprint("ACT_RMODS");
1087:tmk_core/common/action.c ****             break;
1088:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
1089:tmk_core/common/action.c ****             dprint("ACT_LMODS_TAP");
1090:tmk_core/common/action.c ****             break;
1091:tmk_core/common/action.c ****         case ACT_RMODS_TAP:
1092:tmk_core/common/action.c ****             dprint("ACT_RMODS_TAP");
1093:tmk_core/common/action.c ****             break;
1094:tmk_core/common/action.c ****         case ACT_USAGE:
1095:tmk_core/common/action.c ****             dprint("ACT_USAGE");
1096:tmk_core/common/action.c ****             break;
1097:tmk_core/common/action.c ****         case ACT_MOUSEKEY:
1098:tmk_core/common/action.c ****             dprint("ACT_MOUSEKEY");
1099:tmk_core/common/action.c ****             break;
1100:tmk_core/common/action.c ****         case ACT_LAYER:
1101:tmk_core/common/action.c ****             dprint("ACT_LAYER");
1102:tmk_core/common/action.c ****             break;
1103:tmk_core/common/action.c ****         case ACT_LAYER_MODS:
1104:tmk_core/common/action.c ****             dprint("ACT_LAYER_MODS");
1105:tmk_core/common/action.c ****             break;
1106:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
1107:tmk_core/common/action.c ****             dprint("ACT_LAYER_TAP");
1108:tmk_core/common/action.c ****             break;
1109:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
1110:tmk_core/common/action.c ****             dprint("ACT_LAYER_TAP_EXT");
1111:tmk_core/common/action.c ****             break;
1112:tmk_core/common/action.c ****         case ACT_MACRO:
1113:tmk_core/common/action.c ****             dprint("ACT_MACRO");
1114:tmk_core/common/action.c ****             break;
1115:tmk_core/common/action.c ****         case ACT_FUNCTION:
1116:tmk_core/common/action.c ****             dprint("ACT_FUNCTION");
1117:tmk_core/common/action.c ****             break;
1118:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
1119:tmk_core/common/action.c ****             dprint("ACT_SWAP_HANDS");
1120:tmk_core/common/action.c ****             break;
1121:tmk_core/common/action.c ****         default:
1122:tmk_core/common/action.c ****             dprint("UNKNOWN");
1123:tmk_core/common/action.c ****             break;
1124:tmk_core/common/action.c ****     }
1125:tmk_core/common/action.c ****     dprintf("[%X:%02X]", action.kind.param >> 8, action.kind.param & 0xff);
 1824              		.loc 1 1125 75 view .LVU529
 228:tmk_core/common/action.c ****     layer_debug();
 1825              		.loc 1 228 29 view .LVU530
 229:tmk_core/common/action.c ****     dprint(" default_layer_state: ");
 1826              		.loc 1 229 5 view .LVU531
 1827 0010 FFF7FEFF 		bl	layer_debug
 1828              	.LVL187:
 230:tmk_core/common/action.c ****     default_layer_debug();
 1829              		.loc 1 230 37 view .LVU532
 231:tmk_core/common/action.c **** #endif
 1830              		.loc 1 231 5 view .LVU533
 1831 0014 FFF7FEFF 		bl	default_layer_debug
 1832              	.LVL188:
 233:tmk_core/common/action.c **** 
 1833              		.loc 1 233 15 view .LVU534
 235:tmk_core/common/action.c **** }
 1834              		.loc 1 235 5 view .LVU535
 1835 0018 0199     		ldr	r1, [sp, #4]
 235:tmk_core/common/action.c **** }
 1836              		.loc 1 235 5 is_stmt 0 view .LVU536
 1837 001a 2046     		mov	r0, r4
 236:tmk_core/common/action.c **** 
 1838              		.loc 1 236 1 view .LVU537
 1839 001c 02B0     		add	sp, sp, #8
 1840              		.cfi_def_cfa_offset 8
 1841              		@ sp needed
 1842 001e BDE81040 		pop	{r4, lr}
 1843              		.cfi_restore 14
 1844              		.cfi_restore 4
 1845              		.cfi_def_cfa_offset 0
 1846              	.LVL189:
 235:tmk_core/common/action.c **** }
 1847              		.loc 1 235 5 view .LVU538
 1848 0022 FFF7FEBF 		b	process_action
 1849              	.LVL190:
 235:tmk_core/common/action.c **** }
 1850              		.loc 1 235 5 view .LVU539
 1851              		.cfi_endproc
 1852              	.LFE294:
 1854              		.section	.text.process_record,"ax",%progbits
 1855              		.align	1
 1856              		.global	process_record
 1857              		.syntax unified
 1858              		.thumb
 1859              		.thumb_func
 1860              		.fpu fpv4-sp-d16
 1862              	process_record:
 1863              	.LVL191:
 1864              	.LFB293:
 196:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 1865              		.loc 1 196 42 is_stmt 1 view -0
 1866              		.cfi_startproc
 1867              		@ args = 0, pretend = 0, frame = 8
 1868              		@ frame_needed = 0, uses_anonymous_args = 0
 197:tmk_core/common/action.c ****         return;
 1869              		.loc 1 197 5 view .LVU541
 196:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 1870              		.loc 1 196 42 is_stmt 0 view .LVU542
 1871 0000 13B5     		push	{r0, r1, r4, lr}
 1872              		.cfi_def_cfa_offset 16
 1873              		.cfi_offset 4, -8
 1874              		.cfi_offset 14, -4
 196:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 1875              		.loc 1 196 42 view .LVU543
 1876 0002 0446     		mov	r4, r0
 1877 0004 0068     		ldr	r0, [r0]	@ unaligned
 1878              	.LVL192:
 1879              	.LBB75:
 1880              	.LBB76:
 1881              		.loc 2 47 74 view .LVU544
 1882 0006 A388     		ldrh	r3, [r4, #4]
 1883 0008 0090     		str	r0, [sp]
 1884              	.LVL193:
 1885              		.loc 2 47 74 view .LVU545
 1886              	.LBE76:
 1887              	.LBI75:
 1888              		.loc 2 47 20 is_stmt 1 view .LVU546
 1889              	.LBB77:
 1890              		.loc 2 47 51 view .LVU547
 1891              		.loc 2 47 74 is_stmt 0 view .LVU548
 1892 000a D3B1     		cbz	r3, .L188
 1893              		.loc 2 47 99 view .LVU549
 1894 000c BDF80020 		ldrh	r2, [sp]
 1895              	.LVL194:
 1896              		.loc 2 47 99 view .LVU550
 1897              	.LBE77:
 1898              	.LBE75:
 197:tmk_core/common/action.c ****         return;
 1899              		.loc 1 197 8 view .LVU551
 1900 0010 4FF6FF73 		movw	r3, #65535
 1901 0014 9A42     		cmp	r2, r3
 1902 0016 14D0     		beq	.L188
 1903              	.LVL195:
 1904              	.LBB78:
 1905              	.LBI78:
 196:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 1906              		.loc 1 196 6 is_stmt 1 view .LVU552
 1907              	.LBB79:
 201:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 1908              		.loc 1 201 5 view .LVU553
 201:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 1909              		.loc 1 201 10 is_stmt 0 view .LVU554
 1910 0018 2046     		mov	r0, r4
 1911 001a FFF7FEFF 		bl	process_record_quantum
 1912              	.LVL196:
 201:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 1913              		.loc 1 201 8 view .LVU555
 1914 001e 50B9     		cbnz	r0, .L192
 203:tmk_core/common/action.c ****             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1915              		.loc 1 203 9 is_stmt 1 view .LVU556
 203:tmk_core/common/action.c ****             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1916              		.loc 1 203 13 is_stmt 0 view .LVU557
 1917 0020 FFF7FEFF 		bl	is_oneshot_layer_active
 1918              	.LVL197:
 203:tmk_core/common/action.c ****             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1919              		.loc 1 203 12 view .LVU558
 1920 0024 68B1     		cbz	r0, .L188
 203:tmk_core/common/action.c ****             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1921              		.loc 1 203 39 view .LVU559
 1922 0026 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1923 0028 5BB1     		cbz	r3, .L188
 204:tmk_core/common/action.c ****         }
 1924              		.loc 1 204 13 is_stmt 1 view .LVU560
 1925 002a 0220     		movs	r0, #2
 1926              	.LBE79:
 1927              	.LBE78:
 212:tmk_core/common/action.c **** 
 1928              		.loc 1 212 1 is_stmt 0 view .LVU561
 1929 002c 02B0     		add	sp, sp, #8
 1930              		.cfi_remember_state
 1931              		.cfi_def_cfa_offset 8
 1932              		@ sp needed
 1933 002e BDE81040 		pop	{r4, lr}
 1934              		.cfi_restore 14
 1935              		.cfi_restore 4
 1936              		.cfi_def_cfa_offset 0
 1937              	.LVL198:
 1938              	.LBB81:
 1939              	.LBB80:
 204:tmk_core/common/action.c ****         }
 1940              		.loc 1 204 13 view .LVU562
 1941 0032 FFF7FEBF 		b	clear_oneshot_layer_state
 1942              	.LVL199:
 1943              	.L192:
 1944              		.cfi_restore_state
 210:tmk_core/common/action.c ****     post_process_record_quantum(record);
 1945              		.loc 1 210 5 is_stmt 1 view .LVU563
 1946 0036 2046     		mov	r0, r4
 1947 0038 FFF7FEFF 		bl	process_record_handler
 1948              	.LVL200:
 211:tmk_core/common/action.c **** }
 1949              		.loc 1 211 5 view .LVU564
 1950 003c 2046     		mov	r0, r4
 1951 003e FFF7FEFF 		bl	post_process_record_quantum
 1952              	.LVL201:
 1953              	.L188:
 211:tmk_core/common/action.c **** }
 1954              		.loc 1 211 5 is_stmt 0 view .LVU565
 1955              	.LBE80:
 1956              	.LBE81:
 212:tmk_core/common/action.c **** 
 1957              		.loc 1 212 1 view .LVU566
 1958 0042 02B0     		add	sp, sp, #8
 1959              		.cfi_def_cfa_offset 8
 1960              		@ sp needed
 1961 0044 10BD     		pop	{r4, pc}
 212:tmk_core/common/action.c **** 
 1962              		.loc 1 212 1 view .LVU567
 1963              		.cfi_endproc
 1964              	.LFE293:
 1966              		.section	.text.process_record_nocache,"ax",%progbits
 1967              		.align	1
 1968              		.global	process_record_nocache
 1969              		.syntax unified
 1970              		.thumb
 1971              		.thumb_func
 1972              		.fpu fpv4-sp-d16
 1974              	process_record_nocache:
 1975              	.LVL202:
 1976              	.LFB289:
 154:tmk_core/common/action.c ****     disable_action_cache = true;
 1977              		.loc 1 154 50 is_stmt 1 view -0
 1978              		.cfi_startproc
 1979              		@ args = 0, pretend = 0, frame = 0
 1980              		@ frame_needed = 0, uses_anonymous_args = 0
 155:tmk_core/common/action.c ****     process_record(record);
 1981              		.loc 1 155 5 view .LVU569
 154:tmk_core/common/action.c ****     disable_action_cache = true;
 1982              		.loc 1 154 50 is_stmt 0 view .LVU570
 1983 0000 10B5     		push	{r4, lr}
 1984              		.cfi_def_cfa_offset 8
 1985              		.cfi_offset 4, -8
 1986              		.cfi_offset 14, -4
 155:tmk_core/common/action.c ****     process_record(record);
 1987              		.loc 1 155 26 view .LVU571
 1988 0002 044C     		ldr	r4, .L201
 1989 0004 0123     		movs	r3, #1
 1990 0006 2370     		strb	r3, [r4]
 156:tmk_core/common/action.c ****     disable_action_cache = false;
 1991              		.loc 1 156 5 is_stmt 1 view .LVU572
 1992 0008 FFF7FEFF 		bl	process_record
 1993              	.LVL203:
 157:tmk_core/common/action.c **** }
 1994              		.loc 1 157 5 view .LVU573
 157:tmk_core/common/action.c **** }
 1995              		.loc 1 157 26 is_stmt 0 view .LVU574
 1996 000c 0023     		movs	r3, #0
 1997 000e 2370     		strb	r3, [r4]
 158:tmk_core/common/action.c **** #else
 1998              		.loc 1 158 1 view .LVU575
 1999 0010 10BD     		pop	{r4, pc}
 2000              	.L202:
 2001 0012 00BF     		.align	2
 2002              	.L201:
 2003 0014 00000000 		.word	.LANCHOR1
 2004              		.cfi_endproc
 2005              	.LFE289:
 2007              		.section	.text.register_weak_mods,"ax",%progbits
 2008              		.align	1
 2009              		.global	register_weak_mods
 2010              		.syntax unified
 2011              		.thumb
 2012              		.thumb_func
 2013              		.fpu fpv4-sp-d16
 2015              	register_weak_mods:
 2016              	.LVL204:
 2017              	.LFB302:
 945:tmk_core/common/action.c ****     if (mods) {
 2018              		.loc 1 945 39 is_stmt 1 view -0
 2019              		.cfi_startproc
 2020              		@ args = 0, pretend = 0, frame = 0
 2021              		@ frame_needed = 0, uses_anonymous_args = 0
 946:tmk_core/common/action.c ****         add_weak_mods(mods);
 2022              		.loc 1 946 5 view .LVU577
 945:tmk_core/common/action.c ****     if (mods) {
 2023              		.loc 1 945 39 is_stmt 0 view .LVU578
 2024 0000 08B5     		push	{r3, lr}
 2025              		.cfi_def_cfa_offset 8
 2026              		.cfi_offset 3, -8
 2027              		.cfi_offset 14, -4
 946:tmk_core/common/action.c ****         add_weak_mods(mods);
 2028              		.loc 1 946 8 view .LVU579
 2029 0002 28B1     		cbz	r0, .L203
 947:tmk_core/common/action.c ****         send_keyboard_report();
 2030              		.loc 1 947 9 is_stmt 1 view .LVU580
 2031 0004 FFF7FEFF 		bl	add_weak_mods
 2032              	.LVL205:
 948:tmk_core/common/action.c ****     }
 2033              		.loc 1 948 9 view .LVU581
 950:tmk_core/common/action.c **** 
 2034              		.loc 1 950 1 is_stmt 0 view .LVU582
 2035 0008 BDE80840 		pop	{r3, lr}
 2036              		.cfi_remember_state
 2037              		.cfi_restore 14
 2038              		.cfi_restore 3
 2039              		.cfi_def_cfa_offset 0
 948:tmk_core/common/action.c ****     }
 2040              		.loc 1 948 9 view .LVU583
 2041 000c FFF7FEBF 		b	send_keyboard_report
 2042              	.LVL206:
 2043              	.L203:
 2044              		.cfi_restore_state
 950:tmk_core/common/action.c **** 
 2045              		.loc 1 950 1 view .LVU584
 2046 0010 08BD     		pop	{r3, pc}
 2047              		.cfi_endproc
 2048              	.LFE302:
 2050              		.section	.text.unregister_weak_mods,"ax",%progbits
 2051              		.align	1
 2052              		.global	unregister_weak_mods
 2053              		.syntax unified
 2054              		.thumb
 2055              		.thumb_func
 2056              		.fpu fpv4-sp-d16
 2058              	unregister_weak_mods:
 2059              	.LVL207:
 2060              	.LFB303:
 956:tmk_core/common/action.c ****     if (mods) {
 2061              		.loc 1 956 41 is_stmt 1 view -0
 2062              		.cfi_startproc
 2063              		@ args = 0, pretend = 0, frame = 0
 2064              		@ frame_needed = 0, uses_anonymous_args = 0
 957:tmk_core/common/action.c ****         del_weak_mods(mods);
 2065              		.loc 1 957 5 view .LVU586
 956:tmk_core/common/action.c ****     if (mods) {
 2066              		.loc 1 956 41 is_stmt 0 view .LVU587
 2067 0000 08B5     		push	{r3, lr}
 2068              		.cfi_def_cfa_offset 8
 2069              		.cfi_offset 3, -8
 2070              		.cfi_offset 14, -4
 957:tmk_core/common/action.c ****         del_weak_mods(mods);
 2071              		.loc 1 957 8 view .LVU588
 2072 0002 28B1     		cbz	r0, .L205
 958:tmk_core/common/action.c ****         send_keyboard_report();
 2073              		.loc 1 958 9 is_stmt 1 view .LVU589
 2074 0004 FFF7FEFF 		bl	del_weak_mods
 2075              	.LVL208:
 959:tmk_core/common/action.c ****     }
 2076              		.loc 1 959 9 view .LVU590
 961:tmk_core/common/action.c **** 
 2077              		.loc 1 961 1 is_stmt 0 view .LVU591
 2078 0008 BDE80840 		pop	{r3, lr}
 2079              		.cfi_remember_state
 2080              		.cfi_restore 14
 2081              		.cfi_restore 3
 2082              		.cfi_def_cfa_offset 0
 959:tmk_core/common/action.c ****     }
 2083              		.loc 1 959 9 view .LVU592
 2084 000c FFF7FEBF 		b	send_keyboard_report
 2085              	.LVL209:
 2086              	.L205:
 2087              		.cfi_restore_state
 961:tmk_core/common/action.c **** 
 2088              		.loc 1 961 1 view .LVU593
 2089 0010 08BD     		pop	{r3, pc}
 2090              		.cfi_endproc
 2091              	.LFE303:
 2093              		.section	.text.clear_keyboard_but_mods_and_keys,"ax",%progbits
 2094              		.align	1
 2095              		.global	clear_keyboard_but_mods_and_keys
 2096              		.syntax unified
 2097              		.thumb
 2098              		.thumb_func
 2099              		.fpu fpv4-sp-d16
 2101              	clear_keyboard_but_mods_and_keys:
 2102              	.LFB306:
 985:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 2103              		.loc 1 985 41 is_stmt 1 view -0
 2104              		.cfi_startproc
 2105              		@ args = 0, pretend = 0, frame = 0
 2106              		@ frame_needed = 0, uses_anonymous_args = 0
 987:tmk_core/common/action.c ****     host_consumer_send(0);
 2107              		.loc 1 987 5 view .LVU595
 985:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 2108              		.loc 1 985 41 is_stmt 0 view .LVU596
 2109 0000 08B5     		push	{r3, lr}
 2110              		.cfi_def_cfa_offset 8
 2111              		.cfi_offset 3, -8
 2112              		.cfi_offset 14, -4
 987:tmk_core/common/action.c ****     host_consumer_send(0);
 2113              		.loc 1 987 5 view .LVU597
 2114 0002 0020     		movs	r0, #0
 2115 0004 FFF7FEFF 		bl	host_system_send
 2116              	.LVL210:
 988:tmk_core/common/action.c **** #endif
 2117              		.loc 1 988 5 is_stmt 1 view .LVU598
 2118 0008 0020     		movs	r0, #0
 2119 000a FFF7FEFF 		bl	host_consumer_send
 2120              	.LVL211:
 990:tmk_core/common/action.c ****     clear_macro_mods();
 2121              		.loc 1 990 5 view .LVU599
 2122 000e FFF7FEFF 		bl	clear_weak_mods
 2123              	.LVL212:
 991:tmk_core/common/action.c ****     send_keyboard_report();
 2124              		.loc 1 991 5 view .LVU600
 2125 0012 FFF7FEFF 		bl	clear_macro_mods
 2126              	.LVL213:
 992:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 2127              		.loc 1 992 5 view .LVU601
 2128 0016 FFF7FEFF 		bl	send_keyboard_report
 2129              	.LVL214:
 994:tmk_core/common/action.c ****     mousekey_send();
 2130              		.loc 1 994 5 view .LVU602
 2131 001a FFF7FEFF 		bl	mousekey_clear
 2132              	.LVL215:
 995:tmk_core/common/action.c **** #endif
 2133              		.loc 1 995 5 view .LVU603
 997:tmk_core/common/action.c **** 
 2134              		.loc 1 997 1 is_stmt 0 view .LVU604
 2135 001e BDE80840 		pop	{r3, lr}
 2136              		.cfi_restore 14
 2137              		.cfi_restore 3
 2138              		.cfi_def_cfa_offset 0
 995:tmk_core/common/action.c **** #endif
 2139              		.loc 1 995 5 view .LVU605
 2140 0022 FFF7FEBF 		b	mousekey_send
 2141              	.LVL216:
 2142              		.cfi_endproc
 2143              	.LFE306:
 2145              		.section	.text.clear_keyboard_but_mods,"ax",%progbits
 2146              		.align	1
 2147              		.global	clear_keyboard_but_mods
 2148              		.syntax unified
 2149              		.thumb
 2150              		.thumb_func
 2151              		.fpu fpv4-sp-d16
 2153              	clear_keyboard_but_mods:
 2154              	.LFB305:
 976:tmk_core/common/action.c ****     clear_keys();
 2155              		.loc 1 976 36 is_stmt 1 view -0
 2156              		.cfi_startproc
 2157              		@ args = 0, pretend = 0, frame = 0
 2158              		@ frame_needed = 0, uses_anonymous_args = 0
 977:tmk_core/common/action.c ****     clear_keyboard_but_mods_and_keys();
 2159              		.loc 1 977 5 view .LVU607
 976:tmk_core/common/action.c ****     clear_keys();
 2160              		.loc 1 976 36 is_stmt 0 view .LVU608
 2161 0000 08B5     		push	{r3, lr}
 2162              		.cfi_def_cfa_offset 8
 2163              		.cfi_offset 3, -8
 2164              		.cfi_offset 14, -4
 977:tmk_core/common/action.c ****     clear_keyboard_but_mods_and_keys();
 2165              		.loc 1 977 5 view .LVU609
 2166 0002 FFF7FEFF 		bl	clear_keys
 2167              	.LVL217:
 978:tmk_core/common/action.c **** }
 2168              		.loc 1 978 5 is_stmt 1 view .LVU610
 979:tmk_core/common/action.c **** 
 2169              		.loc 1 979 1 is_stmt 0 view .LVU611
 2170 0006 BDE80840 		pop	{r3, lr}
 2171              		.cfi_restore 14
 2172              		.cfi_restore 3
 2173              		.cfi_def_cfa_offset 0
 978:tmk_core/common/action.c **** }
 2174              		.loc 1 978 5 view .LVU612
 2175 000a FFF7FEBF 		b	clear_keyboard_but_mods_and_keys
 2176              	.LVL218:
 2177              		.cfi_endproc
 2178              	.LFE305:
 2180              		.section	.text.clear_keyboard,"ax",%progbits
 2181              		.align	1
 2182              		.global	clear_keyboard
 2183              		.syntax unified
 2184              		.thumb
 2185              		.thumb_func
 2186              		.fpu fpv4-sp-d16
 2188              	clear_keyboard:
 2189              	.LFB304:
 967:tmk_core/common/action.c ****     clear_mods();
 2190              		.loc 1 967 27 is_stmt 1 view -0
 2191              		.cfi_startproc
 2192              		@ args = 0, pretend = 0, frame = 0
 2193              		@ frame_needed = 0, uses_anonymous_args = 0
 968:tmk_core/common/action.c ****     clear_keyboard_but_mods();
 2194              		.loc 1 968 5 view .LVU614
 967:tmk_core/common/action.c ****     clear_mods();
 2195              		.loc 1 967 27 is_stmt 0 view .LVU615
 2196 0000 08B5     		push	{r3, lr}
 2197              		.cfi_def_cfa_offset 8
 2198              		.cfi_offset 3, -8
 2199              		.cfi_offset 14, -4
 968:tmk_core/common/action.c ****     clear_keyboard_but_mods();
 2200              		.loc 1 968 5 view .LVU616
 2201 0002 FFF7FEFF 		bl	clear_mods
 2202              	.LVL219:
 969:tmk_core/common/action.c **** }
 2203              		.loc 1 969 5 is_stmt 1 view .LVU617
 970:tmk_core/common/action.c **** 
 2204              		.loc 1 970 1 is_stmt 0 view .LVU618
 2205 0006 BDE80840 		pop	{r3, lr}
 2206              		.cfi_restore 14
 2207              		.cfi_restore 3
 2208              		.cfi_def_cfa_offset 0
 969:tmk_core/common/action.c **** }
 2209              		.loc 1 969 5 view .LVU619
 2210 000a FFF7FEBF 		b	clear_keyboard_but_mods
 2211              	.LVL220:
 2212              		.cfi_endproc
 2213              	.LFE304:
 2215              		.section	.text.is_tap_action,"ax",%progbits
 2216              		.align	1
 2217              		.global	is_tap_action
 2218              		.syntax unified
 2219              		.thumb
 2220              		.thumb_func
 2221              		.fpu fpv4-sp-d16
 2223              	is_tap_action:
 2224              	.LVL221:
 2225              	.LFB309:
1030:tmk_core/common/action.c ****     switch (action.kind.id) {
 2226              		.loc 1 1030 37 is_stmt 1 view -0
 2227              		.cfi_startproc
 2228              		@ args = 0, pretend = 0, frame = 0
 2229              		@ frame_needed = 0, uses_anonymous_args = 0
 2230              		@ link register save eliminated.
1030:tmk_core/common/action.c ****     switch (action.kind.id) {
 2231              		.loc 1 1030 37 is_stmt 0 view .LVU621
 2232 0000 C0F30332 		ubfx	r2, r0, #12, #4
 2233 0004 023A     		subs	r2, r2, #2
 2234 0006 C3B2     		uxtb	r3, r0
 2235              	.LVL222:
1031:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 2236              		.loc 1 1031 5 is_stmt 1 view .LVU622
 2237 0008 0D2A     		cmp	r2, #13
 2238 000a 1CD8     		bhi	.L217
 2239 000c DFE802F0 		tbb	[pc, r2]
 2240              	.L213:
 2241 0010 07       		.byte	(.L214-.L213)/2
 2242 0011 07       		.byte	(.L214-.L213)/2
 2243 0012 1B       		.byte	(.L217-.L213)/2
 2244 0013 1B       		.byte	(.L217-.L213)/2
 2245 0014 14       		.byte	(.L215-.L213)/2
 2246 0015 1B       		.byte	(.L217-.L213)/2
 2247 0016 1B       		.byte	(.L217-.L213)/2
 2248 0017 1B       		.byte	(.L217-.L213)/2
 2249 0018 07       		.byte	(.L214-.L213)/2
 2250 0019 07       		.byte	(.L214-.L213)/2
 2251 001a 18       		.byte	(.L212-.L213)/2
 2252 001b 1B       		.byte	(.L217-.L213)/2
 2253 001c 1B       		.byte	(.L217-.L213)/2
 2254 001d 18       		.byte	(.L212-.L213)/2
 2255              		.p2align 1
 2256              	.L214:
1036:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 2257              		.loc 1 1036 13 view .LVU623
 2258 001e F02B     		cmp	r3, #240
 2259 0020 13D0     		beq	.L219
 2260 0022 04D8     		bhi	.L216
 2261 0024 E72B     		cmp	r3, #231
 2262 0026 8CBF     		ite	hi
 2263 0028 0020     		movhi	r0, #0
 2264              	.LVL223:
1036:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 2265              		.loc 1 1036 13 is_stmt 0 view .LVU624
 2266 002a 0120     		movls	r0, #1
 2267 002c 7047     		bx	lr
 2268              	.LVL224:
 2269              	.L216:
1036:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 2270              		.loc 1 1036 13 view .LVU625
 2271 002e F42B     		cmp	r3, #244
 2272              	.L220:
 2273 0030 14BF     		ite	ne
 2274 0032 0020     		movne	r0, #0
 2275              	.LVL225:
1036:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 2276              		.loc 1 1036 13 view .LVU626
 2277 0034 0120     		moveq	r0, #1
 2278 0036 7047     		bx	lr
 2279              	.LVL226:
 2280              	.L215:
1044:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 2281              		.loc 1 1044 13 is_stmt 1 view .LVU627
 2282 0038 E72B     		cmp	r3, #231
 2283 003a 06D9     		bls	.L219
 2284 003c F12B     		cmp	r3, #241
 2285 003e F7E7     		b	.L220
 2286              	.L212:
1052:tmk_core/common/action.c ****                 return true;
 2287              		.loc 1 1052 13 view .LVU628
1052:tmk_core/common/action.c ****                 return true;
 2288              		.loc 1 1052 16 is_stmt 0 view .LVU629
 2289 0040 C0F3C020 		ubfx	r0, r0, #11, #1
 2290              	.LVL227:
1052:tmk_core/common/action.c ****                 return true;
 2291              		.loc 1 1052 16 view .LVU630
 2292 0044 7047     		bx	lr
 2293              	.LVL228:
 2294              	.L217:
1031:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 2295              		.loc 1 1031 24 view .LVU631
 2296 0046 0020     		movs	r0, #0
 2297              	.LVL229:
1031:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 2298              		.loc 1 1031 24 view .LVU632
 2299 0048 7047     		bx	lr
 2300              	.LVL230:
 2301              	.L219:
1040:tmk_core/common/action.c ****             }
 2302              		.loc 1 1040 28 view .LVU633
 2303 004a 0120     		movs	r0, #1
 2304              	.LVL231:
1058:tmk_core/common/action.c **** 
 2305              		.loc 1 1058 1 view .LVU634
 2306 004c 7047     		bx	lr
 2307              		.cfi_endproc
 2308              	.LFE309:
 2310              		.section	.text.is_tap_key,"ax",%progbits
 2311              		.align	1
 2312              		.global	is_tap_key
 2313              		.syntax unified
 2314              		.thumb
 2315              		.thumb_func
 2316              		.fpu fpv4-sp-d16
 2318              	is_tap_key:
 2319              	.LFB307:
1003:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 2320              		.loc 1 1003 31 is_stmt 1 view -0
 2321              		.cfi_startproc
 2322              		@ args = 0, pretend = 0, frame = 8
 2323              		@ frame_needed = 0, uses_anonymous_args = 0
1004:tmk_core/common/action.c ****     return is_tap_action(action);
 2324              		.loc 1 1004 5 view .LVU636
1003:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 2325              		.loc 1 1003 31 is_stmt 0 view .LVU637
 2326 0000 07B5     		push	{r0, r1, r2, lr}
 2327              		.cfi_def_cfa_offset 16
 2328              		.cfi_offset 14, -4
1003:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 2329              		.loc 1 1003 31 view .LVU638
 2330 0002 ADF80400 		strh	r0, [sp, #4]	@ movhi
1004:tmk_core/common/action.c ****     return is_tap_action(action);
 2331              		.loc 1 1004 23 view .LVU639
 2332 0006 0198     		ldr	r0, [sp, #4]
 2333 0008 FFF7FEFF 		bl	layer_switch_get_action
 2334              	.LVL232:
1005:tmk_core/common/action.c **** }
 2335              		.loc 1 1005 5 is_stmt 1 view .LVU640
1006:tmk_core/common/action.c **** 
 2336              		.loc 1 1006 1 is_stmt 0 view .LVU641
 2337 000c 03B0     		add	sp, sp, #12
 2338              		.cfi_def_cfa_offset 4
 2339              		@ sp needed
 2340 000e 5DF804EB 		ldr	lr, [sp], #4
 2341              		.cfi_restore 14
 2342              		.cfi_def_cfa_offset 0
1005:tmk_core/common/action.c **** }
 2343              		.loc 1 1005 12 view .LVU642
 2344 0012 FFF7FEBF 		b	is_tap_action
 2345              	.LVL233:
 2346              		.cfi_endproc
 2347              	.LFE307:
 2349              		.section	.text.is_tap_record,"ax",%progbits
 2350              		.align	1
 2351              		.global	is_tap_record
 2352              		.syntax unified
 2353              		.thumb
 2354              		.thumb_func
 2355              		.fpu fpv4-sp-d16
 2357              	is_tap_record:
 2358              	.LVL234:
 2359              	.LFB308:
1012:tmk_core/common/action.c **** #ifdef COMBO_ENABLE
 2360              		.loc 1 1012 41 is_stmt 1 view -0
 2361              		.cfi_startproc
 2362              		@ args = 0, pretend = 0, frame = 0
 2363              		@ frame_needed = 0, uses_anonymous_args = 0
1021:tmk_core/common/action.c **** #endif
 2364              		.loc 1 1021 5 view .LVU644
1012:tmk_core/common/action.c **** #ifdef COMBO_ENABLE
 2365              		.loc 1 1012 41 is_stmt 0 view .LVU645
 2366 0000 08B5     		push	{r3, lr}
 2367              		.cfi_def_cfa_offset 8
 2368              		.cfi_offset 3, -8
 2369              		.cfi_offset 14, -4
1021:tmk_core/common/action.c **** #endif
 2370              		.loc 1 1021 23 view .LVU646
 2371 0002 0088     		ldrh	r0, [r0]
 2372              	.LVL235:
1021:tmk_core/common/action.c **** #endif
 2373              		.loc 1 1021 23 view .LVU647
 2374 0004 FFF7FEFF 		bl	layer_switch_get_action
 2375              	.LVL236:
1023:tmk_core/common/action.c **** }
 2376              		.loc 1 1023 5 is_stmt 1 view .LVU648
1024:tmk_core/common/action.c **** 
 2377              		.loc 1 1024 1 is_stmt 0 view .LVU649
 2378 0008 BDE80840 		pop	{r3, lr}
 2379              		.cfi_restore 14
 2380              		.cfi_restore 3
 2381              		.cfi_def_cfa_offset 0
1023:tmk_core/common/action.c **** }
 2382              		.loc 1 1023 12 view .LVU650
 2383 000c FFF7FEBF 		b	is_tap_action
 2384              	.LVL237:
 2385              		.cfi_endproc
 2386              	.LFE308:
 2388              		.section	.text.debug_event,"ax",%progbits
 2389              		.align	1
 2390              		.global	debug_event
 2391              		.syntax unified
 2392              		.thumb
 2393              		.thumb_func
 2394              		.fpu fpv4-sp-d16
 2396              	debug_event:
 2397              	.LFB310:
1064:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 2398              		.loc 1 1064 36 is_stmt 1 view -0
 2399              		.cfi_startproc
 2400              		@ args = 0, pretend = 0, frame = 8
 2401              		@ frame_needed = 0, uses_anonymous_args = 0
 2402              		@ link register save eliminated.
1064:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 2403              		.loc 1 1064 138 view .LVU652
1064:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 2404              		.loc 1 1064 36 is_stmt 0 view .LVU653
 2405 0000 82B0     		sub	sp, sp, #8
 2406              		.cfi_def_cfa_offset 8
1064:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 2407              		.loc 1 1064 36 view .LVU654
 2408 0002 02AB     		add	r3, sp, #8
 2409 0004 03E90300 		stmdb	r3, {r0, r1}
1064:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 2410              		.loc 1 1064 140 view .LVU655
 2411 0008 02B0     		add	sp, sp, #8
 2412              		.cfi_def_cfa_offset 0
 2413              		@ sp needed
 2414 000a 7047     		bx	lr
 2415              		.cfi_endproc
 2416              	.LFE310:
 2418              		.section	.text.debug_record,"ax",%progbits
 2419              		.align	1
 2420              		.global	debug_record
 2421              		.syntax unified
 2422              		.thumb
 2423              		.thumb_func
 2424              		.fpu fpv4-sp-d16
 2426              	debug_record:
 2427              	.LFB311:
1069:tmk_core/common/action.c ****     debug_event(record.event);
 2428              		.loc 1 1069 39 is_stmt 1 view -0
 2429              		.cfi_startproc
 2430              		@ args = 0, pretend = 0, frame = 8
 2431              		@ frame_needed = 0, uses_anonymous_args = 0
 2432              		@ link register save eliminated.
1070:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 2433              		.loc 1 1070 5 view .LVU657
1064:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 2434              		.loc 1 1064 138 view .LVU658
1072:tmk_core/common/action.c **** #endif
 2435              		.loc 1 1072 77 view .LVU659
1069:tmk_core/common/action.c ****     debug_event(record.event);
 2436              		.loc 1 1069 39 is_stmt 0 view .LVU660
 2437 0000 82B0     		sub	sp, sp, #8
 2438              		.cfi_def_cfa_offset 8
1069:tmk_core/common/action.c ****     debug_event(record.event);
 2439              		.loc 1 1069 39 view .LVU661
 2440 0002 02AB     		add	r3, sp, #8
 2441 0004 03E90300 		stmdb	r3, {r0, r1}
1074:tmk_core/common/action.c **** 
 2442              		.loc 1 1074 1 view .LVU662
 2443 0008 02B0     		add	sp, sp, #8
 2444              		.cfi_def_cfa_offset 0
 2445              		@ sp needed
 2446 000a 7047     		bx	lr
 2447              		.cfi_endproc
 2448              	.LFE311:
 2450              		.section	.text.debug_action,"ax",%progbits
 2451              		.align	1
 2452              		.global	debug_action
 2453              		.syntax unified
 2454              		.thumb
 2455              		.thumb_func
 2456              		.fpu fpv4-sp-d16
 2458              	debug_action:
 2459              	.LVL238:
 2460              	.LFB312:
1080:tmk_core/common/action.c ****     switch (action.kind.id) {
 2461              		.loc 1 1080 36 is_stmt 1 view -0
 2462              		.cfi_startproc
 2463              		@ args = 0, pretend = 0, frame = 0
 2464              		@ frame_needed = 0, uses_anonymous_args = 0
 2465              		@ link register save eliminated.
1081:tmk_core/common/action.c ****         case ACT_LMODS:
 2466              		.loc 1 1081 5 view .LVU664
 2467              		.loc 1 1125 75 view .LVU665
1126:tmk_core/common/action.c **** }
 2468              		.loc 1 1126 1 is_stmt 0 view .LVU666
 2469 0000 7047     		bx	lr
 2470              		.cfi_endproc
 2471              	.LFE312:
 2473              		.global	disable_action_cache
 2474              		.comm	tp_buttons,4,4
 2475              		.section	.bss.disable_action_cache,"aw",%nobits
 2476              		.set	.LANCHOR1,. + 0
 2479              	disable_action_cache:
 2480 0000 00       		.space	1
 2481              		.section	.rodata.CSWTCH.14,"a"
 2482              		.align	1
 2483              		.set	.LANCHOR0,. + 0
 2486              	CSWTCH.14:
 2487 0000 E200     		.short	226
 2488 0002 E900     		.short	233
 2489 0004 EA00     		.short	234
 2490 0006 B500     		.short	181
 2491 0008 B600     		.short	182
 2492 000a B700     		.short	183
 2493 000c CD00     		.short	205
 2494 000e 8301     		.short	387
 2495 0010 CC00     		.short	204
 2496 0012 8A01     		.short	394
 2497 0014 9201     		.short	402
 2498 0016 9401     		.short	404
 2499 0018 2102     		.short	545
 2500 001a 2302     		.short	547
 2501 001c 2402     		.short	548
 2502 001e 2502     		.short	549
 2503 0020 2602     		.short	550
 2504 0022 2702     		.short	551
 2505 0024 2A02     		.short	554
 2506 0026 B300     		.short	179
 2507 0028 B400     		.short	180
 2508 002a 6F00     		.short	111
 2509 002c 7000     		.short	112
 2510              		.text
 2511              	.Letext0:
 2512              		.file 4 "c:\\qmk_msys\\mingw64\\arm-none-eabi\\include\\machine\\_default_types.h"
 2513              		.file 5 "c:\\qmk_msys\\mingw64\\arm-none-eabi\\include\\sys\\_stdint.h"
 2514              		.file 6 "tmk_core/common/keycode.h"
 2515              		.file 7 "./lib/chibios/os/rt/include/chtime.h"
 2516              		.file 8 "tmk_core/common/action_code.h"
 2517              		.file 9 "tmk_core/common/action.h"
 2518              		.file 10 "tmk_core/common/action_layer.h"
 2519              		.file 11 "tmk_core/common/action_util.h"
 2520              		.file 12 "tmk_core/common/host.h"
 2521              		.file 13 "quantum/mousekey.h"
 2522              		.file 14 "./lib/chibios/os/rt/include/chthreads.h"
 2523              		.file 15 "quantum/led.h"
 2524              		.file 16 "tmk_core/common/action_macro.h"
 2525              		.file 17 "tmk_core/common/action_tapping.h"
 2526              		.file 18 "quantum/command.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:18     .text.pre_process_record_quantum:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:26     .text.pre_process_record_quantum:0000000000000000 pre_process_record_quantum
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:38     .text.action_exec:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:45     .text.action_exec:0000000000000000 action_exec
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:134    .text.process_record_quantum:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:141    .text.process_record_quantum:0000000000000000 process_record_quantum
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:159    .text.post_process_record_quantum:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:166    .text.post_process_record_quantum:0000000000000000 post_process_record_quantum
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:180    .text.process_record_tap_hint:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:187    .text.process_record_tap_hint:0000000000000000 process_record_tap_hint
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:206    .text.register_code:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:213    .text.register_code:0000000000000000 register_code
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:511    .text.register_code:0000000000000100 $d
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:517    .text.unregister_code:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:524    .text.unregister_code:0000000000000000 unregister_code
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:743    .text.tap_code_delay:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:750    .text.tap_code_delay:0000000000000000 tap_code_delay
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:819    .text.tap_code:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:826    .text.tap_code:0000000000000000 tap_code
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:846    .text.register_mods:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:853    .text.register_mods:0000000000000000 register_mods
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:889    .text.unregister_mods:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:896    .text.unregister_mods:0000000000000000 unregister_mods
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:932    .text.process_action:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:939    .text.process_action:0000000000000000 process_action
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:1017   .text.process_action:000000000000004e $d
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:1034   .text.process_action:000000000000006e $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:1862   .text.process_record:0000000000000000 process_record
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:1623   .text.process_action:00000000000002d6 $d
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:1787   .text.process_record_handler:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:1794   .text.process_record_handler:0000000000000000 process_record_handler
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:1855   .text.process_record:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:1967   .text.process_record_nocache:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:1974   .text.process_record_nocache:0000000000000000 process_record_nocache
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2003   .text.process_record_nocache:0000000000000014 $d
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2008   .text.register_weak_mods:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2015   .text.register_weak_mods:0000000000000000 register_weak_mods
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2051   .text.unregister_weak_mods:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2058   .text.unregister_weak_mods:0000000000000000 unregister_weak_mods
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2094   .text.clear_keyboard_but_mods_and_keys:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2101   .text.clear_keyboard_but_mods_and_keys:0000000000000000 clear_keyboard_but_mods_and_keys
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2146   .text.clear_keyboard_but_mods:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2153   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2181   .text.clear_keyboard:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2188   .text.clear_keyboard:0000000000000000 clear_keyboard
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2216   .text.is_tap_action:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2223   .text.is_tap_action:0000000000000000 is_tap_action
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2241   .text.is_tap_action:0000000000000010 $d
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2255   .text.is_tap_action:000000000000001e $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2311   .text.is_tap_key:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2318   .text.is_tap_key:0000000000000000 is_tap_key
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2350   .text.is_tap_record:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2357   .text.is_tap_record:0000000000000000 is_tap_record
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2389   .text.debug_event:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2396   .text.debug_event:0000000000000000 debug_event
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2419   .text.debug_record:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2426   .text.debug_record:0000000000000000 debug_record
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2451   .text.debug_action:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2458   .text.debug_action:0000000000000000 debug_action
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2479   .bss.disable_action_cache:0000000000000000 disable_action_cache
                            *COM*:0000000000000004 tp_buttons
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2480   .bss.disable_action_cache:0000000000000000 $d
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2482   .rodata.CSWTCH.14:0000000000000000 $d
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:2486   .rodata.CSWTCH.14:0000000000000000 CSWTCH.14
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:1628   .text.process_action:00000000000002db $d
C:\Users\lhanj\AppData\Local\Temp\ccxFvmAy.s:1628   .text.process_action:00000000000002dc $t

UNDEFINED SYMBOLS
clear_weak_mods
action_tapping_process
layer_switch_get_action
host_keyboard_leds
add_key
send_keyboard_report
chThdSleep
del_key
command_proc
is_key_pressed
add_mods
host_system_send
host_consumer_send
mousekey_on
mousekey_send
keyboard_report
del_mods
mousekey_off
is_oneshot_layer_active
clear_oneshot_layer_state
add_weak_mods
led_set
get_oneshot_layer_state
get_oneshot_layer
layer_on
layer_off
del_weak_mods
get_oneshot_mods
set_oneshot_mods
clear_oneshot_mods
default_layer_and
default_layer_or
default_layer_xor
default_layer_set
layer_and
layer_or
layer_xor
layer_state_set
layer_invert
layer_move
layer_clear
set_oneshot_layer
action_get_macro
action_macro_play
action_function
store_or_get_action
layer_debug
default_layer_debug
clear_macro_mods
mousekey_clear
clear_keys
clear_mods

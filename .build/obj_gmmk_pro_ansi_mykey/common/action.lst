   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"action.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.pre_process_record_quantum,"ax",%progbits
  18              		.align	1
  19              		.weak	pre_process_record_quantum
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	pre_process_record_quantum:
  27              	.LFB317:
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 0120     		movs	r0, #1
  33 0002 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE317:
  37              		.section	.text.action_exec,"ax",%progbits
  38              		.align	1
  39              		.global	action_exec
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu fpv4-sp-d16
  45              	action_exec:
  46              	.LFB288:
  47              		.file 1 "tmk_core/common/action.c"
   1:tmk_core/common/action.c **** /*
   2:tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action.c **** 
   4:tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action.c **** (at your option) any later version.
   8:tmk_core/common/action.c **** 
   9:tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action.c **** GNU General Public License for more details.
  13:tmk_core/common/action.c **** 
  14:tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action.c **** */
  17:tmk_core/common/action.c **** #include "host.h"
  18:tmk_core/common/action.c **** #include "keycode.h"
  19:tmk_core/common/action.c **** #include "keyboard.h"
  20:tmk_core/common/action.c **** #include "mousekey.h"
  21:tmk_core/common/action.c **** #include "command.h"
  22:tmk_core/common/action.c **** #include "led.h"
  23:tmk_core/common/action.c **** #include "action_layer.h"
  24:tmk_core/common/action.c **** #include "action_tapping.h"
  25:tmk_core/common/action.c **** #include "action_macro.h"
  26:tmk_core/common/action.c **** #include "action_util.h"
  27:tmk_core/common/action.c **** #include "action.h"
  28:tmk_core/common/action.c **** #include "wait.h"
  29:tmk_core/common/action.c **** 
  30:tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
  31:tmk_core/common/action.c **** #    include "backlight.h"
  32:tmk_core/common/action.c **** #endif
  33:tmk_core/common/action.c **** 
  34:tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  35:tmk_core/common/action.c **** #    include "debug.h"
  36:tmk_core/common/action.c **** #else
  37:tmk_core/common/action.c **** #    include "nodebug.h"
  38:tmk_core/common/action.c **** #endif
  39:tmk_core/common/action.c **** 
  40:tmk_core/common/action.c **** #ifdef POINTING_DEVICE_ENABLE
  41:tmk_core/common/action.c **** #    include "pointing_device.h"
  42:tmk_core/common/action.c **** #endif
  43:tmk_core/common/action.c **** 
  44:tmk_core/common/action.c **** int tp_buttons;
  45:tmk_core/common/action.c **** 
  46:tmk_core/common/action.c **** #if defined(RETRO_TAPPING) || defined(RETRO_TAPPING_PER_KEY)
  47:tmk_core/common/action.c **** int retro_tapping_counter = 0;
  48:tmk_core/common/action.c **** #endif
  49:tmk_core/common/action.c **** 
  50:tmk_core/common/action.c **** #ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
  51:tmk_core/common/action.c **** __attribute__((weak)) bool get_ignore_mod_tap_interrupt(uint16_t keycode, keyrecord_t *record) { re
  52:tmk_core/common/action.c **** #endif
  53:tmk_core/common/action.c **** 
  54:tmk_core/common/action.c **** #ifdef RETRO_TAPPING_PER_KEY
  55:tmk_core/common/action.c **** __attribute__((weak)) bool get_retro_tapping(uint16_t keycode, keyrecord_t *record) { return false;
  56:tmk_core/common/action.c **** #endif
  57:tmk_core/common/action.c **** 
  58:tmk_core/common/action.c **** __attribute__((weak)) bool pre_process_record_quantum(keyrecord_t *record) { return true; }
  59:tmk_core/common/action.c **** 
  60:tmk_core/common/action.c **** #ifndef TAP_CODE_DELAY
  61:tmk_core/common/action.c **** #    define TAP_CODE_DELAY 0
  62:tmk_core/common/action.c **** #endif
  63:tmk_core/common/action.c **** #ifndef TAP_HOLD_CAPS_DELAY
  64:tmk_core/common/action.c **** #    define TAP_HOLD_CAPS_DELAY 80
  65:tmk_core/common/action.c **** #endif
  66:tmk_core/common/action.c **** /** \brief Called to execute an action.
  67:tmk_core/common/action.c ****  *
  68:tmk_core/common/action.c ****  * FIXME: Needs documentation.
  69:tmk_core/common/action.c ****  */
  70:tmk_core/common/action.c **** void action_exec(keyevent_t event) {
  48              		.loc 1 70 36 view -0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 24
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		.loc 1 70 36 is_stmt 0 view .LVU1
  53 0000 30B5     		push	{r4, r5, lr}
  54              		.cfi_def_cfa_offset 12
  55              		.cfi_offset 4, -12
  56              		.cfi_offset 5, -8
  57              		.cfi_offset 14, -4
  58 0002 87B0     		sub	sp, sp, #28
  59              		.cfi_def_cfa_offset 40
  60              	.LVL0:
  71:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  61              		.loc 1 71 5 is_stmt 1 view .LVU2
  70:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  62              		.loc 1 70 36 is_stmt 0 view .LVU3
  63 0004 6C46     		mov	r4, sp
  64 0006 84E80300 		stm	r4, {r0, r1}
  65              	.LVL1:
  72:tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  73:tmk_core/common/action.c ****         dprint("EVENT: ");
  74:tmk_core/common/action.c ****         debug_event(event);
  75:tmk_core/common/action.c ****         dprintln();
  76:tmk_core/common/action.c **** #if defined(RETRO_TAPPING) || defined(RETRO_TAPPING_PER_KEY)
  77:tmk_core/common/action.c ****         retro_tapping_counter++;
  78:tmk_core/common/action.c **** #endif
  79:tmk_core/common/action.c ****     }
  80:tmk_core/common/action.c **** 
  81:tmk_core/common/action.c ****     if (event.pressed) {
  66              		.loc 1 81 8 view .LVU4
  67 000a 9DF80230 		ldrb	r3, [sp, #2]	@ zero_extendqisi2
  68 000e BDF80450 		ldrh	r5, [sp, #4]
  69              	.LVL2:
  70              	.LBB16:
  71              	.LBI16:
  72              		.file 2 "tmk_core/common/keyboard.h"
   1:tmk_core/common/keyboard.h **** /*
   2:tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/keyboard.h **** 
   4:tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/keyboard.h **** (at your option) any later version.
   8:tmk_core/common/keyboard.h **** 
   9:tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:tmk_core/common/keyboard.h **** 
  14:tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/keyboard.h **** */
  17:tmk_core/common/keyboard.h **** 
  18:tmk_core/common/keyboard.h **** #pragma once
  19:tmk_core/common/keyboard.h **** 
  20:tmk_core/common/keyboard.h **** #include <stdbool.h>
  21:tmk_core/common/keyboard.h **** #include <stdint.h>
  22:tmk_core/common/keyboard.h **** 
  23:tmk_core/common/keyboard.h **** #ifdef __cplusplus
  24:tmk_core/common/keyboard.h **** extern "C" {
  25:tmk_core/common/keyboard.h **** #endif
  26:tmk_core/common/keyboard.h **** 
  27:tmk_core/common/keyboard.h **** /* key matrix position */
  28:tmk_core/common/keyboard.h **** typedef struct {
  29:tmk_core/common/keyboard.h ****     uint8_t col;
  30:tmk_core/common/keyboard.h ****     uint8_t row;
  31:tmk_core/common/keyboard.h **** } keypos_t;
  32:tmk_core/common/keyboard.h **** 
  33:tmk_core/common/keyboard.h **** /* key event */
  34:tmk_core/common/keyboard.h **** typedef struct {
  35:tmk_core/common/keyboard.h ****     keypos_t key;
  36:tmk_core/common/keyboard.h ****     bool     pressed;
  37:tmk_core/common/keyboard.h ****     uint16_t time;
  38:tmk_core/common/keyboard.h **** } keyevent_t;
  39:tmk_core/common/keyboard.h **** 
  40:tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  41:tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb) ((keya).row == (keyb).row && (keya).col == (keyb).col)
  42:tmk_core/common/keyboard.h **** 
  43:tmk_core/common/keyboard.h **** /* Rules for No Event:
  44:tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  45:tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  46:tmk_core/common/keyboard.h ****  */
  47:tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
  73              		.loc 2 47 20 is_stmt 1 view .LVU5
  74              	.LBE16:
  75              		.loc 2 47 51 view .LVU6
  75:tmk_core/common/action.c **** #if defined(RETRO_TAPPING) || defined(RETRO_TAPPING_PER_KEY)
  76              		.loc 1 75 19 view .LVU7
  77              		.loc 1 81 5 view .LVU8
  78              		.loc 1 81 8 is_stmt 0 view .LVU9
  79 0012 0BB1     		cbz	r3, .L3
  82:tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
  83:tmk_core/common/action.c ****         clear_weak_mods();
  80              		.loc 1 83 9 is_stmt 1 view .LVU10
  81 0014 FFF7FEFF 		bl	clear_weak_mods
  82              	.LVL3:
  83              	.L3:
  84:tmk_core/common/action.c ****     }
  85:tmk_core/common/action.c **** 
  86:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
  87:tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  88:tmk_core/common/action.c ****         process_hand_swap(&event);
  89:tmk_core/common/action.c ****     }
  90:tmk_core/common/action.c **** #endif
  91:tmk_core/common/action.c **** 
  92:tmk_core/common/action.c ****     keyrecord_t record = {.event = event};
  84              		.loc 1 92 5 view .LVU11
  85              		.loc 1 92 17 is_stmt 0 view .LVU12
  86 0018 0023     		movs	r3, #0
  87 001a ADF81630 		strh	r3, [sp, #22]	@ movhi
  88 001e 94E80300 		ldm	r4, {r0, r1}
  89 0022 04AC     		add	r4, sp, #16
  90 0024 0490     		str	r0, [sp, #16]
  91 0026 ADF81410 		strh	r1, [sp, #20]	@ movhi
  93:tmk_core/common/action.c **** 
  94:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
  95:tmk_core/common/action.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  96:tmk_core/common/action.c ****     if (has_oneshot_layer_timed_out()) {
  97:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
  98:tmk_core/common/action.c ****     }
  99:tmk_core/common/action.c ****     if (has_oneshot_mods_timed_out()) {
 100:tmk_core/common/action.c ****         clear_oneshot_mods();
 101:tmk_core/common/action.c ****     }
 102:tmk_core/common/action.c **** #        ifdef SWAP_HANDS_ENABLE
 103:tmk_core/common/action.c ****     if (has_oneshot_swaphands_timed_out()) {
 104:tmk_core/common/action.c ****         clear_oneshot_swaphands();
 105:tmk_core/common/action.c ****     }
 106:tmk_core/common/action.c **** #        endif
 107:tmk_core/common/action.c **** #    endif
 108:tmk_core/common/action.c **** #endif
 109:tmk_core/common/action.c **** 
 110:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 111:tmk_core/common/action.c ****     if (IS_NOEVENT(record.event) || pre_process_record_quantum(&record)) {
  92              		.loc 1 111 5 is_stmt 1 view .LVU13
  93 002a 94E80300 		ldm	r4, {r0, r1}
  94 002e 0290     		str	r0, [sp, #8]
  95              	.LVL4:
  96              	.LBB17:
  97              	.LBI17:
  98              		.loc 2 47 20 view .LVU14
  99              	.LBB18:
 100              		.loc 2 47 51 view .LVU15
 101              		.loc 2 47 74 is_stmt 0 view .LVU16
 102 0030 4DB1     		cbz	r5, .L5
 103              		.loc 2 47 99 view .LVU17
 104 0032 BDF80820 		ldrh	r2, [sp, #8]
 105              	.LVL5:
 106              		.loc 2 47 99 view .LVU18
 107              	.LBE18:
 108              	.LBE17:
 109              		.loc 1 111 8 view .LVU19
 110 0036 4FF6FF73 		movw	r3, #65535
 111 003a 9A42     		cmp	r2, r3
 112 003c 03D0     		beq	.L5
 113              		.loc 1 111 37 discriminator 1 view .LVU20
 114 003e 2046     		mov	r0, r4
 115 0040 FFF7FEFF 		bl	pre_process_record_quantum
 116              	.LVL6:
 117              		.loc 1 111 34 discriminator 1 view .LVU21
 118 0044 18B1     		cbz	r0, .L2
 119              	.L5:
 112:tmk_core/common/action.c ****         action_tapping_process(record);
 120              		.loc 1 112 9 is_stmt 1 view .LVU22
 121 0046 94E80300 		ldm	r4, {r0, r1}
 122 004a FFF7FEFF 		bl	action_tapping_process
 123              	.LVL7:
 124              	.L2:
 113:tmk_core/common/action.c ****     }
 114:tmk_core/common/action.c **** #else
 115:tmk_core/common/action.c ****     if (IS_NOEVENT(record.event) || pre_process_record_quantum(&record)) {
 116:tmk_core/common/action.c ****         process_record(&record);
 117:tmk_core/common/action.c ****     }
 118:tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
 119:tmk_core/common/action.c ****         dprint("processed: ");
 120:tmk_core/common/action.c ****         debug_record(record);
 121:tmk_core/common/action.c ****         dprintln();
 122:tmk_core/common/action.c ****     }
 123:tmk_core/common/action.c **** #endif
 124:tmk_core/common/action.c **** }
 125              		.loc 1 124 1 is_stmt 0 view .LVU23
 126 004e 07B0     		add	sp, sp, #28
 127              		.cfi_def_cfa_offset 12
 128              		@ sp needed
 129 0050 30BD     		pop	{r4, r5, pc}
 130              		.cfi_endproc
 131              	.LFE288:
 133              		.section	.text.process_record_quantum,"ax",%progbits
 134              		.align	1
 135              		.weak	process_record_quantum
 136              		.syntax unified
 137              		.thumb
 138              		.thumb_func
 139              		.fpu fpv4-sp-d16
 141              	process_record_quantum:
 142              	.LVL8:
 143              	.LFB290:
 125:tmk_core/common/action.c **** 
 126:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 127:tmk_core/common/action.c **** bool swap_hands = false;
 128:tmk_core/common/action.c **** bool swap_held  = false;
 129:tmk_core/common/action.c **** 
 130:tmk_core/common/action.c **** /** \brief Process Hand Swap
 131:tmk_core/common/action.c ****  *
 132:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 133:tmk_core/common/action.c ****  */
 134:tmk_core/common/action.c **** void process_hand_swap(keyevent_t *event) {
 135:tmk_core/common/action.c ****     static swap_state_row_t swap_state[MATRIX_ROWS];
 136:tmk_core/common/action.c **** 
 137:tmk_core/common/action.c ****     keypos_t         pos     = event->key;
 138:tmk_core/common/action.c ****     swap_state_row_t col_bit = (swap_state_row_t)1 << pos.col;
 139:tmk_core/common/action.c ****     bool             do_swap = event->pressed ? swap_hands : swap_state[pos.row] & (col_bit);
 140:tmk_core/common/action.c **** 
 141:tmk_core/common/action.c ****     if (do_swap) {
 142:tmk_core/common/action.c ****         event->key.row = pgm_read_byte(&hand_swap_config[pos.row][pos.col].row);
 143:tmk_core/common/action.c ****         event->key.col = pgm_read_byte(&hand_swap_config[pos.row][pos.col].col);
 144:tmk_core/common/action.c ****         swap_state[pos.row] |= col_bit;
 145:tmk_core/common/action.c ****     } else {
 146:tmk_core/common/action.c ****         swap_state[pos.row] &= ~(col_bit);
 147:tmk_core/common/action.c ****     }
 148:tmk_core/common/action.c **** }
 149:tmk_core/common/action.c **** #endif
 150:tmk_core/common/action.c **** 
 151:tmk_core/common/action.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 152:tmk_core/common/action.c **** bool disable_action_cache = false;
 153:tmk_core/common/action.c **** 
 154:tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record) {
 155:tmk_core/common/action.c ****     disable_action_cache = true;
 156:tmk_core/common/action.c ****     process_record(record);
 157:tmk_core/common/action.c ****     disable_action_cache = false;
 158:tmk_core/common/action.c **** }
 159:tmk_core/common/action.c **** #else
 160:tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record) { process_record(record); }
 161:tmk_core/common/action.c **** #endif
 162:tmk_core/common/action.c **** 
 163:tmk_core/common/action.c **** __attribute__((weak)) bool process_record_quantum(keyrecord_t *record) { return true; }
 144              		.loc 1 163 72 is_stmt 1 view -0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148              		@ link register save eliminated.
 149              		.loc 1 163 74 view .LVU25
 150              		.loc 1 163 87 is_stmt 0 view .LVU26
 151 0000 0120     		movs	r0, #1
 152              	.LVL9:
 153              		.loc 1 163 87 view .LVU27
 154 0002 7047     		bx	lr
 155              		.cfi_endproc
 156              	.LFE290:
 158              		.section	.text.post_process_record_quantum,"ax",%progbits
 159              		.align	1
 160              		.weak	post_process_record_quantum
 161              		.syntax unified
 162              		.thumb
 163              		.thumb_func
 164              		.fpu fpv4-sp-d16
 166              	post_process_record_quantum:
 167              	.LVL10:
 168              	.LFB291:
 164:tmk_core/common/action.c **** 
 165:tmk_core/common/action.c **** __attribute__((weak)) void post_process_record_quantum(keyrecord_t *record) {}
 169              		.loc 1 165 77 is_stmt 1 view -0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173              		@ link register save eliminated.
 174              		.loc 1 165 78 view .LVU29
 175 0000 7047     		bx	lr
 176              		.cfi_endproc
 177              	.LFE291:
 179              		.section	.text.process_record_tap_hint,"ax",%progbits
 180              		.align	1
 181              		.global	process_record_tap_hint
 182              		.syntax unified
 183              		.thumb
 184              		.thumb_func
 185              		.fpu fpv4-sp-d16
 187              	process_record_tap_hint:
 188              	.LVL11:
 189              	.LFB292:
 166:tmk_core/common/action.c **** 
 167:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 168:tmk_core/common/action.c **** /** \brief Allows for handling tap-hold actions immediately instead of waiting for TAPPING_TERM or 
 169:tmk_core/common/action.c ****  *
 170:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 171:tmk_core/common/action.c ****  */
 172:tmk_core/common/action.c **** void process_record_tap_hint(keyrecord_t *record) {
 190              		.loc 1 172 51 view -0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		@ link register save eliminated.
 173:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(record->event.key);
 195              		.loc 1 173 5 view .LVU31
 196              		.loc 1 173 23 is_stmt 0 view .LVU32
 197 0000 0088     		ldrh	r0, [r0]
 198              	.LVL12:
 199              		.loc 1 173 23 view .LVU33
 200 0002 FFF7FEBF 		b	layer_switch_get_action
 201              	.LVL13:
 202              		.cfi_endproc
 203              	.LFE292:
 205              		.section	.text.register_code,"ax",%progbits
 206              		.align	1
 207              		.global	register_code
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 211              		.fpu fpv4-sp-d16
 213              	register_code:
 214              	.LVL14:
 215              	.LFB296:
 174:tmk_core/common/action.c **** 
 175:tmk_core/common/action.c ****     switch (action.kind.id) {
 176:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 177:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 178:tmk_core/common/action.c ****             switch (action.swap.code) {
 179:tmk_core/common/action.c ****                 case OP_SH_ONESHOT:
 180:tmk_core/common/action.c ****                     break;
 181:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 182:tmk_core/common/action.c ****                 default:
 183:tmk_core/common/action.c ****                     swap_hands = !swap_hands;
 184:tmk_core/common/action.c ****                     swap_held  = true;
 185:tmk_core/common/action.c ****             }
 186:tmk_core/common/action.c ****             break;
 187:tmk_core/common/action.c **** #    endif
 188:tmk_core/common/action.c ****     }
 189:tmk_core/common/action.c **** }
 190:tmk_core/common/action.c **** #endif
 191:tmk_core/common/action.c **** 
 192:tmk_core/common/action.c **** /** \brief Take a key event (key press or key release) and processes it.
 193:tmk_core/common/action.c ****  *
 194:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 195:tmk_core/common/action.c ****  */
 196:tmk_core/common/action.c **** void process_record(keyrecord_t *record) {
 197:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 198:tmk_core/common/action.c ****         return;
 199:tmk_core/common/action.c ****     }
 200:tmk_core/common/action.c **** 
 201:tmk_core/common/action.c ****     if (!process_record_quantum(record)) {
 202:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 203:tmk_core/common/action.c ****         if (is_oneshot_layer_active() && record->event.pressed) {
 204:tmk_core/common/action.c ****             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 205:tmk_core/common/action.c ****         }
 206:tmk_core/common/action.c **** #endif
 207:tmk_core/common/action.c ****         return;
 208:tmk_core/common/action.c ****     }
 209:tmk_core/common/action.c **** 
 210:tmk_core/common/action.c ****     process_record_handler(record);
 211:tmk_core/common/action.c ****     post_process_record_quantum(record);
 212:tmk_core/common/action.c **** }
 213:tmk_core/common/action.c **** 
 214:tmk_core/common/action.c **** void process_record_handler(keyrecord_t *record) {
 215:tmk_core/common/action.c **** #ifdef COMBO_ENABLE
 216:tmk_core/common/action.c ****     action_t action;
 217:tmk_core/common/action.c ****     if (record->keycode) {
 218:tmk_core/common/action.c ****         action = action_for_keycode(record->keycode);
 219:tmk_core/common/action.c ****     } else {
 220:tmk_core/common/action.c ****         action = store_or_get_action(record->event.pressed, record->event.key);
 221:tmk_core/common/action.c ****     }
 222:tmk_core/common/action.c **** #else
 223:tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 224:tmk_core/common/action.c **** #endif
 225:tmk_core/common/action.c ****     dprint("ACTION: ");
 226:tmk_core/common/action.c ****     debug_action(action);
 227:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 228:tmk_core/common/action.c ****     dprint(" layer_state: ");
 229:tmk_core/common/action.c ****     layer_debug();
 230:tmk_core/common/action.c ****     dprint(" default_layer_state: ");
 231:tmk_core/common/action.c ****     default_layer_debug();
 232:tmk_core/common/action.c **** #endif
 233:tmk_core/common/action.c ****     dprintln();
 234:tmk_core/common/action.c **** 
 235:tmk_core/common/action.c ****     process_action(record, action);
 236:tmk_core/common/action.c **** }
 237:tmk_core/common/action.c **** 
 238:tmk_core/common/action.c **** #if defined(PS2_MOUSE_ENABLE) || defined(POINTING_DEVICE_ENABLE)
 239:tmk_core/common/action.c **** void register_button(bool pressed, enum mouse_buttons button) {
 240:tmk_core/common/action.c **** #    ifdef PS2_MOUSE_ENABLE
 241:tmk_core/common/action.c ****     tp_buttons = pressed ? tp_buttons | button : tp_buttons & ~button;
 242:tmk_core/common/action.c **** #    endif
 243:tmk_core/common/action.c **** #    ifdef POINTING_DEVICE_ENABLE
 244:tmk_core/common/action.c ****     report_mouse_t currentReport = pointing_device_get_report();
 245:tmk_core/common/action.c ****     currentReport.buttons        = pressed ? currentReport.buttons | button : currentReport.buttons
 246:tmk_core/common/action.c ****     pointing_device_set_report(currentReport);
 247:tmk_core/common/action.c **** #    endif
 248:tmk_core/common/action.c **** }
 249:tmk_core/common/action.c **** #endif
 250:tmk_core/common/action.c **** 
 251:tmk_core/common/action.c **** /** \brief Take an action and processes it.
 252:tmk_core/common/action.c ****  *
 253:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 254:tmk_core/common/action.c ****  */
 255:tmk_core/common/action.c **** void process_action(keyrecord_t *record, action_t action) {
 256:tmk_core/common/action.c ****     keyevent_t event = record->event;
 257:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 258:tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 259:tmk_core/common/action.c **** #endif
 260:tmk_core/common/action.c **** 
 261:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 262:tmk_core/common/action.c ****     bool do_release_oneshot = false;
 263:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 264:tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && (action.kind.id == ACT_USAGE || !IS_MOD(actio
 265:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 266:tmk_core/common/action.c ****         && !(action.kind.id == ACT_SWAP_HANDS && action.swap.code == OP_SH_ONESHOT)
 267:tmk_core/common/action.c **** #    endif
 268:tmk_core/common/action.c ****     ) {
 269:tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 270:tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 271:tmk_core/common/action.c ****     }
 272:tmk_core/common/action.c **** #endif
 273:tmk_core/common/action.c **** 
 274:tmk_core/common/action.c ****     switch (action.kind.id) {
 275:tmk_core/common/action.c ****         /* Key and Mods */
 276:tmk_core/common/action.c ****         case ACT_LMODS:
 277:tmk_core/common/action.c ****         case ACT_RMODS: {
 278:tmk_core/common/action.c ****             uint8_t mods = (action.kind.id == ACT_LMODS) ? action.key.mods : action.key.mods << 4;
 279:tmk_core/common/action.c ****             if (event.pressed) {
 280:tmk_core/common/action.c ****                 if (mods) {
 281:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 282:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 283:tmk_core/common/action.c ****                         // This also makes LSFT(KC_LGUI) behave exactly the same as LGUI(KC_LSFT).
 284:tmk_core/common/action.c ****                         // Same applies for some keys like KC_MEH which are declared as MEH(KC_NO).
 285:tmk_core/common/action.c ****                         add_mods(mods);
 286:tmk_core/common/action.c ****                     } else {
 287:tmk_core/common/action.c ****                         add_weak_mods(mods);
 288:tmk_core/common/action.c ****                     }
 289:tmk_core/common/action.c ****                     send_keyboard_report();
 290:tmk_core/common/action.c ****                 }
 291:tmk_core/common/action.c ****                 register_code(action.key.code);
 292:tmk_core/common/action.c ****             } else {
 293:tmk_core/common/action.c ****                 unregister_code(action.key.code);
 294:tmk_core/common/action.c ****                 if (mods) {
 295:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 296:tmk_core/common/action.c ****                         del_mods(mods);
 297:tmk_core/common/action.c ****                     } else {
 298:tmk_core/common/action.c ****                         del_weak_mods(mods);
 299:tmk_core/common/action.c ****                     }
 300:tmk_core/common/action.c ****                     send_keyboard_report();
 301:tmk_core/common/action.c ****                 }
 302:tmk_core/common/action.c ****             }
 303:tmk_core/common/action.c ****         } break;
 304:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 305:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 306:tmk_core/common/action.c ****         case ACT_RMODS_TAP: {
 307:tmk_core/common/action.c ****             uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ? action.key.mods : action.key.mods <<
 308:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 309:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 310:tmk_core/common/action.c ****                 case MODS_ONESHOT:
 311:tmk_core/common/action.c ****                     // Oneshot modifier
 312:tmk_core/common/action.c ****                     if (event.pressed) {
 313:tmk_core/common/action.c ****                         if (tap_count == 0) {
 314:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: 0\n");
 315:tmk_core/common/action.c ****                             register_mods(mods | get_oneshot_mods());
 316:tmk_core/common/action.c ****                         } else if (tap_count == 1) {
 317:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: start\n");
 318:tmk_core/common/action.c ****                             set_oneshot_mods(mods | get_oneshot_mods());
 319:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 320:tmk_core/common/action.c ****                         } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 321:tmk_core/common/action.c ****                             dprint("MODS_TAP: Toggling oneshot");
 322:tmk_core/common/action.c ****                             clear_oneshot_mods();
 323:tmk_core/common/action.c ****                             set_oneshot_locked_mods(mods);
 324:tmk_core/common/action.c ****                             register_mods(mods);
 325:tmk_core/common/action.c **** #        endif
 326:tmk_core/common/action.c ****                         } else {
 327:tmk_core/common/action.c ****                             register_mods(mods | get_oneshot_mods());
 328:tmk_core/common/action.c ****                         }
 329:tmk_core/common/action.c ****                     } else {
 330:tmk_core/common/action.c ****                         if (tap_count == 0) {
 331:tmk_core/common/action.c ****                             clear_oneshot_mods();
 332:tmk_core/common/action.c ****                             unregister_mods(mods);
 333:tmk_core/common/action.c ****                         } else if (tap_count == 1) {
 334:tmk_core/common/action.c ****                             // Retain Oneshot mods
 335:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 336:tmk_core/common/action.c ****                             if (mods & get_mods()) {
 337:tmk_core/common/action.c ****                                 clear_oneshot_locked_mods();
 338:tmk_core/common/action.c ****                                 clear_oneshot_mods();
 339:tmk_core/common/action.c ****                                 unregister_mods(mods);
 340:tmk_core/common/action.c ****                             }
 341:tmk_core/common/action.c ****                         } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 342:tmk_core/common/action.c ****                             // Toggle Oneshot Layer
 343:tmk_core/common/action.c **** #        endif
 344:tmk_core/common/action.c ****                         } else {
 345:tmk_core/common/action.c ****                             clear_oneshot_mods();
 346:tmk_core/common/action.c ****                             unregister_mods(mods);
 347:tmk_core/common/action.c ****                         }
 348:tmk_core/common/action.c ****                     }
 349:tmk_core/common/action.c ****                     break;
 350:tmk_core/common/action.c **** #    endif
 351:tmk_core/common/action.c ****                 case MODS_TAP_TOGGLE:
 352:tmk_core/common/action.c ****                     if (event.pressed) {
 353:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 354:tmk_core/common/action.c ****                             register_mods(mods);
 355:tmk_core/common/action.c ****                         }
 356:tmk_core/common/action.c ****                     } else {
 357:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 358:tmk_core/common/action.c ****                             unregister_mods(mods);
 359:tmk_core/common/action.c ****                         }
 360:tmk_core/common/action.c ****                     }
 361:tmk_core/common/action.c ****                     break;
 362:tmk_core/common/action.c ****                 default:
 363:tmk_core/common/action.c ****                     if (event.pressed) {
 364:tmk_core/common/action.c ****                         if (tap_count > 0) {
 365:tmk_core/common/action.c **** #    if !defined(IGNORE_MOD_TAP_INTERRUPT) || defined(IGNORE_MOD_TAP_INTERRUPT_PER_KEY)
 366:tmk_core/common/action.c ****                             if (
 367:tmk_core/common/action.c **** #        ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
 368:tmk_core/common/action.c ****                                 !get_ignore_mod_tap_interrupt(get_event_keycode(record->event, fals
 369:tmk_core/common/action.c **** #        endif
 370:tmk_core/common/action.c ****                                 record->tap.interrupted) {
 371:tmk_core/common/action.c ****                                 dprint("mods_tap: tap: cancel: add_mods\n");
 372:tmk_core/common/action.c ****                                 // ad hoc: set 0 to cancel tap
 373:tmk_core/common/action.c ****                                 record->tap.count = 0;
 374:tmk_core/common/action.c ****                                 register_mods(mods);
 375:tmk_core/common/action.c ****                             } else
 376:tmk_core/common/action.c **** #    endif
 377:tmk_core/common/action.c ****                             {
 378:tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: register_code\n");
 379:tmk_core/common/action.c ****                                 register_code(action.key.code);
 380:tmk_core/common/action.c ****                             }
 381:tmk_core/common/action.c ****                         } else {
 382:tmk_core/common/action.c ****                             dprint("MODS_TAP: No tap: add_mods\n");
 383:tmk_core/common/action.c ****                             register_mods(mods);
 384:tmk_core/common/action.c ****                         }
 385:tmk_core/common/action.c ****                     } else {
 386:tmk_core/common/action.c ****                         if (tap_count > 0) {
 387:tmk_core/common/action.c ****                             dprint("MODS_TAP: Tap: unregister_code\n");
 388:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 389:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 390:tmk_core/common/action.c ****                             } else {
 391:tmk_core/common/action.c ****                                 wait_ms(TAP_CODE_DELAY);
 392:tmk_core/common/action.c ****                             }
 393:tmk_core/common/action.c ****                             unregister_code(action.key.code);
 394:tmk_core/common/action.c ****                         } else {
 395:tmk_core/common/action.c ****                             dprint("MODS_TAP: No tap: add_mods\n");
 396:tmk_core/common/action.c ****                             unregister_mods(mods);
 397:tmk_core/common/action.c ****                         }
 398:tmk_core/common/action.c ****                     }
 399:tmk_core/common/action.c ****                     break;
 400:tmk_core/common/action.c ****             }
 401:tmk_core/common/action.c ****         } break;
 402:tmk_core/common/action.c **** #endif
 403:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 404:tmk_core/common/action.c ****         /* other HID usage */
 405:tmk_core/common/action.c ****         case ACT_USAGE:
 406:tmk_core/common/action.c ****             switch (action.usage.page) {
 407:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 408:tmk_core/common/action.c ****                     if (event.pressed) {
 409:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 410:tmk_core/common/action.c ****                     } else {
 411:tmk_core/common/action.c ****                         host_system_send(0);
 412:tmk_core/common/action.c ****                     }
 413:tmk_core/common/action.c ****                     break;
 414:tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 415:tmk_core/common/action.c ****                     if (event.pressed) {
 416:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 417:tmk_core/common/action.c ****                     } else {
 418:tmk_core/common/action.c ****                         host_consumer_send(0);
 419:tmk_core/common/action.c ****                     }
 420:tmk_core/common/action.c ****                     break;
 421:tmk_core/common/action.c ****             }
 422:tmk_core/common/action.c ****             break;
 423:tmk_core/common/action.c **** #endif
 424:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 425:tmk_core/common/action.c ****         /* Mouse key */
 426:tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 427:tmk_core/common/action.c ****             if (event.pressed) {
 428:tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 429:tmk_core/common/action.c ****             } else {
 430:tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 431:tmk_core/common/action.c ****             }
 432:tmk_core/common/action.c ****             switch (action.key.code) {
 433:tmk_core/common/action.c **** #    if defined(PS2_MOUSE_ENABLE) || defined(POINTING_DEVICE_ENABLE)
 434:tmk_core/common/action.c **** #        ifdef POINTING_DEVICE_ENABLE
 435:tmk_core/common/action.c ****                 case KC_MS_BTN1 ... KC_MS_BTN8:
 436:tmk_core/common/action.c **** #        else
 437:tmk_core/common/action.c ****                 case KC_MS_BTN1 ... KC_MS_BTN3:
 438:tmk_core/common/action.c **** #        endif
 439:tmk_core/common/action.c ****                     register_button(event.pressed, MOUSE_BTN_MASK(action.key.code - KC_MS_BTN1));
 440:tmk_core/common/action.c ****                     break;
 441:tmk_core/common/action.c **** #    endif
 442:tmk_core/common/action.c ****                 default:
 443:tmk_core/common/action.c ****                     mousekey_send();
 444:tmk_core/common/action.c ****                     break;
 445:tmk_core/common/action.c ****             }
 446:tmk_core/common/action.c ****             break;
 447:tmk_core/common/action.c **** #endif
 448:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 449:tmk_core/common/action.c ****         case ACT_LAYER:
 450:tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 451:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 452:tmk_core/common/action.c ****                 if (!event.pressed) {
 453:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 454:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 455:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 456:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 457:tmk_core/common/action.c ****                         case OP_BIT_AND:
 458:tmk_core/common/action.c ****                             default_layer_and(bits | mask);
 459:tmk_core/common/action.c ****                             break;
 460:tmk_core/common/action.c ****                         case OP_BIT_OR:
 461:tmk_core/common/action.c ****                             default_layer_or(bits | mask);
 462:tmk_core/common/action.c ****                             break;
 463:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 464:tmk_core/common/action.c ****                             default_layer_xor(bits | mask);
 465:tmk_core/common/action.c ****                             break;
 466:tmk_core/common/action.c ****                         case OP_BIT_SET:
 467:tmk_core/common/action.c ****                             default_layer_set(bits | mask);
 468:tmk_core/common/action.c ****                             break;
 469:tmk_core/common/action.c ****                     }
 470:tmk_core/common/action.c ****                 }
 471:tmk_core/common/action.c ****             } else {
 472:tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 473:tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) : (action.layer_bitop.on & O
 474:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 475:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 476:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 477:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 478:tmk_core/common/action.c ****                         case OP_BIT_AND:
 479:tmk_core/common/action.c ****                             layer_and(bits | mask);
 480:tmk_core/common/action.c ****                             break;
 481:tmk_core/common/action.c ****                         case OP_BIT_OR:
 482:tmk_core/common/action.c ****                             layer_or(bits | mask);
 483:tmk_core/common/action.c ****                             break;
 484:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 485:tmk_core/common/action.c ****                             layer_xor(bits | mask);
 486:tmk_core/common/action.c ****                             break;
 487:tmk_core/common/action.c ****                         case OP_BIT_SET:
 488:tmk_core/common/action.c ****                             layer_state_set(bits | mask);
 489:tmk_core/common/action.c ****                             break;
 490:tmk_core/common/action.c ****                     }
 491:tmk_core/common/action.c ****                 }
 492:tmk_core/common/action.c ****             }
 493:tmk_core/common/action.c ****             break;
 494:tmk_core/common/action.c ****         case ACT_LAYER_MODS:
 495:tmk_core/common/action.c ****             if (event.pressed) {
 496:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 497:tmk_core/common/action.c ****                 register_mods(action.layer_mods.mods);
 498:tmk_core/common/action.c ****             } else {
 499:tmk_core/common/action.c ****                 unregister_mods(action.layer_mods.mods);
 500:tmk_core/common/action.c ****                 layer_off(action.layer_mods.layer);
 501:tmk_core/common/action.c ****             }
 502:tmk_core/common/action.c ****             break;
 503:tmk_core/common/action.c **** #    ifndef NO_ACTION_TAPPING
 504:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 505:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 506:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 507:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 508:tmk_core/common/action.c ****                     /* tap toggle */
 509:tmk_core/common/action.c ****                     if (event.pressed) {
 510:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 511:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 512:tmk_core/common/action.c ****                         }
 513:tmk_core/common/action.c ****                     } else {
 514:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 515:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 516:tmk_core/common/action.c ****                         }
 517:tmk_core/common/action.c ****                     }
 518:tmk_core/common/action.c ****                     break;
 519:tmk_core/common/action.c ****                 case OP_ON_OFF:
 520:tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) : layer_off(action.layer_tap.val
 521:tmk_core/common/action.c ****                     break;
 522:tmk_core/common/action.c ****                 case OP_OFF_ON:
 523:tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) : layer_on(action.layer_tap.val
 524:tmk_core/common/action.c ****                     break;
 525:tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 526:tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) : layer_clear();
 527:tmk_core/common/action.c ****                     break;
 528:tmk_core/common/action.c **** #        ifndef NO_ACTION_ONESHOT
 529:tmk_core/common/action.c ****                 case OP_ONESHOT:
 530:tmk_core/common/action.c ****                     // Oneshot modifier
 531:tmk_core/common/action.c **** #            if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 532:tmk_core/common/action.c ****                     do_release_oneshot = false;
 533:tmk_core/common/action.c ****                     if (event.pressed) {
 534:tmk_core/common/action.c ****                         del_mods(get_oneshot_locked_mods());
 535:tmk_core/common/action.c ****                         if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
 536:tmk_core/common/action.c ****                             reset_oneshot_layer();
 537:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 538:tmk_core/common/action.c ****                             break;
 539:tmk_core/common/action.c ****                         } else if (tap_count < ONESHOT_TAP_TOGGLE) {
 540:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 541:tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 542:tmk_core/common/action.c ****                         }
 543:tmk_core/common/action.c ****                     } else {
 544:tmk_core/common/action.c ****                         add_mods(get_oneshot_locked_mods());
 545:tmk_core/common/action.c ****                         if (tap_count >= ONESHOT_TAP_TOGGLE) {
 546:tmk_core/common/action.c ****                             reset_oneshot_layer();
 547:tmk_core/common/action.c ****                             clear_oneshot_locked_mods();
 548:tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
 549:tmk_core/common/action.c ****                         } else {
 550:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_PRESSED);
 551:tmk_core/common/action.c ****                         }
 552:tmk_core/common/action.c ****                     }
 553:tmk_core/common/action.c **** #            else
 554:tmk_core/common/action.c ****                     if (event.pressed) {
 555:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 556:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 557:tmk_core/common/action.c ****                     } else {
 558:tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 559:tmk_core/common/action.c ****                         if (tap_count > 1) {
 560:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 561:tmk_core/common/action.c ****                         }
 562:tmk_core/common/action.c ****                     }
 563:tmk_core/common/action.c **** #            endif
 564:tmk_core/common/action.c ****                     break;
 565:tmk_core/common/action.c **** #        endif
 566:tmk_core/common/action.c ****                 default:
 567:tmk_core/common/action.c ****                     /* tap key */
 568:tmk_core/common/action.c ****                     if (event.pressed) {
 569:tmk_core/common/action.c ****                         if (tap_count > 0) {
 570:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 571:tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 572:tmk_core/common/action.c ****                         } else {
 573:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 574:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 575:tmk_core/common/action.c ****                         }
 576:tmk_core/common/action.c ****                     } else {
 577:tmk_core/common/action.c ****                         if (tap_count > 0) {
 578:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 579:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 580:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 581:tmk_core/common/action.c ****                             } else {
 582:tmk_core/common/action.c ****                                 wait_ms(TAP_CODE_DELAY);
 583:tmk_core/common/action.c ****                             }
 584:tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 585:tmk_core/common/action.c ****                         } else {
 586:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 587:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 588:tmk_core/common/action.c ****                         }
 589:tmk_core/common/action.c ****                     }
 590:tmk_core/common/action.c ****                     break;
 591:tmk_core/common/action.c ****             }
 592:tmk_core/common/action.c ****             break;
 593:tmk_core/common/action.c **** #    endif
 594:tmk_core/common/action.c **** #endif
 595:tmk_core/common/action.c ****             /* Extentions */
 596:tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 597:tmk_core/common/action.c ****         case ACT_MACRO:
 598:tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 599:tmk_core/common/action.c ****             break;
 600:tmk_core/common/action.c **** #endif
 601:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 602:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 603:tmk_core/common/action.c ****             switch (action.swap.code) {
 604:tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 605:tmk_core/common/action.c ****                     if (event.pressed) {
 606:tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 607:tmk_core/common/action.c ****                     }
 608:tmk_core/common/action.c ****                     break;
 609:tmk_core/common/action.c ****                 case OP_SH_ON_OFF:
 610:tmk_core/common/action.c ****                     swap_hands = event.pressed;
 611:tmk_core/common/action.c ****                     break;
 612:tmk_core/common/action.c ****                 case OP_SH_OFF_ON:
 613:tmk_core/common/action.c ****                     swap_hands = !event.pressed;
 614:tmk_core/common/action.c ****                     break;
 615:tmk_core/common/action.c ****                 case OP_SH_ON:
 616:tmk_core/common/action.c ****                     if (!event.pressed) {
 617:tmk_core/common/action.c ****                         swap_hands = true;
 618:tmk_core/common/action.c ****                     }
 619:tmk_core/common/action.c ****                     break;
 620:tmk_core/common/action.c ****                 case OP_SH_OFF:
 621:tmk_core/common/action.c ****                     if (!event.pressed) {
 622:tmk_core/common/action.c ****                         swap_hands = false;
 623:tmk_core/common/action.c ****                     }
 624:tmk_core/common/action.c ****                     break;
 625:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 626:tmk_core/common/action.c ****                 case OP_SH_ONESHOT:
 627:tmk_core/common/action.c ****                     if (event.pressed) {
 628:tmk_core/common/action.c ****                         set_oneshot_swaphands();
 629:tmk_core/common/action.c ****                     } else {
 630:tmk_core/common/action.c ****                         release_oneshot_swaphands();
 631:tmk_core/common/action.c ****                     }
 632:tmk_core/common/action.c ****                     break;
 633:tmk_core/common/action.c **** #    endif
 634:tmk_core/common/action.c **** 
 635:tmk_core/common/action.c **** #    ifndef NO_ACTION_TAPPING
 636:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 637:tmk_core/common/action.c ****                     /* tap toggle */
 638:tmk_core/common/action.c **** 
 639:tmk_core/common/action.c ****                     if (event.pressed) {
 640:tmk_core/common/action.c ****                         if (swap_held) {
 641:tmk_core/common/action.c ****                             swap_held = false;
 642:tmk_core/common/action.c ****                         } else {
 643:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 644:tmk_core/common/action.c ****                         }
 645:tmk_core/common/action.c ****                     } else {
 646:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 647:tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 648:tmk_core/common/action.c ****                         }
 649:tmk_core/common/action.c ****                     }
 650:tmk_core/common/action.c ****                     break;
 651:tmk_core/common/action.c ****                 default:
 652:tmk_core/common/action.c ****                     /* tap key */
 653:tmk_core/common/action.c ****                     if (tap_count > 0) {
 654:tmk_core/common/action.c ****                         if (swap_held) {
 655:tmk_core/common/action.c ****                             swap_hands = !swap_hands;  // undo hold set up in _tap_hint
 656:tmk_core/common/action.c ****                             swap_held  = false;
 657:tmk_core/common/action.c ****                         }
 658:tmk_core/common/action.c ****                         if (event.pressed) {
 659:tmk_core/common/action.c ****                             register_code(action.swap.code);
 660:tmk_core/common/action.c ****                         } else {
 661:tmk_core/common/action.c ****                             wait_ms(TAP_CODE_DELAY);
 662:tmk_core/common/action.c ****                             unregister_code(action.swap.code);
 663:tmk_core/common/action.c ****                             *record = (keyrecord_t){};  // hack: reset tap mode
 664:tmk_core/common/action.c ****                         }
 665:tmk_core/common/action.c ****                     } else {
 666:tmk_core/common/action.c ****                         if (swap_held && !event.pressed) {
 667:tmk_core/common/action.c ****                             swap_hands = !swap_hands;  // undo hold set up in _tap_hint
 668:tmk_core/common/action.c ****                             swap_held  = false;
 669:tmk_core/common/action.c ****                         }
 670:tmk_core/common/action.c ****                     }
 671:tmk_core/common/action.c **** #    endif
 672:tmk_core/common/action.c ****             }
 673:tmk_core/common/action.c **** #endif
 674:tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 675:tmk_core/common/action.c ****         case ACT_FUNCTION:
 676:tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 677:tmk_core/common/action.c ****             break;
 678:tmk_core/common/action.c **** #endif
 679:tmk_core/common/action.c ****         default:
 680:tmk_core/common/action.c ****             break;
 681:tmk_core/common/action.c ****     }
 682:tmk_core/common/action.c **** 
 683:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 684:tmk_core/common/action.c ****     // if this event is a layer action, update the leds
 685:tmk_core/common/action.c ****     switch (action.kind.id) {
 686:tmk_core/common/action.c ****         case ACT_LAYER:
 687:tmk_core/common/action.c ****         case ACT_LAYER_MODS:
 688:tmk_core/common/action.c **** #    ifndef NO_ACTION_TAPPING
 689:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 690:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 691:tmk_core/common/action.c **** #    endif
 692:tmk_core/common/action.c ****             led_set(host_keyboard_leds());
 693:tmk_core/common/action.c ****             break;
 694:tmk_core/common/action.c ****         default:
 695:tmk_core/common/action.c ****             break;
 696:tmk_core/common/action.c ****     }
 697:tmk_core/common/action.c **** #endif
 698:tmk_core/common/action.c **** 
 699:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 700:tmk_core/common/action.c **** #    if defined(RETRO_TAPPING) || defined(RETRO_TAPPING_PER_KEY)
 701:tmk_core/common/action.c ****     if (!is_tap_action(action)) {
 702:tmk_core/common/action.c ****         retro_tapping_counter = 0;
 703:tmk_core/common/action.c ****     } else {
 704:tmk_core/common/action.c ****         if (event.pressed) {
 705:tmk_core/common/action.c ****             if (tap_count > 0) {
 706:tmk_core/common/action.c ****                 retro_tapping_counter = 0;
 707:tmk_core/common/action.c ****             }
 708:tmk_core/common/action.c ****         } else {
 709:tmk_core/common/action.c ****             if (tap_count > 0) {
 710:tmk_core/common/action.c ****                 retro_tapping_counter = 0;
 711:tmk_core/common/action.c ****             } else {
 712:tmk_core/common/action.c ****                 if (
 713:tmk_core/common/action.c **** #        ifdef RETRO_TAPPING_PER_KEY
 714:tmk_core/common/action.c ****                     get_retro_tapping(get_event_keycode(record->event, false), record) &&
 715:tmk_core/common/action.c **** #        endif
 716:tmk_core/common/action.c ****                     retro_tapping_counter == 2) {
 717:tmk_core/common/action.c ****                     tap_code(action.layer_tap.code);
 718:tmk_core/common/action.c ****                 }
 719:tmk_core/common/action.c ****                 retro_tapping_counter = 0;
 720:tmk_core/common/action.c ****             }
 721:tmk_core/common/action.c ****         }
 722:tmk_core/common/action.c ****     }
 723:tmk_core/common/action.c **** #    endif
 724:tmk_core/common/action.c **** #endif
 725:tmk_core/common/action.c **** 
 726:tmk_core/common/action.c **** #ifdef SWAP_HANDS_ENABLE
 727:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 728:tmk_core/common/action.c ****     if (event.pressed && !(action.kind.id == ACT_SWAP_HANDS && action.swap.code == OP_SH_ONESHOT)) 
 729:tmk_core/common/action.c ****         use_oneshot_swaphands();
 730:tmk_core/common/action.c ****     }
 731:tmk_core/common/action.c **** #    endif
 732:tmk_core/common/action.c **** #endif
 733:tmk_core/common/action.c **** 
 734:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 735:tmk_core/common/action.c ****     /* Because we switch layers after a oneshot event, we need to release the
 736:tmk_core/common/action.c ****      * key before we leave the layer or no key up event will be generated.
 737:tmk_core/common/action.c ****      */
 738:tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED)) {
 739:tmk_core/common/action.c ****         record->event.pressed = false;
 740:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 741:tmk_core/common/action.c ****         process_record(record);
 742:tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 743:tmk_core/common/action.c ****     }
 744:tmk_core/common/action.c **** #endif
 745:tmk_core/common/action.c **** }
 746:tmk_core/common/action.c **** 
 747:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 748:tmk_core/common/action.c ****  *
 749:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 750:tmk_core/common/action.c ****  */
 751:tmk_core/common/action.c **** void register_code(uint8_t code) {
 216              		.loc 1 751 34 is_stmt 1 view -0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 752:tmk_core/common/action.c ****     if (code == KC_NO) {
 220              		.loc 1 752 5 view .LVU35
 751:tmk_core/common/action.c ****     if (code == KC_NO) {
 221              		.loc 1 751 34 is_stmt 0 view .LVU36
 222 0000 10B5     		push	{r4, lr}
 223              		.cfi_def_cfa_offset 8
 224              		.cfi_offset 4, -8
 225              		.cfi_offset 14, -4
 226              		.loc 1 752 8 view .LVU37
 227 0002 0446     		mov	r4, r0
 228 0004 0028     		cmp	r0, #0
 229 0006 76D0     		beq	.L15
 753:tmk_core/common/action.c ****         return;
 754:tmk_core/common/action.c ****     }
 755:tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 756:tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 230              		.loc 1 756 10 is_stmt 1 view .LVU38
 231              		.loc 1 756 13 is_stmt 0 view .LVU39
 232 0008 8228     		cmp	r0, #130
 233 000a 13D1     		bne	.L18
 757:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 758:tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 759:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1 << USB_LED_CAPS_LOCK)) return;
 234              		.loc 1 759 9 is_stmt 1 view .LVU40
 235              		.loc 1 759 13 is_stmt 0 view .LVU41
 236 000c FFF7FEFF 		bl	host_keyboard_leds
 237              	.LVL15:
 238              		.loc 1 759 12 view .LVU42
 239 0010 8107     		lsls	r1, r0, #30
 240 0012 70D4     		bmi	.L15
 760:tmk_core/common/action.c **** #    endif
 761:tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 241              		.loc 1 761 9 is_stmt 1 view .LVU43
 242 0014 3920     		movs	r0, #57
 243 0016 FFF7FEFF 		bl	add_key
 244              	.LVL16:
 762:tmk_core/common/action.c ****         send_keyboard_report();
 245              		.loc 1 762 9 view .LVU44
 246 001a FFF7FEFF 		bl	send_keyboard_report
 247              	.LVL17:
 763:tmk_core/common/action.c ****         wait_ms(100);
 248              		.loc 1 763 9 view .LVU45
 249              		.loc 1 763 9 view .LVU46
 250              		.loc 1 763 9 view .LVU47
 251 001e 42F21070 		movw	r0, #10000
 252 0022 FFF7FEFF 		bl	chThdSleep
 253              	.LVL18:
 254              		.loc 1 763 9 view .LVU48
 764:tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 255              		.loc 1 764 9 view .LVU49
 256 0026 3920     		movs	r0, #57
 257              	.L30:
 258              	.LBB25:
 259              	.LBB26:
 765:tmk_core/common/action.c ****         send_keyboard_report();
 766:tmk_core/common/action.c ****     }
 767:tmk_core/common/action.c **** 
 768:tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 769:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 770:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1 << USB_LED_NUM_LOCK)) return;
 771:tmk_core/common/action.c **** #    endif
 772:tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 773:tmk_core/common/action.c ****         send_keyboard_report();
 774:tmk_core/common/action.c ****         wait_ms(100);
 775:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 260              		.loc 1 775 9 is_stmt 0 view .LVU50
 261 0028 FFF7FEFF 		bl	del_key
 262              	.LVL19:
 263              	.L31:
 776:tmk_core/common/action.c ****         send_keyboard_report();
 264              		.loc 1 776 9 is_stmt 1 view .LVU51
 265              	.LBE26:
 266              	.LBE25:
 777:tmk_core/common/action.c ****     }
 778:tmk_core/common/action.c **** 
 779:tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 780:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 781:tmk_core/common/action.c ****         if (host_keyboard_leds() & (1 << USB_LED_SCROLL_LOCK)) return;
 782:tmk_core/common/action.c **** #    endif
 783:tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 784:tmk_core/common/action.c ****         send_keyboard_report();
 785:tmk_core/common/action.c ****         wait_ms(100);
 786:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 787:tmk_core/common/action.c ****         send_keyboard_report();
 788:tmk_core/common/action.c ****     }
 789:tmk_core/common/action.c **** #endif
 790:tmk_core/common/action.c **** 
 791:tmk_core/common/action.c ****     else if IS_KEY (code) {
 792:tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 793:tmk_core/common/action.c ****         if (command_proc(code)) return;
 794:tmk_core/common/action.c **** 
 795:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 796:tmk_core/common/action.c **** /* TODO: remove
 797:tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 798:tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 799:tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 800:tmk_core/common/action.c **** 
 801:tmk_core/common/action.c ****             add_key(code);
 802:tmk_core/common/action.c ****             send_keyboard_report();
 803:tmk_core/common/action.c **** 
 804:tmk_core/common/action.c ****             set_mods(tmp_mods);
 805:tmk_core/common/action.c ****             send_keyboard_report();
 806:tmk_core/common/action.c ****             oneshot_cancel();
 807:tmk_core/common/action.c ****         } else
 808:tmk_core/common/action.c **** */
 809:tmk_core/common/action.c **** #endif
 810:tmk_core/common/action.c ****         {
 811:tmk_core/common/action.c ****             // Force a new key press if the key is already pressed
 812:tmk_core/common/action.c ****             // without this, keys with the same keycode, but different
 813:tmk_core/common/action.c ****             // modifiers will be reported incorrectly, see issue #1708
 814:tmk_core/common/action.c ****             if (is_key_pressed(keyboard_report, code)) {
 815:tmk_core/common/action.c ****                 del_key(code);
 816:tmk_core/common/action.c ****                 send_keyboard_report();
 817:tmk_core/common/action.c ****             }
 818:tmk_core/common/action.c ****             add_key(code);
 819:tmk_core/common/action.c ****             send_keyboard_report();
 820:tmk_core/common/action.c ****         }
 821:tmk_core/common/action.c ****     } else if IS_MOD (code) {
 822:tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 823:tmk_core/common/action.c ****         send_keyboard_report();
 824:tmk_core/common/action.c ****     }
 825:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 826:tmk_core/common/action.c ****     else if IS_SYSTEM (code) {
 827:tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 828:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 829:tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 830:tmk_core/common/action.c ****     }
 831:tmk_core/common/action.c **** #endif
 832:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 833:tmk_core/common/action.c ****     else if IS_MOUSEKEY (code) {
 834:tmk_core/common/action.c ****         mousekey_on(code);
 835:tmk_core/common/action.c ****         mousekey_send();
 836:tmk_core/common/action.c ****     }
 837:tmk_core/common/action.c **** #endif
 838:tmk_core/common/action.c **** }
 267              		.loc 1 838 1 is_stmt 0 view .LVU52
 268 002c BDE81040 		pop	{r4, lr}
 269              		.cfi_remember_state
 270              		.cfi_restore 14
 271              		.cfi_restore 4
 272              		.cfi_def_cfa_offset 0
 273              	.LBB35:
 274              	.LBB28:
 776:tmk_core/common/action.c ****         send_keyboard_report();
 275              		.loc 1 776 9 view .LVU53
 276 0030 FFF7FEBF 		b	send_keyboard_report
 277              	.LVL20:
 278              	.L18:
 279              		.cfi_restore_state
 776:tmk_core/common/action.c ****         send_keyboard_report();
 280              		.loc 1 776 9 view .LVU54
 281              	.LBE28:
 282              	.LBI25:
 751:tmk_core/common/action.c ****     if (code == KC_NO) {
 283              		.loc 1 751 6 is_stmt 1 view .LVU55
 284              	.LBB29:
 768:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 285              		.loc 1 768 10 view .LVU56
 768:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 286              		.loc 1 768 13 is_stmt 0 view .LVU57
 287 0034 8328     		cmp	r0, #131
 288 0036 0ED1     		bne	.L20
 770:tmk_core/common/action.c **** #    endif
 289              		.loc 1 770 9 is_stmt 1 view .LVU58
 770:tmk_core/common/action.c **** #    endif
 290              		.loc 1 770 13 is_stmt 0 view .LVU59
 291 0038 FFF7FEFF 		bl	host_keyboard_leds
 292              	.LVL21:
 770:tmk_core/common/action.c **** #    endif
 293              		.loc 1 770 12 view .LVU60
 294 003c C207     		lsls	r2, r0, #31
 295 003e 5AD4     		bmi	.L15
 772:tmk_core/common/action.c ****         send_keyboard_report();
 296              		.loc 1 772 9 is_stmt 1 view .LVU61
 297 0040 5320     		movs	r0, #83
 298 0042 FFF7FEFF 		bl	add_key
 299              	.LVL22:
 773:tmk_core/common/action.c ****         wait_ms(100);
 300              		.loc 1 773 9 view .LVU62
 301 0046 FFF7FEFF 		bl	send_keyboard_report
 302              	.LVL23:
 774:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 303              		.loc 1 774 9 view .LVU63
 774:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 304              		.loc 1 774 9 view .LVU64
 774:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 305              		.loc 1 774 9 view .LVU65
 306 004a 42F21070 		movw	r0, #10000
 307 004e FFF7FEFF 		bl	chThdSleep
 308              	.LVL24:
 774:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 309              		.loc 1 774 9 view .LVU66
 775:tmk_core/common/action.c ****         send_keyboard_report();
 310              		.loc 1 775 9 view .LVU67
 311 0052 5320     		movs	r0, #83
 312 0054 E8E7     		b	.L30
 313              	.LVL25:
 314              	.L20:
 779:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 315              		.loc 1 779 10 view .LVU68
 779:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 316              		.loc 1 779 13 is_stmt 0 view .LVU69
 317 0056 8428     		cmp	r0, #132
 318 0058 0ED1     		bne	.L21
 781:tmk_core/common/action.c **** #    endif
 319              		.loc 1 781 9 is_stmt 1 view .LVU70
 781:tmk_core/common/action.c **** #    endif
 320              		.loc 1 781 13 is_stmt 0 view .LVU71
 321 005a FFF7FEFF 		bl	host_keyboard_leds
 322              	.LVL26:
 781:tmk_core/common/action.c **** #    endif
 323              		.loc 1 781 12 view .LVU72
 324 005e 4307     		lsls	r3, r0, #29
 325 0060 49D4     		bmi	.L15
 783:tmk_core/common/action.c ****         send_keyboard_report();
 326              		.loc 1 783 9 is_stmt 1 view .LVU73
 327 0062 4720     		movs	r0, #71
 328 0064 FFF7FEFF 		bl	add_key
 329              	.LVL27:
 784:tmk_core/common/action.c ****         wait_ms(100);
 330              		.loc 1 784 9 view .LVU74
 331 0068 FFF7FEFF 		bl	send_keyboard_report
 332              	.LVL28:
 785:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 333              		.loc 1 785 9 view .LVU75
 785:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 334              		.loc 1 785 9 view .LVU76
 785:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 335              		.loc 1 785 9 view .LVU77
 336 006c 42F21070 		movw	r0, #10000
 337 0070 FFF7FEFF 		bl	chThdSleep
 338              	.LVL29:
 785:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 339              		.loc 1 785 9 view .LVU78
 786:tmk_core/common/action.c ****         send_keyboard_report();
 340              		.loc 1 786 9 view .LVU79
 341 0074 4720     		movs	r0, #71
 342 0076 D7E7     		b	.L30
 343              	.LVL30:
 344              	.L21:
 791:tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 345              		.loc 1 791 10 view .LVU80
 791:tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 346              		.loc 1 791 13 is_stmt 0 view .LVU81
 347 0078 031F     		subs	r3, r0, #4
 348 007a DBB2     		uxtb	r3, r3
 349 007c A02B     		cmp	r3, #160
 350 007e 0ED8     		bhi	.L22
 793:tmk_core/common/action.c **** 
 351              		.loc 1 793 9 is_stmt 1 view .LVU82
 814:tmk_core/common/action.c ****                 del_key(code);
 352              		.loc 1 814 13 view .LVU83
 814:tmk_core/common/action.c ****                 del_key(code);
 353              		.loc 1 814 17 is_stmt 0 view .LVU84
 354 0080 1D4B     		ldr	r3, .L32
 355 0082 0146     		mov	r1, r0
 356 0084 1868     		ldr	r0, [r3]
 357              	.LVL31:
 814:tmk_core/common/action.c ****                 del_key(code);
 358              		.loc 1 814 17 view .LVU85
 359 0086 FFF7FEFF 		bl	is_key_pressed
 360              	.LVL32:
 814:tmk_core/common/action.c ****                 del_key(code);
 361              		.loc 1 814 16 view .LVU86
 362 008a 20B1     		cbz	r0, .L23
 815:tmk_core/common/action.c ****                 send_keyboard_report();
 363              		.loc 1 815 17 is_stmt 1 view .LVU87
 364 008c 2046     		mov	r0, r4
 365 008e FFF7FEFF 		bl	del_key
 366              	.LVL33:
 816:tmk_core/common/action.c ****             }
 367              		.loc 1 816 17 view .LVU88
 368 0092 FFF7FEFF 		bl	send_keyboard_report
 369              	.LVL34:
 370              	.L23:
 818:tmk_core/common/action.c ****             send_keyboard_report();
 371              		.loc 1 818 13 view .LVU89
 372 0096 2046     		mov	r0, r4
 373 0098 FFF7FEFF 		bl	add_key
 374              	.LVL35:
 819:tmk_core/common/action.c ****         }
 375              		.loc 1 819 13 view .LVU90
 376 009c C6E7     		b	.L31
 377              	.LVL36:
 378              	.L22:
 821:tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 379              		.loc 1 821 12 view .LVU91
 821:tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 380              		.loc 1 821 15 is_stmt 0 view .LVU92
 381 009e 00F12003 		add	r3, r0, #32
 382 00a2 DBB2     		uxtb	r3, r3
 383 00a4 072B     		cmp	r3, #7
 384 00a6 07D8     		bhi	.L24
 822:tmk_core/common/action.c ****         send_keyboard_report();
 385              		.loc 1 822 9 is_stmt 1 view .LVU93
 822:tmk_core/common/action.c ****         send_keyboard_report();
 386              		.loc 1 822 18 is_stmt 0 view .LVU94
 387 00a8 00F00704 		and	r4, r0, #7
 388 00ac 0120     		movs	r0, #1
 389              	.LVL37:
 822:tmk_core/common/action.c ****         send_keyboard_report();
 390              		.loc 1 822 18 view .LVU95
 391 00ae A040     		lsls	r0, r0, r4
 822:tmk_core/common/action.c ****         send_keyboard_report();
 392              		.loc 1 822 9 view .LVU96
 393 00b0 C0B2     		uxtb	r0, r0
 394 00b2 FFF7FEFF 		bl	add_mods
 395              	.LVL38:
 823:tmk_core/common/action.c ****     }
 396              		.loc 1 823 9 is_stmt 1 view .LVU97
 397 00b6 B9E7     		b	.L31
 398              	.LVL39:
 399              	.L24:
 826:tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 400              		.loc 1 826 10 view .LVU98
 826:tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 401              		.loc 1 826 13 is_stmt 0 view .LVU99
 402 00b8 00F15B03 		add	r3, r0, #91
 403 00bc DBB2     		uxtb	r3, r3
 404 00be 022B     		cmp	r3, #2
 405 00c0 05D8     		bhi	.L25
 827:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 406              		.loc 1 827 9 is_stmt 1 view .LVU100
 407              	.LVL40:
 827:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 408              		.loc 1 827 9 is_stmt 0 view .LVU101
 409              	.LBE29:
 410              	.LBE35:
 411              		.file 3 "tmk_core/common/report.h"
   1:tmk_core/common/report.h **** /*
   2:tmk_core/common/report.h **** Copyright 2011,2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/report.h **** 
   4:tmk_core/common/report.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/report.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/report.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/report.h **** (at your option) any later version.
   8:tmk_core/common/report.h **** 
   9:tmk_core/common/report.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/report.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/report.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/report.h **** GNU General Public License for more details.
  13:tmk_core/common/report.h **** 
  14:tmk_core/common/report.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/report.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/report.h **** */
  17:tmk_core/common/report.h **** 
  18:tmk_core/common/report.h **** #pragma once
  19:tmk_core/common/report.h **** 
  20:tmk_core/common/report.h **** #include <stdint.h>
  21:tmk_core/common/report.h **** #include <stdbool.h>
  22:tmk_core/common/report.h **** #include "keycode.h"
  23:tmk_core/common/report.h **** 
  24:tmk_core/common/report.h **** // clang-format off
  25:tmk_core/common/report.h **** 
  26:tmk_core/common/report.h **** /* HID report IDs */
  27:tmk_core/common/report.h **** enum hid_report_ids {
  28:tmk_core/common/report.h ****     REPORT_ID_KEYBOARD = 1,
  29:tmk_core/common/report.h ****     REPORT_ID_MOUSE,
  30:tmk_core/common/report.h ****     REPORT_ID_SYSTEM,
  31:tmk_core/common/report.h ****     REPORT_ID_CONSUMER,
  32:tmk_core/common/report.h ****     REPORT_ID_NKRO,
  33:tmk_core/common/report.h ****     REPORT_ID_JOYSTICK
  34:tmk_core/common/report.h **** };
  35:tmk_core/common/report.h **** 
  36:tmk_core/common/report.h **** /* Mouse buttons */
  37:tmk_core/common/report.h **** #define MOUSE_BTN_MASK(n) (1 << (n))
  38:tmk_core/common/report.h **** enum mouse_buttons {
  39:tmk_core/common/report.h ****     MOUSE_BTN1 = MOUSE_BTN_MASK(0),
  40:tmk_core/common/report.h ****     MOUSE_BTN2 = MOUSE_BTN_MASK(1),
  41:tmk_core/common/report.h ****     MOUSE_BTN3 = MOUSE_BTN_MASK(2),
  42:tmk_core/common/report.h ****     MOUSE_BTN4 = MOUSE_BTN_MASK(3),
  43:tmk_core/common/report.h ****     MOUSE_BTN5 = MOUSE_BTN_MASK(4),
  44:tmk_core/common/report.h ****     MOUSE_BTN6 = MOUSE_BTN_MASK(5),
  45:tmk_core/common/report.h ****     MOUSE_BTN7 = MOUSE_BTN_MASK(6),
  46:tmk_core/common/report.h ****     MOUSE_BTN8 = MOUSE_BTN_MASK(7)
  47:tmk_core/common/report.h **** };
  48:tmk_core/common/report.h **** 
  49:tmk_core/common/report.h **** /* Consumer Page (0x0C)
  50:tmk_core/common/report.h ****  *
  51:tmk_core/common/report.h ****  * See https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf#page=75
  52:tmk_core/common/report.h ****  */
  53:tmk_core/common/report.h **** enum consumer_usages {
  54:tmk_core/common/report.h ****     // 15.5 Display Controls
  55:tmk_core/common/report.h ****     SNAPSHOT               = 0x065,
  56:tmk_core/common/report.h ****     BRIGHTNESS_UP          = 0x06F, // https://www.usb.org/sites/default/files/hutrr41_0.pdf
  57:tmk_core/common/report.h ****     BRIGHTNESS_DOWN        = 0x070,
  58:tmk_core/common/report.h ****     // 15.7 Transport Controls
  59:tmk_core/common/report.h ****     TRANSPORT_RECORD       = 0x0B2,
  60:tmk_core/common/report.h ****     TRANSPORT_FAST_FORWARD = 0x0B3,
  61:tmk_core/common/report.h ****     TRANSPORT_REWIND       = 0x0B4,
  62:tmk_core/common/report.h ****     TRANSPORT_NEXT_TRACK   = 0x0B5,
  63:tmk_core/common/report.h ****     TRANSPORT_PREV_TRACK   = 0x0B6,
  64:tmk_core/common/report.h ****     TRANSPORT_STOP         = 0x0B7,
  65:tmk_core/common/report.h ****     TRANSPORT_EJECT        = 0x0B8,
  66:tmk_core/common/report.h ****     TRANSPORT_RANDOM_PLAY  = 0x0B9,
  67:tmk_core/common/report.h ****     TRANSPORT_STOP_EJECT   = 0x0CC,
  68:tmk_core/common/report.h ****     TRANSPORT_PLAY_PAUSE   = 0x0CD,
  69:tmk_core/common/report.h ****     // 15.9.1 Audio Controls - Volume
  70:tmk_core/common/report.h ****     AUDIO_MUTE             = 0x0E2,
  71:tmk_core/common/report.h ****     AUDIO_VOL_UP           = 0x0E9,
  72:tmk_core/common/report.h ****     AUDIO_VOL_DOWN         = 0x0EA,
  73:tmk_core/common/report.h ****     // 15.15 Application Launch Buttons
  74:tmk_core/common/report.h ****     AL_CC_CONFIG           = 0x183,
  75:tmk_core/common/report.h ****     AL_EMAIL               = 0x18A,
  76:tmk_core/common/report.h ****     AL_CALCULATOR          = 0x192,
  77:tmk_core/common/report.h ****     AL_LOCAL_BROWSER       = 0x194,
  78:tmk_core/common/report.h ****     AL_LOCK                = 0x19E,
  79:tmk_core/common/report.h ****     AL_CONTROL_PANEL       = 0x19F,
  80:tmk_core/common/report.h ****     AL_ASSISTANT           = 0x1CB,
  81:tmk_core/common/report.h ****     AL_KEYBOARD_LAYOUT     = 0x1AE,
  82:tmk_core/common/report.h ****     // 15.16 Generic GUI Application Controls
  83:tmk_core/common/report.h ****     AC_NEW                 = 0x201,
  84:tmk_core/common/report.h ****     AC_OPEN                = 0x202,
  85:tmk_core/common/report.h ****     AC_CLOSE               = 0x203,
  86:tmk_core/common/report.h ****     AC_EXIT                = 0x204,
  87:tmk_core/common/report.h ****     AC_MAXIMIZE            = 0x205,
  88:tmk_core/common/report.h ****     AC_MINIMIZE            = 0x206,
  89:tmk_core/common/report.h ****     AC_SAVE                = 0x207,
  90:tmk_core/common/report.h ****     AC_PRINT               = 0x208,
  91:tmk_core/common/report.h ****     AC_PROPERTIES          = 0x209,
  92:tmk_core/common/report.h ****     AC_UNDO                = 0x21A,
  93:tmk_core/common/report.h ****     AC_COPY                = 0x21B,
  94:tmk_core/common/report.h ****     AC_CUT                 = 0x21C,
  95:tmk_core/common/report.h ****     AC_PASTE               = 0x21D,
  96:tmk_core/common/report.h ****     AC_SELECT_ALL          = 0x21E,
  97:tmk_core/common/report.h ****     AC_FIND                = 0x21F,
  98:tmk_core/common/report.h ****     AC_SEARCH              = 0x221,
  99:tmk_core/common/report.h ****     AC_HOME                = 0x223,
 100:tmk_core/common/report.h ****     AC_BACK                = 0x224,
 101:tmk_core/common/report.h ****     AC_FORWARD             = 0x225,
 102:tmk_core/common/report.h ****     AC_STOP                = 0x226,
 103:tmk_core/common/report.h ****     AC_REFRESH             = 0x227,
 104:tmk_core/common/report.h ****     AC_BOOKMARKS           = 0x22A
 105:tmk_core/common/report.h **** };
 106:tmk_core/common/report.h **** 
 107:tmk_core/common/report.h **** /* Generic Desktop Page (0x01)
 108:tmk_core/common/report.h ****  *
 109:tmk_core/common/report.h ****  * See https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf#page=26
 110:tmk_core/common/report.h ****  */
 111:tmk_core/common/report.h **** enum desktop_usages {
 112:tmk_core/common/report.h ****     // 4.5.1 System Controls - Power Controls
 113:tmk_core/common/report.h ****     SYSTEM_POWER_DOWN             = 0x81,
 114:tmk_core/common/report.h ****     SYSTEM_SLEEP                  = 0x82,
 115:tmk_core/common/report.h ****     SYSTEM_WAKE_UP                = 0x83,
 116:tmk_core/common/report.h ****     SYSTEM_RESTART                = 0x8F,
 117:tmk_core/common/report.h ****     // 4.10 System Display Controls
 118:tmk_core/common/report.h ****     SYSTEM_DISPLAY_TOGGLE_INT_EXT = 0xB5
 119:tmk_core/common/report.h **** };
 120:tmk_core/common/report.h **** 
 121:tmk_core/common/report.h **** // clang-format on
 122:tmk_core/common/report.h **** 
 123:tmk_core/common/report.h **** #define NKRO_SHARED_EP
 124:tmk_core/common/report.h **** /* key report size(NKRO or boot mode) */
 125:tmk_core/common/report.h **** #if defined(NKRO_ENABLE)
 126:tmk_core/common/report.h **** #    if defined(PROTOCOL_LUFA) || defined(PROTOCOL_CHIBIOS)
 127:tmk_core/common/report.h **** #        include "protocol/usb_descriptor.h"
 128:tmk_core/common/report.h **** #        define KEYBOARD_REPORT_BITS (SHARED_EPSIZE - 2)
 129:tmk_core/common/report.h **** #    elif defined(PROTOCOL_ARM_ATSAM)
 130:tmk_core/common/report.h **** #        include "protocol/arm_atsam/usb/udi_device_epsize.h"
 131:tmk_core/common/report.h **** #        define KEYBOARD_REPORT_BITS (NKRO_EPSIZE - 1)
 132:tmk_core/common/report.h **** #        undef NKRO_SHARED_EP
 133:tmk_core/common/report.h **** #        undef MOUSE_SHARED_EP
 134:tmk_core/common/report.h **** #    else
 135:tmk_core/common/report.h **** #        error "NKRO not supported with this protocol"
 136:tmk_core/common/report.h **** #    endif
 137:tmk_core/common/report.h **** #endif
 138:tmk_core/common/report.h **** 
 139:tmk_core/common/report.h **** #ifdef KEYBOARD_SHARED_EP
 140:tmk_core/common/report.h **** #    define KEYBOARD_REPORT_SIZE 9
 141:tmk_core/common/report.h **** #else
 142:tmk_core/common/report.h **** #    define KEYBOARD_REPORT_SIZE 8
 143:tmk_core/common/report.h **** #endif
 144:tmk_core/common/report.h **** 
 145:tmk_core/common/report.h **** #define KEYBOARD_REPORT_KEYS 6
 146:tmk_core/common/report.h **** 
 147:tmk_core/common/report.h **** #ifdef __cplusplus
 148:tmk_core/common/report.h **** extern "C" {
 149:tmk_core/common/report.h **** #endif
 150:tmk_core/common/report.h **** 
 151:tmk_core/common/report.h **** /*
 152:tmk_core/common/report.h ****  * keyboard report is 8-byte array retains state of 8 modifiers and 6 keys.
 153:tmk_core/common/report.h ****  *
 154:tmk_core/common/report.h ****  * byte |0       |1       |2       |3       |4       |5       |6       |7
 155:tmk_core/common/report.h ****  * -----+--------+--------+--------+--------+--------+--------+--------+--------
 156:tmk_core/common/report.h ****  * desc |mods    |reserved|keys[0] |keys[1] |keys[2] |keys[3] |keys[4] |keys[5]
 157:tmk_core/common/report.h ****  *
 158:tmk_core/common/report.h ****  * It is exended to 16 bytes to retain 120keys+8mods when NKRO mode.
 159:tmk_core/common/report.h ****  *
 160:tmk_core/common/report.h ****  * byte |0       |1       |2       |3       |4       |5       |6       |7        ... |15
 161:tmk_core/common/report.h ****  * -----+--------+--------+--------+--------+--------+--------+--------+--------     +--------
 162:tmk_core/common/report.h ****  * desc |mods    |bits[0] |bits[1] |bits[2] |bits[3] |bits[4] |bits[5] |bits[6]  ... |bit[14]
 163:tmk_core/common/report.h ****  *
 164:tmk_core/common/report.h ****  * mods retains state of 8 modifiers.
 165:tmk_core/common/report.h ****  *
 166:tmk_core/common/report.h ****  *  bit |0       |1       |2       |3       |4       |5       |6       |7
 167:tmk_core/common/report.h ****  * -----+--------+--------+--------+--------+--------+--------+--------+--------
 168:tmk_core/common/report.h ****  * desc |Lcontrol|Lshift  |Lalt    |Lgui    |Rcontrol|Rshift  |Ralt    |Rgui
 169:tmk_core/common/report.h ****  *
 170:tmk_core/common/report.h ****  */
 171:tmk_core/common/report.h **** typedef union {
 172:tmk_core/common/report.h ****     uint8_t raw[KEYBOARD_REPORT_SIZE];
 173:tmk_core/common/report.h ****     struct {
 174:tmk_core/common/report.h **** #ifdef KEYBOARD_SHARED_EP
 175:tmk_core/common/report.h ****         uint8_t report_id;
 176:tmk_core/common/report.h **** #endif
 177:tmk_core/common/report.h ****         uint8_t mods;
 178:tmk_core/common/report.h ****         uint8_t reserved;
 179:tmk_core/common/report.h ****         uint8_t keys[KEYBOARD_REPORT_KEYS];
 180:tmk_core/common/report.h ****     };
 181:tmk_core/common/report.h **** #ifdef NKRO_ENABLE
 182:tmk_core/common/report.h ****     struct nkro_report {
 183:tmk_core/common/report.h **** #    ifdef NKRO_SHARED_EP
 184:tmk_core/common/report.h ****         uint8_t report_id;
 185:tmk_core/common/report.h **** #    endif
 186:tmk_core/common/report.h ****         uint8_t mods;
 187:tmk_core/common/report.h ****         uint8_t bits[KEYBOARD_REPORT_BITS];
 188:tmk_core/common/report.h ****     } nkro;
 189:tmk_core/common/report.h **** #endif
 190:tmk_core/common/report.h **** } __attribute__((packed)) report_keyboard_t;
 191:tmk_core/common/report.h **** 
 192:tmk_core/common/report.h **** typedef struct {
 193:tmk_core/common/report.h ****     uint8_t  report_id;
 194:tmk_core/common/report.h ****     uint16_t usage;
 195:tmk_core/common/report.h **** } __attribute__((packed)) report_extra_t;
 196:tmk_core/common/report.h **** 
 197:tmk_core/common/report.h **** typedef struct {
 198:tmk_core/common/report.h **** #ifdef MOUSE_SHARED_EP
 199:tmk_core/common/report.h ****     uint8_t report_id;
 200:tmk_core/common/report.h **** #endif
 201:tmk_core/common/report.h ****     uint8_t buttons;
 202:tmk_core/common/report.h ****     int8_t  x;
 203:tmk_core/common/report.h ****     int8_t  y;
 204:tmk_core/common/report.h ****     int8_t  v;
 205:tmk_core/common/report.h ****     int8_t  h;
 206:tmk_core/common/report.h **** } __attribute__((packed)) report_mouse_t;
 207:tmk_core/common/report.h **** 
 208:tmk_core/common/report.h **** typedef struct {
 209:tmk_core/common/report.h **** #if JOYSTICK_AXES_COUNT > 0
 210:tmk_core/common/report.h **** #    if JOYSTICK_AXES_RESOLUTION > 8
 211:tmk_core/common/report.h ****     int16_t axes[JOYSTICK_AXES_COUNT];
 212:tmk_core/common/report.h **** #    else
 213:tmk_core/common/report.h ****     int8_t axes[JOYSTICK_AXES_COUNT];
 214:tmk_core/common/report.h **** #    endif
 215:tmk_core/common/report.h **** #endif
 216:tmk_core/common/report.h **** 
 217:tmk_core/common/report.h **** #if JOYSTICK_BUTTON_COUNT > 0
 218:tmk_core/common/report.h ****     uint8_t buttons[(JOYSTICK_BUTTON_COUNT - 1) / 8 + 1];
 219:tmk_core/common/report.h **** #endif
 220:tmk_core/common/report.h **** } __attribute__((packed)) joystick_report_t;
 221:tmk_core/common/report.h **** 
 222:tmk_core/common/report.h **** /* keycode to system usage */
 223:tmk_core/common/report.h **** static inline uint16_t KEYCODE2SYSTEM(uint8_t key) {
 224:tmk_core/common/report.h ****     switch (key) {
 412              		.loc 3 224 5 is_stmt 1 view .LVU102
 413              	.LBB36:
 414              	.LBB30:
 827:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 415              		.loc 1 827 9 is_stmt 0 view .LVU103
 416 00c2 2438     		subs	r0, r0, #36
 417              	.LVL41:
 827:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 418              		.loc 1 827 9 view .LVU104
 419              	.LBE30:
 420              	.LBE36:
 421              		.loc 1 838 1 view .LVU105
 422 00c4 BDE81040 		pop	{r4, lr}
 423              		.cfi_remember_state
 424              		.cfi_restore 14
 425              		.cfi_restore 4
 426              		.cfi_def_cfa_offset 0
 427              	.LVL42:
 428              	.LBB37:
 429              	.LBB31:
 827:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 430              		.loc 1 827 9 view .LVU106
 431 00c8 80B2     		uxth	r0, r0
 432              	.LVL43:
 827:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 433              		.loc 1 827 9 view .LVU107
 434 00ca FFF7FEBF 		b	host_system_send
 435              	.LVL44:
 436              	.L25:
 437              		.cfi_restore_state
 828:tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 438              		.loc 1 828 12 is_stmt 1 view .LVU108
 828:tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 439              		.loc 1 828 15 is_stmt 0 view .LVU109
 440 00ce 00F15803 		add	r3, r0, #88
 441 00d2 DBB2     		uxtb	r3, r3
 442 00d4 162B     		cmp	r3, #22
 443 00d6 06D8     		bhi	.L26
 829:tmk_core/common/action.c ****     }
 444              		.loc 1 829 9 is_stmt 1 view .LVU110
 445              	.LVL45:
 446              	.LBB27:
 447              	.LBI27:
 225:tmk_core/common/report.h ****         case KC_SYSTEM_POWER:
 226:tmk_core/common/report.h ****             return SYSTEM_POWER_DOWN;
 227:tmk_core/common/report.h ****         case KC_SYSTEM_SLEEP:
 228:tmk_core/common/report.h ****             return SYSTEM_SLEEP;
 229:tmk_core/common/report.h ****         case KC_SYSTEM_WAKE:
 230:tmk_core/common/report.h ****             return SYSTEM_WAKE_UP;
 231:tmk_core/common/report.h ****         default:
 232:tmk_core/common/report.h ****             return 0;
 233:tmk_core/common/report.h ****     }
 234:tmk_core/common/report.h **** }
 235:tmk_core/common/report.h **** 
 236:tmk_core/common/report.h **** /* keycode to consumer usage */
 237:tmk_core/common/report.h **** static inline uint16_t KEYCODE2CONSUMER(uint8_t key) {
 448              		.loc 3 237 24 view .LVU111
 449              	.LBE27:
 450              	.LBE31:
 451              	.LBE37:
 238:tmk_core/common/report.h ****     switch (key) {
 452              		.loc 3 238 5 view .LVU112
 453              	.LBB38:
 454              	.LBB32:
 829:tmk_core/common/action.c ****     }
 455              		.loc 1 829 9 is_stmt 0 view .LVU113
 456 00d8 084A     		ldr	r2, .L32+4
 457              	.LBE32:
 458              	.LBE38:
 459              		.loc 1 838 1 view .LVU114
 460 00da BDE81040 		pop	{r4, lr}
 461              		.cfi_remember_state
 462              		.cfi_restore 14
 463              		.cfi_restore 4
 464              		.cfi_def_cfa_offset 0
 465              	.LBB39:
 466              	.LBB33:
 829:tmk_core/common/action.c ****     }
 467              		.loc 1 829 9 view .LVU115
 468 00de 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 469              	.LVL46:
 829:tmk_core/common/action.c ****     }
 470              		.loc 1 829 9 view .LVU116
 471 00e2 FFF7FEBF 		b	host_consumer_send
 472              	.LVL47:
 473              	.L26:
 474              		.cfi_restore_state
 833:tmk_core/common/action.c ****         mousekey_on(code);
 475              		.loc 1 833 10 is_stmt 1 view .LVU117
 833:tmk_core/common/action.c ****         mousekey_on(code);
 476              		.loc 1 833 13 is_stmt 0 view .LVU118
 477 00e6 EF28     		cmp	r0, #239
 478 00e8 05D9     		bls	.L15
 834:tmk_core/common/action.c ****         mousekey_send();
 479              		.loc 1 834 9 is_stmt 1 view .LVU119
 480 00ea FFF7FEFF 		bl	mousekey_on
 481              	.LVL48:
 835:tmk_core/common/action.c ****     }
 482              		.loc 1 835 9 view .LVU120
 483              	.LBE33:
 484              	.LBE39:
 485              		.loc 1 838 1 is_stmt 0 view .LVU121
 486 00ee BDE81040 		pop	{r4, lr}
 487              		.cfi_remember_state
 488              		.cfi_restore 14
 489              		.cfi_restore 4
 490              		.cfi_def_cfa_offset 0
 491              	.LVL49:
 492              	.LBB40:
 493              	.LBB34:
 835:tmk_core/common/action.c ****     }
 494              		.loc 1 835 9 view .LVU122
 495 00f2 FFF7FEBF 		b	mousekey_send
 496              	.LVL50:
 497              	.L15:
 498              		.cfi_restore_state
 835:tmk_core/common/action.c ****     }
 499              		.loc 1 835 9 view .LVU123
 500              	.LBE34:
 501              	.LBE40:
 502              		.loc 1 838 1 view .LVU124
 503 00f6 10BD     		pop	{r4, pc}
 504              	.L33:
 505              		.align	2
 506              	.L32:
 507 00f8 00000000 		.word	keyboard_report
 508 00fc 00000000 		.word	.LANCHOR0
 509              		.cfi_endproc
 510              	.LFE296:
 512              		.section	.text.unregister_code,"ax",%progbits
 513              		.align	1
 514              		.global	unregister_code
 515              		.syntax unified
 516              		.thumb
 517              		.thumb_func
 518              		.fpu fpv4-sp-d16
 520              	unregister_code:
 521              	.LVL51:
 522              	.LFB297:
 839:tmk_core/common/action.c **** 
 840:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 841:tmk_core/common/action.c ****  *
 842:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 843:tmk_core/common/action.c ****  */
 844:tmk_core/common/action.c **** void unregister_code(uint8_t code) {
 523              		.loc 1 844 36 is_stmt 1 view -0
 524              		.cfi_startproc
 525              		@ args = 0, pretend = 0, frame = 0
 526              		@ frame_needed = 0, uses_anonymous_args = 0
 845:tmk_core/common/action.c ****     if (code == KC_NO) {
 527              		.loc 1 845 5 view .LVU126
 844:tmk_core/common/action.c ****     if (code == KC_NO) {
 528              		.loc 1 844 36 is_stmt 0 view .LVU127
 529 0000 08B5     		push	{r3, lr}
 530              		.cfi_def_cfa_offset 8
 531              		.cfi_offset 3, -8
 532              		.cfi_offset 14, -4
 533              		.loc 1 845 8 view .LVU128
 534 0002 0028     		cmp	r0, #0
 535 0004 58D0     		beq	.L34
 846:tmk_core/common/action.c ****         return;
 847:tmk_core/common/action.c ****     }
 848:tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 849:tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 536              		.loc 1 849 10 is_stmt 1 view .LVU129
 537              		.loc 1 849 13 is_stmt 0 view .LVU130
 538 0006 8228     		cmp	r0, #130
 539 0008 0FD1     		bne	.L37
 850:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 851:tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 852:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1 << USB_LED_CAPS_LOCK))) return;
 540              		.loc 1 852 9 is_stmt 1 view .LVU131
 541              		.loc 1 852 15 is_stmt 0 view .LVU132
 542 000a FFF7FEFF 		bl	host_keyboard_leds
 543              	.LVL52:
 544              		.loc 1 852 12 view .LVU133
 545 000e 8107     		lsls	r1, r0, #30
 546 0010 52D5     		bpl	.L34
 853:tmk_core/common/action.c **** #    endif
 854:tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 547              		.loc 1 854 9 is_stmt 1 view .LVU134
 548 0012 3920     		movs	r0, #57
 549 0014 FFF7FEFF 		bl	add_key
 550              	.LVL53:
 855:tmk_core/common/action.c ****         send_keyboard_report();
 551              		.loc 1 855 9 view .LVU135
 552 0018 FFF7FEFF 		bl	send_keyboard_report
 553              	.LVL54:
 856:tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 554              		.loc 1 856 9 view .LVU136
 555 001c 3920     		movs	r0, #57
 556              	.L54:
 557              	.LBB43:
 558              	.LBB44:
 857:tmk_core/common/action.c ****         send_keyboard_report();
 858:tmk_core/common/action.c ****     }
 859:tmk_core/common/action.c **** 
 860:tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 861:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 862:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1 << USB_LED_NUM_LOCK))) return;
 863:tmk_core/common/action.c **** #    endif
 864:tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 865:tmk_core/common/action.c ****         send_keyboard_report();
 866:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 559              		.loc 1 866 9 is_stmt 0 view .LVU137
 560 001e FFF7FEFF 		bl	del_key
 561              	.LVL55:
 562              	.L55:
 867:tmk_core/common/action.c ****         send_keyboard_report();
 563              		.loc 1 867 9 is_stmt 1 view .LVU138
 564              	.LBE44:
 565              	.LBE43:
 868:tmk_core/common/action.c ****     }
 869:tmk_core/common/action.c **** 
 870:tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 871:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 872:tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1 << USB_LED_SCROLL_LOCK))) return;
 873:tmk_core/common/action.c **** #    endif
 874:tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 875:tmk_core/common/action.c ****         send_keyboard_report();
 876:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 877:tmk_core/common/action.c ****         send_keyboard_report();
 878:tmk_core/common/action.c ****     }
 879:tmk_core/common/action.c **** #endif
 880:tmk_core/common/action.c **** 
 881:tmk_core/common/action.c ****     else if IS_KEY (code) {
 882:tmk_core/common/action.c ****         del_key(code);
 883:tmk_core/common/action.c ****         send_keyboard_report();
 884:tmk_core/common/action.c ****     } else if IS_MOD (code) {
 885:tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 886:tmk_core/common/action.c ****         send_keyboard_report();
 887:tmk_core/common/action.c ****     } else if IS_SYSTEM (code) {
 888:tmk_core/common/action.c ****         host_system_send(0);
 889:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 890:tmk_core/common/action.c ****         host_consumer_send(0);
 891:tmk_core/common/action.c ****     }
 892:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 893:tmk_core/common/action.c ****     else if IS_MOUSEKEY (code) {
 894:tmk_core/common/action.c ****         mousekey_off(code);
 895:tmk_core/common/action.c ****         mousekey_send();
 896:tmk_core/common/action.c ****     }
 897:tmk_core/common/action.c **** #endif
 898:tmk_core/common/action.c **** }
 566              		.loc 1 898 1 is_stmt 0 view .LVU139
 567 0022 BDE80840 		pop	{r3, lr}
 568              		.cfi_remember_state
 569              		.cfi_restore 14
 570              		.cfi_restore 3
 571              		.cfi_def_cfa_offset 0
 572              	.LBB50:
 573              	.LBB45:
 867:tmk_core/common/action.c ****         send_keyboard_report();
 574              		.loc 1 867 9 view .LVU140
 575 0026 FFF7FEBF 		b	send_keyboard_report
 576              	.LVL56:
 577              	.L37:
 578              		.cfi_restore_state
 867:tmk_core/common/action.c ****         send_keyboard_report();
 579              		.loc 1 867 9 view .LVU141
 580              	.LBE45:
 581              	.LBI43:
 844:tmk_core/common/action.c ****     if (code == KC_NO) {
 582              		.loc 1 844 6 is_stmt 1 view .LVU142
 583              	.LBB46:
 860:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 584              		.loc 1 860 10 view .LVU143
 860:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 585              		.loc 1 860 13 is_stmt 0 view .LVU144
 586 002a 8328     		cmp	r0, #131
 587 002c 0AD1     		bne	.L39
 862:tmk_core/common/action.c **** #    endif
 588              		.loc 1 862 9 is_stmt 1 view .LVU145
 862:tmk_core/common/action.c **** #    endif
 589              		.loc 1 862 15 is_stmt 0 view .LVU146
 590 002e FFF7FEFF 		bl	host_keyboard_leds
 591              	.LVL57:
 862:tmk_core/common/action.c **** #    endif
 592              		.loc 1 862 12 view .LVU147
 593 0032 C207     		lsls	r2, r0, #31
 594 0034 40D5     		bpl	.L34
 864:tmk_core/common/action.c ****         send_keyboard_report();
 595              		.loc 1 864 9 is_stmt 1 view .LVU148
 596 0036 5320     		movs	r0, #83
 597 0038 FFF7FEFF 		bl	add_key
 598              	.LVL58:
 865:tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 599              		.loc 1 865 9 view .LVU149
 600 003c FFF7FEFF 		bl	send_keyboard_report
 601              	.LVL59:
 866:tmk_core/common/action.c ****         send_keyboard_report();
 602              		.loc 1 866 9 view .LVU150
 603 0040 5320     		movs	r0, #83
 604 0042 ECE7     		b	.L54
 605              	.LVL60:
 606              	.L39:
 870:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 607              		.loc 1 870 10 view .LVU151
 870:tmk_core/common/action.c **** #    ifdef LOCKING_RESYNC_ENABLE
 608              		.loc 1 870 13 is_stmt 0 view .LVU152
 609 0044 8428     		cmp	r0, #132
 610 0046 0AD1     		bne	.L40
 872:tmk_core/common/action.c **** #    endif
 611              		.loc 1 872 9 is_stmt 1 view .LVU153
 872:tmk_core/common/action.c **** #    endif
 612              		.loc 1 872 15 is_stmt 0 view .LVU154
 613 0048 FFF7FEFF 		bl	host_keyboard_leds
 614              	.LVL61:
 872:tmk_core/common/action.c **** #    endif
 615              		.loc 1 872 12 view .LVU155
 616 004c 4307     		lsls	r3, r0, #29
 617 004e 33D5     		bpl	.L34
 874:tmk_core/common/action.c ****         send_keyboard_report();
 618              		.loc 1 874 9 is_stmt 1 view .LVU156
 619 0050 4720     		movs	r0, #71
 620 0052 FFF7FEFF 		bl	add_key
 621              	.LVL62:
 875:tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 622              		.loc 1 875 9 view .LVU157
 623 0056 FFF7FEFF 		bl	send_keyboard_report
 624              	.LVL63:
 876:tmk_core/common/action.c ****         send_keyboard_report();
 625              		.loc 1 876 9 view .LVU158
 626 005a 4720     		movs	r0, #71
 627 005c DFE7     		b	.L54
 628              	.LVL64:
 629              	.L40:
 881:tmk_core/common/action.c ****         del_key(code);
 630              		.loc 1 881 10 view .LVU159
 881:tmk_core/common/action.c ****         del_key(code);
 631              		.loc 1 881 13 is_stmt 0 view .LVU160
 632 005e 021F     		subs	r2, r0, #4
 633 0060 D2B2     		uxtb	r2, r2
 634 0062 A02A     		cmp	r2, #160
 635 0064 DBD9     		bls	.L54
 884:tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 636              		.loc 1 884 12 is_stmt 1 view .LVU161
 884:tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 637              		.loc 1 884 15 is_stmt 0 view .LVU162
 638 0066 00F12002 		add	r2, r0, #32
 639 006a D2B2     		uxtb	r2, r2
 640 006c 072A     		cmp	r2, #7
 641 006e 07D8     		bhi	.L42
 885:tmk_core/common/action.c ****         send_keyboard_report();
 642              		.loc 1 885 9 is_stmt 1 view .LVU163
 885:tmk_core/common/action.c ****         send_keyboard_report();
 643              		.loc 1 885 18 is_stmt 0 view .LVU164
 644 0070 00F00703 		and	r3, r0, #7
 645 0074 0120     		movs	r0, #1
 646              	.LVL65:
 885:tmk_core/common/action.c ****         send_keyboard_report();
 647              		.loc 1 885 18 view .LVU165
 648 0076 9840     		lsls	r0, r0, r3
 885:tmk_core/common/action.c ****         send_keyboard_report();
 649              		.loc 1 885 9 view .LVU166
 650 0078 C0B2     		uxtb	r0, r0
 651 007a FFF7FEFF 		bl	del_mods
 652              	.LVL66:
 886:tmk_core/common/action.c ****     } else if IS_SYSTEM (code) {
 653              		.loc 1 886 9 is_stmt 1 view .LVU167
 654 007e D0E7     		b	.L55
 655              	.LVL67:
 656              	.L42:
 887:tmk_core/common/action.c ****         host_system_send(0);
 657              		.loc 1 887 12 view .LVU168
 887:tmk_core/common/action.c ****         host_system_send(0);
 658              		.loc 1 887 15 is_stmt 0 view .LVU169
 659 0080 00F15B02 		add	r2, r0, #91
 660 0084 D2B2     		uxtb	r2, r2
 661 0086 022A     		cmp	r2, #2
 662 0088 04D8     		bhi	.L43
 888:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 663              		.loc 1 888 9 is_stmt 1 view .LVU170
 664              	.LBE46:
 665              	.LBE50:
 666              		.loc 1 898 1 is_stmt 0 view .LVU171
 667 008a BDE80840 		pop	{r3, lr}
 668              		.cfi_remember_state
 669              		.cfi_restore 14
 670              		.cfi_restore 3
 671              		.cfi_def_cfa_offset 0
 672              	.LBB51:
 673              	.LBB47:
 888:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 674              		.loc 1 888 9 view .LVU172
 675 008e 0020     		movs	r0, #0
 676              	.LVL68:
 888:tmk_core/common/action.c ****     } else if IS_CONSUMER (code) {
 677              		.loc 1 888 9 view .LVU173
 678 0090 FFF7FEBF 		b	host_system_send
 679              	.LVL69:
 680              	.L43:
 681              		.cfi_restore_state
 889:tmk_core/common/action.c ****         host_consumer_send(0);
 682              		.loc 1 889 12 is_stmt 1 view .LVU174
 889:tmk_core/common/action.c ****         host_consumer_send(0);
 683              		.loc 1 889 15 is_stmt 0 view .LVU175
 684 0094 00F15802 		add	r2, r0, #88
 685 0098 D2B2     		uxtb	r2, r2
 686 009a 162A     		cmp	r2, #22
 687 009c 04D8     		bhi	.L44
 890:tmk_core/common/action.c ****     }
 688              		.loc 1 890 9 is_stmt 1 view .LVU176
 689              	.LBE47:
 690              	.LBE51:
 691              		.loc 1 898 1 is_stmt 0 view .LVU177
 692 009e BDE80840 		pop	{r3, lr}
 693              		.cfi_remember_state
 694              		.cfi_restore 14
 695              		.cfi_restore 3
 696              		.cfi_def_cfa_offset 0
 697              	.LBB52:
 698              	.LBB48:
 890:tmk_core/common/action.c ****     }
 699              		.loc 1 890 9 view .LVU178
 700 00a2 0020     		movs	r0, #0
 701              	.LVL70:
 890:tmk_core/common/action.c ****     }
 702              		.loc 1 890 9 view .LVU179
 703 00a4 FFF7FEBF 		b	host_consumer_send
 704              	.LVL71:
 705              	.L44:
 706              		.cfi_restore_state
 893:tmk_core/common/action.c ****         mousekey_off(code);
 707              		.loc 1 893 10 is_stmt 1 view .LVU180
 893:tmk_core/common/action.c ****         mousekey_off(code);
 708              		.loc 1 893 13 is_stmt 0 view .LVU181
 709 00a8 EF28     		cmp	r0, #239
 710 00aa 05D9     		bls	.L34
 894:tmk_core/common/action.c ****         mousekey_send();
 711              		.loc 1 894 9 is_stmt 1 view .LVU182
 712 00ac FFF7FEFF 		bl	mousekey_off
 713              	.LVL72:
 895:tmk_core/common/action.c ****     }
 714              		.loc 1 895 9 view .LVU183
 715              	.LBE48:
 716              	.LBE52:
 717              		.loc 1 898 1 is_stmt 0 view .LVU184
 718 00b0 BDE80840 		pop	{r3, lr}
 719              		.cfi_remember_state
 720              		.cfi_restore 14
 721              		.cfi_restore 3
 722              		.cfi_def_cfa_offset 0
 723              	.LBB53:
 724              	.LBB49:
 895:tmk_core/common/action.c ****     }
 725              		.loc 1 895 9 view .LVU185
 726 00b4 FFF7FEBF 		b	mousekey_send
 727              	.LVL73:
 728              	.L34:
 729              		.cfi_restore_state
 895:tmk_core/common/action.c ****     }
 730              		.loc 1 895 9 view .LVU186
 731              	.LBE49:
 732              	.LBE53:
 733              		.loc 1 898 1 view .LVU187
 734 00b8 08BD     		pop	{r3, pc}
 735              		.cfi_endproc
 736              	.LFE297:
 738              		.section	.text.tap_code_delay,"ax",%progbits
 739              		.align	1
 740              		.global	tap_code_delay
 741              		.syntax unified
 742              		.thumb
 743              		.thumb_func
 744              		.fpu fpv4-sp-d16
 746              	tap_code_delay:
 747              	.LVL74:
 748              	.LFB298:
 899:tmk_core/common/action.c **** 
 900:tmk_core/common/action.c **** /** \brief Tap a keycode with a delay.
 901:tmk_core/common/action.c ****  *
 902:tmk_core/common/action.c ****  * \param code The basic keycode to tap.
 903:tmk_core/common/action.c ****  * \param delay The amount of time in milliseconds to leave the keycode registered, before unregist
 904:tmk_core/common/action.c ****  */
 905:tmk_core/common/action.c **** void tap_code_delay(uint8_t code, uint16_t delay) {
 749              		.loc 1 905 51 is_stmt 1 view -0
 750              		.cfi_startproc
 751              		@ args = 0, pretend = 0, frame = 0
 752              		@ frame_needed = 0, uses_anonymous_args = 0
 906:tmk_core/common/action.c ****     register_code(code);
 753              		.loc 1 906 5 view .LVU189
 905:tmk_core/common/action.c ****     register_code(code);
 754              		.loc 1 905 51 is_stmt 0 view .LVU190
 755 0000 38B5     		push	{r3, r4, r5, lr}
 756              		.cfi_def_cfa_offset 16
 757              		.cfi_offset 3, -16
 758              		.cfi_offset 4, -12
 759              		.cfi_offset 5, -8
 760              		.cfi_offset 14, -4
 905:tmk_core/common/action.c ****     register_code(code);
 761              		.loc 1 905 51 view .LVU191
 762 0002 0546     		mov	r5, r0
 763 0004 0C46     		mov	r4, r1
 764              		.loc 1 906 5 view .LVU192
 765 0006 FFF7FEFF 		bl	register_code
 766              	.LVL75:
 907:tmk_core/common/action.c ****     for (uint16_t i = delay; i > 0; i--) {
 767              		.loc 1 907 5 is_stmt 1 view .LVU193
 768              	.LBB54:
 769              		.loc 1 907 10 view .LVU194
 770              	.L57:
 771              		.loc 1 907 30 discriminator 2 view .LVU195
 772              		.loc 1 907 5 is_stmt 0 discriminator 2 view .LVU196
 773 000a 24B9     		cbnz	r4, .L58
 774              		.loc 1 907 5 discriminator 2 view .LVU197
 775              	.LBE54:
 908:tmk_core/common/action.c ****         wait_ms(1);
 909:tmk_core/common/action.c ****     }
 910:tmk_core/common/action.c ****     unregister_code(code);
 776              		.loc 1 910 5 is_stmt 1 view .LVU198
 777 000c 2846     		mov	r0, r5
 911:tmk_core/common/action.c **** }
 778              		.loc 1 911 1 is_stmt 0 view .LVU199
 779 000e BDE83840 		pop	{r3, r4, r5, lr}
 780              		.cfi_remember_state
 781              		.cfi_restore 14
 782              		.cfi_restore 5
 783              		.cfi_restore 4
 784              		.cfi_restore 3
 785              		.cfi_def_cfa_offset 0
 786              	.LVL76:
 910:tmk_core/common/action.c **** }
 787              		.loc 1 910 5 view .LVU200
 788 0012 FFF7FEBF 		b	unregister_code
 789              	.LVL77:
 790              	.L58:
 791              		.cfi_restore_state
 792              	.LBB55:
 908:tmk_core/common/action.c ****         wait_ms(1);
 793              		.loc 1 908 9 is_stmt 1 discriminator 1 view .LVU201
 908:tmk_core/common/action.c ****         wait_ms(1);
 794              		.loc 1 908 9 discriminator 1 view .LVU202
 908:tmk_core/common/action.c ****         wait_ms(1);
 795              		.loc 1 908 9 discriminator 1 view .LVU203
 796 0016 6420     		movs	r0, #100
 907:tmk_core/common/action.c ****         wait_ms(1);
 797              		.loc 1 907 38 is_stmt 0 discriminator 1 view .LVU204
 798 0018 013C     		subs	r4, r4, #1
 799              	.LVL78:
 908:tmk_core/common/action.c ****     }
 800              		.loc 1 908 9 discriminator 1 view .LVU205
 801 001a FFF7FEFF 		bl	chThdSleep
 802              	.LVL79:
 908:tmk_core/common/action.c ****     }
 803              		.loc 1 908 9 is_stmt 1 discriminator 1 view .LVU206
 907:tmk_core/common/action.c ****         wait_ms(1);
 804              		.loc 1 907 37 discriminator 1 view .LVU207
 907:tmk_core/common/action.c ****         wait_ms(1);
 805              		.loc 1 907 38 is_stmt 0 discriminator 1 view .LVU208
 806 001e A4B2     		uxth	r4, r4
 807              	.LVL80:
 907:tmk_core/common/action.c ****         wait_ms(1);
 808              		.loc 1 907 38 discriminator 1 view .LVU209
 809 0020 F3E7     		b	.L57
 810              	.LBE55:
 811              		.cfi_endproc
 812              	.LFE298:
 814              		.section	.text.tap_code,"ax",%progbits
 815              		.align	1
 816              		.global	tap_code
 817              		.syntax unified
 818              		.thumb
 819              		.thumb_func
 820              		.fpu fpv4-sp-d16
 822              	tap_code:
 823              	.LVL81:
 824              	.LFB299:
 912:tmk_core/common/action.c **** 
 913:tmk_core/common/action.c **** /** \brief Tap a keycode with the default delay.
 914:tmk_core/common/action.c ****  *
 915:tmk_core/common/action.c ****  * \param code The basic keycode to tap. If `code` is `KC_CAPS`, the delay will be `TAP_HOLD_CAPS_D
 916:tmk_core/common/action.c ****  */
 917:tmk_core/common/action.c **** void tap_code(uint8_t code) { tap_code_delay(code, code == KC_CAPS ? TAP_HOLD_CAPS_DELAY : TAP_CODE
 825              		.loc 1 917 29 is_stmt 1 view -0
 826              		.cfi_startproc
 827              		@ args = 0, pretend = 0, frame = 0
 828              		@ frame_needed = 0, uses_anonymous_args = 0
 829              		@ link register save eliminated.
 830              		.loc 1 917 31 view .LVU211
 831 0000 3928     		cmp	r0, #57
 832 0002 0CBF     		ite	eq
 833 0004 5021     		moveq	r1, #80
 834 0006 0A21     		movne	r1, #10
 835 0008 FFF7FEBF 		b	tap_code_delay
 836              	.LVL82:
 837              		.loc 1 917 31 is_stmt 0 view .LVU212
 838              		.cfi_endproc
 839              	.LFE299:
 841              		.section	.text.register_mods,"ax",%progbits
 842              		.align	1
 843              		.global	register_mods
 844              		.syntax unified
 845              		.thumb
 846              		.thumb_func
 847              		.fpu fpv4-sp-d16
 849              	register_mods:
 850              	.LVL83:
 851              	.LFB300:
 918:tmk_core/common/action.c **** 
 919:tmk_core/common/action.c **** /** \brief Adds the given physically pressed modifiers and sends a keyboard report immediately.
 920:tmk_core/common/action.c ****  *
 921:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to register.
 922:tmk_core/common/action.c ****  */
 923:tmk_core/common/action.c **** void register_mods(uint8_t mods) {
 852              		.loc 1 923 34 is_stmt 1 view -0
 853              		.cfi_startproc
 854              		@ args = 0, pretend = 0, frame = 0
 855              		@ frame_needed = 0, uses_anonymous_args = 0
 924:tmk_core/common/action.c ****     if (mods) {
 856              		.loc 1 924 5 view .LVU214
 923:tmk_core/common/action.c ****     if (mods) {
 857              		.loc 1 923 34 is_stmt 0 view .LVU215
 858 0000 08B5     		push	{r3, lr}
 859              		.cfi_def_cfa_offset 8
 860              		.cfi_offset 3, -8
 861              		.cfi_offset 14, -4
 862              		.loc 1 924 8 view .LVU216
 863 0002 28B1     		cbz	r0, .L62
 925:tmk_core/common/action.c ****         add_mods(mods);
 864              		.loc 1 925 9 is_stmt 1 view .LVU217
 865 0004 FFF7FEFF 		bl	add_mods
 866              	.LVL84:
 926:tmk_core/common/action.c ****         send_keyboard_report();
 867              		.loc 1 926 9 view .LVU218
 927:tmk_core/common/action.c ****     }
 928:tmk_core/common/action.c **** }
 868              		.loc 1 928 1 is_stmt 0 view .LVU219
 869 0008 BDE80840 		pop	{r3, lr}
 870              		.cfi_remember_state
 871              		.cfi_restore 14
 872              		.cfi_restore 3
 873              		.cfi_def_cfa_offset 0
 926:tmk_core/common/action.c ****         send_keyboard_report();
 874              		.loc 1 926 9 view .LVU220
 875 000c FFF7FEBF 		b	send_keyboard_report
 876              	.LVL85:
 877              	.L62:
 878              		.cfi_restore_state
 879              		.loc 1 928 1 view .LVU221
 880 0010 08BD     		pop	{r3, pc}
 881              		.cfi_endproc
 882              	.LFE300:
 884              		.section	.text.unregister_mods,"ax",%progbits
 885              		.align	1
 886              		.global	unregister_mods
 887              		.syntax unified
 888              		.thumb
 889              		.thumb_func
 890              		.fpu fpv4-sp-d16
 892              	unregister_mods:
 893              	.LVL86:
 894              	.LFB301:
 929:tmk_core/common/action.c **** 
 930:tmk_core/common/action.c **** /** \brief Removes the given physically pressed modifiers and sends a keyboard report immediately.
 931:tmk_core/common/action.c ****  *
 932:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to unregister.
 933:tmk_core/common/action.c ****  */
 934:tmk_core/common/action.c **** void unregister_mods(uint8_t mods) {
 895              		.loc 1 934 36 is_stmt 1 view -0
 896              		.cfi_startproc
 897              		@ args = 0, pretend = 0, frame = 0
 898              		@ frame_needed = 0, uses_anonymous_args = 0
 935:tmk_core/common/action.c ****     if (mods) {
 899              		.loc 1 935 5 view .LVU223
 934:tmk_core/common/action.c ****     if (mods) {
 900              		.loc 1 934 36 is_stmt 0 view .LVU224
 901 0000 08B5     		push	{r3, lr}
 902              		.cfi_def_cfa_offset 8
 903              		.cfi_offset 3, -8
 904              		.cfi_offset 14, -4
 905              		.loc 1 935 8 view .LVU225
 906 0002 28B1     		cbz	r0, .L64
 936:tmk_core/common/action.c ****         del_mods(mods);
 907              		.loc 1 936 9 is_stmt 1 view .LVU226
 908 0004 FFF7FEFF 		bl	del_mods
 909              	.LVL87:
 937:tmk_core/common/action.c ****         send_keyboard_report();
 910              		.loc 1 937 9 view .LVU227
 938:tmk_core/common/action.c ****     }
 939:tmk_core/common/action.c **** }
 911              		.loc 1 939 1 is_stmt 0 view .LVU228
 912 0008 BDE80840 		pop	{r3, lr}
 913              		.cfi_remember_state
 914              		.cfi_restore 14
 915              		.cfi_restore 3
 916              		.cfi_def_cfa_offset 0
 937:tmk_core/common/action.c ****         send_keyboard_report();
 917              		.loc 1 937 9 view .LVU229
 918 000c FFF7FEBF 		b	send_keyboard_report
 919              	.LVL88:
 920              	.L64:
 921              		.cfi_restore_state
 922              		.loc 1 939 1 view .LVU230
 923 0010 08BD     		pop	{r3, pc}
 924              		.cfi_endproc
 925              	.LFE301:
 927              		.section	.text.process_action,"ax",%progbits
 928              		.align	1
 929              		.global	process_action
 930              		.syntax unified
 931              		.thumb
 932              		.thumb_func
 933              		.fpu fpv4-sp-d16
 935              	process_action:
 936              	.LVL89:
 937              	.LFB295:
 255:tmk_core/common/action.c ****     keyevent_t event = record->event;
 938              		.loc 1 255 59 is_stmt 1 view -0
 939              		.cfi_startproc
 940              		@ args = 0, pretend = 0, frame = 8
 941              		@ frame_needed = 0, uses_anonymous_args = 0
 256:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 942              		.loc 1 256 5 view .LVU232
 255:tmk_core/common/action.c ****     keyevent_t event = record->event;
 943              		.loc 1 255 59 is_stmt 0 view .LVU233
 944 0000 2DE9F347 		push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
 945              		.cfi_def_cfa_offset 40
 946              		.cfi_offset 4, -32
 947              		.cfi_offset 5, -28
 948              		.cfi_offset 6, -24
 949              		.cfi_offset 7, -20
 950              		.cfi_offset 8, -16
 951              		.cfi_offset 9, -12
 952              		.cfi_offset 10, -8
 953              		.cfi_offset 14, -4
 954              	.LVL90:
 258:tmk_core/common/action.c **** #endif
 955              		.loc 1 258 36 view .LVU234
 956 0004 8679     		ldrb	r6, [r0, #6]	@ zero_extendqisi2
 256:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 957              		.loc 1 256 16 view .LVU235
 958 0006 8578     		ldrb	r5, [r0, #2]	@ zero_extendqisi2
 959              	.LVL91:
 258:tmk_core/common/action.c **** #endif
 960              		.loc 1 258 5 is_stmt 1 view .LVU236
 255:tmk_core/common/action.c ****     keyevent_t event = record->event;
 961              		.loc 1 255 59 is_stmt 0 view .LVU237
 962 0008 8046     		mov	r8, r0
 963 000a 0C46     		mov	r4, r1	@ movhi
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 964              		.loc 1 264 9 view .LVU238
 965 000c FFF7FEFF 		bl	is_oneshot_layer_active
 966              	.LVL92:
 258:tmk_core/common/action.c **** #endif
 967              		.loc 1 258 13 view .LVU239
 968 0010 3609     		lsrs	r6, r6, #4
 969              	.LVL93:
 262:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 970              		.loc 1 262 5 is_stmt 1 view .LVU240
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 971              		.loc 1 264 5 view .LVU241
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 972              		.loc 1 264 8 is_stmt 0 view .LVU242
 973 0012 0746     		mov	r7, r0
 974 0014 A0B1     		cbz	r0, .L67
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 975              		.loc 1 264 43 discriminator 1 view .LVU243
 976 0016 2F46     		mov	r7, r5
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 977              		.loc 1 264 35 discriminator 1 view .LVU244
 978 0018 95B1     		cbz	r5, .L67
 979              	.LVL94:
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 980              		.loc 1 264 71 discriminator 2 view .LVU245
 981 001a C4F30723 		ubfx	r3, r4, #8, #8
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 982              		.loc 1 264 52 discriminator 2 view .LVU246
 983 001e 03F0F003 		and	r3, r3, #240
 984 0022 402B     		cmp	r3, #64
 985 0024 04D0     		beq	.L68
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 986              		.loc 1 264 87 discriminator 3 view .LVU247
 987 0026 04F12003 		add	r3, r4, #32
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 988              		.loc 1 264 84 discriminator 3 view .LVU248
 989 002a DBB2     		uxtb	r3, r3
 990 002c 072B     		cmp	r3, #7
 991 002e 1ED9     		bls	.L146
 992              	.L68:
 269:tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 993              		.loc 1 269 9 is_stmt 1 view .LVU249
 994 0030 0220     		movs	r0, #2
 995 0032 FFF7FEFF 		bl	clear_oneshot_layer_state
 996              	.LVL95:
 270:tmk_core/common/action.c ****     }
 997              		.loc 1 270 9 view .LVU250
 270:tmk_core/common/action.c ****     }
 998              		.loc 1 270 31 is_stmt 0 view .LVU251
 999 0036 FFF7FEFF 		bl	is_oneshot_layer_active
 1000              	.LVL96:
 270:tmk_core/common/action.c ****     }
 1001              		.loc 1 270 9 view .LVU252
 1002 003a 80F00100 		eor	r0, r0, #1
 1003 003e C7B2     		uxtb	r7, r0
 1004              	.LVL97:
 1005              	.L67:
 274:tmk_core/common/action.c ****         /* Key and Mods */
 1006              		.loc 1 274 5 is_stmt 1 view .LVU253
 274:tmk_core/common/action.c ****         /* Key and Mods */
 1007              		.loc 1 274 24 is_stmt 0 view .LVU254
 1008 0040 C4F30339 		ubfx	r9, r4, #12, #4
 1009 0044 B9F10F0F 		cmp	r9, #15
 1010 0048 3FD8     		bhi	.L69
 1011 004a DFE819F0 		tbh	[pc, r9, lsl #1]
 1012              	.L71:
 1013 004e 1200     		.2byte	(.L79-.L71)/2
 1014 0050 1200     		.2byte	(.L79-.L71)/2
 1015 0052 6300     		.2byte	(.L78-.L71)/2
 1016 0054 6300     		.2byte	(.L78-.L71)/2
 1017 0056 B000     		.2byte	(.L77-.L71)/2
 1018 0058 C700     		.2byte	(.L76-.L71)/2
 1019 005a 3E00     		.2byte	(.L69-.L71)/2
 1020 005c 3E00     		.2byte	(.L69-.L71)/2
 1021 005e D100     		.2byte	(.L75-.L71)/2
 1022 0060 2E01     		.2byte	(.L74-.L71)/2
 1023 0062 3E01     		.2byte	(.L73-.L71)/2
 1024 0064 3E01     		.2byte	(.L73-.L71)/2
 1025 0066 9401     		.2byte	(.L72-.L71)/2
 1026 0068 3E00     		.2byte	(.L69-.L71)/2
 1027 006a 3E00     		.2byte	(.L69-.L71)/2
 1028 006c 9D01     		.2byte	(.L70-.L71)/2
 1029              	.LVL98:
 1030              		.p2align 1
 1031              	.L146:
 262:tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 1032              		.loc 1 262 10 view .LVU255
 1033 006e 0027     		movs	r7, #0
 1034 0070 E6E7     		b	.L67
 1035              	.LVL99:
 1036              	.L79:
 1037              	.LBB56:
 278:tmk_core/common/action.c ****             if (event.pressed) {
 1038              		.loc 1 278 13 is_stmt 1 view .LVU256
 278:tmk_core/common/action.c ****             if (event.pressed) {
 1039              		.loc 1 278 44 is_stmt 0 view .LVU257
 1040 0072 C4F30723 		ubfx	r3, r4, #8, #8
 278:tmk_core/common/action.c ****             if (event.pressed) {
 1041              		.loc 1 278 21 view .LVU258
 1042 0076 C4F30326 		ubfx	r6, r4, #8, #4
 1043 007a 13F0F00F 		tst	r3, #240
 1044 007e 18BF     		it	ne
 1045 0080 3601     		lslne	r6, r6, #4
 1046              	.LVL100:
 279:tmk_core/common/action.c ****                 if (mods) {
 1047              		.loc 1 279 13 is_stmt 1 view .LVU259
 1048              	.LBE56:
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 1049              		.loc 1 264 88 is_stmt 0 view .LVU260
 1050 0082 E4B2     		uxtb	r4, r4
 1051              	.LVL101:
 1052              	.LBB57:
 279:tmk_core/common/action.c ****                 if (mods) {
 1053              		.loc 1 279 16 view .LVU261
 1054 0084 95B1     		cbz	r5, .L81
 280:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 1055              		.loc 1 280 17 is_stmt 1 view .LVU262
 280:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 1056              		.loc 1 280 20 is_stmt 0 view .LVU263
 1057 0086 56B1     		cbz	r6, .L102
 281:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 1058              		.loc 1 281 21 is_stmt 1 view .LVU264
 281:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 1059              		.loc 1 281 25 is_stmt 0 view .LVU265
 1060 0088 04F12003 		add	r3, r4, #32
 281:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 1061              		.loc 1 281 24 view .LVU266
 1062 008c DBB2     		uxtb	r3, r3
 1063 008e 072B     		cmp	r3, #7
 285:tmk_core/common/action.c ****                     } else {
 1064              		.loc 1 285 25 view .LVU267
 1065 0090 3046     		mov	r0, r6
 281:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 1066              		.loc 1 281 24 view .LVU268
 1067 0092 00D9     		bls	.L83
 281:tmk_core/common/action.c ****                         // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would make i
 1068              		.loc 1 281 49 discriminator 1 view .LVU269
 1069 0094 3CB9     		cbnz	r4, .L84
 1070              	.L83:
 285:tmk_core/common/action.c ****                     } else {
 1071              		.loc 1 285 25 is_stmt 1 view .LVU270
 1072 0096 FFF7FEFF 		bl	add_mods
 1073              	.LVL102:
 1074              	.L85:
 289:tmk_core/common/action.c ****                 }
 1075              		.loc 1 289 21 view .LVU271
 1076 009a FFF7FEFF 		bl	send_keyboard_report
 1077              	.LVL103:
 291:tmk_core/common/action.c ****             } else {
 1078              		.loc 1 291 17 view .LVU272
 1079              	.L102:
 291:tmk_core/common/action.c ****             } else {
 1080              		.loc 1 291 17 is_stmt 0 view .LVU273
 1081              	.LBE57:
 1082              	.LBB58:
 378:tmk_core/common/action.c ****                                 register_code(action.key.code);
 1083              		.loc 1 378 73 is_stmt 1 view .LVU274
 379:tmk_core/common/action.c ****                             }
 1084              		.loc 1 379 33 view .LVU275
 1085 009e 2046     		mov	r0, r4
 1086              	.LVL104:
 1087              	.L188:
 379:tmk_core/common/action.c ****                             }
 1088              		.loc 1 379 33 is_stmt 0 view .LVU276
 1089              	.LBE58:
 571:tmk_core/common/action.c ****                         } else {
 1090              		.loc 1 571 29 view .LVU277
 1091 00a0 FFF7FEFF 		bl	register_code
 1092              	.LVL105:
 1093 00a4 11E0     		b	.L69
 1094              	.LVL106:
 1095              	.L84:
 1096              	.LBB59:
 287:tmk_core/common/action.c ****                     }
 1097              		.loc 1 287 25 is_stmt 1 view .LVU278
 1098 00a6 FFF7FEFF 		bl	add_weak_mods
 1099              	.LVL107:
 1100 00aa F6E7     		b	.L85
 1101              	.L81:
 293:tmk_core/common/action.c ****                 if (mods) {
 1102              		.loc 1 293 17 view .LVU279
 1103 00ac 2046     		mov	r0, r4
 1104 00ae FFF7FEFF 		bl	unregister_code
 1105              	.LVL108:
 294:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 1106              		.loc 1 294 17 view .LVU280
 294:tmk_core/common/action.c ****                     if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 1107              		.loc 1 294 20 is_stmt 0 view .LVU281
 1108 00b2 56B1     		cbz	r6, .L69
 295:tmk_core/common/action.c ****                         del_mods(mods);
 1109              		.loc 1 295 21 is_stmt 1 view .LVU282
 295:tmk_core/common/action.c ****                         del_mods(mods);
 1110              		.loc 1 295 25 is_stmt 0 view .LVU283
 1111 00b4 04F12003 		add	r3, r4, #32
 295:tmk_core/common/action.c ****                         del_mods(mods);
 1112              		.loc 1 295 24 view .LVU284
 1113 00b8 DBB2     		uxtb	r3, r3
 1114 00ba 072B     		cmp	r3, #7
 296:tmk_core/common/action.c ****                     } else {
 1115              		.loc 1 296 25 view .LVU285
 1116 00bc 3046     		mov	r0, r6
 295:tmk_core/common/action.c ****                         del_mods(mods);
 1117              		.loc 1 295 24 view .LVU286
 1118 00be 00D9     		bls	.L87
 295:tmk_core/common/action.c ****                         del_mods(mods);
 1119              		.loc 1 295 49 discriminator 1 view .LVU287
 1120 00c0 2CBB     		cbnz	r4, .L88
 1121              	.L87:
 296:tmk_core/common/action.c ****                     } else {
 1122              		.loc 1 296 25 is_stmt 1 view .LVU288
 1123 00c2 FFF7FEFF 		bl	del_mods
 1124              	.LVL109:
 1125              	.L89:
 300:tmk_core/common/action.c ****                 }
 1126              		.loc 1 300 21 view .LVU289
 1127 00c6 FFF7FEFF 		bl	send_keyboard_report
 1128              	.LVL110:
 1129              	.L69:
 300:tmk_core/common/action.c ****                 }
 1130              		.loc 1 300 21 is_stmt 0 view .LVU290
 1131              	.LBE59:
 685:tmk_core/common/action.c ****         case ACT_LAYER:
 1132              		.loc 1 685 5 is_stmt 1 view .LVU291
 1133 00ca A9F10809 		sub	r9, r9, #8
 1134 00ce B9F1030F 		cmp	r9, #3
 1135 00d2 03D8     		bhi	.L142
 692:tmk_core/common/action.c ****             break;
 1136              		.loc 1 692 13 view .LVU292
 1137 00d4 FFF7FEFF 		bl	host_keyboard_leds
 1138              	.LVL111:
 1139 00d8 FFF7FEFF 		bl	led_set
 1140              	.LVL112:
 693:tmk_core/common/action.c ****         default:
 1141              		.loc 1 693 13 view .LVU293
 1142              	.L142:
 738:tmk_core/common/action.c ****         record->event.pressed = false;
 1143              		.loc 1 738 5 view .LVU294
 738:tmk_core/common/action.c ****         record->event.pressed = false;
 1144              		.loc 1 738 8 is_stmt 0 view .LVU295
 1145 00dc 002F     		cmp	r7, #0
 1146 00de 00F05A81 		beq	.L66
 738:tmk_core/common/action.c ****         record->event.pressed = false;
 1147              		.loc 1 738 33 discriminator 1 view .LVU296
 1148 00e2 FFF7FEFF 		bl	get_oneshot_layer_state
 1149              	.LVL113:
 738:tmk_core/common/action.c ****         record->event.pressed = false;
 1150              		.loc 1 738 28 discriminator 1 view .LVU297
 1151 00e6 10F00100 		ands	r0, r0, #1
 1152 00ea 40F05481 		bne	.L66
 739:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 1153              		.loc 1 739 9 is_stmt 1 view .LVU298
 739:tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 1154              		.loc 1 739 31 is_stmt 0 view .LVU299
 1155 00ee 88F80200 		strb	r0, [r8, #2]
 740:tmk_core/common/action.c ****         process_record(record);
 1156              		.loc 1 740 9 is_stmt 1 view .LVU300
 1157 00f2 FFF7FEFF 		bl	get_oneshot_layer
 1158              	.LVL114:
 1159 00f6 FFF7FEFF 		bl	layer_on
 1160              	.LVL115:
 741:tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 1161              		.loc 1 741 9 view .LVU301
 1162 00fa 4046     		mov	r0, r8
 1163 00fc FFF7FEFF 		bl	process_record
 1164              	.LVL116:
 742:tmk_core/common/action.c ****     }
 1165              		.loc 1 742 9 view .LVU302
 1166 0100 FFF7FEFF 		bl	get_oneshot_layer
 1167              	.LVL117:
 745:tmk_core/common/action.c **** 
 1168              		.loc 1 745 1 is_stmt 0 view .LVU303
 1169 0104 02B0     		add	sp, sp, #8
 1170              		.cfi_remember_state
 1171              		.cfi_def_cfa_offset 32
 1172              		@ sp needed
 1173 0106 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 1174              		.cfi_restore 14
 1175              		.cfi_restore 10
 1176              		.cfi_restore 9
 1177              		.cfi_restore 8
 1178              		.cfi_restore 7
 1179              		.cfi_restore 6
 1180              		.cfi_restore 5
 1181              		.cfi_restore 4
 1182              		.cfi_def_cfa_offset 0
 1183              	.LVL118:
 742:tmk_core/common/action.c ****     }
 1184              		.loc 1 742 9 view .LVU304
 1185 010a FFF7FEBF 		b	layer_off
 1186              	.LVL119:
 1187              	.L88:
 1188              		.cfi_restore_state
 1189              	.LBB60:
 298:tmk_core/common/action.c ****                     }
 1190              		.loc 1 298 25 is_stmt 1 view .LVU305
 1191 010e FFF7FEFF 		bl	del_weak_mods
 1192              	.LVL120:
 1193 0112 D8E7     		b	.L89
 1194              	.LVL121:
 1195              	.L78:
 298:tmk_core/common/action.c ****                     }
 1196              		.loc 1 298 25 is_stmt 0 view .LVU306
 1197              	.LBE60:
 1198              	.LBB61:
 307:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1199              		.loc 1 307 13 is_stmt 1 view .LVU307
 307:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1200              		.loc 1 307 44 is_stmt 0 view .LVU308
 1201 0114 C4F30723 		ubfx	r3, r4, #8, #8
 307:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1202              		.loc 1 307 21 view .LVU309
 1203 0118 03F0F003 		and	r3, r3, #240
 1204              	.LBE61:
 1205              	.LBB62:
 278:tmk_core/common/action.c ****             if (event.pressed) {
 1206              		.loc 1 278 21 view .LVU310
 1207 011c C4F3032A 		ubfx	r10, r4, #8, #4
 1208              	.LBE62:
 1209              	.LBB63:
 307:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1210              		.loc 1 307 21 view .LVU311
 1211 0120 202B     		cmp	r3, #32
 308:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 1212              		.loc 1 308 37 view .LVU312
 1213 0122 E4B2     		uxtb	r4, r4
 1214              	.LVL122:
 307:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1215              		.loc 1 307 21 view .LVU313
 1216 0124 18BF     		it	ne
 1217 0126 4FEA0A1A 		lslne	r10, r10, #4
 1218              	.LVL123:
 308:tmk_core/common/action.c **** #    ifndef NO_ACTION_ONESHOT
 1219              		.loc 1 308 13 is_stmt 1 view .LVU314
 1220 012a 64B1     		cbz	r4, .L91
 1221 012c 012C     		cmp	r4, #1
 1222 012e 28D0     		beq	.L92
 363:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1223              		.loc 1 363 21 view .LVU315
 363:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1224              		.loc 1 363 24 is_stmt 0 view .LVU316
 1225 0130 7DB3     		cbz	r5, .L100
 364:tmk_core/common/action.c **** #    if !defined(IGNORE_MOD_TAP_INTERRUPT) || defined(IGNORE_MOD_TAP_INTERRUPT_PER_KEY)
 1226              		.loc 1 364 25 is_stmt 1 view .LVU317
 364:tmk_core/common/action.c **** #    if !defined(IGNORE_MOD_TAP_INTERRUPT) || defined(IGNORE_MOD_TAP_INTERRUPT_PER_KEY)
 1227              		.loc 1 364 28 is_stmt 0 view .LVU318
 1228 0132 4EB3     		cbz	r6, .L101
 366:tmk_core/common/action.c **** #        ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
 1229              		.loc 1 366 29 is_stmt 1 view .LVU319
 370:tmk_core/common/action.c ****                                 dprint("mods_tap: tap: cancel: add_mods\n");
 1230              		.loc 1 370 33 is_stmt 0 view .LVU320
 1231 0134 98F80630 		ldrb	r3, [r8, #6]	@ zero_extendqisi2
 366:tmk_core/common/action.c **** #        ifdef IGNORE_MOD_TAP_INTERRUPT_PER_KEY
 1232              		.loc 1 366 32 view .LVU321
 1233 0138 DA07     		lsls	r2, r3, #31
 1234 013a B0D5     		bpl	.L102
 371:tmk_core/common/action.c ****                                 // ad hoc: set 0 to cancel tap
 1235              		.loc 1 371 76 is_stmt 1 view .LVU322
 373:tmk_core/common/action.c ****                                 register_mods(mods);
 1236              		.loc 1 373 33 view .LVU323
 373:tmk_core/common/action.c ****                                 register_mods(mods);
 1237              		.loc 1 373 51 is_stmt 0 view .LVU324
 1238 013c 6FF30713 		bfc	r3, #4, #4
 1239 0140 88F80630 		strb	r3, [r8, #6]
 374:tmk_core/common/action.c ****                             } else
 1240              		.loc 1 374 33 is_stmt 1 view .LVU325
 1241 0144 20E0     		b	.L101
 1242              	.L91:
 312:tmk_core/common/action.c ****                         if (tap_count == 0) {
 1243              		.loc 1 312 21 view .LVU326
 312:tmk_core/common/action.c ****                         if (tap_count == 0) {
 1244              		.loc 1 312 24 is_stmt 0 view .LVU327
 1245 0146 95B1     		cbz	r5, .L94
 313:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: 0\n");
 1246              		.loc 1 313 25 is_stmt 1 view .LVU328
 313:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: 0\n");
 1247              		.loc 1 313 28 is_stmt 0 view .LVU329
 1248 0148 3EB9     		cbnz	r6, .L95
 1249              	.L96:
 327:tmk_core/common/action.c ****                         }
 1250              		.loc 1 327 29 is_stmt 1 view .LVU330
 327:tmk_core/common/action.c ****                         }
 1251              		.loc 1 327 50 is_stmt 0 view .LVU331
 1252 014a FFF7FEFF 		bl	get_oneshot_mods
 1253              	.LVL124:
 327:tmk_core/common/action.c ****                         }
 1254              		.loc 1 327 29 view .LVU332
 1255 014e 40EA0A00 		orr	r0, r0, r10
 1256 0152 C0B2     		uxtb	r0, r0
 1257              	.LVL125:
 1258              	.L186:
 327:tmk_core/common/action.c ****                         }
 1259              		.loc 1 327 29 view .LVU333
 1260              	.LBE63:
 497:tmk_core/common/action.c ****             } else {
 1261              		.loc 1 497 17 view .LVU334
 1262 0154 FFF7FEFF 		bl	register_mods
 1263              	.LVL126:
 1264 0158 B7E7     		b	.L69
 1265              	.LVL127:
 1266              	.L95:
 1267              	.LBB64:
 316:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: start\n");
 1268              		.loc 1 316 32 is_stmt 1 view .LVU335
 316:tmk_core/common/action.c ****                             dprint("MODS_TAP: Oneshot: start\n");
 1269              		.loc 1 316 35 is_stmt 0 view .LVU336
 1270 015a 012E     		cmp	r6, #1
 1271 015c F5D1     		bne	.L96
 317:tmk_core/common/action.c ****                             set_oneshot_mods(mods | get_oneshot_mods());
 1272              		.loc 1 317 65 is_stmt 1 view .LVU337
 318:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1273              		.loc 1 318 29 view .LVU338
 318:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1274              		.loc 1 318 53 is_stmt 0 view .LVU339
 1275 015e FFF7FEFF 		bl	get_oneshot_mods
 1276              	.LVL128:
 318:tmk_core/common/action.c **** #        if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1277              		.loc 1 318 29 view .LVU340
 1278 0162 40EA0A00 		orr	r0, r0, r10
 1279 0166 C0B2     		uxtb	r0, r0
 1280 0168 FFF7FEFF 		bl	set_oneshot_mods
 1281              	.LVL129:
 1282 016c ADE7     		b	.L69
 1283              	.L94:
 330:tmk_core/common/action.c ****                             clear_oneshot_mods();
 1284              		.loc 1 330 25 is_stmt 1 view .LVU341
 330:tmk_core/common/action.c ****                             clear_oneshot_mods();
 1285              		.loc 1 330 28 is_stmt 0 view .LVU342
 1286 016e 2EB9     		cbnz	r6, .L97
 1287              	.L190:
 345:tmk_core/common/action.c ****                             unregister_mods(mods);
 1288              		.loc 1 345 29 is_stmt 1 view .LVU343
 1289 0170 FFF7FEFF 		bl	clear_oneshot_mods
 1290              	.LVL130:
 346:tmk_core/common/action.c ****                         }
 1291              		.loc 1 346 29 view .LVU344
 1292              	.L103:
 395:tmk_core/common/action.c ****                             unregister_mods(mods);
 1293              		.loc 1 395 67 view .LVU345
 396:tmk_core/common/action.c ****                         }
 1294              		.loc 1 396 29 view .LVU346
 1295 0174 5046     		mov	r0, r10
 1296 0176 FFF7FEFF 		bl	unregister_mods
 1297              	.LVL131:
 1298 017a A6E7     		b	.L69
 1299              	.L97:
 333:tmk_core/common/action.c ****                             // Retain Oneshot mods
 1300              		.loc 1 333 32 view .LVU347
 333:tmk_core/common/action.c ****                             // Retain Oneshot mods
 1301              		.loc 1 333 35 is_stmt 0 view .LVU348
 1302 017c 012E     		cmp	r6, #1
 1303 017e A4D0     		beq	.L69
 1304 0180 F6E7     		b	.L190
 1305              	.L92:
 352:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 1306              		.loc 1 352 21 is_stmt 1 view .LVU349
 352:tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 1307              		.loc 1 352 24 is_stmt 0 view .LVU350
 1308 0182 1DB1     		cbz	r5, .L99
 353:tmk_core/common/action.c ****                             register_mods(mods);
 1309              		.loc 1 353 25 is_stmt 1 view .LVU351
 353:tmk_core/common/action.c ****                             register_mods(mods);
 1310              		.loc 1 353 28 is_stmt 0 view .LVU352
 1311 0184 022E     		cmp	r6, #2
 1312 0186 A0D8     		bhi	.L69
 1313              	.L101:
 382:tmk_core/common/action.c ****                             register_mods(mods);
 1314              		.loc 1 382 67 is_stmt 1 view .LVU353
 383:tmk_core/common/action.c ****                         }
 1315              		.loc 1 383 29 view .LVU354
 1316 0188 5046     		mov	r0, r10
 1317 018a E3E7     		b	.L186
 1318              	.L99:
 357:tmk_core/common/action.c ****                             unregister_mods(mods);
 1319              		.loc 1 357 25 view .LVU355
 357:tmk_core/common/action.c ****                             unregister_mods(mods);
 1320              		.loc 1 357 28 is_stmt 0 view .LVU356
 1321 018c 012E     		cmp	r6, #1
 1322 018e 9CD8     		bhi	.L69
 1323 0190 F0E7     		b	.L103
 1324              	.L100:
 386:tmk_core/common/action.c ****                             dprint("MODS_TAP: Tap: unregister_code\n");
 1325              		.loc 1 386 25 is_stmt 1 view .LVU357
 386:tmk_core/common/action.c ****                             dprint("MODS_TAP: Tap: unregister_code\n");
 1326              		.loc 1 386 28 is_stmt 0 view .LVU358
 1327 0192 002E     		cmp	r6, #0
 1328 0194 EED0     		beq	.L103
 387:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 1329              		.loc 1 387 71 is_stmt 1 view .LVU359
 388:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1330              		.loc 1 388 29 view .LVU360
 388:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1331              		.loc 1 388 32 is_stmt 0 view .LVU361
 1332 0196 392C     		cmp	r4, #57
 389:tmk_core/common/action.c ****                             } else {
 1333              		.loc 1 389 33 is_stmt 1 view .LVU362
 389:tmk_core/common/action.c ****                             } else {
 1334              		.loc 1 389 33 view .LVU363
 389:tmk_core/common/action.c ****                             } else {
 1335              		.loc 1 389 33 view .LVU364
 1336 0198 0CBF     		ite	eq
 1337 019a 4FF4FA50 		moveq	r0, #8000
 391:tmk_core/common/action.c ****                             }
 1338              		.loc 1 391 33 view .LVU365
 391:tmk_core/common/action.c ****                             }
 1339              		.loc 1 391 33 view .LVU366
 391:tmk_core/common/action.c ****                             }
 1340              		.loc 1 391 33 view .LVU367
 1341 019e 4FF47A70 		movne	r0, #1000
 1342 01a2 FFF7FEFF 		bl	chThdSleep
 1343              	.LVL132:
 391:tmk_core/common/action.c ****                             }
 1344              		.loc 1 391 33 view .LVU368
 393:tmk_core/common/action.c ****                         } else {
 1345              		.loc 1 393 29 view .LVU369
 1346 01a6 2046     		mov	r0, r4
 1347              	.LVL133:
 1348              	.L187:
 393:tmk_core/common/action.c ****                         } else {
 1349              		.loc 1 393 29 is_stmt 0 view .LVU370
 1350              	.LBE64:
 584:tmk_core/common/action.c ****                         } else {
 1351              		.loc 1 584 29 discriminator 4 view .LVU371
 1352 01a8 FFF7FEFF 		bl	unregister_code
 1353              	.LVL134:
 1354 01ac 8DE7     		b	.L69
 1355              	.L77:
 406:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1356              		.loc 1 406 13 is_stmt 1 view .LVU372
 1357 01ae 14F4406F 		tst	r4, #3072
 406:tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1358              		.loc 1 406 33 is_stmt 0 view .LVU373
 1359 01b2 C4F38123 		ubfx	r3, r4, #10, #2
 1360 01b6 07D0     		beq	.L106
 1361 01b8 012B     		cmp	r3, #1
 1362 01ba 86D1     		bne	.L69
 415:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1363              		.loc 1 415 21 is_stmt 1 view .LVU374
 415:tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1364              		.loc 1 415 24 is_stmt 0 view .LVU375
 1365 01bc 65B1     		cbz	r5, .L109
 416:tmk_core/common/action.c ****                     } else {
 1366              		.loc 1 416 25 is_stmt 1 view .LVU376
 1367 01be C4F30900 		ubfx	r0, r4, #0, #10
 1368              	.L189:
 418:tmk_core/common/action.c ****                     }
 1369              		.loc 1 418 25 is_stmt 0 view .LVU377
 1370 01c2 FFF7FEFF 		bl	host_consumer_send
 1371              	.LVL135:
 1372 01c6 80E7     		b	.L69
 1373              	.L106:
 408:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1374              		.loc 1 408 21 is_stmt 1 view .LVU378
 408:tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1375              		.loc 1 408 24 is_stmt 0 view .LVU379
 1376 01c8 25B1     		cbz	r5, .L108
 409:tmk_core/common/action.c ****                     } else {
 1377              		.loc 1 409 25 is_stmt 1 view .LVU380
 1378 01ca C4F30900 		ubfx	r0, r4, #0, #10
 1379              	.L184:
 411:tmk_core/common/action.c ****                     }
 1380              		.loc 1 411 25 is_stmt 0 view .LVU381
 1381 01ce FFF7FEFF 		bl	host_system_send
 1382              	.LVL136:
 1383 01d2 7AE7     		b	.L69
 1384              	.L108:
 411:tmk_core/common/action.c ****                     }
 1385              		.loc 1 411 25 is_stmt 1 view .LVU382
 1386 01d4 2846     		mov	r0, r5
 1387 01d6 FAE7     		b	.L184
 1388              	.L109:
 418:tmk_core/common/action.c ****                     }
 1389              		.loc 1 418 25 view .LVU383
 1390 01d8 2846     		mov	r0, r5
 1391 01da F2E7     		b	.L189
 1392              	.L76:
 427:tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1393              		.loc 1 427 13 view .LVU384
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 1394              		.loc 1 264 88 is_stmt 0 view .LVU385
 1395 01dc E0B2     		uxtb	r0, r4
 427:tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1396              		.loc 1 427 16 view .LVU386
 1397 01de 25B1     		cbz	r5, .L110
 428:tmk_core/common/action.c ****             } else {
 1398              		.loc 1 428 17 is_stmt 1 view .LVU387
 1399 01e0 FFF7FEFF 		bl	mousekey_on
 1400              	.LVL137:
 1401              	.L111:
 432:tmk_core/common/action.c **** #    if defined(PS2_MOUSE_ENABLE) || defined(POINTING_DEVICE_ENABLE)
 1402              		.loc 1 432 13 view .LVU388
 443:tmk_core/common/action.c ****                     break;
 1403              		.loc 1 443 21 view .LVU389
 1404 01e4 FFF7FEFF 		bl	mousekey_send
 1405              	.LVL138:
 444:tmk_core/common/action.c ****             }
 1406              		.loc 1 444 21 view .LVU390
 1407 01e8 6FE7     		b	.L69
 1408              	.L110:
 430:tmk_core/common/action.c ****             }
 1409              		.loc 1 430 17 view .LVU391
 1410 01ea FFF7FEFF 		bl	mousekey_off
 1411              	.LVL139:
 1412 01ee F9E7     		b	.L111
 1413              	.L75:
 450:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1414              		.loc 1 450 13 view .LVU392
 450:tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1415              		.loc 1 450 16 is_stmt 0 view .LVU393
 1416 01f0 14F4407F 		tst	r4, #768
 1417 01f4 28D1     		bne	.L112
 452:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1418              		.loc 1 452 17 is_stmt 1 view .LVU394
 452:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1419              		.loc 1 452 20 is_stmt 0 view .LVU395
 1420 01f6 002D     		cmp	r5, #0
 1421 01f8 7FF467AF 		bne	.L69
 1422              	.LBB65:
 453:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1423              		.loc 1 453 21 is_stmt 1 view .LVU396
 1424              	.LVL140:
 454:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1425              		.loc 1 454 21 view .LVU397
 453:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1426              		.loc 1 453 61 is_stmt 0 view .LVU398
 1427 01fc C4F34210 		ubfx	r0, r4, #5, #3
 453:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1428              		.loc 1 453 35 view .LVU399
 1429 0200 8000     		lsls	r0, r0, #2
 454:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1430              		.loc 1 454 84 view .LVU400
 1431 0202 C3B2     		uxtb	r3, r0
 454:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1432              		.loc 1 454 44 view .LVU401
 1433 0204 04F00F00 		and	r0, r4, #15
 454:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1434              		.loc 1 454 84 view .LVU402
 1435 0208 9840     		lsls	r0, r0, r3
 454:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1436              		.loc 1 454 35 view .LVU403
 1437 020a C2B2     		uxtb	r2, r0
 1438              	.LVL141:
 455:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1439              		.loc 1 455 21 is_stmt 1 view .LVU404
 455:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1440              		.loc 1 455 35 is_stmt 0 view .LVU405
 1441 020c 14F01000 		ands	r0, r4, #16
 455:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1442              		.loc 1 455 94 view .LVU406
 1443 0210 1EBF     		ittt	ne
 1444 0212 0F20     		movne	r0, #15
 1445 0214 9840     		lslne	r0, r0, r3
 455:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1446              		.loc 1 455 35 view .LVU407
 1447 0216 C043     		mvnne	r0, r0
 456:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1448              		.loc 1 456 47 view .LVU408
 1449 0218 C4F38124 		ubfx	r4, r4, #10, #2
 1450              	.LVL142:
 455:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1451              		.loc 1 455 35 view .LVU409
 1452 021c 18BF     		it	ne
 1453 021e C0B2     		uxtbne	r0, r0
 1454              	.LVL143:
 456:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1455              		.loc 1 456 21 is_stmt 1 view .LVU410
 1456 0220 022C     		cmp	r4, #2
 458:tmk_core/common/action.c ****                             break;
 1457              		.loc 1 458 29 is_stmt 0 view .LVU411
 1458 0222 40EA0200 		orr	r0, r0, r2
 1459              	.LVL144:
 458:tmk_core/common/action.c ****                             break;
 1460              		.loc 1 458 29 view .LVU412
 1461 0226 09D0     		beq	.L114
 1462 0228 032C     		cmp	r4, #3
 1463 022a 0AD0     		beq	.L115
 1464 022c 012C     		cmp	r4, #1
 1465 022e 02D0     		beq	.L116
 458:tmk_core/common/action.c ****                             break;
 1466              		.loc 1 458 29 is_stmt 1 view .LVU413
 1467 0230 FFF7FEFF 		bl	default_layer_and
 1468              	.LVL145:
 459:tmk_core/common/action.c ****                         case OP_BIT_OR:
 1469              		.loc 1 459 29 view .LVU414
 1470 0234 49E7     		b	.L69
 1471              	.LVL146:
 1472              	.L116:
 461:tmk_core/common/action.c ****                             break;
 1473              		.loc 1 461 29 view .LVU415
 1474 0236 FFF7FEFF 		bl	default_layer_or
 1475              	.LVL147:
 462:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 1476              		.loc 1 462 29 view .LVU416
 1477 023a 46E7     		b	.L69
 1478              	.LVL148:
 1479              	.L114:
 464:tmk_core/common/action.c ****                             break;
 1480              		.loc 1 464 29 view .LVU417
 1481 023c FFF7FEFF 		bl	default_layer_xor
 1482              	.LVL149:
 465:tmk_core/common/action.c ****                         case OP_BIT_SET:
 1483              		.loc 1 465 29 view .LVU418
 1484 0240 43E7     		b	.L69
 1485              	.LVL150:
 1486              	.L115:
 467:tmk_core/common/action.c ****                             break;
 1487              		.loc 1 467 29 view .LVU419
 1488 0242 FFF7FEFF 		bl	default_layer_set
 1489              	.LVL151:
 468:tmk_core/common/action.c ****                     }
 1490              		.loc 1 468 29 view .LVU420
 1491 0246 40E7     		b	.L69
 1492              	.LVL152:
 1493              	.L112:
 468:tmk_core/common/action.c ****                     }
 1494              		.loc 1 468 29 is_stmt 0 view .LVU421
 1495              	.LBE65:
 473:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1496              		.loc 1 473 17 is_stmt 1 view .LVU422
 473:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1497              		.loc 1 473 56 is_stmt 0 view .LVU423
 1498 0248 C4F30122 		ubfx	r2, r4, #8, #2
 473:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1499              		.loc 1 473 21 view .LVU424
 1500 024c 0DB3     		cbz	r5, .L117
 473:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1501              		.loc 1 473 20 discriminator 1 view .LVU425
 1502 024e 12F0010F 		tst	r2, #1
 1503              	.L179:
 473:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1504              		.loc 1 473 20 discriminator 2 view .LVU426
 1505 0252 3FF43AAF 		beq	.L69
 1506              	.LBB66:
 474:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1507              		.loc 1 474 21 is_stmt 1 view .LVU427
 1508              	.LVL153:
 475:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1509              		.loc 1 475 21 view .LVU428
 474:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1510              		.loc 1 474 61 is_stmt 0 view .LVU429
 1511 0256 C4F34210 		ubfx	r0, r4, #5, #3
 474:tmk_core/common/action.c ****                     layer_state_t bits  = ((layer_state_t)action.layer_bitop.bits) << shift;
 1512              		.loc 1 474 35 view .LVU430
 1513 025a 8000     		lsls	r0, r0, #2
 475:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1514              		.loc 1 475 84 view .LVU431
 1515 025c C2B2     		uxtb	r2, r0
 475:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1516              		.loc 1 475 44 view .LVU432
 1517 025e 04F00F00 		and	r0, r4, #15
 476:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1518              		.loc 1 476 35 view .LVU433
 1519 0262 14F01003 		ands	r3, r4, #16
 475:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1520              		.loc 1 475 84 view .LVU434
 1521 0266 00FA02F0 		lsl	r0, r0, r2
 475:tmk_core/common/action.c ****                     layer_state_t mask  = (action.layer_bitop.xbit) ? ~(((layer_state_t)0xf) << shi
 1522              		.loc 1 475 35 view .LVU435
 1523 026a C5B2     		uxtb	r5, r0
 1524              	.LVL154:
 476:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1525              		.loc 1 476 21 is_stmt 1 view .LVU436
 476:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1526              		.loc 1 476 94 is_stmt 0 view .LVU437
 1527 026c 1EBF     		ittt	ne
 1528 026e 0F20     		movne	r0, #15
 1529 0270 9040     		lslne	r0, r0, r2
 476:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1530              		.loc 1 476 35 view .LVU438
 1531 0272 C043     		mvnne	r0, r0
 477:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1532              		.loc 1 477 47 view .LVU439
 1533 0274 C4F38124 		ubfx	r4, r4, #10, #2
 1534              	.LVL155:
 476:tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1535              		.loc 1 476 35 view .LVU440
 1536 0278 18BF     		it	ne
 1537 027a C3B2     		uxtbne	r3, r0
 1538              	.LVL156:
 477:tmk_core/common/action.c ****                         case OP_BIT_AND:
 1539              		.loc 1 477 21 is_stmt 1 view .LVU441
 1540 027c 022C     		cmp	r4, #2
 479:tmk_core/common/action.c ****                             break;
 1541              		.loc 1 479 29 is_stmt 0 view .LVU442
 1542 027e 43EA0500 		orr	r0, r3, r5
 1543 0282 0CD0     		beq	.L120
 1544 0284 032C     		cmp	r4, #3
 1545 0286 0DD0     		beq	.L121
 1546 0288 012C     		cmp	r4, #1
 1547 028a 05D0     		beq	.L122
 479:tmk_core/common/action.c ****                             break;
 1548              		.loc 1 479 29 is_stmt 1 view .LVU443
 1549 028c FFF7FEFF 		bl	layer_and
 1550              	.LVL157:
 480:tmk_core/common/action.c ****                         case OP_BIT_OR:
 1551              		.loc 1 480 29 view .LVU444
 1552 0290 1BE7     		b	.L69
 1553              	.LVL158:
 1554              	.L117:
 480:tmk_core/common/action.c ****                         case OP_BIT_OR:
 1555              		.loc 1 480 29 is_stmt 0 view .LVU445
 1556              	.LBE66:
 473:tmk_core/common/action.c ****                     uint8_t       shift = action.layer_bitop.part * 4;
 1557              		.loc 1 473 20 discriminator 2 view .LVU446
 1558 0292 12F0020F 		tst	r2, #2
 1559 0296 DCE7     		b	.L179
 1560              	.LVL159:
 1561              	.L122:
 1562              	.LBB67:
 482:tmk_core/common/action.c ****                             break;
 1563              		.loc 1 482 29 is_stmt 1 view .LVU447
 1564 0298 FFF7FEFF 		bl	layer_or
 1565              	.LVL160:
 483:tmk_core/common/action.c ****                         case OP_BIT_XOR:
 1566              		.loc 1 483 29 view .LVU448
 1567 029c 15E7     		b	.L69
 1568              	.LVL161:
 1569              	.L120:
 485:tmk_core/common/action.c ****                             break;
 1570              		.loc 1 485 29 view .LVU449
 1571 029e FFF7FEFF 		bl	layer_xor
 1572              	.LVL162:
 486:tmk_core/common/action.c ****                         case OP_BIT_SET:
 1573              		.loc 1 486 29 view .LVU450
 1574 02a2 12E7     		b	.L69
 1575              	.LVL163:
 1576              	.L121:
 488:tmk_core/common/action.c ****                             break;
 1577              		.loc 1 488 29 view .LVU451
 1578 02a4 FFF7FEFF 		bl	layer_state_set
 1579              	.LVL164:
 489:tmk_core/common/action.c ****                     }
 1580              		.loc 1 489 29 view .LVU452
 1581 02a8 0FE7     		b	.L69
 1582              	.LVL165:
 1583              	.L74:
 489:tmk_core/common/action.c ****                     }
 1584              		.loc 1 489 29 is_stmt 0 view .LVU453
 1585              	.LBE67:
 495:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 1586              		.loc 1 495 13 is_stmt 1 view .LVU454
 264:tmk_core/common/action.c **** #    ifdef SWAP_HANDS_ENABLE
 1587              		.loc 1 264 88 is_stmt 0 view .LVU455
 1588 02aa E6B2     		uxtb	r6, r4
 1589              	.LBB68:
 278:tmk_core/common/action.c ****             if (event.pressed) {
 1590              		.loc 1 278 21 view .LVU456
 1591 02ac C4F30324 		ubfx	r4, r4, #8, #4
 1592              	.LVL166:
 278:tmk_core/common/action.c ****             if (event.pressed) {
 1593              		.loc 1 278 21 view .LVU457
 1594              	.LBE68:
 495:tmk_core/common/action.c ****                 layer_on(action.layer_mods.layer);
 1595              		.loc 1 495 16 view .LVU458
 1596 02b0 25B1     		cbz	r5, .L123
 496:tmk_core/common/action.c ****                 register_mods(action.layer_mods.mods);
 1597              		.loc 1 496 17 is_stmt 1 view .LVU459
 1598 02b2 2046     		mov	r0, r4
 1599 02b4 FFF7FEFF 		bl	layer_on
 1600              	.LVL167:
 497:tmk_core/common/action.c ****             } else {
 1601              		.loc 1 497 17 view .LVU460
 1602 02b8 3046     		mov	r0, r6
 1603 02ba 4BE7     		b	.L186
 1604              	.L123:
 499:tmk_core/common/action.c ****                 layer_off(action.layer_mods.layer);
 1605              		.loc 1 499 17 view .LVU461
 1606 02bc 3046     		mov	r0, r6
 1607 02be FFF7FEFF 		bl	unregister_mods
 1608              	.LVL168:
 500:tmk_core/common/action.c ****             }
 1609              		.loc 1 500 17 view .LVU462
 1610 02c2 2046     		mov	r0, r4
 1611              	.LVL169:
 1612              	.L183:
 587:tmk_core/common/action.c ****                         }
 1613              		.loc 1 587 29 is_stmt 0 view .LVU463
 1614 02c4 FFF7FEFF 		bl	layer_off
 1615              	.LVL170:
 1616 02c8 FFE6     		b	.L69
 1617              	.L73:
 506:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 1618              		.loc 1 506 13 is_stmt 1 view .LVU464
 506:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 1619              		.loc 1 506 37 is_stmt 0 view .LVU465
 1620 02ca 5FFA84FA 		uxtb	r10, r4
 1621 02ce AAF1F003 		sub	r3, r10, #240
 1622 02d2 042B     		cmp	r3, #4
 1623 02d4 39D8     		bhi	.L124
 1624 02d6 DFE803F0 		tbb	[pc, r3]
 1625              	.L126:
 1626 02da 03       		.byte	(.L130-.L126)/2
 1627 02db 0E       		.byte	(.L129-.L126)/2
 1628 02dc 15       		.byte	(.L128-.L126)/2
 1629 02dd 1A       		.byte	(.L127-.L126)/2
 1630 02de 23       		.byte	(.L125-.L126)/2
 1631 02df 00       		.p2align 1
 1632              	.L130:
 509:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1633              		.loc 1 509 21 is_stmt 1 view .LVU466
 509:tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1634              		.loc 1 509 24 is_stmt 0 view .LVU467
 1635 02e0 3DB1     		cbz	r5, .L131
 510:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1636              		.loc 1 510 25 is_stmt 1 view .LVU468
 510:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1637              		.loc 1 510 28 is_stmt 0 view .LVU469
 1638 02e2 012E     		cmp	r6, #1
 1639              	.L181:
 1640 02e4 3FF6F1AE 		bhi	.L69
 511:tmk_core/common/action.c ****                         }
 1641              		.loc 1 511 29 is_stmt 1 view .LVU470
 1642 02e8 C4F30420 		ubfx	r0, r4, #8, #5
 1643 02ec FFF7FEFF 		bl	layer_invert
 1644              	.LVL171:
 1645 02f0 EBE6     		b	.L69
 1646              	.L131:
 514:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1647              		.loc 1 514 25 view .LVU471
 514:tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1648              		.loc 1 514 28 is_stmt 0 view .LVU472
 1649 02f2 022E     		cmp	r6, #2
 1650 02f4 F6E7     		b	.L181
 1651              	.L129:
 520:tmk_core/common/action.c ****                     break;
 1652              		.loc 1 520 21 is_stmt 1 view .LVU473
 511:tmk_core/common/action.c ****                         }
 1653              		.loc 1 511 29 is_stmt 0 view .LVU474
 1654 02f6 C4F30420 		ubfx	r0, r4, #8, #5
 520:tmk_core/common/action.c ****                     break;
 1655              		.loc 1 520 68 view .LVU475
 1656 02fa 002D     		cmp	r5, #0
 1657 02fc E2D0     		beq	.L183
 1658              	.L185:
 574:tmk_core/common/action.c ****                         }
 1659              		.loc 1 574 29 view .LVU476
 1660 02fe FFF7FEFF 		bl	layer_on
 1661              	.LVL172:
 1662 0302 E2E6     		b	.L69
 1663              	.L128:
 523:tmk_core/common/action.c ****                     break;
 1664              		.loc 1 523 21 is_stmt 1 view .LVU477
 511:tmk_core/common/action.c ****                         }
 1665              		.loc 1 511 29 is_stmt 0 view .LVU478
 1666 0304 C4F30420 		ubfx	r0, r4, #8, #5
 523:tmk_core/common/action.c ****                     break;
 1667              		.loc 1 523 69 view .LVU479
 1668 0308 002D     		cmp	r5, #0
 1669 030a F8D0     		beq	.L185
 1670 030c DAE7     		b	.L183
 1671              	.L127:
 526:tmk_core/common/action.c ****                     break;
 1672              		.loc 1 526 21 is_stmt 1 view .LVU480
 526:tmk_core/common/action.c ****                     break;
 1673              		.loc 1 526 70 is_stmt 0 view .LVU481
 1674 030e 25B1     		cbz	r5, .L135
 526:tmk_core/common/action.c ****                     break;
 1675              		.loc 1 526 37 discriminator 1 view .LVU482
 1676 0310 C4F30420 		ubfx	r0, r4, #8, #5
 1677 0314 FFF7FEFF 		bl	layer_move
 1678              	.LVL173:
 1679 0318 D7E6     		b	.L69
 1680              	.L135:
 526:tmk_core/common/action.c ****                     break;
 1681              		.loc 1 526 72 discriminator 2 view .LVU483
 1682 031a FFF7FEFF 		bl	layer_clear
 1683              	.LVL174:
 1684 031e D4E6     		b	.L69
 1685              	.L125:
 554:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1686              		.loc 1 554 21 is_stmt 1 view .LVU484
 554:tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1687              		.loc 1 554 24 is_stmt 0 view .LVU485
 1688 0320 4DB1     		cbz	r5, .L136
 555:tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1689              		.loc 1 555 25 is_stmt 1 view .LVU486
 1690 0322 C4F30420 		ubfx	r0, r4, #8, #5
 1691 0326 0190     		str	r0, [sp, #4]
 1692 0328 FFF7FEFF 		bl	layer_on
 1693              	.LVL175:
 556:tmk_core/common/action.c ****                     } else {
 1694              		.loc 1 556 25 view .LVU487
 1695 032c 0198     		ldr	r0, [sp, #4]
 1696 032e 0321     		movs	r1, #3
 1697 0330 FFF7FEFF 		bl	set_oneshot_layer
 1698              	.LVL176:
 1699 0334 C9E6     		b	.L69
 1700              	.L136:
 558:tmk_core/common/action.c ****                         if (tap_count > 1) {
 1701              		.loc 1 558 25 view .LVU488
 1702 0336 0120     		movs	r0, #1
 1703 0338 FFF7FEFF 		bl	clear_oneshot_layer_state
 1704              	.LVL177:
 559:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1705              		.loc 1 559 25 view .LVU489
 559:tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1706              		.loc 1 559 28 is_stmt 0 view .LVU490
 1707 033c 012E     		cmp	r6, #1
 1708 033e 7FF6C4AE 		bls	.L69
 560:tmk_core/common/action.c ****                         }
 1709              		.loc 1 560 29 is_stmt 1 view .LVU491
 1710 0342 0220     		movs	r0, #2
 1711 0344 FFF7FEFF 		bl	clear_oneshot_layer_state
 1712              	.LVL178:
 1713 0348 BFE6     		b	.L69
 1714              	.L124:
 568:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1715              		.loc 1 568 21 view .LVU492
 568:tmk_core/common/action.c ****                         if (tap_count > 0) {
 1716              		.loc 1 568 24 is_stmt 0 view .LVU493
 1717 034a 2DB1     		cbz	r5, .L137
 569:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1718              		.loc 1 569 25 is_stmt 1 view .LVU494
 569:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1719              		.loc 1 569 28 is_stmt 0 view .LVU495
 1720 034c 0EB1     		cbz	r6, .L138
 570:tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 1721              		.loc 1 570 75 is_stmt 1 view .LVU496
 571:tmk_core/common/action.c ****                         } else {
 1722              		.loc 1 571 29 view .LVU497
 1723 034e 5046     		mov	r0, r10
 1724 0350 A6E6     		b	.L188
 1725              	.L138:
 573:tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 1726              		.loc 1 573 76 view .LVU498
 574:tmk_core/common/action.c ****                         }
 1727              		.loc 1 574 29 view .LVU499
 1728 0352 C4F30420 		ubfx	r0, r4, #8, #5
 1729 0356 D2E7     		b	.L185
 1730              	.L137:
 577:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1731              		.loc 1 577 25 view .LVU500
 577:tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1732              		.loc 1 577 28 is_stmt 0 view .LVU501
 1733 0358 56B1     		cbz	r6, .L139
 578:tmk_core/common/action.c ****                             if (action.layer_tap.code == KC_CAPS) {
 1734              		.loc 1 578 77 is_stmt 1 view .LVU502
 579:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1735              		.loc 1 579 29 view .LVU503
 579:tmk_core/common/action.c ****                                 wait_ms(TAP_HOLD_CAPS_DELAY);
 1736              		.loc 1 579 32 is_stmt 0 view .LVU504
 1737 035a BAF1390F 		cmp	r10, #57
 580:tmk_core/common/action.c ****                             } else {
 1738              		.loc 1 580 33 is_stmt 1 view .LVU505
 580:tmk_core/common/action.c ****                             } else {
 1739              		.loc 1 580 33 view .LVU506
 580:tmk_core/common/action.c ****                             } else {
 1740              		.loc 1 580 33 view .LVU507
 1741 035e 0CBF     		ite	eq
 1742 0360 4FF4FA50 		moveq	r0, #8000
 582:tmk_core/common/action.c ****                             }
 1743              		.loc 1 582 33 view .LVU508
 582:tmk_core/common/action.c ****                             }
 1744              		.loc 1 582 33 view .LVU509
 582:tmk_core/common/action.c ****                             }
 1745              		.loc 1 582 33 view .LVU510
 1746 0364 4FF47A70 		movne	r0, #1000
 1747 0368 FFF7FEFF 		bl	chThdSleep
 1748              	.LVL179:
 582:tmk_core/common/action.c ****                             }
 1749              		.loc 1 582 33 view .LVU511
 584:tmk_core/common/action.c ****                         } else {
 1750              		.loc 1 584 29 view .LVU512
 1751 036c 5046     		mov	r0, r10
 1752 036e 1BE7     		b	.L187
 1753              	.L139:
 586:tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 1754              		.loc 1 586 79 view .LVU513
 587:tmk_core/common/action.c ****                         }
 1755              		.loc 1 587 29 view .LVU514
 1756 0370 C4F30420 		ubfx	r0, r4, #8, #5
 1757 0374 A6E7     		b	.L183
 1758              	.L72:
 598:tmk_core/common/action.c ****             break;
 1759              		.loc 1 598 13 view .LVU515
 1760 0376 C4F30322 		ubfx	r2, r4, #8, #4
 1761 037a E1B2     		uxtb	r1, r4
 1762 037c 4046     		mov	r0, r8
 1763 037e FFF7FEFF 		bl	action_get_macro
 1764              	.LVL180:
 1765 0382 FFF7FEFF 		bl	action_macro_play
 1766              	.LVL181:
 599:tmk_core/common/action.c **** #endif
 1767              		.loc 1 599 13 view .LVU516
 1768 0386 A0E6     		b	.L69
 1769              	.L70:
 676:tmk_core/common/action.c ****             break;
 1770              		.loc 1 676 13 view .LVU517
 1771 0388 C4F30322 		ubfx	r2, r4, #8, #4
 1772 038c E1B2     		uxtb	r1, r4
 1773 038e 4046     		mov	r0, r8
 1774 0390 FFF7FEFF 		bl	action_function
 1775              	.LVL182:
 677:tmk_core/common/action.c **** #endif
 1776              		.loc 1 677 13 view .LVU518
 1777 0394 99E6     		b	.L69
 1778              	.LVL183:
 1779              	.L66:
 745:tmk_core/common/action.c **** 
 1780              		.loc 1 745 1 is_stmt 0 view .LVU519
 1781 0396 02B0     		add	sp, sp, #8
 1782              		.cfi_def_cfa_offset 32
 1783              		@ sp needed
 1784 0398 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 745:tmk_core/common/action.c **** 
 1785              		.loc 1 745 1 view .LVU520
 1786              		.cfi_endproc
 1787              	.LFE295:
 1789              		.section	.text.process_record_handler,"ax",%progbits
 1790              		.align	1
 1791              		.global	process_record_handler
 1792              		.syntax unified
 1793              		.thumb
 1794              		.thumb_func
 1795              		.fpu fpv4-sp-d16
 1797              	process_record_handler:
 1798              	.LVL184:
 1799              	.LFB294:
 214:tmk_core/common/action.c **** #ifdef COMBO_ENABLE
 1800              		.loc 1 214 50 is_stmt 1 view -0
 1801              		.cfi_startproc
 1802              		@ args = 0, pretend = 0, frame = 8
 1803              		@ frame_needed = 0, uses_anonymous_args = 0
 223:tmk_core/common/action.c **** #endif
 1804              		.loc 1 223 5 view .LVU522
 214:tmk_core/common/action.c **** #ifdef COMBO_ENABLE
 1805              		.loc 1 214 50 is_stmt 0 view .LVU523
 1806 0000 13B5     		push	{r0, r1, r4, lr}
 1807              		.cfi_def_cfa_offset 16
 1808              		.cfi_offset 4, -8
 1809              		.cfi_offset 14, -4
 223:tmk_core/common/action.c **** #endif
 1810              		.loc 1 223 23 view .LVU524
 1811 0002 0188     		ldrh	r1, [r0]
 214:tmk_core/common/action.c **** #ifdef COMBO_ENABLE
 1812              		.loc 1 214 50 view .LVU525
 1813 0004 0446     		mov	r4, r0
 223:tmk_core/common/action.c **** #endif
 1814              		.loc 1 223 23 view .LVU526
 1815 0006 8078     		ldrb	r0, [r0, #2]	@ zero_extendqisi2
 1816              	.LVL185:
 223:tmk_core/common/action.c **** #endif
 1817              		.loc 1 223 23 view .LVU527
 1818 0008 FFF7FEFF 		bl	store_or_get_action
 1819              	.LVL186:
 1820 000c 0146     		mov	r1, r0	@ movhi
 1821              	.LVL187:
 223:tmk_core/common/action.c **** #endif
 1822              		.loc 1 223 23 view .LVU528
 1823 000e 0191     		str	r1, [sp, #4]
 225:tmk_core/common/action.c ****     debug_action(action);
 1824              		.loc 1 225 23 is_stmt 1 view .LVU529
 226:tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 1825              		.loc 1 226 5 view .LVU530
 940:tmk_core/common/action.c **** 
 941:tmk_core/common/action.c **** /** \brief Adds the given weak modifiers and sends a keyboard report immediately.
 942:tmk_core/common/action.c ****  *
 943:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to register.
 944:tmk_core/common/action.c ****  */
 945:tmk_core/common/action.c **** void register_weak_mods(uint8_t mods) {
 946:tmk_core/common/action.c ****     if (mods) {
 947:tmk_core/common/action.c ****         add_weak_mods(mods);
 948:tmk_core/common/action.c ****         send_keyboard_report();
 949:tmk_core/common/action.c ****     }
 950:tmk_core/common/action.c **** }
 951:tmk_core/common/action.c **** 
 952:tmk_core/common/action.c **** /** \brief Removes the given weak modifiers and sends a keyboard report immediately.
 953:tmk_core/common/action.c ****  *
 954:tmk_core/common/action.c ****  * \param mods A bitfield of modifiers to unregister.
 955:tmk_core/common/action.c ****  */
 956:tmk_core/common/action.c **** void unregister_weak_mods(uint8_t mods) {
 957:tmk_core/common/action.c ****     if (mods) {
 958:tmk_core/common/action.c ****         del_weak_mods(mods);
 959:tmk_core/common/action.c ****         send_keyboard_report();
 960:tmk_core/common/action.c ****     }
 961:tmk_core/common/action.c **** }
 962:tmk_core/common/action.c **** 
 963:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 964:tmk_core/common/action.c ****  *
 965:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 966:tmk_core/common/action.c ****  */
 967:tmk_core/common/action.c **** void clear_keyboard(void) {
 968:tmk_core/common/action.c ****     clear_mods();
 969:tmk_core/common/action.c ****     clear_keyboard_but_mods();
 970:tmk_core/common/action.c **** }
 971:tmk_core/common/action.c **** 
 972:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 973:tmk_core/common/action.c ****  *
 974:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 975:tmk_core/common/action.c ****  */
 976:tmk_core/common/action.c **** void clear_keyboard_but_mods(void) {
 977:tmk_core/common/action.c ****     clear_keys();
 978:tmk_core/common/action.c ****     clear_keyboard_but_mods_and_keys();
 979:tmk_core/common/action.c **** }
 980:tmk_core/common/action.c **** 
 981:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
 982:tmk_core/common/action.c ****  *
 983:tmk_core/common/action.c ****  * FIXME: Needs documentation.
 984:tmk_core/common/action.c ****  */
 985:tmk_core/common/action.c **** void clear_keyboard_but_mods_and_keys() {
 986:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 987:tmk_core/common/action.c ****     host_system_send(0);
 988:tmk_core/common/action.c ****     host_consumer_send(0);
 989:tmk_core/common/action.c **** #endif
 990:tmk_core/common/action.c ****     clear_weak_mods();
 991:tmk_core/common/action.c ****     clear_macro_mods();
 992:tmk_core/common/action.c ****     send_keyboard_report();
 993:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 994:tmk_core/common/action.c ****     mousekey_clear();
 995:tmk_core/common/action.c ****     mousekey_send();
 996:tmk_core/common/action.c **** #endif
 997:tmk_core/common/action.c **** }
 998:tmk_core/common/action.c **** 
 999:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
1000:tmk_core/common/action.c ****  *
1001:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1002:tmk_core/common/action.c ****  */
1003:tmk_core/common/action.c **** bool is_tap_key(keypos_t key) {
1004:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
1005:tmk_core/common/action.c ****     return is_tap_action(action);
1006:tmk_core/common/action.c **** }
1007:tmk_core/common/action.c **** 
1008:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
1009:tmk_core/common/action.c ****  *
1010:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1011:tmk_core/common/action.c ****  */
1012:tmk_core/common/action.c **** bool is_tap_record(keyrecord_t *record) {
1013:tmk_core/common/action.c **** #ifdef COMBO_ENABLE
1014:tmk_core/common/action.c ****     action_t action;
1015:tmk_core/common/action.c ****     if (record->keycode) {
1016:tmk_core/common/action.c ****         action = action_for_keycode(record->keycode);
1017:tmk_core/common/action.c ****     } else {
1018:tmk_core/common/action.c ****         action = layer_switch_get_action(record->event.key);
1019:tmk_core/common/action.c ****     }
1020:tmk_core/common/action.c **** #else
1021:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(record->event.key);
1022:tmk_core/common/action.c **** #endif
1023:tmk_core/common/action.c ****     return is_tap_action(action);
1024:tmk_core/common/action.c **** }
1025:tmk_core/common/action.c **** 
1026:tmk_core/common/action.c **** /** \brief Utilities for actions. (FIXME: Needs better description)
1027:tmk_core/common/action.c ****  *
1028:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1029:tmk_core/common/action.c ****  */
1030:tmk_core/common/action.c **** bool is_tap_action(action_t action) {
1031:tmk_core/common/action.c ****     switch (action.kind.id) {
1032:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
1033:tmk_core/common/action.c ****         case ACT_RMODS_TAP:
1034:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
1035:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
1036:tmk_core/common/action.c ****             switch (action.layer_tap.code) {
1037:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
1038:tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
1039:tmk_core/common/action.c ****                 case OP_ONESHOT:
1040:tmk_core/common/action.c ****                     return true;
1041:tmk_core/common/action.c ****             }
1042:tmk_core/common/action.c ****             return false;
1043:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
1044:tmk_core/common/action.c ****             switch (action.swap.code) {
1045:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
1046:tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
1047:tmk_core/common/action.c ****                     return true;
1048:tmk_core/common/action.c ****             }
1049:tmk_core/common/action.c ****             return false;
1050:tmk_core/common/action.c ****         case ACT_MACRO:
1051:tmk_core/common/action.c ****         case ACT_FUNCTION:
1052:tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) {
1053:tmk_core/common/action.c ****                 return true;
1054:tmk_core/common/action.c ****             }
1055:tmk_core/common/action.c ****             return false;
1056:tmk_core/common/action.c ****     }
1057:tmk_core/common/action.c ****     return false;
1058:tmk_core/common/action.c **** }
1059:tmk_core/common/action.c **** 
1060:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
1061:tmk_core/common/action.c ****  *
1062:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1063:tmk_core/common/action.c ****  */
1064:tmk_core/common/action.c **** void debug_event(keyevent_t event) { dprintf("%04X%c(%u)", (event.key.row << 8 | event.key.col), (e
1065:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
1066:tmk_core/common/action.c ****  *
1067:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1068:tmk_core/common/action.c ****  */
1069:tmk_core/common/action.c **** void debug_record(keyrecord_t record) {
1070:tmk_core/common/action.c ****     debug_event(record.event);
1071:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
1072:tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
1073:tmk_core/common/action.c **** #endif
1074:tmk_core/common/action.c **** }
1075:tmk_core/common/action.c **** 
1076:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
1077:tmk_core/common/action.c ****  *
1078:tmk_core/common/action.c ****  * FIXME: Needs documentation.
1079:tmk_core/common/action.c ****  */
1080:tmk_core/common/action.c **** void debug_action(action_t action) {
1081:tmk_core/common/action.c ****     switch (action.kind.id) {
 1826              		.loc 1 1081 5 view .LVU531
1082:tmk_core/common/action.c ****         case ACT_LMODS:
1083:tmk_core/common/action.c ****             dprint("ACT_LMODS");
1084:tmk_core/common/action.c ****             break;
1085:tmk_core/common/action.c ****         case ACT_RMODS:
1086:tmk_core/common/action.c ****             dprint("ACT_RMODS");
1087:tmk_core/common/action.c ****             break;
1088:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
1089:tmk_core/common/action.c ****             dprint("ACT_LMODS_TAP");
1090:tmk_core/common/action.c ****             break;
1091:tmk_core/common/action.c ****         case ACT_RMODS_TAP:
1092:tmk_core/common/action.c ****             dprint("ACT_RMODS_TAP");
1093:tmk_core/common/action.c ****             break;
1094:tmk_core/common/action.c ****         case ACT_USAGE:
1095:tmk_core/common/action.c ****             dprint("ACT_USAGE");
1096:tmk_core/common/action.c ****             break;
1097:tmk_core/common/action.c ****         case ACT_MOUSEKEY:
1098:tmk_core/common/action.c ****             dprint("ACT_MOUSEKEY");
1099:tmk_core/common/action.c ****             break;
1100:tmk_core/common/action.c ****         case ACT_LAYER:
1101:tmk_core/common/action.c ****             dprint("ACT_LAYER");
1102:tmk_core/common/action.c ****             break;
1103:tmk_core/common/action.c ****         case ACT_LAYER_MODS:
1104:tmk_core/common/action.c ****             dprint("ACT_LAYER_MODS");
1105:tmk_core/common/action.c ****             break;
1106:tmk_core/common/action.c ****         case ACT_LAYER_TAP:
1107:tmk_core/common/action.c ****             dprint("ACT_LAYER_TAP");
1108:tmk_core/common/action.c ****             break;
1109:tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
1110:tmk_core/common/action.c ****             dprint("ACT_LAYER_TAP_EXT");
1111:tmk_core/common/action.c ****             break;
1112:tmk_core/common/action.c ****         case ACT_MACRO:
1113:tmk_core/common/action.c ****             dprint("ACT_MACRO");
1114:tmk_core/common/action.c ****             break;
1115:tmk_core/common/action.c ****         case ACT_FUNCTION:
1116:tmk_core/common/action.c ****             dprint("ACT_FUNCTION");
1117:tmk_core/common/action.c ****             break;
1118:tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
1119:tmk_core/common/action.c ****             dprint("ACT_SWAP_HANDS");
1120:tmk_core/common/action.c ****             break;
1121:tmk_core/common/action.c ****         default:
1122:tmk_core/common/action.c ****             dprint("UNKNOWN");
1123:tmk_core/common/action.c ****             break;
1124:tmk_core/common/action.c ****     }
1125:tmk_core/common/action.c ****     dprintf("[%X:%02X]", action.kind.param >> 8, action.kind.param & 0xff);
 1827              		.loc 1 1125 75 view .LVU532
 228:tmk_core/common/action.c ****     layer_debug();
 1828              		.loc 1 228 29 view .LVU533
 229:tmk_core/common/action.c ****     dprint(" default_layer_state: ");
 1829              		.loc 1 229 5 view .LVU534
 1830 0010 FFF7FEFF 		bl	layer_debug
 1831              	.LVL188:
 230:tmk_core/common/action.c ****     default_layer_debug();
 1832              		.loc 1 230 37 view .LVU535
 231:tmk_core/common/action.c **** #endif
 1833              		.loc 1 231 5 view .LVU536
 1834 0014 FFF7FEFF 		bl	default_layer_debug
 1835              	.LVL189:
 233:tmk_core/common/action.c **** 
 1836              		.loc 1 233 15 view .LVU537
 235:tmk_core/common/action.c **** }
 1837              		.loc 1 235 5 view .LVU538
 1838 0018 0199     		ldr	r1, [sp, #4]
 235:tmk_core/common/action.c **** }
 1839              		.loc 1 235 5 is_stmt 0 view .LVU539
 1840 001a 2046     		mov	r0, r4
 236:tmk_core/common/action.c **** 
 1841              		.loc 1 236 1 view .LVU540
 1842 001c 02B0     		add	sp, sp, #8
 1843              		.cfi_def_cfa_offset 8
 1844              		@ sp needed
 1845 001e BDE81040 		pop	{r4, lr}
 1846              		.cfi_restore 14
 1847              		.cfi_restore 4
 1848              		.cfi_def_cfa_offset 0
 1849              	.LVL190:
 235:tmk_core/common/action.c **** }
 1850              		.loc 1 235 5 view .LVU541
 1851 0022 FFF7FEBF 		b	process_action
 1852              	.LVL191:
 235:tmk_core/common/action.c **** }
 1853              		.loc 1 235 5 view .LVU542
 1854              		.cfi_endproc
 1855              	.LFE294:
 1857              		.section	.text.process_record,"ax",%progbits
 1858              		.align	1
 1859              		.global	process_record
 1860              		.syntax unified
 1861              		.thumb
 1862              		.thumb_func
 1863              		.fpu fpv4-sp-d16
 1865              	process_record:
 1866              	.LVL192:
 1867              	.LFB293:
 196:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 1868              		.loc 1 196 42 is_stmt 1 view -0
 1869              		.cfi_startproc
 1870              		@ args = 0, pretend = 0, frame = 8
 1871              		@ frame_needed = 0, uses_anonymous_args = 0
 197:tmk_core/common/action.c ****         return;
 1872              		.loc 1 197 5 view .LVU544
 196:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 1873              		.loc 1 196 42 is_stmt 0 view .LVU545
 1874 0000 13B5     		push	{r0, r1, r4, lr}
 1875              		.cfi_def_cfa_offset 16
 1876              		.cfi_offset 4, -8
 1877              		.cfi_offset 14, -4
 196:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 1878              		.loc 1 196 42 view .LVU546
 1879 0002 0446     		mov	r4, r0
 1880 0004 0068     		ldr	r0, [r0]	@ unaligned
 1881              	.LVL193:
 1882              	.LBB75:
 1883              	.LBB76:
 1884              		.loc 2 47 74 view .LVU547
 1885 0006 A388     		ldrh	r3, [r4, #4]
 1886 0008 0090     		str	r0, [sp]
 1887              	.LVL194:
 1888              		.loc 2 47 74 view .LVU548
 1889              	.LBE76:
 1890              	.LBI75:
 1891              		.loc 2 47 20 is_stmt 1 view .LVU549
 1892              	.LBB77:
 1893              		.loc 2 47 51 view .LVU550
 1894              		.loc 2 47 74 is_stmt 0 view .LVU551
 1895 000a D3B1     		cbz	r3, .L192
 1896              		.loc 2 47 99 view .LVU552
 1897 000c BDF80020 		ldrh	r2, [sp]
 1898              	.LVL195:
 1899              		.loc 2 47 99 view .LVU553
 1900              	.LBE77:
 1901              	.LBE75:
 197:tmk_core/common/action.c ****         return;
 1902              		.loc 1 197 8 view .LVU554
 1903 0010 4FF6FF73 		movw	r3, #65535
 1904 0014 9A42     		cmp	r2, r3
 1905 0016 14D0     		beq	.L192
 1906              	.LVL196:
 1907              	.LBB78:
 1908              	.LBI78:
 196:tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) {
 1909              		.loc 1 196 6 is_stmt 1 view .LVU555
 1910              	.LBB79:
 201:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 1911              		.loc 1 201 5 view .LVU556
 201:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 1912              		.loc 1 201 10 is_stmt 0 view .LVU557
 1913 0018 2046     		mov	r0, r4
 1914 001a FFF7FEFF 		bl	process_record_quantum
 1915              	.LVL197:
 201:tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 1916              		.loc 1 201 8 view .LVU558
 1917 001e 50B9     		cbnz	r0, .L196
 203:tmk_core/common/action.c ****             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1918              		.loc 1 203 9 is_stmt 1 view .LVU559
 203:tmk_core/common/action.c ****             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1919              		.loc 1 203 13 is_stmt 0 view .LVU560
 1920 0020 FFF7FEFF 		bl	is_oneshot_layer_active
 1921              	.LVL198:
 203:tmk_core/common/action.c ****             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1922              		.loc 1 203 12 view .LVU561
 1923 0024 68B1     		cbz	r0, .L192
 203:tmk_core/common/action.c ****             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1924              		.loc 1 203 39 view .LVU562
 1925 0026 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1926 0028 5BB1     		cbz	r3, .L192
 204:tmk_core/common/action.c ****         }
 1927              		.loc 1 204 13 is_stmt 1 view .LVU563
 1928 002a 0220     		movs	r0, #2
 1929              	.LBE79:
 1930              	.LBE78:
 212:tmk_core/common/action.c **** 
 1931              		.loc 1 212 1 is_stmt 0 view .LVU564
 1932 002c 02B0     		add	sp, sp, #8
 1933              		.cfi_remember_state
 1934              		.cfi_def_cfa_offset 8
 1935              		@ sp needed
 1936 002e BDE81040 		pop	{r4, lr}
 1937              		.cfi_restore 14
 1938              		.cfi_restore 4
 1939              		.cfi_def_cfa_offset 0
 1940              	.LVL199:
 1941              	.LBB81:
 1942              	.LBB80:
 204:tmk_core/common/action.c ****         }
 1943              		.loc 1 204 13 view .LVU565
 1944 0032 FFF7FEBF 		b	clear_oneshot_layer_state
 1945              	.LVL200:
 1946              	.L196:
 1947              		.cfi_restore_state
 210:tmk_core/common/action.c ****     post_process_record_quantum(record);
 1948              		.loc 1 210 5 is_stmt 1 view .LVU566
 1949 0036 2046     		mov	r0, r4
 1950 0038 FFF7FEFF 		bl	process_record_handler
 1951              	.LVL201:
 211:tmk_core/common/action.c **** }
 1952              		.loc 1 211 5 view .LVU567
 1953 003c 2046     		mov	r0, r4
 1954 003e FFF7FEFF 		bl	post_process_record_quantum
 1955              	.LVL202:
 1956              	.L192:
 211:tmk_core/common/action.c **** }
 1957              		.loc 1 211 5 is_stmt 0 view .LVU568
 1958              	.LBE80:
 1959              	.LBE81:
 212:tmk_core/common/action.c **** 
 1960              		.loc 1 212 1 view .LVU569
 1961 0042 02B0     		add	sp, sp, #8
 1962              		.cfi_def_cfa_offset 8
 1963              		@ sp needed
 1964 0044 10BD     		pop	{r4, pc}
 212:tmk_core/common/action.c **** 
 1965              		.loc 1 212 1 view .LVU570
 1966              		.cfi_endproc
 1967              	.LFE293:
 1969              		.section	.text.process_record_nocache,"ax",%progbits
 1970              		.align	1
 1971              		.global	process_record_nocache
 1972              		.syntax unified
 1973              		.thumb
 1974              		.thumb_func
 1975              		.fpu fpv4-sp-d16
 1977              	process_record_nocache:
 1978              	.LVL203:
 1979              	.LFB289:
 154:tmk_core/common/action.c ****     disable_action_cache = true;
 1980              		.loc 1 154 50 is_stmt 1 view -0
 1981              		.cfi_startproc
 1982              		@ args = 0, pretend = 0, frame = 0
 1983              		@ frame_needed = 0, uses_anonymous_args = 0
 155:tmk_core/common/action.c ****     process_record(record);
 1984              		.loc 1 155 5 view .LVU572
 154:tmk_core/common/action.c ****     disable_action_cache = true;
 1985              		.loc 1 154 50 is_stmt 0 view .LVU573
 1986 0000 10B5     		push	{r4, lr}
 1987              		.cfi_def_cfa_offset 8
 1988              		.cfi_offset 4, -8
 1989              		.cfi_offset 14, -4
 155:tmk_core/common/action.c ****     process_record(record);
 1990              		.loc 1 155 26 view .LVU574
 1991 0002 044C     		ldr	r4, .L205
 1992 0004 0123     		movs	r3, #1
 1993 0006 2370     		strb	r3, [r4]
 156:tmk_core/common/action.c ****     disable_action_cache = false;
 1994              		.loc 1 156 5 is_stmt 1 view .LVU575
 1995 0008 FFF7FEFF 		bl	process_record
 1996              	.LVL204:
 157:tmk_core/common/action.c **** }
 1997              		.loc 1 157 5 view .LVU576
 157:tmk_core/common/action.c **** }
 1998              		.loc 1 157 26 is_stmt 0 view .LVU577
 1999 000c 0023     		movs	r3, #0
 2000 000e 2370     		strb	r3, [r4]
 158:tmk_core/common/action.c **** #else
 2001              		.loc 1 158 1 view .LVU578
 2002 0010 10BD     		pop	{r4, pc}
 2003              	.L206:
 2004 0012 00BF     		.align	2
 2005              	.L205:
 2006 0014 00000000 		.word	.LANCHOR1
 2007              		.cfi_endproc
 2008              	.LFE289:
 2010              		.section	.text.register_weak_mods,"ax",%progbits
 2011              		.align	1
 2012              		.global	register_weak_mods
 2013              		.syntax unified
 2014              		.thumb
 2015              		.thumb_func
 2016              		.fpu fpv4-sp-d16
 2018              	register_weak_mods:
 2019              	.LVL205:
 2020              	.LFB302:
 945:tmk_core/common/action.c ****     if (mods) {
 2021              		.loc 1 945 39 is_stmt 1 view -0
 2022              		.cfi_startproc
 2023              		@ args = 0, pretend = 0, frame = 0
 2024              		@ frame_needed = 0, uses_anonymous_args = 0
 946:tmk_core/common/action.c ****         add_weak_mods(mods);
 2025              		.loc 1 946 5 view .LVU580
 945:tmk_core/common/action.c ****     if (mods) {
 2026              		.loc 1 945 39 is_stmt 0 view .LVU581
 2027 0000 08B5     		push	{r3, lr}
 2028              		.cfi_def_cfa_offset 8
 2029              		.cfi_offset 3, -8
 2030              		.cfi_offset 14, -4
 946:tmk_core/common/action.c ****         add_weak_mods(mods);
 2031              		.loc 1 946 8 view .LVU582
 2032 0002 28B1     		cbz	r0, .L207
 947:tmk_core/common/action.c ****         send_keyboard_report();
 2033              		.loc 1 947 9 is_stmt 1 view .LVU583
 2034 0004 FFF7FEFF 		bl	add_weak_mods
 2035              	.LVL206:
 948:tmk_core/common/action.c ****     }
 2036              		.loc 1 948 9 view .LVU584
 950:tmk_core/common/action.c **** 
 2037              		.loc 1 950 1 is_stmt 0 view .LVU585
 2038 0008 BDE80840 		pop	{r3, lr}
 2039              		.cfi_remember_state
 2040              		.cfi_restore 14
 2041              		.cfi_restore 3
 2042              		.cfi_def_cfa_offset 0
 948:tmk_core/common/action.c ****     }
 2043              		.loc 1 948 9 view .LVU586
 2044 000c FFF7FEBF 		b	send_keyboard_report
 2045              	.LVL207:
 2046              	.L207:
 2047              		.cfi_restore_state
 950:tmk_core/common/action.c **** 
 2048              		.loc 1 950 1 view .LVU587
 2049 0010 08BD     		pop	{r3, pc}
 2050              		.cfi_endproc
 2051              	.LFE302:
 2053              		.section	.text.unregister_weak_mods,"ax",%progbits
 2054              		.align	1
 2055              		.global	unregister_weak_mods
 2056              		.syntax unified
 2057              		.thumb
 2058              		.thumb_func
 2059              		.fpu fpv4-sp-d16
 2061              	unregister_weak_mods:
 2062              	.LVL208:
 2063              	.LFB303:
 956:tmk_core/common/action.c ****     if (mods) {
 2064              		.loc 1 956 41 is_stmt 1 view -0
 2065              		.cfi_startproc
 2066              		@ args = 0, pretend = 0, frame = 0
 2067              		@ frame_needed = 0, uses_anonymous_args = 0
 957:tmk_core/common/action.c ****         del_weak_mods(mods);
 2068              		.loc 1 957 5 view .LVU589
 956:tmk_core/common/action.c ****     if (mods) {
 2069              		.loc 1 956 41 is_stmt 0 view .LVU590
 2070 0000 08B5     		push	{r3, lr}
 2071              		.cfi_def_cfa_offset 8
 2072              		.cfi_offset 3, -8
 2073              		.cfi_offset 14, -4
 957:tmk_core/common/action.c ****         del_weak_mods(mods);
 2074              		.loc 1 957 8 view .LVU591
 2075 0002 28B1     		cbz	r0, .L209
 958:tmk_core/common/action.c ****         send_keyboard_report();
 2076              		.loc 1 958 9 is_stmt 1 view .LVU592
 2077 0004 FFF7FEFF 		bl	del_weak_mods
 2078              	.LVL209:
 959:tmk_core/common/action.c ****     }
 2079              		.loc 1 959 9 view .LVU593
 961:tmk_core/common/action.c **** 
 2080              		.loc 1 961 1 is_stmt 0 view .LVU594
 2081 0008 BDE80840 		pop	{r3, lr}
 2082              		.cfi_remember_state
 2083              		.cfi_restore 14
 2084              		.cfi_restore 3
 2085              		.cfi_def_cfa_offset 0
 959:tmk_core/common/action.c ****     }
 2086              		.loc 1 959 9 view .LVU595
 2087 000c FFF7FEBF 		b	send_keyboard_report
 2088              	.LVL210:
 2089              	.L209:
 2090              		.cfi_restore_state
 961:tmk_core/common/action.c **** 
 2091              		.loc 1 961 1 view .LVU596
 2092 0010 08BD     		pop	{r3, pc}
 2093              		.cfi_endproc
 2094              	.LFE303:
 2096              		.section	.text.clear_keyboard_but_mods_and_keys,"ax",%progbits
 2097              		.align	1
 2098              		.global	clear_keyboard_but_mods_and_keys
 2099              		.syntax unified
 2100              		.thumb
 2101              		.thumb_func
 2102              		.fpu fpv4-sp-d16
 2104              	clear_keyboard_but_mods_and_keys:
 2105              	.LFB306:
 985:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 2106              		.loc 1 985 41 is_stmt 1 view -0
 2107              		.cfi_startproc
 2108              		@ args = 0, pretend = 0, frame = 0
 2109              		@ frame_needed = 0, uses_anonymous_args = 0
 987:tmk_core/common/action.c ****     host_consumer_send(0);
 2110              		.loc 1 987 5 view .LVU598
 985:tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 2111              		.loc 1 985 41 is_stmt 0 view .LVU599
 2112 0000 08B5     		push	{r3, lr}
 2113              		.cfi_def_cfa_offset 8
 2114              		.cfi_offset 3, -8
 2115              		.cfi_offset 14, -4
 987:tmk_core/common/action.c ****     host_consumer_send(0);
 2116              		.loc 1 987 5 view .LVU600
 2117 0002 0020     		movs	r0, #0
 2118 0004 FFF7FEFF 		bl	host_system_send
 2119              	.LVL211:
 988:tmk_core/common/action.c **** #endif
 2120              		.loc 1 988 5 is_stmt 1 view .LVU601
 2121 0008 0020     		movs	r0, #0
 2122 000a FFF7FEFF 		bl	host_consumer_send
 2123              	.LVL212:
 990:tmk_core/common/action.c ****     clear_macro_mods();
 2124              		.loc 1 990 5 view .LVU602
 2125 000e FFF7FEFF 		bl	clear_weak_mods
 2126              	.LVL213:
 991:tmk_core/common/action.c ****     send_keyboard_report();
 2127              		.loc 1 991 5 view .LVU603
 2128 0012 FFF7FEFF 		bl	clear_macro_mods
 2129              	.LVL214:
 992:tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 2130              		.loc 1 992 5 view .LVU604
 2131 0016 FFF7FEFF 		bl	send_keyboard_report
 2132              	.LVL215:
 994:tmk_core/common/action.c ****     mousekey_send();
 2133              		.loc 1 994 5 view .LVU605
 2134 001a FFF7FEFF 		bl	mousekey_clear
 2135              	.LVL216:
 995:tmk_core/common/action.c **** #endif
 2136              		.loc 1 995 5 view .LVU606
 997:tmk_core/common/action.c **** 
 2137              		.loc 1 997 1 is_stmt 0 view .LVU607
 2138 001e BDE80840 		pop	{r3, lr}
 2139              		.cfi_restore 14
 2140              		.cfi_restore 3
 2141              		.cfi_def_cfa_offset 0
 995:tmk_core/common/action.c **** #endif
 2142              		.loc 1 995 5 view .LVU608
 2143 0022 FFF7FEBF 		b	mousekey_send
 2144              	.LVL217:
 2145              		.cfi_endproc
 2146              	.LFE306:
 2148              		.section	.text.clear_keyboard_but_mods,"ax",%progbits
 2149              		.align	1
 2150              		.global	clear_keyboard_but_mods
 2151              		.syntax unified
 2152              		.thumb
 2153              		.thumb_func
 2154              		.fpu fpv4-sp-d16
 2156              	clear_keyboard_but_mods:
 2157              	.LFB305:
 976:tmk_core/common/action.c ****     clear_keys();
 2158              		.loc 1 976 36 is_stmt 1 view -0
 2159              		.cfi_startproc
 2160              		@ args = 0, pretend = 0, frame = 0
 2161              		@ frame_needed = 0, uses_anonymous_args = 0
 977:tmk_core/common/action.c ****     clear_keyboard_but_mods_and_keys();
 2162              		.loc 1 977 5 view .LVU610
 976:tmk_core/common/action.c ****     clear_keys();
 2163              		.loc 1 976 36 is_stmt 0 view .LVU611
 2164 0000 08B5     		push	{r3, lr}
 2165              		.cfi_def_cfa_offset 8
 2166              		.cfi_offset 3, -8
 2167              		.cfi_offset 14, -4
 977:tmk_core/common/action.c ****     clear_keyboard_but_mods_and_keys();
 2168              		.loc 1 977 5 view .LVU612
 2169 0002 FFF7FEFF 		bl	clear_keys
 2170              	.LVL218:
 978:tmk_core/common/action.c **** }
 2171              		.loc 1 978 5 is_stmt 1 view .LVU613
 979:tmk_core/common/action.c **** 
 2172              		.loc 1 979 1 is_stmt 0 view .LVU614
 2173 0006 BDE80840 		pop	{r3, lr}
 2174              		.cfi_restore 14
 2175              		.cfi_restore 3
 2176              		.cfi_def_cfa_offset 0
 978:tmk_core/common/action.c **** }
 2177              		.loc 1 978 5 view .LVU615
 2178 000a FFF7FEBF 		b	clear_keyboard_but_mods_and_keys
 2179              	.LVL219:
 2180              		.cfi_endproc
 2181              	.LFE305:
 2183              		.section	.text.clear_keyboard,"ax",%progbits
 2184              		.align	1
 2185              		.global	clear_keyboard
 2186              		.syntax unified
 2187              		.thumb
 2188              		.thumb_func
 2189              		.fpu fpv4-sp-d16
 2191              	clear_keyboard:
 2192              	.LFB304:
 967:tmk_core/common/action.c ****     clear_mods();
 2193              		.loc 1 967 27 is_stmt 1 view -0
 2194              		.cfi_startproc
 2195              		@ args = 0, pretend = 0, frame = 0
 2196              		@ frame_needed = 0, uses_anonymous_args = 0
 968:tmk_core/common/action.c ****     clear_keyboard_but_mods();
 2197              		.loc 1 968 5 view .LVU617
 967:tmk_core/common/action.c ****     clear_mods();
 2198              		.loc 1 967 27 is_stmt 0 view .LVU618
 2199 0000 08B5     		push	{r3, lr}
 2200              		.cfi_def_cfa_offset 8
 2201              		.cfi_offset 3, -8
 2202              		.cfi_offset 14, -4
 968:tmk_core/common/action.c ****     clear_keyboard_but_mods();
 2203              		.loc 1 968 5 view .LVU619
 2204 0002 FFF7FEFF 		bl	clear_mods
 2205              	.LVL220:
 969:tmk_core/common/action.c **** }
 2206              		.loc 1 969 5 is_stmt 1 view .LVU620
 970:tmk_core/common/action.c **** 
 2207              		.loc 1 970 1 is_stmt 0 view .LVU621
 2208 0006 BDE80840 		pop	{r3, lr}
 2209              		.cfi_restore 14
 2210              		.cfi_restore 3
 2211              		.cfi_def_cfa_offset 0
 969:tmk_core/common/action.c **** }
 2212              		.loc 1 969 5 view .LVU622
 2213 000a FFF7FEBF 		b	clear_keyboard_but_mods
 2214              	.LVL221:
 2215              		.cfi_endproc
 2216              	.LFE304:
 2218              		.section	.text.is_tap_action,"ax",%progbits
 2219              		.align	1
 2220              		.global	is_tap_action
 2221              		.syntax unified
 2222              		.thumb
 2223              		.thumb_func
 2224              		.fpu fpv4-sp-d16
 2226              	is_tap_action:
 2227              	.LVL222:
 2228              	.LFB309:
1030:tmk_core/common/action.c ****     switch (action.kind.id) {
 2229              		.loc 1 1030 37 is_stmt 1 view -0
 2230              		.cfi_startproc
 2231              		@ args = 0, pretend = 0, frame = 0
 2232              		@ frame_needed = 0, uses_anonymous_args = 0
 2233              		@ link register save eliminated.
1030:tmk_core/common/action.c ****     switch (action.kind.id) {
 2234              		.loc 1 1030 37 is_stmt 0 view .LVU624
 2235 0000 C0F30332 		ubfx	r2, r0, #12, #4
 2236 0004 023A     		subs	r2, r2, #2
 2237 0006 C3B2     		uxtb	r3, r0
 2238              	.LVL223:
1031:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 2239              		.loc 1 1031 5 is_stmt 1 view .LVU625
 2240 0008 0D2A     		cmp	r2, #13
 2241 000a 1CD8     		bhi	.L221
 2242 000c DFE802F0 		tbb	[pc, r2]
 2243              	.L217:
 2244 0010 07       		.byte	(.L218-.L217)/2
 2245 0011 07       		.byte	(.L218-.L217)/2
 2246 0012 1B       		.byte	(.L221-.L217)/2
 2247 0013 1B       		.byte	(.L221-.L217)/2
 2248 0014 14       		.byte	(.L219-.L217)/2
 2249 0015 1B       		.byte	(.L221-.L217)/2
 2250 0016 1B       		.byte	(.L221-.L217)/2
 2251 0017 1B       		.byte	(.L221-.L217)/2
 2252 0018 07       		.byte	(.L218-.L217)/2
 2253 0019 07       		.byte	(.L218-.L217)/2
 2254 001a 18       		.byte	(.L216-.L217)/2
 2255 001b 1B       		.byte	(.L221-.L217)/2
 2256 001c 1B       		.byte	(.L221-.L217)/2
 2257 001d 18       		.byte	(.L216-.L217)/2
 2258              		.p2align 1
 2259              	.L218:
1036:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 2260              		.loc 1 1036 13 view .LVU626
 2261 001e F02B     		cmp	r3, #240
 2262 0020 13D0     		beq	.L223
 2263 0022 04D8     		bhi	.L220
 2264 0024 E72B     		cmp	r3, #231
 2265 0026 8CBF     		ite	hi
 2266 0028 0020     		movhi	r0, #0
 2267              	.LVL224:
1036:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 2268              		.loc 1 1036 13 is_stmt 0 view .LVU627
 2269 002a 0120     		movls	r0, #1
 2270 002c 7047     		bx	lr
 2271              	.LVL225:
 2272              	.L220:
1036:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 2273              		.loc 1 1036 13 view .LVU628
 2274 002e F42B     		cmp	r3, #244
 2275              	.L224:
 2276 0030 14BF     		ite	ne
 2277 0032 0020     		movne	r0, #0
 2278              	.LVL226:
1036:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 2279              		.loc 1 1036 13 view .LVU629
 2280 0034 0120     		moveq	r0, #1
 2281 0036 7047     		bx	lr
 2282              	.LVL227:
 2283              	.L219:
1044:tmk_core/common/action.c ****                 case KC_NO ... KC_RGUI:
 2284              		.loc 1 1044 13 is_stmt 1 view .LVU630
 2285 0038 E72B     		cmp	r3, #231
 2286 003a 06D9     		bls	.L223
 2287 003c F12B     		cmp	r3, #241
 2288 003e F7E7     		b	.L224
 2289              	.L216:
1052:tmk_core/common/action.c ****                 return true;
 2290              		.loc 1 1052 13 view .LVU631
1052:tmk_core/common/action.c ****                 return true;
 2291              		.loc 1 1052 16 is_stmt 0 view .LVU632
 2292 0040 C0F3C020 		ubfx	r0, r0, #11, #1
 2293              	.LVL228:
1052:tmk_core/common/action.c ****                 return true;
 2294              		.loc 1 1052 16 view .LVU633
 2295 0044 7047     		bx	lr
 2296              	.LVL229:
 2297              	.L221:
1031:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 2298              		.loc 1 1031 24 view .LVU634
 2299 0046 0020     		movs	r0, #0
 2300              	.LVL230:
1031:tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 2301              		.loc 1 1031 24 view .LVU635
 2302 0048 7047     		bx	lr
 2303              	.LVL231:
 2304              	.L223:
1040:tmk_core/common/action.c ****             }
 2305              		.loc 1 1040 28 view .LVU636
 2306 004a 0120     		movs	r0, #1
 2307              	.LVL232:
1058:tmk_core/common/action.c **** 
 2308              		.loc 1 1058 1 view .LVU637
 2309 004c 7047     		bx	lr
 2310              		.cfi_endproc
 2311              	.LFE309:
 2313              		.section	.text.is_tap_key,"ax",%progbits
 2314              		.align	1
 2315              		.global	is_tap_key
 2316              		.syntax unified
 2317              		.thumb
 2318              		.thumb_func
 2319              		.fpu fpv4-sp-d16
 2321              	is_tap_key:
 2322              	.LFB307:
1003:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 2323              		.loc 1 1003 31 is_stmt 1 view -0
 2324              		.cfi_startproc
 2325              		@ args = 0, pretend = 0, frame = 8
 2326              		@ frame_needed = 0, uses_anonymous_args = 0
1004:tmk_core/common/action.c ****     return is_tap_action(action);
 2327              		.loc 1 1004 5 view .LVU639
1003:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 2328              		.loc 1 1003 31 is_stmt 0 view .LVU640
 2329 0000 07B5     		push	{r0, r1, r2, lr}
 2330              		.cfi_def_cfa_offset 16
 2331              		.cfi_offset 14, -4
1003:tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 2332              		.loc 1 1003 31 view .LVU641
 2333 0002 ADF80400 		strh	r0, [sp, #4]	@ movhi
1004:tmk_core/common/action.c ****     return is_tap_action(action);
 2334              		.loc 1 1004 23 view .LVU642
 2335 0006 0198     		ldr	r0, [sp, #4]
 2336 0008 FFF7FEFF 		bl	layer_switch_get_action
 2337              	.LVL233:
1005:tmk_core/common/action.c **** }
 2338              		.loc 1 1005 5 is_stmt 1 view .LVU643
1006:tmk_core/common/action.c **** 
 2339              		.loc 1 1006 1 is_stmt 0 view .LVU644
 2340 000c 03B0     		add	sp, sp, #12
 2341              		.cfi_def_cfa_offset 4
 2342              		@ sp needed
 2343 000e 5DF804EB 		ldr	lr, [sp], #4
 2344              		.cfi_restore 14
 2345              		.cfi_def_cfa_offset 0
1005:tmk_core/common/action.c **** }
 2346              		.loc 1 1005 12 view .LVU645
 2347 0012 FFF7FEBF 		b	is_tap_action
 2348              	.LVL234:
 2349              		.cfi_endproc
 2350              	.LFE307:
 2352              		.section	.text.is_tap_record,"ax",%progbits
 2353              		.align	1
 2354              		.global	is_tap_record
 2355              		.syntax unified
 2356              		.thumb
 2357              		.thumb_func
 2358              		.fpu fpv4-sp-d16
 2360              	is_tap_record:
 2361              	.LVL235:
 2362              	.LFB308:
1012:tmk_core/common/action.c **** #ifdef COMBO_ENABLE
 2363              		.loc 1 1012 41 is_stmt 1 view -0
 2364              		.cfi_startproc
 2365              		@ args = 0, pretend = 0, frame = 0
 2366              		@ frame_needed = 0, uses_anonymous_args = 0
1021:tmk_core/common/action.c **** #endif
 2367              		.loc 1 1021 5 view .LVU647
1012:tmk_core/common/action.c **** #ifdef COMBO_ENABLE
 2368              		.loc 1 1012 41 is_stmt 0 view .LVU648
 2369 0000 08B5     		push	{r3, lr}
 2370              		.cfi_def_cfa_offset 8
 2371              		.cfi_offset 3, -8
 2372              		.cfi_offset 14, -4
1021:tmk_core/common/action.c **** #endif
 2373              		.loc 1 1021 23 view .LVU649
 2374 0002 0088     		ldrh	r0, [r0]
 2375              	.LVL236:
1021:tmk_core/common/action.c **** #endif
 2376              		.loc 1 1021 23 view .LVU650
 2377 0004 FFF7FEFF 		bl	layer_switch_get_action
 2378              	.LVL237:
1023:tmk_core/common/action.c **** }
 2379              		.loc 1 1023 5 is_stmt 1 view .LVU651
1024:tmk_core/common/action.c **** 
 2380              		.loc 1 1024 1 is_stmt 0 view .LVU652
 2381 0008 BDE80840 		pop	{r3, lr}
 2382              		.cfi_restore 14
 2383              		.cfi_restore 3
 2384              		.cfi_def_cfa_offset 0
1023:tmk_core/common/action.c **** }
 2385              		.loc 1 1023 12 view .LVU653
 2386 000c FFF7FEBF 		b	is_tap_action
 2387              	.LVL238:
 2388              		.cfi_endproc
 2389              	.LFE308:
 2391              		.section	.text.debug_event,"ax",%progbits
 2392              		.align	1
 2393              		.global	debug_event
 2394              		.syntax unified
 2395              		.thumb
 2396              		.thumb_func
 2397              		.fpu fpv4-sp-d16
 2399              	debug_event:
 2400              	.LFB310:
1064:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 2401              		.loc 1 1064 36 is_stmt 1 view -0
 2402              		.cfi_startproc
 2403              		@ args = 0, pretend = 0, frame = 8
 2404              		@ frame_needed = 0, uses_anonymous_args = 0
 2405              		@ link register save eliminated.
1064:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 2406              		.loc 1 1064 138 view .LVU655
1064:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 2407              		.loc 1 1064 36 is_stmt 0 view .LVU656
 2408 0000 82B0     		sub	sp, sp, #8
 2409              		.cfi_def_cfa_offset 8
1064:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 2410              		.loc 1 1064 36 view .LVU657
 2411 0002 02AB     		add	r3, sp, #8
 2412 0004 03E90300 		stmdb	r3, {r0, r1}
1064:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 2413              		.loc 1 1064 140 view .LVU658
 2414 0008 02B0     		add	sp, sp, #8
 2415              		.cfi_def_cfa_offset 0
 2416              		@ sp needed
 2417 000a 7047     		bx	lr
 2418              		.cfi_endproc
 2419              	.LFE310:
 2421              		.section	.text.debug_record,"ax",%progbits
 2422              		.align	1
 2423              		.global	debug_record
 2424              		.syntax unified
 2425              		.thumb
 2426              		.thumb_func
 2427              		.fpu fpv4-sp-d16
 2429              	debug_record:
 2430              	.LFB311:
1069:tmk_core/common/action.c ****     debug_event(record.event);
 2431              		.loc 1 1069 39 is_stmt 1 view -0
 2432              		.cfi_startproc
 2433              		@ args = 0, pretend = 0, frame = 8
 2434              		@ frame_needed = 0, uses_anonymous_args = 0
 2435              		@ link register save eliminated.
1070:tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 2436              		.loc 1 1070 5 view .LVU660
1064:tmk_core/common/action.c **** /** \brief Debug print (FIXME: Needs better description)
 2437              		.loc 1 1064 138 view .LVU661
1072:tmk_core/common/action.c **** #endif
 2438              		.loc 1 1072 77 view .LVU662
1069:tmk_core/common/action.c ****     debug_event(record.event);
 2439              		.loc 1 1069 39 is_stmt 0 view .LVU663
 2440 0000 82B0     		sub	sp, sp, #8
 2441              		.cfi_def_cfa_offset 8
1069:tmk_core/common/action.c ****     debug_event(record.event);
 2442              		.loc 1 1069 39 view .LVU664
 2443 0002 02AB     		add	r3, sp, #8
 2444 0004 03E90300 		stmdb	r3, {r0, r1}
1074:tmk_core/common/action.c **** 
 2445              		.loc 1 1074 1 view .LVU665
 2446 0008 02B0     		add	sp, sp, #8
 2447              		.cfi_def_cfa_offset 0
 2448              		@ sp needed
 2449 000a 7047     		bx	lr
 2450              		.cfi_endproc
 2451              	.LFE311:
 2453              		.section	.text.debug_action,"ax",%progbits
 2454              		.align	1
 2455              		.global	debug_action
 2456              		.syntax unified
 2457              		.thumb
 2458              		.thumb_func
 2459              		.fpu fpv4-sp-d16
 2461              	debug_action:
 2462              	.LVL239:
 2463              	.LFB312:
1080:tmk_core/common/action.c ****     switch (action.kind.id) {
 2464              		.loc 1 1080 36 is_stmt 1 view -0
 2465              		.cfi_startproc
 2466              		@ args = 0, pretend = 0, frame = 0
 2467              		@ frame_needed = 0, uses_anonymous_args = 0
 2468              		@ link register save eliminated.
1081:tmk_core/common/action.c ****         case ACT_LMODS:
 2469              		.loc 1 1081 5 view .LVU667
 2470              		.loc 1 1125 75 view .LVU668
1126:tmk_core/common/action.c **** }
 2471              		.loc 1 1126 1 is_stmt 0 view .LVU669
 2472 0000 7047     		bx	lr
 2473              		.cfi_endproc
 2474              	.LFE312:
 2476              		.global	disable_action_cache
 2477              		.comm	tp_buttons,4,4
 2478              		.section	.bss.disable_action_cache,"aw",%nobits
 2479              		.set	.LANCHOR1,. + 0
 2482              	disable_action_cache:
 2483 0000 00       		.space	1
 2484              		.section	.rodata.CSWTCH.14,"a"
 2485              		.align	1
 2486              		.set	.LANCHOR0,. + 0
 2489              	CSWTCH.14:
 2490 0000 E200     		.short	226
 2491 0002 E900     		.short	233
 2492 0004 EA00     		.short	234
 2493 0006 B500     		.short	181
 2494 0008 B600     		.short	182
 2495 000a B700     		.short	183
 2496 000c CD00     		.short	205
 2497 000e 8301     		.short	387
 2498 0010 CC00     		.short	204
 2499 0012 8A01     		.short	394
 2500 0014 9201     		.short	402
 2501 0016 9401     		.short	404
 2502 0018 2102     		.short	545
 2503 001a 2302     		.short	547
 2504 001c 2402     		.short	548
 2505 001e 2502     		.short	549
 2506 0020 2602     		.short	550
 2507 0022 2702     		.short	551
 2508 0024 2A02     		.short	554
 2509 0026 B300     		.short	179
 2510 0028 B400     		.short	180
 2511 002a 6F00     		.short	111
 2512 002c 7000     		.short	112
 2513              		.text
 2514              	.Letext0:
 2515              		.file 4 "c:\\qmk_msys\\mingw64\\arm-none-eabi\\include\\machine\\_default_types.h"
 2516              		.file 5 "c:\\qmk_msys\\mingw64\\arm-none-eabi\\include\\sys\\_stdint.h"
 2517              		.file 6 "tmk_core/common/keycode.h"
 2518              		.file 7 "./lib/chibios/os/rt/include/chtime.h"
 2519              		.file 8 "tmk_core/common/action_code.h"
 2520              		.file 9 "tmk_core/common/action.h"
 2521              		.file 10 "tmk_core/common/action_layer.h"
 2522              		.file 11 "tmk_core/common/action_util.h"
 2523              		.file 12 "tmk_core/common/host.h"
 2524              		.file 13 "quantum/mousekey.h"
 2525              		.file 14 "./lib/chibios/os/rt/include/chthreads.h"
 2526              		.file 15 "quantum/led.h"
 2527              		.file 16 "tmk_core/common/action_macro.h"
 2528              		.file 17 "tmk_core/common/action_tapping.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:18     .text.pre_process_record_quantum:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:26     .text.pre_process_record_quantum:0000000000000000 pre_process_record_quantum
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:38     .text.action_exec:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:45     .text.action_exec:0000000000000000 action_exec
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:134    .text.process_record_quantum:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:141    .text.process_record_quantum:0000000000000000 process_record_quantum
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:159    .text.post_process_record_quantum:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:166    .text.post_process_record_quantum:0000000000000000 post_process_record_quantum
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:180    .text.process_record_tap_hint:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:187    .text.process_record_tap_hint:0000000000000000 process_record_tap_hint
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:206    .text.register_code:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:213    .text.register_code:0000000000000000 register_code
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:507    .text.register_code:00000000000000f8 $d
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:513    .text.unregister_code:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:520    .text.unregister_code:0000000000000000 unregister_code
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:739    .text.tap_code_delay:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:746    .text.tap_code_delay:0000000000000000 tap_code_delay
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:815    .text.tap_code:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:822    .text.tap_code:0000000000000000 tap_code
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:842    .text.register_mods:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:849    .text.register_mods:0000000000000000 register_mods
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:885    .text.unregister_mods:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:892    .text.unregister_mods:0000000000000000 unregister_mods
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:928    .text.process_action:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:935    .text.process_action:0000000000000000 process_action
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:1013   .text.process_action:000000000000004e $d
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:1030   .text.process_action:000000000000006e $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:1865   .text.process_record:0000000000000000 process_record
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:1626   .text.process_action:00000000000002da $d
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:1790   .text.process_record_handler:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:1797   .text.process_record_handler:0000000000000000 process_record_handler
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:1858   .text.process_record:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:1970   .text.process_record_nocache:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:1977   .text.process_record_nocache:0000000000000000 process_record_nocache
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2006   .text.process_record_nocache:0000000000000014 $d
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2011   .text.register_weak_mods:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2018   .text.register_weak_mods:0000000000000000 register_weak_mods
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2054   .text.unregister_weak_mods:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2061   .text.unregister_weak_mods:0000000000000000 unregister_weak_mods
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2097   .text.clear_keyboard_but_mods_and_keys:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2104   .text.clear_keyboard_but_mods_and_keys:0000000000000000 clear_keyboard_but_mods_and_keys
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2149   .text.clear_keyboard_but_mods:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2156   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2184   .text.clear_keyboard:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2191   .text.clear_keyboard:0000000000000000 clear_keyboard
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2219   .text.is_tap_action:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2226   .text.is_tap_action:0000000000000000 is_tap_action
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2244   .text.is_tap_action:0000000000000010 $d
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2258   .text.is_tap_action:000000000000001e $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2314   .text.is_tap_key:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2321   .text.is_tap_key:0000000000000000 is_tap_key
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2353   .text.is_tap_record:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2360   .text.is_tap_record:0000000000000000 is_tap_record
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2392   .text.debug_event:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2399   .text.debug_event:0000000000000000 debug_event
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2422   .text.debug_record:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2429   .text.debug_record:0000000000000000 debug_record
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2454   .text.debug_action:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2461   .text.debug_action:0000000000000000 debug_action
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2482   .bss.disable_action_cache:0000000000000000 disable_action_cache
                            *COM*:0000000000000004 tp_buttons
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2483   .bss.disable_action_cache:0000000000000000 $d
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2485   .rodata.CSWTCH.14:0000000000000000 $d
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:2489   .rodata.CSWTCH.14:0000000000000000 CSWTCH.14
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:1631   .text.process_action:00000000000002df $d
C:\Users\lhanj\AppData\Local\Temp\ccCZhdQq.s:1631   .text.process_action:00000000000002e0 $t

UNDEFINED SYMBOLS
clear_weak_mods
action_tapping_process
layer_switch_get_action
host_keyboard_leds
add_key
send_keyboard_report
chThdSleep
del_key
is_key_pressed
add_mods
host_system_send
host_consumer_send
mousekey_on
mousekey_send
keyboard_report
del_mods
mousekey_off
is_oneshot_layer_active
clear_oneshot_layer_state
add_weak_mods
led_set
get_oneshot_layer_state
get_oneshot_layer
layer_on
layer_off
del_weak_mods
get_oneshot_mods
set_oneshot_mods
clear_oneshot_mods
default_layer_and
default_layer_or
default_layer_xor
default_layer_set
layer_and
layer_or
layer_xor
layer_state_set
layer_invert
layer_move
layer_clear
set_oneshot_layer
action_get_macro
action_macro_play
action_function
store_or_get_action
layer_debug
default_layer_debug
clear_macro_mods
mousekey_clear
clear_keys
clear_mods

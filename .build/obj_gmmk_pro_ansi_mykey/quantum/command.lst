   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"command.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.mousekey_param_print.str1.1,"aMS",%progbits,1
  18              	.LC0:
  19 0000 313A0964 		.ascii	"1:\011delay(*10ms): %u\0122:\011interval(ms): %u\012"
  19      656C6179 
  19      282A3130 
  19      6D73293A 
  19      2025750A 
  20 0028 333A096D 		.ascii	"3:\011max_speed: %u\0124:\011time_to_max: %u\0125:\011"
  20      61785F73 
  20      70656564 
  20      3A202575 
  20      0A343A09 
  21 004f 77686565 		.ascii	"wheel_max_speed: %u\0126:\011wheel_time_to_max: %u\012"
  21      6C5F6D61 
  21      785F7370 
  21      6565643A 
  21      2025750A 
  22 007c 00       		.ascii	"\000"
  23              		.section	.text.mousekey_param_print,"ax",%progbits
  24              		.align	1
  25              		.arch armv7e-m
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  29              		.fpu fpv4-sp-d16
  31              	mousekey_param_print:
  32              	.LFB301:
  33              		.file 1 "quantum/command.c"
   1:quantum/command.c **** /*
   2:quantum/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:quantum/command.c **** 
   4:quantum/command.c **** This program is free software: you can redistribute it and/or modify
   5:quantum/command.c **** it under the terms of the GNU General Public License as published by
   6:quantum/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:quantum/command.c **** (at your option) any later version.
   8:quantum/command.c **** 
   9:quantum/command.c **** This program is distributed in the hope that it will be useful,
  10:quantum/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:quantum/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:quantum/command.c **** GNU General Public License for more details.
  13:quantum/command.c **** 
  14:quantum/command.c **** You should have received a copy of the GNU General Public License
  15:quantum/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:quantum/command.c **** */
  17:quantum/command.c **** #include <stdint.h>
  18:quantum/command.c **** #include <stdbool.h>
  19:quantum/command.c **** #include "wait.h"
  20:quantum/command.c **** #include "keycode.h"
  21:quantum/command.c **** #include "host.h"
  22:quantum/command.c **** #include "keymap.h"
  23:quantum/command.c **** #include "print.h"
  24:quantum/command.c **** #include "debug.h"
  25:quantum/command.c **** #include "util.h"
  26:quantum/command.c **** #include "timer.h"
  27:quantum/command.c **** #include "keyboard.h"
  28:quantum/command.c **** #include "bootloader.h"
  29:quantum/command.c **** #include "action_layer.h"
  30:quantum/command.c **** #include "action_util.h"
  31:quantum/command.c **** #include "eeconfig.h"
  32:quantum/command.c **** #include "sleep_led.h"
  33:quantum/command.c **** #include "led.h"
  34:quantum/command.c **** #include "command.h"
  35:quantum/command.c **** #include "quantum.h"
  36:quantum/command.c **** #include "version.h"
  37:quantum/command.c **** 
  38:quantum/command.c **** #ifdef BACKLIGHT_ENABLE
  39:quantum/command.c **** #    include "backlight.h"
  40:quantum/command.c **** #endif
  41:quantum/command.c **** 
  42:quantum/command.c **** #if defined(MOUSEKEY_ENABLE) && !defined(MK_3_SPEED)
  43:quantum/command.c **** #    include "mousekey.h"
  44:quantum/command.c **** #endif
  45:quantum/command.c **** 
  46:quantum/command.c **** #ifdef AUDIO_ENABLE
  47:quantum/command.c **** #    include "audio.h"
  48:quantum/command.c **** #endif /* AUDIO_ENABLE */
  49:quantum/command.c **** 
  50:quantum/command.c **** static bool command_common(uint8_t code);
  51:quantum/command.c **** static void command_common_help(void);
  52:quantum/command.c **** static void print_version(void);
  53:quantum/command.c **** static void print_status(void);
  54:quantum/command.c **** static bool command_console(uint8_t code);
  55:quantum/command.c **** static void command_console_help(void);
  56:quantum/command.c **** #if defined(MOUSEKEY_ENABLE) && !defined(MK_3_SPEED)
  57:quantum/command.c **** static bool mousekey_console(uint8_t code);
  58:quantum/command.c **** #endif
  59:quantum/command.c **** 
  60:quantum/command.c **** static void switch_default_layer(uint8_t layer);
  61:quantum/command.c **** 
  62:quantum/command.c **** command_state_t command_state = ONESHOT;
  63:quantum/command.c **** 
  64:quantum/command.c **** bool command_proc(uint8_t code) {
  65:quantum/command.c ****     switch (command_state) {
  66:quantum/command.c ****         case ONESHOT:
  67:quantum/command.c ****             if (!IS_COMMAND()) return false;
  68:quantum/command.c ****             return (command_extra(code) || command_common(code));
  69:quantum/command.c ****             break;
  70:quantum/command.c ****         case CONSOLE:
  71:quantum/command.c ****             if (IS_COMMAND())
  72:quantum/command.c ****                 return (command_extra(code) || command_common(code));
  73:quantum/command.c ****             else
  74:quantum/command.c ****                 return (command_console_extra(code) || command_console(code));
  75:quantum/command.c ****             break;
  76:quantum/command.c **** #if defined(MOUSEKEY_ENABLE) && !defined(MK_3_SPEED)
  77:quantum/command.c ****         case MOUSEKEY:
  78:quantum/command.c ****             mousekey_console(code);
  79:quantum/command.c ****             break;
  80:quantum/command.c **** #endif
  81:quantum/command.c ****         default:
  82:quantum/command.c ****             command_state = ONESHOT;
  83:quantum/command.c ****             return false;
  84:quantum/command.c ****     }
  85:quantum/command.c ****     return true;
  86:quantum/command.c **** }
  87:quantum/command.c **** 
  88:quantum/command.c **** /* TODO: Refactoring is needed. */
  89:quantum/command.c **** /* This allows to define extra commands. return false when not processed. */
  90:quantum/command.c **** bool command_extra(uint8_t code) __attribute__((weak));
  91:quantum/command.c **** bool command_extra(uint8_t code) {
  92:quantum/command.c ****     (void)code;
  93:quantum/command.c ****     return false;
  94:quantum/command.c **** }
  95:quantum/command.c **** 
  96:quantum/command.c **** bool command_console_extra(uint8_t code) __attribute__((weak));
  97:quantum/command.c **** bool command_console_extra(uint8_t code) {
  98:quantum/command.c ****     (void)code;
  99:quantum/command.c ****     return false;
 100:quantum/command.c **** }
 101:quantum/command.c **** 
 102:quantum/command.c **** /***********************************************************
 103:quantum/command.c ****  * Command common
 104:quantum/command.c ****  ***********************************************************/
 105:quantum/command.c **** 
 106:quantum/command.c **** static void command_common_help(void) {
 107:quantum/command.c ****     print(/* clang-format off */
 108:quantum/command.c ****         "\n\t- Magic -\n"
 109:quantum/command.c **** 
 110:quantum/command.c ****         STR(MAGIC_KEY_DEBUG) ":	Debug Message Toggle\n"
 111:quantum/command.c ****         STR(MAGIC_KEY_DEBUG_MATRIX) ":	Matrix Debug Mode Toggle"
 112:quantum/command.c ****             " - Show keypresses in matrix grid\n"
 113:quantum/command.c ****         STR(MAGIC_KEY_DEBUG_KBD) ":	Keyboard Debug Toggle"
 114:quantum/command.c ****             " - Show keypress report\n"
 115:quantum/command.c ****         STR(MAGIC_KEY_DEBUG_MOUSE) ":	Debug Mouse Toggle\n"
 116:quantum/command.c ****         STR(MAGIC_KEY_VERSION) ":	Version\n"
 117:quantum/command.c ****         STR(MAGIC_KEY_STATUS) ":	Status\n"
 118:quantum/command.c ****         STR(MAGIC_KEY_CONSOLE) ":	Activate Console Mode\n"
 119:quantum/command.c **** 
 120:quantum/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 121:quantum/command.c ****         STR(MAGIC_KEY_LAYER0) ":	Switch to Layer 0\n"
 122:quantum/command.c ****         STR(MAGIC_KEY_LAYER1) ":	Switch to Layer 1\n"
 123:quantum/command.c ****         STR(MAGIC_KEY_LAYER2) ":	Switch to Layer 2\n"
 124:quantum/command.c ****         STR(MAGIC_KEY_LAYER3) ":	Switch to Layer 3\n"
 125:quantum/command.c ****         STR(MAGIC_KEY_LAYER4) ":	Switch to Layer 4\n"
 126:quantum/command.c ****         STR(MAGIC_KEY_LAYER5) ":	Switch to Layer 5\n"
 127:quantum/command.c ****         STR(MAGIC_KEY_LAYER6) ":	Switch to Layer 6\n"
 128:quantum/command.c ****         STR(MAGIC_KEY_LAYER7) ":	Switch to Layer 7\n"
 129:quantum/command.c ****         STR(MAGIC_KEY_LAYER8) ":	Switch to Layer 8\n"
 130:quantum/command.c ****         STR(MAGIC_KEY_LAYER9) ":	Switch to Layer 9\n"
 131:quantum/command.c **** #endif
 132:quantum/command.c **** 
 133:quantum/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 134:quantum/command.c ****         "F1-F10:	Switch to Layer 0-9 (F10 = L0)\n"
 135:quantum/command.c **** #endif
 136:quantum/command.c **** 
 137:quantum/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 138:quantum/command.c ****         "0-9:	Switch to Layer 0-9\n"
 139:quantum/command.c **** #endif
 140:quantum/command.c **** 
 141:quantum/command.c ****         STR(MAGIC_KEY_LAYER0_ALT) ":	Switch to Layer 0 (alternate)\n"
 142:quantum/command.c **** 
 143:quantum/command.c ****         STR(MAGIC_KEY_BOOTLOADER) ":	Jump to Bootloader\n"
 144:quantum/command.c ****         STR(MAGIC_KEY_BOOTLOADER_ALT) ":	Jump to Bootloader (alternate)\n"
 145:quantum/command.c **** 
 146:quantum/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 147:quantum/command.c ****         STR(MAGIC_KEY_LOCK) ":	Lock Keyboard\n"
 148:quantum/command.c **** #endif
 149:quantum/command.c **** 
 150:quantum/command.c ****         STR(MAGIC_KEY_EEPROM) ":	Print EEPROM Settings\n"
 151:quantum/command.c ****         STR(MAGIC_KEY_EEPROM_CLEAR) ":	Clear EEPROM\n"
 152:quantum/command.c **** 
 153:quantum/command.c **** #ifdef NKRO_ENABLE
 154:quantum/command.c ****         STR(MAGIC_KEY_NKRO) ":	NKRO Toggle\n"
 155:quantum/command.c **** #endif
 156:quantum/command.c **** 
 157:quantum/command.c **** #ifdef SLEEP_LED_ENABLE
 158:quantum/command.c ****         STR(MAGIC_KEY_SLEEP_LED) ":	Sleep LED Test\n"
 159:quantum/command.c **** #endif
 160:quantum/command.c ****     ); /* clang-format on */
 161:quantum/command.c **** }
 162:quantum/command.c **** 
 163:quantum/command.c **** static void print_version(void) {
 164:quantum/command.c ****     print(/* clang-format off */
 165:quantum/command.c ****         "\n\t- Version -\n"
 166:quantum/command.c ****         "VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 167:quantum/command.c ****         "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 168:quantum/command.c ****         "VER: " STR(DEVICE_VER) "\n"
 169:quantum/command.c ****         "BUILD:  (" __DATE__ ")\n"
 170:quantum/command.c **** #ifndef SKIP_VERSION
 171:quantum/command.c **** #    ifdef PROTOCOL_CHIBIOS
 172:quantum/command.c ****         "CHIBIOS: " STR(CHIBIOS_VERSION)
 173:quantum/command.c ****             ", CONTRIB: " STR(CHIBIOS_CONTRIB_VERSION) "\n"
 174:quantum/command.c **** #    endif
 175:quantum/command.c **** #endif
 176:quantum/command.c **** 
 177:quantum/command.c ****     /* build options */
 178:quantum/command.c ****         "OPTIONS:"
 179:quantum/command.c **** 
 180:quantum/command.c **** #ifdef PROTOCOL_LUFA
 181:quantum/command.c ****         " LUFA"
 182:quantum/command.c **** #endif
 183:quantum/command.c **** #ifdef PROTOCOL_VUSB
 184:quantum/command.c ****         " VUSB"
 185:quantum/command.c **** #endif
 186:quantum/command.c **** #ifdef BOOTMAGIC_ENABLE
 187:quantum/command.c ****         " BOOTMAGIC"
 188:quantum/command.c **** #endif
 189:quantum/command.c **** #ifdef MOUSEKEY_ENABLE
 190:quantum/command.c ****         " MOUSEKEY"
 191:quantum/command.c **** #endif
 192:quantum/command.c **** #ifdef EXTRAKEY_ENABLE
 193:quantum/command.c ****         " EXTRAKEY"
 194:quantum/command.c **** #endif
 195:quantum/command.c **** #ifdef CONSOLE_ENABLE
 196:quantum/command.c ****         " CONSOLE"
 197:quantum/command.c **** #endif
 198:quantum/command.c **** #ifdef COMMAND_ENABLE
 199:quantum/command.c ****         " COMMAND"
 200:quantum/command.c **** #endif
 201:quantum/command.c **** #ifdef NKRO_ENABLE
 202:quantum/command.c ****         " NKRO"
 203:quantum/command.c **** #endif
 204:quantum/command.c **** #ifdef LTO_ENABLE
 205:quantum/command.c ****         " LTO"
 206:quantum/command.c **** #endif
 207:quantum/command.c **** 
 208:quantum/command.c ****         " " STR(BOOTLOADER_SIZE) "\n"
 209:quantum/command.c **** 
 210:quantum/command.c ****         "GCC: " STR(__GNUC__)
 211:quantum/command.c ****             "." STR(__GNUC_MINOR__)
 212:quantum/command.c ****             "." STR(__GNUC_PATCHLEVEL__)
 213:quantum/command.c **** #if defined(__AVR__)
 214:quantum/command.c ****         " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 215:quantum/command.c ****         " AVR_ARCH: avr" STR(__AVR_ARCH__)
 216:quantum/command.c **** #endif
 217:quantum/command.c ****         "\n"
 218:quantum/command.c ****     ); /* clang-format on */
 219:quantum/command.c **** }
 220:quantum/command.c **** 
 221:quantum/command.c **** static void print_status(void) {
 222:quantum/command.c ****     xprintf(/* clang-format off */
 223:quantum/command.c ****         "\n\t- Status -\n"
 224:quantum/command.c **** 
 225:quantum/command.c ****         "host_keyboard_leds(): %02X\n"
 226:quantum/command.c **** #ifndef PROTOCOL_VUSB
 227:quantum/command.c ****         "keyboard_protocol: %02X\n"
 228:quantum/command.c ****         "keyboard_idle: %02X\n"
 229:quantum/command.c **** #endif
 230:quantum/command.c **** #ifdef NKRO_ENABLE
 231:quantum/command.c ****         "keymap_config.nkro: %02X\n"
 232:quantum/command.c **** #endif
 233:quantum/command.c ****         "timer_read32(): %08lX\n"
 234:quantum/command.c **** 
 235:quantum/command.c ****         , host_keyboard_leds()
 236:quantum/command.c **** #ifndef PROTOCOL_VUSB
 237:quantum/command.c ****         /* these aren't set on the V-USB protocol, so we just ignore them for now */
 238:quantum/command.c ****         , keyboard_protocol
 239:quantum/command.c ****         , keyboard_idle
 240:quantum/command.c **** #endif
 241:quantum/command.c **** #ifdef NKRO_ENABLE
 242:quantum/command.c ****         , keymap_config.nkro
 243:quantum/command.c **** #endif
 244:quantum/command.c ****         , timer_read32()
 245:quantum/command.c **** 
 246:quantum/command.c ****     ); /* clang-format on */
 247:quantum/command.c **** }
 248:quantum/command.c **** 
 249:quantum/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 250:quantum/command.c **** static void print_eeconfig(void) {
 251:quantum/command.c ****     xprintf("eeconfig:\ndefault_layer: %u\n", eeconfig_read_default_layer());
 252:quantum/command.c **** 
 253:quantum/command.c ****     debug_config_t dc;
 254:quantum/command.c ****     dc.raw = eeconfig_read_debug();
 255:quantum/command.c ****     xprintf(/* clang-format off */
 256:quantum/command.c **** 
 257:quantum/command.c ****         "debug_config.raw: %02X\n"
 258:quantum/command.c ****         ".enable: %u\n"
 259:quantum/command.c ****         ".matrix: %u\n"
 260:quantum/command.c ****         ".keyboard: %u\n"
 261:quantum/command.c ****         ".mouse: %u\n"
 262:quantum/command.c **** 
 263:quantum/command.c ****         , dc.raw
 264:quantum/command.c ****         , dc.enable
 265:quantum/command.c ****         , dc.matrix
 266:quantum/command.c ****         , dc.keyboard
 267:quantum/command.c ****         , dc.mouse
 268:quantum/command.c ****     ); /* clang-format on */
 269:quantum/command.c **** 
 270:quantum/command.c ****     keymap_config_t kc;
 271:quantum/command.c ****     kc.raw = eeconfig_read_keymap();
 272:quantum/command.c ****     xprintf(/* clang-format off */
 273:quantum/command.c **** 
 274:quantum/command.c ****         "keymap_config.raw: %02X\n"
 275:quantum/command.c ****         ".swap_control_capslock: %u\n"
 276:quantum/command.c ****         ".capslock_to_control: %u\n"
 277:quantum/command.c ****         ".swap_lctl_lgui: %u\n"
 278:quantum/command.c ****         ".swap_rctl_rgui: %u\n"
 279:quantum/command.c ****         ".swap_lalt_lgui: %u\n"
 280:quantum/command.c ****         ".swap_ralt_rgui: %u\n"
 281:quantum/command.c ****         ".no_gui: %u\n"
 282:quantum/command.c ****         ".swap_grave_esc: %u\n"
 283:quantum/command.c ****         ".swap_backslash_backspace: %u\n"
 284:quantum/command.c ****         ".nkro: %u\n"
 285:quantum/command.c **** 
 286:quantum/command.c ****         , kc.raw
 287:quantum/command.c ****         , kc.swap_control_capslock
 288:quantum/command.c ****         , kc.capslock_to_control
 289:quantum/command.c ****         , kc.swap_lctl_lgui
 290:quantum/command.c ****         , kc.swap_rctl_rgui
 291:quantum/command.c ****         , kc.swap_lalt_lgui
 292:quantum/command.c ****         , kc.swap_ralt_rgui
 293:quantum/command.c ****         , kc.no_gui
 294:quantum/command.c ****         , kc.swap_grave_esc
 295:quantum/command.c ****         , kc.swap_backslash_backspace
 296:quantum/command.c ****         , kc.nkro
 297:quantum/command.c ****     ); /* clang-format on */
 298:quantum/command.c **** 
 299:quantum/command.c **** #    ifdef BACKLIGHT_ENABLE
 300:quantum/command.c **** 
 301:quantum/command.c ****     backlight_config_t bc;
 302:quantum/command.c ****     bc.raw = eeconfig_read_backlight();
 303:quantum/command.c ****     xprintf(/* clang-format off */
 304:quantum/command.c ****         "backlight_config"
 305:quantum/command.c **** 
 306:quantum/command.c ****         ".raw: %02X\n"
 307:quantum/command.c ****         ".enable: %u\n"
 308:quantum/command.c ****         ".level: %u\n"
 309:quantum/command.c **** 
 310:quantum/command.c ****         , bc.raw
 311:quantum/command.c ****         , bc.enable
 312:quantum/command.c ****         , bc.level
 313:quantum/command.c **** 
 314:quantum/command.c ****     ); /* clang-format on */
 315:quantum/command.c **** 
 316:quantum/command.c **** #    endif /* BACKLIGHT_ENABLE */
 317:quantum/command.c **** }
 318:quantum/command.c **** #endif /* !NO_PRINT && !USER_PRINT */
 319:quantum/command.c **** 
 320:quantum/command.c **** static bool command_common(uint8_t code) {
 321:quantum/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 322:quantum/command.c ****     static host_driver_t *host_driver = 0;
 323:quantum/command.c **** #endif
 324:quantum/command.c **** 
 325:quantum/command.c ****     switch (code) {
 326:quantum/command.c **** #ifdef SLEEP_LED_ENABLE
 327:quantum/command.c **** 
 328:quantum/command.c ****         // test breathing sleep LED
 329:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_SLEEP_LED):
 330:quantum/command.c ****             print("Sleep LED Test\n");
 331:quantum/command.c ****             sleep_led_toggle();
 332:quantum/command.c ****             led_set(host_keyboard_leds());
 333:quantum/command.c ****             break;
 334:quantum/command.c **** #endif
 335:quantum/command.c **** 
 336:quantum/command.c ****         // print stored eeprom config
 337:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_EEPROM):
 338:quantum/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 339:quantum/command.c ****             print_eeconfig();
 340:quantum/command.c **** #endif /* !NO_PRINT && !USER_PRINT */
 341:quantum/command.c ****             break;
 342:quantum/command.c **** 
 343:quantum/command.c ****         // clear eeprom
 344:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_EEPROM_CLEAR):
 345:quantum/command.c ****             print("Clearing EEPROM\n");
 346:quantum/command.c ****             eeconfig_init();
 347:quantum/command.c ****             break;
 348:quantum/command.c **** 
 349:quantum/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 350:quantum/command.c **** 
 351:quantum/command.c ****         // lock/unlock keyboard
 352:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LOCK):
 353:quantum/command.c ****             if (host_get_driver()) {
 354:quantum/command.c ****                 host_driver = host_get_driver();
 355:quantum/command.c ****                 clear_keyboard();
 356:quantum/command.c ****                 host_set_driver(0);
 357:quantum/command.c ****                 print("Locked.\n");
 358:quantum/command.c ****             } else {
 359:quantum/command.c ****                 host_set_driver(host_driver);
 360:quantum/command.c ****                 print("Unlocked.\n");
 361:quantum/command.c ****             }
 362:quantum/command.c ****             break;
 363:quantum/command.c **** #endif
 364:quantum/command.c **** 
 365:quantum/command.c ****         // print help
 366:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP):
 367:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP_ALT):
 368:quantum/command.c ****             command_common_help();
 369:quantum/command.c ****             break;
 370:quantum/command.c **** 
 371:quantum/command.c ****         // activate console
 372:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_CONSOLE):
 373:quantum/command.c ****             debug_matrix   = false;
 374:quantum/command.c ****             debug_keyboard = false;
 375:quantum/command.c ****             debug_mouse    = false;
 376:quantum/command.c ****             debug_enable   = false;
 377:quantum/command.c ****             command_console_help();
 378:quantum/command.c ****             print("C> ");
 379:quantum/command.c ****             command_state = CONSOLE;
 380:quantum/command.c ****             break;
 381:quantum/command.c **** 
 382:quantum/command.c ****         // jump to bootloader
 383:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_BOOTLOADER):
 384:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_BOOTLOADER_ALT):
 385:quantum/command.c ****             print("\n\nJumping to bootloader... ");
 386:quantum/command.c ****             reset_keyboard();
 387:quantum/command.c ****             break;
 388:quantum/command.c **** 
 389:quantum/command.c ****         // debug toggle
 390:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG):
 391:quantum/command.c ****             debug_enable = !debug_enable;
 392:quantum/command.c ****             if (debug_enable) {
 393:quantum/command.c ****                 print("\ndebug: on\n");
 394:quantum/command.c ****             } else {
 395:quantum/command.c ****                 print("\ndebug: off\n");
 396:quantum/command.c ****                 debug_matrix   = false;
 397:quantum/command.c ****                 debug_keyboard = false;
 398:quantum/command.c ****                 debug_mouse    = false;
 399:quantum/command.c ****             }
 400:quantum/command.c ****             break;
 401:quantum/command.c **** 
 402:quantum/command.c ****         // debug matrix toggle
 403:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MATRIX):
 404:quantum/command.c ****             debug_matrix = !debug_matrix;
 405:quantum/command.c ****             if (debug_matrix) {
 406:quantum/command.c ****                 print("\nmatrix: on\n");
 407:quantum/command.c ****                 debug_enable = true;
 408:quantum/command.c ****             } else {
 409:quantum/command.c ****                 print("\nmatrix: off\n");
 410:quantum/command.c ****             }
 411:quantum/command.c ****             break;
 412:quantum/command.c **** 
 413:quantum/command.c ****         // debug keyboard toggle
 414:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_KBD):
 415:quantum/command.c ****             debug_keyboard = !debug_keyboard;
 416:quantum/command.c ****             if (debug_keyboard) {
 417:quantum/command.c ****                 print("\nkeyboard: on\n");
 418:quantum/command.c ****                 debug_enable = true;
 419:quantum/command.c ****             } else {
 420:quantum/command.c ****                 print("\nkeyboard: off\n");
 421:quantum/command.c ****             }
 422:quantum/command.c ****             break;
 423:quantum/command.c **** 
 424:quantum/command.c ****         // debug mouse toggle
 425:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MOUSE):
 426:quantum/command.c ****             debug_mouse = !debug_mouse;
 427:quantum/command.c ****             if (debug_mouse) {
 428:quantum/command.c ****                 print("\nmouse: on\n");
 429:quantum/command.c ****                 debug_enable = true;
 430:quantum/command.c ****             } else {
 431:quantum/command.c ****                 print("\nmouse: off\n");
 432:quantum/command.c ****             }
 433:quantum/command.c ****             break;
 434:quantum/command.c **** 
 435:quantum/command.c ****         // print version
 436:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_VERSION):
 437:quantum/command.c ****             print_version();
 438:quantum/command.c ****             break;
 439:quantum/command.c **** 
 440:quantum/command.c ****         // print status
 441:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_STATUS):
 442:quantum/command.c ****             print_status();
 443:quantum/command.c ****             break;
 444:quantum/command.c **** 
 445:quantum/command.c **** #ifdef NKRO_ENABLE
 446:quantum/command.c **** 
 447:quantum/command.c ****         // NKRO toggle
 448:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_NKRO):
 449:quantum/command.c ****             clear_keyboard();  // clear to prevent stuck keys
 450:quantum/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 451:quantum/command.c ****             if (keymap_config.nkro) {
 452:quantum/command.c ****                 print("NKRO: on\n");
 453:quantum/command.c ****             } else {
 454:quantum/command.c ****                 print("NKRO: off\n");
 455:quantum/command.c ****             }
 456:quantum/command.c ****             break;
 457:quantum/command.c **** #endif
 458:quantum/command.c **** 
 459:quantum/command.c ****             // switch layers
 460:quantum/command.c **** 
 461:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER0_ALT):
 462:quantum/command.c ****             switch_default_layer(0);
 463:quantum/command.c ****             break;
 464:quantum/command.c **** 
 465:quantum/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 466:quantum/command.c **** 
 467:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER0):
 468:quantum/command.c ****             switch_default_layer(0);
 469:quantum/command.c ****             break;
 470:quantum/command.c **** 
 471:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER1):
 472:quantum/command.c ****             switch_default_layer(1);
 473:quantum/command.c ****             break;
 474:quantum/command.c **** 
 475:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER2):
 476:quantum/command.c ****             switch_default_layer(2);
 477:quantum/command.c ****             break;
 478:quantum/command.c **** 
 479:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER3):
 480:quantum/command.c ****             switch_default_layer(3);
 481:quantum/command.c ****             break;
 482:quantum/command.c **** 
 483:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER4):
 484:quantum/command.c ****             switch_default_layer(4);
 485:quantum/command.c ****             break;
 486:quantum/command.c **** 
 487:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER5):
 488:quantum/command.c ****             switch_default_layer(5);
 489:quantum/command.c ****             break;
 490:quantum/command.c **** 
 491:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER6):
 492:quantum/command.c ****             switch_default_layer(6);
 493:quantum/command.c ****             break;
 494:quantum/command.c **** 
 495:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER7):
 496:quantum/command.c ****             switch_default_layer(7);
 497:quantum/command.c ****             break;
 498:quantum/command.c **** 
 499:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER8):
 500:quantum/command.c ****             switch_default_layer(8);
 501:quantum/command.c ****             break;
 502:quantum/command.c **** 
 503:quantum/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER9):
 504:quantum/command.c ****             switch_default_layer(9);
 505:quantum/command.c ****             break;
 506:quantum/command.c **** #endif
 507:quantum/command.c **** 
 508:quantum/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 509:quantum/command.c **** 
 510:quantum/command.c ****         case KC_F1 ... KC_F9:
 511:quantum/command.c ****             switch_default_layer((code - KC_F1) + 1);
 512:quantum/command.c ****             break;
 513:quantum/command.c ****         case KC_F10:
 514:quantum/command.c ****             switch_default_layer(0);
 515:quantum/command.c ****             break;
 516:quantum/command.c **** #endif
 517:quantum/command.c **** 
 518:quantum/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 519:quantum/command.c **** 
 520:quantum/command.c ****         case KC_1 ... KC_9:
 521:quantum/command.c ****             switch_default_layer((code - KC_1) + 1);
 522:quantum/command.c ****             break;
 523:quantum/command.c ****         case KC_0:
 524:quantum/command.c ****             switch_default_layer(0);
 525:quantum/command.c ****             break;
 526:quantum/command.c **** #endif
 527:quantum/command.c **** 
 528:quantum/command.c ****         default:
 529:quantum/command.c ****             print("?");
 530:quantum/command.c ****             return false;
 531:quantum/command.c ****     }
 532:quantum/command.c ****     return true;
 533:quantum/command.c **** }
 534:quantum/command.c **** 
 535:quantum/command.c **** /***********************************************************
 536:quantum/command.c ****  * Command console
 537:quantum/command.c ****  ***********************************************************/
 538:quantum/command.c **** static void command_console_help(void) {
 539:quantum/command.c ****     print("\n\t- Console -\n"
 540:quantum/command.c ****           "ESC/q:	quit\n"
 541:quantum/command.c **** #ifdef MOUSEKEY_ENABLE
 542:quantum/command.c ****           "m:	mousekey\n"
 543:quantum/command.c **** #endif
 544:quantum/command.c ****     );
 545:quantum/command.c **** }
 546:quantum/command.c **** 
 547:quantum/command.c **** static bool command_console(uint8_t code) {
 548:quantum/command.c ****     switch (code) {
 549:quantum/command.c ****         case KC_H:
 550:quantum/command.c ****         case KC_SLASH: /* ? */
 551:quantum/command.c ****             command_console_help();
 552:quantum/command.c ****             print("C> ");
 553:quantum/command.c ****             return true;
 554:quantum/command.c ****         case KC_Q:
 555:quantum/command.c ****         case KC_ESC:
 556:quantum/command.c ****             command_state = ONESHOT;
 557:quantum/command.c ****             return false;
 558:quantum/command.c **** #if defined(MOUSEKEY_ENABLE)
 559:quantum/command.c ****         case KC_M:
 560:quantum/command.c ****             command_state = MOUSEKEY;
 561:quantum/command.c ****             mousekey_console(KC_SLASH /* ? */);
 562:quantum/command.c ****             return true;
 563:quantum/command.c **** #endif
 564:quantum/command.c ****         default:
 565:quantum/command.c ****             print("?");
 566:quantum/command.c ****             return false;
 567:quantum/command.c ****     }
 568:quantum/command.c **** }
 569:quantum/command.c **** 
 570:quantum/command.c **** /***********************************************************
 571:quantum/command.c ****  * Mousekey console
 572:quantum/command.c ****  ***********************************************************/
 573:quantum/command.c **** 
 574:quantum/command.c **** #if defined(MOUSEKEY_ENABLE)
 575:quantum/command.c **** 
 576:quantum/command.c **** #    if !defined(NO_PRINT) && !defined(USER_PRINT)
 577:quantum/command.c **** static void mousekey_param_print(void) {
  34              		.loc 1 577 40 view -0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 0, uses_anonymous_args = 0
 578:quantum/command.c ****     xprintf(/* clang-format off */
  38              		.loc 1 578 5 view .LVU1
 577:quantum/command.c ****     xprintf(/* clang-format off */
  39              		.loc 1 577 40 is_stmt 0 view .LVU2
  40 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
  41              		.cfi_def_cfa_offset 24
  42              		.cfi_offset 14, -4
  43              		.loc 1 578 5 view .LVU3
  44 0002 0A4B     		ldr	r3, .L2
  45 0004 0A4A     		ldr	r2, .L2+4
  46 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  47 0008 0293     		str	r3, [sp, #8]
  48 000a 0A4B     		ldr	r3, .L2+8
  49 000c 0A49     		ldr	r1, .L2+12
  50 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  51 0010 0193     		str	r3, [sp, #4]
  52 0012 0A4B     		ldr	r3, .L2+16
  53 0014 0A48     		ldr	r0, .L2+20
  54 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  55 0018 0093     		str	r3, [sp]
  56 001a 0A4B     		ldr	r3, .L2+24
  57 001c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
  58 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  59 0020 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
  60 0022 FFF7FEFF 		bl	printf_
  61              	.LVL0:
 579:quantum/command.c **** 
 580:quantum/command.c **** #ifndef MK_3_SPEED
 581:quantum/command.c ****         "1:	delay(*10ms): %u\n"
 582:quantum/command.c ****         "2:	interval(ms): %u\n"
 583:quantum/command.c ****         "3:	max_speed: %u\n"
 584:quantum/command.c ****         "4:	time_to_max: %u\n"
 585:quantum/command.c ****         "5:	wheel_max_speed: %u\n"
 586:quantum/command.c ****         "6:	wheel_time_to_max: %u\n"
 587:quantum/command.c **** 
 588:quantum/command.c ****         , mk_delay
 589:quantum/command.c ****         , mk_interval
 590:quantum/command.c ****         , mk_max_speed
 591:quantum/command.c ****         , mk_time_to_max
 592:quantum/command.c ****         , mk_wheel_max_speed
 593:quantum/command.c ****         , mk_wheel_time_to_max
 594:quantum/command.c **** #else
 595:quantum/command.c ****         "no knobs sorry\n"
 596:quantum/command.c **** #endif
 597:quantum/command.c **** 
 598:quantum/command.c ****     ); /* clang-format on */
 599:quantum/command.c **** }
  62              		.loc 1 599 1 view .LVU4
  63 0026 05B0     		add	sp, sp, #20
  64              		.cfi_def_cfa_offset 4
  65              		@ sp needed
  66 0028 5DF804FB 		ldr	pc, [sp], #4
  67              	.L3:
  68              		.align	2
  69              	.L2:
  70 002c 00000000 		.word	mk_wheel_time_to_max
  71 0030 00000000 		.word	mk_interval
  72 0034 00000000 		.word	mk_wheel_max_speed
  73 0038 00000000 		.word	mk_delay
  74 003c 00000000 		.word	mk_time_to_max
  75 0040 00000000 		.word	.LC0
  76 0044 00000000 		.word	mk_max_speed
  77              		.cfi_endproc
  78              	.LFE301:
  80              		.section	.rodata.switch_default_layer.str1.1,"aMS",%progbits,1
  81              	.LC1:
  82 0000 4C25640A 		.ascii	"L%d\012\000"
  82      00
  83              		.section	.text.switch_default_layer,"ax",%progbits
  84              		.align	1
  85              		.syntax unified
  86              		.thumb
  87              		.thumb_func
  88              		.fpu fpv4-sp-d16
  90              	switch_default_layer:
  91              	.LVL1:
  92              	.LFB304:
 600:quantum/command.c **** #    endif /* !NO_PRINT && !USER_PRINT */
 601:quantum/command.c **** 
 602:quantum/command.c **** #    if !defined(NO_PRINT) && !defined(USER_PRINT)
 603:quantum/command.c **** static void mousekey_console_help(void) {
 604:quantum/command.c ****     mousekey_param_print();
 605:quantum/command.c ****     xprintf(/* clang-format off */
 606:quantum/command.c ****         "p:	print values\n"
 607:quantum/command.c ****         "d:	set defaults\n"
 608:quantum/command.c ****         "up:	+1\n"
 609:quantum/command.c ****         "dn:	-1\n"
 610:quantum/command.c ****         "lt:	+10\n"
 611:quantum/command.c ****         "rt:	-10\n"
 612:quantum/command.c ****         "ESC/q:	quit\n"
 613:quantum/command.c **** 
 614:quantum/command.c **** #ifndef MK_3_SPEED
 615:quantum/command.c ****         "\n"
 616:quantum/command.c ****         "speed = delta * max_speed * (repeat / time_to_max)\n"
 617:quantum/command.c ****         "where delta: cursor=%d, wheel=%d\n"
 618:quantum/command.c ****         "See http://en.wikipedia.org/wiki/Mouse_keys\n"
 619:quantum/command.c ****         , MOUSEKEY_MOVE_DELTA, MOUSEKEY_WHEEL_DELTA
 620:quantum/command.c **** #endif
 621:quantum/command.c **** 
 622:quantum/command.c ****     ); /* clang-format on */
 623:quantum/command.c **** }
 624:quantum/command.c **** #    endif /* !NO_PRINT && !USER_PRINT */
 625:quantum/command.c **** 
 626:quantum/command.c **** /* Only used by `quantum/command.c` / `command_proc()`. To avoid
 627:quantum/command.c ****  * any doubt: we return `false` to return to the main console,
 628:quantum/command.c ****  * which differs from the `bool` that `command_proc()` returns. */
 629:quantum/command.c **** bool mousekey_console(uint8_t code) {
 630:quantum/command.c ****     static uint8_t  param = 0;
 631:quantum/command.c ****     static uint8_t *pp    = NULL;
 632:quantum/command.c ****     static char *   desc  = NULL;
 633:quantum/command.c **** 
 634:quantum/command.c **** #    if defined(NO_PRINT) || defined(USER_PRINT) /* -Wunused-parameter */
 635:quantum/command.c ****     (void)desc;
 636:quantum/command.c **** #    endif
 637:quantum/command.c **** 
 638:quantum/command.c ****     int8_t change = 0;
 639:quantum/command.c **** 
 640:quantum/command.c ****     switch (code) {
 641:quantum/command.c ****         case KC_H:
 642:quantum/command.c ****         case KC_SLASH: /* ? */
 643:quantum/command.c **** #    if !defined(NO_PRINT) && !defined(USER_PRINT)
 644:quantum/command.c ****             print("\n\t- Mousekey -\n");
 645:quantum/command.c ****             mousekey_console_help();
 646:quantum/command.c **** #    endif
 647:quantum/command.c ****             break;
 648:quantum/command.c **** 
 649:quantum/command.c ****         case KC_Q:
 650:quantum/command.c ****         case KC_ESC:
 651:quantum/command.c ****             print("q\n");
 652:quantum/command.c ****             if (!param) return false;
 653:quantum/command.c ****             param = 0;
 654:quantum/command.c ****             pp    = NULL;
 655:quantum/command.c ****             desc  = NULL;
 656:quantum/command.c ****             break;
 657:quantum/command.c **** 
 658:quantum/command.c ****         case KC_P:
 659:quantum/command.c **** #    if !defined(NO_PRINT) && !defined(USER_PRINT)
 660:quantum/command.c ****             print("\n\t- Values -\n");
 661:quantum/command.c ****             mousekey_param_print();
 662:quantum/command.c **** #    endif
 663:quantum/command.c ****             break;
 664:quantum/command.c **** 
 665:quantum/command.c ****         case KC_1 ... KC_0: /* KC_0 gives param = 10 */
 666:quantum/command.c ****             param = 1 + code - KC_1;
 667:quantum/command.c ****             switch (param) { /* clang-format off */
 668:quantum/command.c **** #               define PARAM(n, v) case n: pp = &(v); desc = #v; break
 669:quantum/command.c **** 
 670:quantum/command.c **** #ifndef MK_3_SPEED
 671:quantum/command.c ****                 PARAM(1, mk_delay);
 672:quantum/command.c ****                 PARAM(2, mk_interval);
 673:quantum/command.c ****                 PARAM(3, mk_max_speed);
 674:quantum/command.c ****                 PARAM(4, mk_time_to_max);
 675:quantum/command.c ****                 PARAM(5, mk_wheel_max_speed);
 676:quantum/command.c ****                 PARAM(6, mk_wheel_time_to_max);
 677:quantum/command.c **** #endif /* MK_3_SPEED */
 678:quantum/command.c **** 
 679:quantum/command.c **** #               undef PARAM
 680:quantum/command.c ****                 default:
 681:quantum/command.c ****                     param = 0;
 682:quantum/command.c ****                     print("?\n");
 683:quantum/command.c ****                     break;
 684:quantum/command.c ****             } /* clang-format on */
 685:quantum/command.c ****             if (param) xprintf("%u\n", param);
 686:quantum/command.c ****             break;
 687:quantum/command.c **** 
 688:quantum/command.c ****             /* clang-format off */
 689:quantum/command.c ****         case KC_UP:    change =  +1; break;
 690:quantum/command.c ****         case KC_DOWN:  change =  -1; break;
 691:quantum/command.c ****         case KC_LEFT:  change = -10; break;
 692:quantum/command.c ****         case KC_RIGHT: change = +10; break;
 693:quantum/command.c ****             /* clang-format on */
 694:quantum/command.c **** 
 695:quantum/command.c ****         case KC_D:
 696:quantum/command.c **** 
 697:quantum/command.c **** #    ifndef MK_3_SPEED
 698:quantum/command.c ****             mk_delay             = MOUSEKEY_DELAY / 10;
 699:quantum/command.c ****             mk_interval          = MOUSEKEY_INTERVAL;
 700:quantum/command.c ****             mk_max_speed         = MOUSEKEY_MAX_SPEED;
 701:quantum/command.c ****             mk_time_to_max       = MOUSEKEY_TIME_TO_MAX;
 702:quantum/command.c ****             mk_wheel_max_speed   = MOUSEKEY_WHEEL_MAX_SPEED;
 703:quantum/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 704:quantum/command.c **** #    endif /* MK_3_SPEED */
 705:quantum/command.c **** 
 706:quantum/command.c ****             print("defaults\n");
 707:quantum/command.c ****             break;
 708:quantum/command.c **** 
 709:quantum/command.c ****         default:
 710:quantum/command.c ****             print("?\n");
 711:quantum/command.c ****             break;
 712:quantum/command.c ****     }
 713:quantum/command.c **** 
 714:quantum/command.c ****     if (change) {
 715:quantum/command.c ****         if (pp) {
 716:quantum/command.c ****             int16_t val = *pp + change;
 717:quantum/command.c ****             if (val > (int16_t)UINT8_MAX)
 718:quantum/command.c ****                 *pp = UINT8_MAX;
 719:quantum/command.c ****             else if (val < 0)
 720:quantum/command.c ****                 *pp = 0;
 721:quantum/command.c ****             else
 722:quantum/command.c ****                 *pp = (uint8_t)val;
 723:quantum/command.c ****             xprintf("= %u\n", *pp);
 724:quantum/command.c ****         } else {
 725:quantum/command.c ****             print("?\n");
 726:quantum/command.c ****         }
 727:quantum/command.c ****     }
 728:quantum/command.c **** 
 729:quantum/command.c ****     if (param) {
 730:quantum/command.c ****         xprintf("M%u:%s> ", param, desc ? desc : "???");
 731:quantum/command.c ****     } else {
 732:quantum/command.c ****         print("M> ");
 733:quantum/command.c ****     }
 734:quantum/command.c ****     return true;
 735:quantum/command.c **** }
 736:quantum/command.c **** 
 737:quantum/command.c **** #endif /* MOUSEKEY_ENABLE */
 738:quantum/command.c **** 
 739:quantum/command.c **** /***********************************************************
 740:quantum/command.c ****  * Utilities
 741:quantum/command.c ****  ***********************************************************/
 742:quantum/command.c **** 
 743:quantum/command.c **** static void switch_default_layer(uint8_t layer) {
  93              		.loc 1 743 49 is_stmt 1 view -0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
 744:quantum/command.c ****     xprintf("L%d\n", layer);
  97              		.loc 1 744 5 view .LVU6
 743:quantum/command.c ****     xprintf("L%d\n", layer);
  98              		.loc 1 743 49 is_stmt 0 view .LVU7
  99 0000 10B5     		push	{r4, lr}
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 4, -8
 102              		.cfi_offset 14, -4
 103              		.loc 1 744 5 view .LVU8
 104 0002 0146     		mov	r1, r0
 743:quantum/command.c ****     xprintf("L%d\n", layer);
 105              		.loc 1 743 49 view .LVU9
 106 0004 0446     		mov	r4, r0
 107              		.loc 1 744 5 view .LVU10
 108 0006 0548     		ldr	r0, .L5
 109              	.LVL2:
 110              		.loc 1 744 5 view .LVU11
 111 0008 FFF7FEFF 		bl	printf_
 112              	.LVL3:
 745:quantum/command.c ****     default_layer_set((layer_state_t)1 << layer);
 113              		.loc 1 745 5 is_stmt 1 view .LVU12
 114 000c 0120     		movs	r0, #1
 115 000e A040     		lsls	r0, r0, r4
 116 0010 FFF7FEFF 		bl	default_layer_set
 117              	.LVL4:
 746:quantum/command.c ****     clear_keyboard();
 118              		.loc 1 746 5 view .LVU13
 747:quantum/command.c **** }
 119              		.loc 1 747 1 is_stmt 0 view .LVU14
 120 0014 BDE81040 		pop	{r4, lr}
 121              		.cfi_restore 14
 122              		.cfi_restore 4
 123              		.cfi_def_cfa_offset 0
 746:quantum/command.c ****     clear_keyboard();
 124              		.loc 1 746 5 view .LVU15
 125 0018 FFF7FEBF 		b	clear_keyboard
 126              	.LVL5:
 127              	.L6:
 128              		.align	2
 129              	.L5:
 130 001c 00000000 		.word	.LC1
 131              		.cfi_endproc
 132              	.LFE304:
 134              		.section	.rodata.command_common.str1.1,"aMS",%progbits,1
 135              	.LC2:
 136 0000 6565636F 		.ascii	"eeconfig:\012default_layer: %u\012\000"
 136      6E666967 
 136      3A0A6465 
 136      6661756C 
 136      745F6C61 
 137              	.LC3:
 138 001d 64656275 		.ascii	"debug_config.raw: %02X\012.enable: %u\012.matrix: %"
 138      675F636F 
 138      6E666967 
 138      2E726177 
 138      3A202530 
 139 004a 750A2E6B 		.ascii	"u\012.keyboard: %u\012.mouse: %u\012\000"
 139      6579626F 
 139      6172643A 
 139      2025750A 
 139      2E6D6F75 
 140              	.LC4:
 141 0066 6B65796D 		.ascii	"keymap_config.raw: %02X\012.swap_control_capslock: "
 141      61705F63 
 141      6F6E6669 
 141      672E7261 
 141      773A2025 
 142 0096 25750A2E 		.ascii	"%u\012.capslock_to_control: %u\012.swap_lctl_lgui: "
 142      63617073 
 142      6C6F636B 
 142      5F746F5F 
 142      636F6E74 
 143 00c3 25750A2E 		.ascii	"%u\012.swap_rctl_rgui: %u\012.swap_lalt_lgui: %u\012"
 143      73776170 
 143      5F726374 
 143      6C5F7267 
 143      75693A20 
 144 00ee 2E737761 		.ascii	".swap_ralt_rgui: %u\012.no_gui: %u\012.swap_grave_e"
 144      705F7261 
 144      6C745F72 
 144      6775693A 
 144      2025750A 
 145 011b 73633A20 		.ascii	"sc: %u\012.swap_backslash_backspace: %u\012.nkro: %"
 145      25750A2E 
 145      73776170 
 145      5F626163 
 145      6B736C61 
 146 0148 750A00   		.ascii	"u\012\000"
 147              	.LC5:
 148 014b 436C6561 		.ascii	"Clearing EEPROM\012\000"
 148      72696E67 
 148      20454550 
 148      524F4D0A 
 148      00
 149              	.LC6:
 150 015c 0A092D20 		.ascii	"\012\011- Magic -\012D:\011Debug Message Toggle\012"
 150      4D616769 
 150      63202D0A 
 150      443A0944 
 150      65627567 
 151 0180 583A094D 		.ascii	"X:\011Matrix Debug Mode Toggle - Show keypresses in"
 151      61747269 
 151      78204465 
 151      62756720 
 151      4D6F6465 
 152 01b0 206D6174 		.ascii	" matrix grid\012K:\011Keyboard Debug Toggle - Show "
 152      72697820 
 152      67726964 
 152      0A4B3A09 
 152      4B657962 
 153 01dd 6B657970 		.ascii	"keypress report\012M:\011Debug Mouse Toggle\012V:\011"
 153      72657373 
 153      20726570 
 153      6F72740A 
 153      4D3A0944 
 154 0206 56657273 		.ascii	"Version\012S:\011Status\012C:\011Activate Console M"
 154      696F6E0A 
 154      533A0953 
 154      74617475 
 154      730A433A 
 155 022d 6F64650A 		.ascii	"ode\012F1-F10:\011Switch to Layer 0-9 (F10 = L0)\012"
 155      46312D46 
 155      31303A09 
 155      53776974 
 155      63682074 
 156 0258 302D393A 		.ascii	"0-9:\011Switch to Layer 0-9\012GRAVE:\011Switch to "
 156      09537769 
 156      74636820 
 156      746F204C 
 156      61796572 
 157 0282 4C617965 		.ascii	"Layer 0 (alternate)\012B:\011Jump to Bootloader\012"
 157      72203020 
 157      28616C74 
 157      65726E61 
 157      7465290A 
 158 02ac 4553433A 		.ascii	"ESC:\011Jump to Bootloader (alternate)\012E:\011Pri"
 158      094A756D 
 158      7020746F 
 158      20426F6F 
 158      746C6F61 
 159 02d6 6E742045 		.ascii	"nt EEPROM Settings\012BSPACE:\011Clear EEPROM\012N:"
 159      4550524F 
 159      4D205365 
 159      7474696E 
 159      67730A42 
 160 0300 094E4B52 		.ascii	"\011NKRO Toggle\012\000"
 160      4F20546F 
 160      67676C65 
 160      0A00
 161              	.LC7:
 162 030e 0A092D20 		.ascii	"\012\011- Console -\012ESC/q:\011quit\012m:\011mous"
 162      436F6E73 
 162      6F6C6520 
 162      2D0A4553 
 162      432F713A 
 163 032f 656B6579 		.ascii	"ekey\012\000"
 163      0A00
 164              	.LC8:
 165 0335 433E2000 		.ascii	"C> \000"
 166              	.LC9:
 167 0339 0A0A4A75 		.ascii	"\012\012Jumping to bootloader... \000"
 167      6D70696E 
 167      6720746F 
 167      20626F6F 
 167      746C6F61 
 168              	.LC10:
 169 0355 0A646562 		.ascii	"\012debug: on\012\000"
 169      75673A20 
 169      6F6E0A00 
 170              	.LC11:
 171 0361 0A646562 		.ascii	"\012debug: off\012\000"
 171      75673A20 
 171      6F66660A 
 171      00
 172              	.LC12:
 173 036e 0A6D6174 		.ascii	"\012matrix: on\012\000"
 173      7269783A 
 173      206F6E0A 
 173      00
 174              	.LC13:
 175 037b 0A6D6174 		.ascii	"\012matrix: off\012\000"
 175      7269783A 
 175      206F6666 
 175      0A00
 176              	.LC14:
 177 0389 0A6B6579 		.ascii	"\012keyboard: on\012\000"
 177      626F6172 
 177      643A206F 
 177      6E0A00
 178              	.LC15:
 179 0398 0A6B6579 		.ascii	"\012keyboard: off\012\000"
 179      626F6172 
 179      643A206F 
 179      66660A00 
 180              	.LC16:
 181 03a8 0A6D6F75 		.ascii	"\012mouse: on\012\000"
 181      73653A20 
 181      6F6E0A00 
 182              	.LC17:
 183 03b4 0A6D6F75 		.ascii	"\012mouse: off\012\000"
 183      73653A20 
 183      6F66660A 
 183      00
 184              	.LC18:
 185 03c1 0A092D20 		.ascii	"\012\011- Version -\012VID: 0x320F(Glorious) PID: 0"
 185      56657273 
 185      696F6E20 
 185      2D0A5649 
 185      443A2030 
 186 03eb 78353034 		.ascii	"x5044(GMMK Pro) VER: 0x0001\012BUILD:  (Aug 21 2021"
 186      3428474D 
 186      4D4B2050 
 186      726F2920 
 186      5645523A 
 187 041b 290A4348 		.ascii	")\012CHIBIOS: \"1.05-2-ge8477e\", CONTRIB: \"1.05-2"
 187      4942494F 
 187      533A2022 
 187      312E3035 
 187      2D322D67 
 188 0448 2D676538 		.ascii	"-ge8477e\"\012OPTIONS: MOUSEKEY EXTRAKEY CONSOLE CO"
 188      34373765 
 188      220A4F50 
 188      54494F4E 
 188      533A204D 
 189 0477 4D4D414E 		.ascii	"MMAND NKRO BOOTLOADER_SIZE\012GCC: 10.1.0\012\000"
 189      44204E4B 
 189      524F2042 
 189      4F4F544C 
 189      4F414445 
 190              	.LC19:
 191 049f 0A092D20 		.ascii	"\012\011- Status -\012host_keyboard_leds(): %02X\012"
 191      53746174 
 191      7573202D 
 191      0A686F73 
 191      745F6B65 
 192 04c7 6B657962 		.ascii	"keyboard_protocol: %02X\012keyboard_idle: %02X\012k"
 192      6F617264 
 192      5F70726F 
 192      746F636F 
 192      6C3A2025 
 193 04f4 65796D61 		.ascii	"eymap_config.nkro: %02X\012timer_read32(): %08lX\012"
 193      705F636F 
 193      6E666967 
 193      2E6E6B72 
 193      6F3A2025 
 194 0522 00       		.ascii	"\000"
 195              	.LC20:
 196 0523 4E4B524F 		.ascii	"NKRO: on\012\000"
 196      3A206F6E 
 196      0A00
 197              	.LC21:
 198 052d 4E4B524F 		.ascii	"NKRO: off\012\000"
 198      3A206F66 
 198      660A00
 199              	.LC22:
 200 0538 3F00     		.ascii	"?\000"
 201              		.section	.text.command_common,"ax",%progbits
 202              		.align	1
 203              		.syntax unified
 204              		.thumb
 205              		.thumb_func
 206              		.fpu fpv4-sp-d16
 208              	command_common:
 209              	.LVL6:
 210              	.LFB298:
 320:quantum/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 211              		.loc 1 320 42 is_stmt 1 view -0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 16
 214              		@ frame_needed = 0, uses_anonymous_args = 0
 325:quantum/command.c **** #ifdef SLEEP_LED_ENABLE
 215              		.loc 1 325 5 view .LVU17
 320:quantum/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 216              		.loc 1 320 42 is_stmt 0 view .LVU18
 217 0000 10B5     		push	{r4, lr}
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 4, -8
 220              		.cfi_offset 14, -4
 221 0002 431F     		subs	r3, r0, #5
 222 0004 8CB0     		sub	sp, sp, #48
 223              		.cfi_def_cfa_offset 56
 224 0006 3E2B     		cmp	r3, #62
 225 0008 00F21481 		bhi	.L8
 226 000c DFE813F0 		tbh	[pc, r3, lsl #1]
 227              	.L10:
 228 0010 9300     		.2byte	(.L14-.L10)/2
 229 0012 8300     		.2byte	(.L24-.L10)/2
 230 0014 9900     		.2byte	(.L23-.L10)/2
 231 0016 3F00     		.2byte	(.L22-.L10)/2
 232 0018 1201     		.2byte	(.L8-.L10)/2
 233 001a 1201     		.2byte	(.L8-.L10)/2
 234 001c 7F00     		.2byte	(.L12-.L10)/2
 235 001e 1201     		.2byte	(.L8-.L10)/2
 236 0020 1201     		.2byte	(.L8-.L10)/2
 237 0022 C200     		.2byte	(.L21-.L10)/2
 238 0024 1201     		.2byte	(.L8-.L10)/2
 239 0026 D100     		.2byte	(.L20-.L10)/2
 240 0028 F900     		.2byte	(.L19-.L10)/2
 241 002a 1201     		.2byte	(.L8-.L10)/2
 242 002c 1201     		.2byte	(.L8-.L10)/2
 243 002e 1201     		.2byte	(.L8-.L10)/2
 244 0030 1201     		.2byte	(.L8-.L10)/2
 245 0032 E200     		.2byte	(.L18-.L10)/2
 246 0034 1201     		.2byte	(.L8-.L10)/2
 247 0036 1201     		.2byte	(.L8-.L10)/2
 248 0038 E000     		.2byte	(.L17-.L10)/2
 249 003a 1201     		.2byte	(.L8-.L10)/2
 250 003c AE00     		.2byte	(.L16-.L10)/2
 251 003e 1201     		.2byte	(.L8-.L10)/2
 252 0040 1201     		.2byte	(.L8-.L10)/2
 253 0042 1001     		.2byte	(.L15-.L10)/2
 254 0044 1001     		.2byte	(.L15-.L10)/2
 255 0046 1001     		.2byte	(.L15-.L10)/2
 256 0048 1001     		.2byte	(.L15-.L10)/2
 257 004a 1001     		.2byte	(.L15-.L10)/2
 258 004c 1001     		.2byte	(.L15-.L10)/2
 259 004e 1001     		.2byte	(.L15-.L10)/2
 260 0050 1001     		.2byte	(.L15-.L10)/2
 261 0052 1001     		.2byte	(.L15-.L10)/2
 262 0054 0901     		.2byte	(.L9-.L10)/2
 263 0056 1201     		.2byte	(.L8-.L10)/2
 264 0058 9300     		.2byte	(.L14-.L10)/2
 265 005a 7900     		.2byte	(.L13-.L10)/2
 266 005c 1201     		.2byte	(.L8-.L10)/2
 267 005e 1201     		.2byte	(.L8-.L10)/2
 268 0060 1201     		.2byte	(.L8-.L10)/2
 269 0062 1201     		.2byte	(.L8-.L10)/2
 270 0064 1201     		.2byte	(.L8-.L10)/2
 271 0066 1201     		.2byte	(.L8-.L10)/2
 272 0068 1201     		.2byte	(.L8-.L10)/2
 273 006a 1201     		.2byte	(.L8-.L10)/2
 274 006c 1201     		.2byte	(.L8-.L10)/2
 275 006e 1201     		.2byte	(.L8-.L10)/2
 276 0070 0901     		.2byte	(.L9-.L10)/2
 277 0072 1201     		.2byte	(.L8-.L10)/2
 278 0074 1201     		.2byte	(.L8-.L10)/2
 279 0076 7F00     		.2byte	(.L12-.L10)/2
 280 0078 1201     		.2byte	(.L8-.L10)/2
 281 007a 0D01     		.2byte	(.L11-.L10)/2
 282 007c 0D01     		.2byte	(.L11-.L10)/2
 283 007e 0D01     		.2byte	(.L11-.L10)/2
 284 0080 0D01     		.2byte	(.L11-.L10)/2
 285 0082 0D01     		.2byte	(.L11-.L10)/2
 286 0084 0D01     		.2byte	(.L11-.L10)/2
 287 0086 0D01     		.2byte	(.L11-.L10)/2
 288 0088 0D01     		.2byte	(.L11-.L10)/2
 289 008a 0D01     		.2byte	(.L11-.L10)/2
 290 008c 0901     		.2byte	(.L9-.L10)/2
 291              		.p2align 1
 292              	.L22:
 339:quantum/command.c **** #endif /* !NO_PRINT && !USER_PRINT */
 293              		.loc 1 339 13 is_stmt 1 view .LVU19
 294              	.LBB13:
 295              	.LBI13:
 250:quantum/command.c ****     xprintf("eeconfig:\ndefault_layer: %u\n", eeconfig_read_default_layer());
 296              		.loc 1 250 13 view .LVU20
 297              	.LBB14:
 251:quantum/command.c **** 
 298              		.loc 1 251 5 view .LVU21
 251:quantum/command.c **** 
 299              		.loc 1 251 47 is_stmt 0 view .LVU22
 300 008e FFF7FEFF 		bl	eeconfig_read_default_layer
 301              	.LVL7:
 251:quantum/command.c **** 
 302              		.loc 1 251 47 view .LVU23
 303 0092 0146     		mov	r1, r0
 251:quantum/command.c **** 
 304              		.loc 1 251 5 view .LVU24
 305 0094 6A48     		ldr	r0, .L37
 306 0096 FFF7FEFF 		bl	printf_
 307              	.LVL8:
 253:quantum/command.c ****     dc.raw = eeconfig_read_debug();
 308              		.loc 1 253 5 is_stmt 1 view .LVU25
 254:quantum/command.c ****     xprintf(/* clang-format off */
 309              		.loc 1 254 5 view .LVU26
 254:quantum/command.c ****     xprintf(/* clang-format off */
 310              		.loc 1 254 14 is_stmt 0 view .LVU27
 311 009a FFF7FEFF 		bl	eeconfig_read_debug
 312              	.LVL9:
 255:quantum/command.c **** 
 313              		.loc 1 255 5 view .LVU28
 314 009e C0F3C003 		ubfx	r3, r0, #3, #1
 315 00a2 0193     		str	r3, [sp, #4]
 316 00a4 C0F38003 		ubfx	r3, r0, #2, #1
 254:quantum/command.c ****     xprintf(/* clang-format off */
 317              		.loc 1 254 14 view .LVU29
 318 00a8 0146     		mov	r1, r0
 255:quantum/command.c **** 
 319              		.loc 1 255 5 is_stmt 1 view .LVU30
 320 00aa 00F00102 		and	r2, r0, #1
 321 00ae 0093     		str	r3, [sp]
 322 00b0 C0F34003 		ubfx	r3, r0, #1, #1
 323 00b4 6348     		ldr	r0, .L37+4
 324 00b6 FFF7FEFF 		bl	printf_
 325              	.LVL10:
 270:quantum/command.c ****     kc.raw = eeconfig_read_keymap();
 326              		.loc 1 270 5 view .LVU31
 271:quantum/command.c ****     xprintf(/* clang-format off */
 327              		.loc 1 271 5 view .LVU32
 271:quantum/command.c ****     xprintf(/* clang-format off */
 328              		.loc 1 271 14 is_stmt 0 view .LVU33
 329 00ba FFF7FEFF 		bl	eeconfig_read_keymap
 330              	.LVL11:
 272:quantum/command.c **** 
 331              		.loc 1 272 5 view .LVU34
 332 00be C0F3C013 		ubfx	r3, r0, #7, #1
 333 00c2 0793     		str	r3, [sp, #28]
 334 00c4 C0F38013 		ubfx	r3, r0, #6, #1
 335 00c8 0693     		str	r3, [sp, #24]
 336 00ca C0F34013 		ubfx	r3, r0, #5, #1
 337 00ce 0593     		str	r3, [sp, #20]
 338 00d0 C0F30013 		ubfx	r3, r0, #4, #1
 339 00d4 0493     		str	r3, [sp, #16]
 340 00d6 C0F3C003 		ubfx	r3, r0, #3, #1
 341 00da 0393     		str	r3, [sp, #12]
 342 00dc C0F38003 		ubfx	r3, r0, #2, #1
 343 00e0 0293     		str	r3, [sp, #8]
 344 00e2 C0F34023 		ubfx	r3, r0, #9, #1
 345 00e6 0193     		str	r3, [sp, #4]
 346 00e8 C0F30023 		ubfx	r3, r0, #8, #1
 271:quantum/command.c ****     xprintf(/* clang-format off */
 347              		.loc 1 271 14 view .LVU35
 348 00ec 0146     		mov	r1, r0
 272:quantum/command.c **** 
 349              		.loc 1 272 5 is_stmt 1 view .LVU36
 350 00ee 0093     		str	r3, [sp]
 351 00f0 00F00102 		and	r2, r0, #1
 352 00f4 C0F34003 		ubfx	r3, r0, #1, #1
 353 00f8 5348     		ldr	r0, .L37+8
 354 00fa FFF7FEFF 		bl	printf_
 355              	.LVL12:
 356              	.L31:
 357              	.LBE14:
 358              	.LBE13:
 532:quantum/command.c **** }
 359              		.loc 1 532 12 is_stmt 0 view .LVU37
 360 00fe 0120     		movs	r0, #1
 361              	.LBB15:
 362              	.LBB16:
 247:quantum/command.c **** 
 363              		.loc 1 247 1 view .LVU38
 364 0100 17E0     		b	.L25
 365              	.LVL13:
 366              	.L13:
 247:quantum/command.c **** 
 367              		.loc 1 247 1 view .LVU39
 368              	.LBE16:
 369              	.LBE15:
 345:quantum/command.c ****             eeconfig_init();
 370              		.loc 1 345 13 is_stmt 1 view .LVU40
 371 0102 5248     		ldr	r0, .L37+12
 372              	.LVL14:
 345:quantum/command.c ****             eeconfig_init();
 373              		.loc 1 345 13 is_stmt 0 view .LVU41
 374 0104 FFF7FEFF 		bl	printf_
 375              	.LVL15:
 346:quantum/command.c ****             break;
 376              		.loc 1 346 13 is_stmt 1 view .LVU42
 377 0108 FFF7FEFF 		bl	eeconfig_init
 378              	.LVL16:
 347:quantum/command.c **** 
 379              		.loc 1 347 13 view .LVU43
 380 010c F7E7     		b	.L31
 381              	.LVL17:
 382              	.L12:
 368:quantum/command.c ****             break;
 383              		.loc 1 368 13 view .LVU44
 384              	.LBB18:
 385              	.LBI18:
 106:quantum/command.c ****     print(/* clang-format off */
 386              		.loc 1 106 13 view .LVU45
 387              	.LBB19:
 107:quantum/command.c ****         "\n\t- Magic -\n"
 388              		.loc 1 107 5 view .LVU46
 389 010e 5048     		ldr	r0, .L37+16
 390              	.LVL18:
 391              	.L32:
 107:quantum/command.c ****         "\n\t- Magic -\n"
 392              		.loc 1 107 5 is_stmt 0 view .LVU47
 393              	.LBE19:
 394              	.LBE18:
 431:quantum/command.c ****             }
 395              		.loc 1 431 17 view .LVU48
 396 0110 FFF7FEFF 		bl	printf_
 397              	.LVL19:
 398 0114 F3E7     		b	.L31
 399              	.LVL20:
 400              	.L24:
 373:quantum/command.c ****             debug_keyboard = false;
 401              		.loc 1 373 13 is_stmt 1 view .LVU49
 374:quantum/command.c ****             debug_mouse    = false;
 402              		.loc 1 374 13 view .LVU50
 375:quantum/command.c ****             debug_enable   = false;
 403              		.loc 1 375 13 view .LVU51
 376:quantum/command.c ****             command_console_help();
 404              		.loc 1 376 13 view .LVU52
 376:quantum/command.c ****             command_console_help();
 405              		.loc 1 376 28 is_stmt 0 view .LVU53
 406 0116 4F4A     		ldr	r2, .L37+20
 407              	.LBB20:
 408              	.LBB21:
 539:quantum/command.c ****           "ESC/q:	quit\n"
 409              		.loc 1 539 5 view .LVU54
 410 0118 4F48     		ldr	r0, .L37+24
 411              	.LVL21:
 539:quantum/command.c ****           "ESC/q:	quit\n"
 412              		.loc 1 539 5 view .LVU55
 413              	.LBE21:
 414              	.LBE20:
 376:quantum/command.c ****             command_console_help();
 415              		.loc 1 376 28 view .LVU56
 416 011a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 417 011c 23F00F03 		bic	r3, r3, #15
 418 0120 1370     		strb	r3, [r2]
 377:quantum/command.c ****             print("C> ");
 419              		.loc 1 377 13 is_stmt 1 view .LVU57
 420              	.LBB23:
 421              	.LBI20:
 538:quantum/command.c ****     print("\n\t- Console -\n"
 422              		.loc 1 538 13 view .LVU58
 423              	.LBB22:
 539:quantum/command.c ****           "ESC/q:	quit\n"
 424              		.loc 1 539 5 view .LVU59
 425 0122 FFF7FEFF 		bl	printf_
 426              	.LVL22:
 427              	.LBE22:
 428              	.LBE23:
 378:quantum/command.c ****             command_state = CONSOLE;
 429              		.loc 1 378 13 view .LVU60
 430 0126 4D48     		ldr	r0, .L37+28
 431 0128 FFF7FEFF 		bl	printf_
 432              	.LVL23:
 379:quantum/command.c ****             break;
 433              		.loc 1 379 13 view .LVU61
 379:quantum/command.c ****             break;
 434              		.loc 1 379 27 is_stmt 0 view .LVU62
 435 012c 4C4B     		ldr	r3, .L37+32
 436 012e 0120     		movs	r0, #1
 437 0130 1870     		strb	r0, [r3]
 380:quantum/command.c **** 
 438              		.loc 1 380 13 is_stmt 1 view .LVU63
 439              	.L25:
 533:quantum/command.c **** 
 440              		.loc 1 533 1 is_stmt 0 view .LVU64
 441 0132 0CB0     		add	sp, sp, #48
 442              		.cfi_remember_state
 443              		.cfi_def_cfa_offset 8
 444              		@ sp needed
 445 0134 10BD     		pop	{r4, pc}
 446              	.LVL24:
 447              	.L14:
 448              		.cfi_restore_state
 385:quantum/command.c ****             reset_keyboard();
 449              		.loc 1 385 13 is_stmt 1 view .LVU65
 450 0136 4B48     		ldr	r0, .L37+36
 451              	.LVL25:
 385:quantum/command.c ****             reset_keyboard();
 452              		.loc 1 385 13 is_stmt 0 view .LVU66
 453 0138 FFF7FEFF 		bl	printf_
 454              	.LVL26:
 386:quantum/command.c ****             break;
 455              		.loc 1 386 13 is_stmt 1 view .LVU67
 456 013c FFF7FEFF 		bl	reset_keyboard
 457              	.LVL27:
 387:quantum/command.c **** 
 458              		.loc 1 387 13 view .LVU68
 459 0140 DDE7     		b	.L31
 460              	.LVL28:
 461              	.L23:
 391:quantum/command.c ****             if (debug_enable) {
 462              		.loc 1 391 13 view .LVU69
 391:quantum/command.c ****             if (debug_enable) {
 463              		.loc 1 391 26 is_stmt 0 view .LVU70
 464 0142 444C     		ldr	r4, .L37+20
 391:quantum/command.c ****             if (debug_enable) {
 465              		.loc 1 391 29 view .LVU71
 466 0144 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 467 0146 C3F30002 		ubfx	r2, r3, #0, #1
 391:quantum/command.c ****             if (debug_enable) {
 468              		.loc 1 391 13 view .LVU72
 469 014a 82F00102 		eor	r2, r2, #1
 391:quantum/command.c ****             if (debug_enable) {
 470              		.loc 1 391 26 view .LVU73
 471 014e 62F30003 		bfi	r3, r2, #0, #1
 472 0152 2370     		strb	r3, [r4]
 392:quantum/command.c ****                 print("\ndebug: on\n");
 473              		.loc 1 392 13 is_stmt 1 view .LVU74
 392:quantum/command.c ****                 print("\ndebug: on\n");
 474              		.loc 1 392 16 is_stmt 0 view .LVU75
 475 0154 DB07     		lsls	r3, r3, #31
 476 0156 01D5     		bpl	.L26
 393:quantum/command.c ****             } else {
 477              		.loc 1 393 17 is_stmt 1 view .LVU76
 478 0158 4348     		ldr	r0, .L37+40
 479              	.LVL29:
 393:quantum/command.c ****             } else {
 480              		.loc 1 393 17 is_stmt 0 view .LVU77
 481 015a D9E7     		b	.L32
 482              	.LVL30:
 483              	.L26:
 395:quantum/command.c ****                 debug_matrix   = false;
 484              		.loc 1 395 17 is_stmt 1 view .LVU78
 485 015c 4348     		ldr	r0, .L37+44
 486              	.LVL31:
 395:quantum/command.c ****                 debug_matrix   = false;
 487              		.loc 1 395 17 is_stmt 0 view .LVU79
 488 015e FFF7FEFF 		bl	printf_
 489              	.LVL32:
 396:quantum/command.c ****                 debug_keyboard = false;
 490              		.loc 1 396 17 is_stmt 1 view .LVU80
 397:quantum/command.c ****                 debug_mouse    = false;
 491              		.loc 1 397 17 view .LVU81
 398:quantum/command.c ****             }
 492              		.loc 1 398 17 view .LVU82
 396:quantum/command.c ****                 debug_keyboard = false;
 493              		.loc 1 396 32 is_stmt 0 view .LVU83
 494 0162 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 495 0164 23F00E03 		bic	r3, r3, #14
 496              	.L33:
 407:quantum/command.c ****             } else {
 497              		.loc 1 407 30 view .LVU84
 498 0168 2370     		strb	r3, [r4]
 499 016a C8E7     		b	.L31
 500              	.LVL33:
 501              	.L16:
 404:quantum/command.c ****             if (debug_matrix) {
 502              		.loc 1 404 13 is_stmt 1 view .LVU85
 404:quantum/command.c ****             if (debug_matrix) {
 503              		.loc 1 404 26 is_stmt 0 view .LVU86
 504 016c 394C     		ldr	r4, .L37+20
 404:quantum/command.c ****             if (debug_matrix) {
 505              		.loc 1 404 29 view .LVU87
 506 016e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 507 0170 C3F34002 		ubfx	r2, r3, #1, #1
 404:quantum/command.c ****             if (debug_matrix) {
 508              		.loc 1 404 13 view .LVU88
 509 0174 82F00102 		eor	r2, r2, #1
 404:quantum/command.c ****             if (debug_matrix) {
 510              		.loc 1 404 26 view .LVU89
 511 0178 62F34103 		bfi	r3, r2, #1, #1
 405:quantum/command.c ****                 print("\nmatrix: on\n");
 512              		.loc 1 405 16 view .LVU90
 513 017c 9807     		lsls	r0, r3, #30
 514              	.LVL34:
 404:quantum/command.c ****             if (debug_matrix) {
 515              		.loc 1 404 26 view .LVU91
 516 017e 2370     		strb	r3, [r4]
 405:quantum/command.c ****                 print("\nmatrix: on\n");
 517              		.loc 1 405 13 is_stmt 1 view .LVU92
 405:quantum/command.c ****                 print("\nmatrix: on\n");
 518              		.loc 1 405 16 is_stmt 0 view .LVU93
 519 0180 06D5     		bpl	.L27
 406:quantum/command.c ****                 debug_enable = true;
 520              		.loc 1 406 17 is_stmt 1 view .LVU94
 521 0182 3B48     		ldr	r0, .L37+48
 522              	.L34:
 523 0184 FFF7FEFF 		bl	printf_
 524              	.LVL35:
 407:quantum/command.c ****             } else {
 525              		.loc 1 407 17 view .LVU95
 407:quantum/command.c ****             } else {
 526              		.loc 1 407 30 is_stmt 0 view .LVU96
 527 0188 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 528 018a 43F00103 		orr	r3, r3, #1
 529 018e EBE7     		b	.L33
 530              	.L27:
 409:quantum/command.c ****             }
 531              		.loc 1 409 17 is_stmt 1 view .LVU97
 532 0190 3848     		ldr	r0, .L37+52
 533 0192 BDE7     		b	.L32
 534              	.LVL36:
 535              	.L21:
 415:quantum/command.c ****             if (debug_keyboard) {
 536              		.loc 1 415 13 view .LVU98
 415:quantum/command.c ****             if (debug_keyboard) {
 537              		.loc 1 415 28 is_stmt 0 view .LVU99
 538 0194 2F4C     		ldr	r4, .L37+20
 415:quantum/command.c ****             if (debug_keyboard) {
 539              		.loc 1 415 31 view .LVU100
 540 0196 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 541 0198 C3F38002 		ubfx	r2, r3, #2, #1
 415:quantum/command.c ****             if (debug_keyboard) {
 542              		.loc 1 415 13 view .LVU101
 543 019c 82F00102 		eor	r2, r2, #1
 415:quantum/command.c ****             if (debug_keyboard) {
 544              		.loc 1 415 28 view .LVU102
 545 01a0 62F38203 		bfi	r3, r2, #2, #1
 416:quantum/command.c ****                 print("\nkeyboard: on\n");
 546              		.loc 1 416 16 view .LVU103
 547 01a4 5907     		lsls	r1, r3, #29
 415:quantum/command.c ****             if (debug_keyboard) {
 548              		.loc 1 415 28 view .LVU104
 549 01a6 2370     		strb	r3, [r4]
 416:quantum/command.c ****                 print("\nkeyboard: on\n");
 550              		.loc 1 416 13 is_stmt 1 view .LVU105
 416:quantum/command.c ****                 print("\nkeyboard: on\n");
 551              		.loc 1 416 16 is_stmt 0 view .LVU106
 552 01a8 01D5     		bpl	.L28
 417:quantum/command.c ****                 debug_enable = true;
 553              		.loc 1 417 17 is_stmt 1 view .LVU107
 554 01aa 3348     		ldr	r0, .L37+56
 555              	.LVL37:
 417:quantum/command.c ****                 debug_enable = true;
 556              		.loc 1 417 17 is_stmt 0 view .LVU108
 557 01ac EAE7     		b	.L34
 558              	.LVL38:
 559              	.L28:
 420:quantum/command.c ****             }
 560              		.loc 1 420 17 is_stmt 1 view .LVU109
 561 01ae 3348     		ldr	r0, .L37+60
 562              	.LVL39:
 420:quantum/command.c ****             }
 563              		.loc 1 420 17 is_stmt 0 view .LVU110
 564 01b0 AEE7     		b	.L32
 565              	.LVL40:
 566              	.L20:
 426:quantum/command.c ****             if (debug_mouse) {
 567              		.loc 1 426 13 is_stmt 1 view .LVU111
 426:quantum/command.c ****             if (debug_mouse) {
 568              		.loc 1 426 25 is_stmt 0 view .LVU112
 569 01b2 284C     		ldr	r4, .L37+20
 426:quantum/command.c ****             if (debug_mouse) {
 570              		.loc 1 426 28 view .LVU113
 571 01b4 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 572 01b6 C3F3C002 		ubfx	r2, r3, #3, #1
 426:quantum/command.c ****             if (debug_mouse) {
 573              		.loc 1 426 13 view .LVU114
 574 01ba 82F00102 		eor	r2, r2, #1
 426:quantum/command.c ****             if (debug_mouse) {
 575              		.loc 1 426 25 view .LVU115
 576 01be 62F3C303 		bfi	r3, r2, #3, #1
 427:quantum/command.c ****                 print("\nmouse: on\n");
 577              		.loc 1 427 16 view .LVU116
 578 01c2 1A07     		lsls	r2, r3, #28
 426:quantum/command.c ****             if (debug_mouse) {
 579              		.loc 1 426 25 view .LVU117
 580 01c4 2370     		strb	r3, [r4]
 427:quantum/command.c ****                 print("\nmouse: on\n");
 581              		.loc 1 427 13 is_stmt 1 view .LVU118
 427:quantum/command.c ****                 print("\nmouse: on\n");
 582              		.loc 1 427 16 is_stmt 0 view .LVU119
 583 01c6 01D5     		bpl	.L29
 428:quantum/command.c ****                 debug_enable = true;
 584              		.loc 1 428 17 is_stmt 1 view .LVU120
 585 01c8 2D48     		ldr	r0, .L37+64
 586              	.LVL41:
 428:quantum/command.c ****                 debug_enable = true;
 587              		.loc 1 428 17 is_stmt 0 view .LVU121
 588 01ca DBE7     		b	.L34
 589              	.LVL42:
 590              	.L29:
 431:quantum/command.c ****             }
 591              		.loc 1 431 17 is_stmt 1 view .LVU122
 592 01cc 2D48     		ldr	r0, .L37+68
 593              	.LVL43:
 431:quantum/command.c ****             }
 594              		.loc 1 431 17 is_stmt 0 view .LVU123
 595 01ce 9FE7     		b	.L32
 596              	.LVL44:
 597              	.L17:
 437:quantum/command.c ****             break;
 598              		.loc 1 437 13 is_stmt 1 view .LVU124
 599              	.LBB24:
 600              	.LBI24:
 163:quantum/command.c ****     print(/* clang-format off */
 601              		.loc 1 163 13 view .LVU125
 602              	.LBB25:
 164:quantum/command.c ****         "\n\t- Version -\n"
 603              		.loc 1 164 5 view .LVU126
 604 01d0 2D48     		ldr	r0, .L37+72
 605              	.LVL45:
 164:quantum/command.c ****         "\n\t- Version -\n"
 606              		.loc 1 164 5 is_stmt 0 view .LVU127
 607 01d2 9DE7     		b	.L32
 608              	.LVL46:
 609              	.L18:
 164:quantum/command.c ****         "\n\t- Version -\n"
 610              		.loc 1 164 5 view .LVU128
 611              	.LBE25:
 612              	.LBE24:
 442:quantum/command.c ****             break;
 613              		.loc 1 442 13 is_stmt 1 view .LVU129
 614              	.LBB26:
 615              	.LBI15:
 221:quantum/command.c ****     xprintf(/* clang-format off */
 616              		.loc 1 221 13 view .LVU130
 617              	.LBB17:
 222:quantum/command.c ****         "\n\t- Status -\n"
 618              		.loc 1 222 5 view .LVU131
 235:quantum/command.c **** #ifndef PROTOCOL_VUSB
 619              		.loc 1 235 11 is_stmt 0 view .LVU132
 620 01d4 FFF7FEFF 		bl	host_keyboard_leds
 621              	.LVL47:
 222:quantum/command.c ****         "\n\t- Status -\n"
 622              		.loc 1 222 5 view .LVU133
 623 01d8 2C4B     		ldr	r3, .L37+76
 235:quantum/command.c **** #ifndef PROTOCOL_VUSB
 624              		.loc 1 235 11 view .LVU134
 625 01da 0B90     		str	r0, [sp, #44]
 222:quantum/command.c ****         "\n\t- Status -\n"
 626              		.loc 1 222 5 view .LVU135
 627 01dc 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 628 01de 2C4B     		ldr	r3, .L37+80
 242:quantum/command.c **** #endif
 629              		.loc 1 242 24 view .LVU136
 630 01e0 2C48     		ldr	r0, .L37+84
 222:quantum/command.c ****         "\n\t- Status -\n"
 631              		.loc 1 222 5 view .LVU137
 632 01e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 633 01e4 0A92     		str	r2, [sp, #40]
 634 01e6 0993     		str	r3, [sp, #36]
 242:quantum/command.c **** #endif
 635              		.loc 1 242 24 view .LVU138
 636 01e8 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
 222:quantum/command.c ****         "\n\t- Status -\n"
 637              		.loc 1 222 5 view .LVU139
 638 01ea FFF7FEFF 		bl	timer_read32
 639              	.LVL48:
 640 01ee E409     		lsrs	r4, r4, #7
 641 01f0 CDE90040 		strd	r4, r0, [sp]
 642 01f4 DDE90932 		ldrd	r3, r2, [sp, #36]
 643 01f8 0B99     		ldr	r1, [sp, #44]
 644 01fa 2748     		ldr	r0, .L37+88
 645 01fc FFF7FEFF 		bl	printf_
 646              	.LVL49:
 647 0200 7DE7     		b	.L31
 648              	.LVL50:
 649              	.L19:
 222:quantum/command.c ****         "\n\t- Status -\n"
 650              		.loc 1 222 5 view .LVU140
 651              	.LBE17:
 652              	.LBE26:
 449:quantum/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 653              		.loc 1 449 13 is_stmt 1 view .LVU141
 654 0202 FFF7FEFF 		bl	clear_keyboard
 655              	.LVL51:
 450:quantum/command.c ****             if (keymap_config.nkro) {
 656              		.loc 1 450 13 view .LVU142
 450:quantum/command.c ****             if (keymap_config.nkro) {
 657              		.loc 1 450 32 is_stmt 0 view .LVU143
 658 0206 2349     		ldr	r1, .L37+84
 450:quantum/command.c ****             if (keymap_config.nkro) {
 659              		.loc 1 450 48 view .LVU144
 660 0208 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 661 020a C3F3C012 		ubfx	r2, r3, #7, #1
 450:quantum/command.c ****             if (keymap_config.nkro) {
 662              		.loc 1 450 13 view .LVU145
 663 020e 82F00102 		eor	r2, r2, #1
 450:quantum/command.c ****             if (keymap_config.nkro) {
 664              		.loc 1 450 32 view .LVU146
 665 0212 62F3C713 		bfi	r3, r2, #7, #1
 666 0216 0B70     		strb	r3, [r1]
 451:quantum/command.c ****                 print("NKRO: on\n");
 667              		.loc 1 451 13 is_stmt 1 view .LVU147
 451:quantum/command.c ****                 print("NKRO: on\n");
 668              		.loc 1 451 16 is_stmt 0 view .LVU148
 669 0218 1B06     		lsls	r3, r3, #24
 452:quantum/command.c ****             } else {
 670              		.loc 1 452 17 is_stmt 1 view .LVU149
 671 021a 4CBF     		ite	mi
 672 021c 1F48     		ldrmi	r0, .L37+92
 454:quantum/command.c ****             }
 673              		.loc 1 454 17 view .LVU150
 674 021e 2048     		ldrpl	r0, .L37+96
 675 0220 76E7     		b	.L32
 676              	.LVL52:
 677              	.L9:
 462:quantum/command.c ****             break;
 678              		.loc 1 462 13 view .LVU151
 679 0222 0020     		movs	r0, #0
 680              	.LVL53:
 681              	.L36:
 521:quantum/command.c ****             break;
 682              		.loc 1 521 13 is_stmt 0 view .LVU152
 683 0224 FFF7FEFF 		bl	switch_default_layer
 684              	.LVL54:
 522:quantum/command.c ****         case KC_0:
 685              		.loc 1 522 13 is_stmt 1 view .LVU153
 686 0228 69E7     		b	.L31
 687              	.LVL55:
 688              	.L11:
 511:quantum/command.c ****             break;
 689              		.loc 1 511 13 view .LVU154
 690 022a 3938     		subs	r0, r0, #57
 691              	.LVL56:
 692              	.L35:
 521:quantum/command.c ****             break;
 693              		.loc 1 521 13 is_stmt 0 view .LVU155
 694 022c C0B2     		uxtb	r0, r0
 695 022e F9E7     		b	.L36
 696              	.LVL57:
 697              	.L15:
 521:quantum/command.c ****             break;
 698              		.loc 1 521 13 is_stmt 1 view .LVU156
 699 0230 1D38     		subs	r0, r0, #29
 700              	.LVL58:
 521:quantum/command.c ****             break;
 701              		.loc 1 521 13 is_stmt 0 view .LVU157
 702 0232 FBE7     		b	.L35
 703              	.LVL59:
 704              	.L8:
 529:quantum/command.c ****             return false;
 705              		.loc 1 529 13 is_stmt 1 view .LVU158
 706 0234 1B48     		ldr	r0, .L37+100
 707              	.LVL60:
 529:quantum/command.c ****             return false;
 708              		.loc 1 529 13 is_stmt 0 view .LVU159
 709 0236 FFF7FEFF 		bl	printf_
 710              	.LVL61:
 530:quantum/command.c ****     }
 711              		.loc 1 530 13 is_stmt 1 view .LVU160
 530:quantum/command.c ****     }
 712              		.loc 1 530 20 is_stmt 0 view .LVU161
 713 023a 0020     		movs	r0, #0
 714 023c 79E7     		b	.L25
 715              	.L38:
 716 023e 00BF     		.align	2
 717              	.L37:
 718 0240 00000000 		.word	.LC2
 719 0244 1D000000 		.word	.LC3
 720 0248 66000000 		.word	.LC4
 721 024c 4B010000 		.word	.LC5
 722 0250 5C010000 		.word	.LC6
 723 0254 00000000 		.word	debug_config
 724 0258 0E030000 		.word	.LC7
 725 025c 35030000 		.word	.LC8
 726 0260 00000000 		.word	.LANCHOR0
 727 0264 39030000 		.word	.LC9
 728 0268 55030000 		.word	.LC10
 729 026c 61030000 		.word	.LC11
 730 0270 6E030000 		.word	.LC12
 731 0274 7B030000 		.word	.LC13
 732 0278 89030000 		.word	.LC14
 733 027c 98030000 		.word	.LC15
 734 0280 A8030000 		.word	.LC16
 735 0284 B4030000 		.word	.LC17
 736 0288 C1030000 		.word	.LC18
 737 028c 00000000 		.word	keyboard_protocol
 738 0290 00000000 		.word	keyboard_idle
 739 0294 00000000 		.word	keymap_config
 740 0298 9F040000 		.word	.LC19
 741 029c 23050000 		.word	.LC20
 742 02a0 2D050000 		.word	.LC21
 743 02a4 38050000 		.word	.LC22
 744              		.cfi_endproc
 745              	.LFE298:
 747              		.section	.rodata.mousekey_console.isra.0.str1.1,"aMS",%progbits,1
 748              	.LC23:
 749 0000 3F3F3F00 		.ascii	"???\000"
 750              	.LC24:
 751 0004 0A092D20 		.ascii	"\012\011- Mousekey -\012\000"
 751      4D6F7573 
 751      656B6579 
 751      202D0A00 
 752              	.LC25:
 753 0014 703A0970 		.ascii	"p:\011print values\012d:\011set defaults\012up:\011"
 753      72696E74 
 753      2076616C 
 753      7565730A 
 753      643A0973 
 754 0038 2B310A64 		.ascii	"+1\012dn:\011-1\012lt:\011+10\012rt:\011-10\012ESC/"
 754      6E3A092D 
 754      310A6C74 
 754      3A092B31 
 754      300A7274 
 755 0056 713A0971 		.ascii	"q:\011quit\012\012speed = delta * max_speed * (repe"
 755      7569740A 
 755      0A737065 
 755      6564203D 
 755      2064656C 
 756 0080 6174202F 		.ascii	"at / time_to_max)\012where delta: cursor=%d, wheel="
 756      2074696D 
 756      655F746F 
 756      5F6D6178 
 756      290A7768 
 757 00b0 25640A53 		.ascii	"%d\012See http://en.wikipedia.org/wiki/Mouse_keys\012"
 757      65652068 
 757      7474703A 
 757      2F2F656E 
 757      2E77696B 
 758 00df 00       		.ascii	"\000"
 759              	.LC26:
 760 00e0 710A00   		.ascii	"q\012\000"
 761              	.LC27:
 762 00e3 0A092D20 		.ascii	"\012\011- Values -\012\000"
 762      56616C75 
 762      6573202D 
 762      0A00
 763              	.LC28:
 764 00f1 6D6B5F64 		.ascii	"mk_delay\000"
 764      656C6179 
 764      00
 765              	.LC29:
 766 00fa 6D6B5F69 		.ascii	"mk_interval\000"
 766      6E746572 
 766      76616C00 
 767              	.LC30:
 768 0106 6D6B5F6D 		.ascii	"mk_max_speed\000"
 768      61785F73 
 768      70656564 
 768      00
 769              	.LC31:
 770 0113 6D6B5F74 		.ascii	"mk_time_to_max\000"
 770      696D655F 
 770      746F5F6D 
 770      617800
 771              	.LC32:
 772 0122 6D6B5F77 		.ascii	"mk_wheel_max_speed\000"
 772      6865656C 
 772      5F6D6178 
 772      5F737065 
 772      656400
 773              	.LC33:
 774 0135 6D6B5F77 		.ascii	"mk_wheel_time_to_max\000"
 774      6865656C 
 774      5F74696D 
 774      655F746F 
 774      5F6D6178 
 775              	.LC34:
 776 014a 3F0A00   		.ascii	"?\012\000"
 777              	.LC35:
 778 014d 25750A00 		.ascii	"%u\012\000"
 779              	.LC36:
 780 0151 64656661 		.ascii	"defaults\012\000"
 780      756C7473 
 780      0A00
 781              	.LC37:
 782 015b 3D202575 		.ascii	"= %u\012\000"
 782      0A00
 783              	.LC38:
 784 0161 4D25753A 		.ascii	"M%u:%s> \000"
 784      25733E20 
 784      00
 785              	.LC39:
 786 016a 4D3E2000 		.ascii	"M> \000"
 787              		.section	.text.mousekey_console.isra.0,"ax",%progbits
 788              		.align	1
 789              		.syntax unified
 790              		.thumb
 791              		.thumb_func
 792              		.fpu fpv4-sp-d16
 794              	mousekey_console.isra.0:
 795              	.LVL62:
 796              	.LFB307:
 629:quantum/command.c ****     static uint8_t  param = 0;
 797              		.loc 1 629 6 is_stmt 1 view -0
 798              		.cfi_startproc
 799              		@ args = 0, pretend = 0, frame = 0
 800              		@ frame_needed = 0, uses_anonymous_args = 0
 630:quantum/command.c ****     static uint8_t *pp    = NULL;
 801              		.loc 1 630 5 view .LVU163
 631:quantum/command.c ****     static char *   desc  = NULL;
 802              		.loc 1 631 5 view .LVU164
 632:quantum/command.c **** 
 803              		.loc 1 632 5 view .LVU165
 638:quantum/command.c **** 
 804              		.loc 1 638 5 view .LVU166
 640:quantum/command.c ****         case KC_H:
 805              		.loc 1 640 5 view .LVU167
 806 0000 2928     		cmp	r0, #41
 629:quantum/command.c ****     static uint8_t  param = 0;
 807              		.loc 1 629 6 is_stmt 0 view .LVU168
 808 0002 10B5     		push	{r4, lr}
 809              		.cfi_def_cfa_offset 8
 810              		.cfi_offset 4, -8
 811              		.cfi_offset 14, -4
 812 0004 614C     		ldr	r4, .L91
 640:quantum/command.c ****         case KC_H:
 813              		.loc 1 640 5 view .LVU169
 814 0006 55D0     		beq	.L40
 815 0008 29D8     		bhi	.L41
 816 000a 1328     		cmp	r0, #19
 817 000c 5FD0     		beq	.L42
 818 000e 15D8     		bhi	.L43
 819 0010 0728     		cmp	r0, #7
 820 0012 00F09380 		beq	.L44
 821 0016 0B28     		cmp	r0, #11
 822 0018 34D0     		beq	.L45
 823              	.LVL63:
 824              	.L64:
 725:quantum/command.c ****         }
 825              		.loc 1 725 13 is_stmt 1 view .LVU170
 826 001a 5D48     		ldr	r0, .L91+4
 827 001c A1E0     		b	.L90
 828              	.LVL64:
 829              	.L51:
 640:quantum/command.c ****         case KC_H:
 830              		.loc 1 640 5 is_stmt 0 view .LVU171
 831 001e 0A21     		movs	r1, #10
 832              	.L47:
 833              	.LVL65:
 715:quantum/command.c ****             int16_t val = *pp + change;
 834              		.loc 1 715 9 is_stmt 1 view .LVU172
 715:quantum/command.c ****             int16_t val = *pp + change;
 835              		.loc 1 715 13 is_stmt 0 view .LVU173
 836 0020 5C4B     		ldr	r3, .L91+8
 837 0022 1B68     		ldr	r3, [r3]
 715:quantum/command.c ****             int16_t val = *pp + change;
 838              		.loc 1 715 12 view .LVU174
 839 0024 002B     		cmp	r3, #0
 840 0026 F8D0     		beq	.L64
 841              	.LBB30:
 716:quantum/command.c ****             if (val > (int16_t)UINT8_MAX)
 842              		.loc 1 716 13 is_stmt 1 view .LVU175
 716:quantum/command.c ****             if (val > (int16_t)UINT8_MAX)
 843              		.loc 1 716 27 is_stmt 0 view .LVU176
 844 0028 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 716:quantum/command.c ****             if (val > (int16_t)UINT8_MAX)
 845              		.loc 1 716 21 view .LVU177
 846 002a 0A44     		add	r2, r2, r1
 847              	.LVL66:
 717:quantum/command.c ****                 *pp = UINT8_MAX;
 848              		.loc 1 717 13 is_stmt 1 view .LVU178
 717:quantum/command.c ****                 *pp = UINT8_MAX;
 849              		.loc 1 717 16 is_stmt 0 view .LVU179
 850 002c FF2A     		cmp	r2, #255
 851 002e 40F3A380 		ble	.L65
 718:quantum/command.c ****             else if (val < 0)
 852              		.loc 1 718 17 is_stmt 1 view .LVU180
 718:quantum/command.c ****             else if (val < 0)
 853              		.loc 1 718 21 is_stmt 0 view .LVU181
 854 0032 FF22     		movs	r2, #255
 855              	.LVL67:
 856              	.L67:
 722:quantum/command.c ****             xprintf("= %u\n", *pp);
 857              		.loc 1 722 17 is_stmt 1 view .LVU182
 722:quantum/command.c ****             xprintf("= %u\n", *pp);
 858              		.loc 1 722 23 is_stmt 0 view .LVU183
 859 0034 1A70     		strb	r2, [r3]
 860              	.LVL68:
 723:quantum/command.c ****         } else {
 861              		.loc 1 723 13 is_stmt 1 view .LVU184
 862 0036 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 863 0038 5748     		ldr	r0, .L91+12
 864 003a 58E0     		b	.L89
 865              	.LVL69:
 866              	.L43:
 723:quantum/command.c ****         } else {
 867              		.loc 1 723 13 is_stmt 0 view .LVU185
 868              	.LBE30:
 640:quantum/command.c ****         case KC_H:
 869              		.loc 1 640 5 view .LVU186
 870 003c 1428     		cmp	r0, #20
 871 003e 39D0     		beq	.L40
 872 0040 A0F11E03 		sub	r3, r0, #30
 873 0044 092B     		cmp	r3, #9
 874 0046 E8D8     		bhi	.L64
 666:quantum/command.c ****             switch (param) { /* clang-format off */
 875              		.loc 1 666 13 is_stmt 1 view .LVU187
 666:quantum/command.c ****             switch (param) { /* clang-format off */
 876              		.loc 1 666 30 is_stmt 0 view .LVU188
 877 0048 1D38     		subs	r0, r0, #29
 878              	.LVL70:
 666:quantum/command.c ****             switch (param) { /* clang-format off */
 879              		.loc 1 666 30 view .LVU189
 880 004a C0B2     		uxtb	r0, r0
 666:quantum/command.c ****             switch (param) { /* clang-format off */
 881              		.loc 1 666 19 view .LVU190
 882 004c 2070     		strb	r0, [r4]
 667:quantum/command.c **** #               define PARAM(n, v) case n: pp = &(v); desc = #v; break
 883              		.loc 1 667 13 is_stmt 1 view .LVU191
 884 004e 0138     		subs	r0, r0, #1
 885 0050 0528     		cmp	r0, #5
 886 0052 6DD8     		bhi	.L52
 887 0054 DFE800F0 		tbb	[pc, r0]
 888              	.L54:
 889 0058 41       		.byte	(.L59-.L54)/2
 890 0059 4E       		.byte	(.L58-.L54)/2
 891 005a 54       		.byte	(.L57-.L54)/2
 892 005b 5A       		.byte	(.L56-.L54)/2
 893 005c 60       		.byte	(.L55-.L54)/2
 894 005d 66       		.byte	(.L53-.L54)/2
 895              	.LVL71:
 896              		.p2align 1
 897              	.L41:
 640:quantum/command.c ****         case KC_H:
 898              		.loc 1 640 5 is_stmt 0 view .LVU192
 899 005e 3828     		cmp	r0, #56
 900 0060 10D0     		beq	.L45
 901 0062 4F38     		subs	r0, r0, #79
 902              	.LVL72:
 640:quantum/command.c ****         case KC_H:
 903              		.loc 1 640 5 view .LVU193
 904 0064 C3B2     		uxtb	r3, r0
 905 0066 032B     		cmp	r3, #3
 906 0068 D7D8     		bhi	.L64
 907 006a 0328     		cmp	r0, #3
 908 006c D5D8     		bhi	.L64
 909 006e 01A3     		adr	r3, .L48
 910 0070 53F820F0 		ldr	pc, [r3, r0, lsl #2]
 911              		.p2align 2
 912              	.L48:
 913 0074 1F000000 		.word	.L51+1
 914 0078 69010000 		.word	.L50+1
 915 007c 6F010000 		.word	.L49+1
 916 0080 75010000 		.word	.L70+1
 917              	.LVL73:
 918              		.p2align 1
 919              	.L45:
 644:quantum/command.c ****             mousekey_console_help();
 920              		.loc 1 644 13 is_stmt 1 view .LVU194
 921 0084 4548     		ldr	r0, .L91+16
 922              	.LVL74:
 644:quantum/command.c ****             mousekey_console_help();
 923              		.loc 1 644 13 is_stmt 0 view .LVU195
 924 0086 FFF7FEFF 		bl	printf_
 925              	.LVL75:
 645:quantum/command.c **** #    endif
 926              		.loc 1 645 13 is_stmt 1 view .LVU196
 927              	.LBB31:
 928              	.LBI31:
 603:quantum/command.c ****     mousekey_param_print();
 929              		.loc 1 603 13 view .LVU197
 930              	.LBB32:
 604:quantum/command.c ****     xprintf(/* clang-format off */
 931              		.loc 1 604 5 view .LVU198
 932 008a FFF7FEFF 		bl	mousekey_param_print
 933              	.LVL76:
 605:quantum/command.c ****         "p:	print values\n"
 934              		.loc 1 605 5 view .LVU199
 935 008e 4448     		ldr	r0, .L91+20
 936 0090 0122     		movs	r2, #1
 937 0092 0521     		movs	r1, #5
 938 0094 FFF7FEFF 		bl	printf_
 939              	.LVL77:
 940              	.L61:
 605:quantum/command.c ****         "p:	print values\n"
 941              		.loc 1 605 5 is_stmt 0 view .LVU200
 942              	.LBE32:
 943              	.LBE31:
 729:quantum/command.c ****         xprintf("M%u:%s> ", param, desc ? desc : "???");
 944              		.loc 1 729 5 is_stmt 1 view .LVU201
 729:quantum/command.c ****         xprintf("M%u:%s> ", param, desc ? desc : "???");
 945              		.loc 1 729 9 is_stmt 0 view .LVU202
 946 0098 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 729:quantum/command.c ****         xprintf("M%u:%s> ", param, desc ? desc : "???");
 947              		.loc 1 729 8 view .LVU203
 948 009a 0029     		cmp	r1, #0
 949 009c 70D0     		beq	.L68
 730:quantum/command.c ****     } else {
 950              		.loc 1 730 9 is_stmt 1 view .LVU204
 730:quantum/command.c ****     } else {
 951              		.loc 1 730 41 is_stmt 0 view .LVU205
 952 009e 414B     		ldr	r3, .L91+24
 730:quantum/command.c ****     } else {
 953              		.loc 1 730 9 view .LVU206
 954 00a0 4148     		ldr	r0, .L91+28
 730:quantum/command.c ****     } else {
 955              		.loc 1 730 41 view .LVU207
 956 00a2 1A68     		ldr	r2, [r3]
 730:quantum/command.c ****     } else {
 957              		.loc 1 730 9 view .LVU208
 958 00a4 414B     		ldr	r3, .L91+32
 735:quantum/command.c **** 
 959              		.loc 1 735 1 view .LVU209
 960 00a6 BDE81040 		pop	{r4, lr}
 961              		.cfi_remember_state
 962              		.cfi_restore 14
 963              		.cfi_restore 4
 964              		.cfi_def_cfa_offset 0
 730:quantum/command.c ****     } else {
 965              		.loc 1 730 9 view .LVU210
 966 00aa 002A     		cmp	r2, #0
 967 00ac 08BF     		it	eq
 968 00ae 1A46     		moveq	r2, r3
 969 00b0 FFF7FEBF 		b	printf_
 970              	.LVL78:
 971              	.L40:
 972              		.cfi_restore_state
 651:quantum/command.c ****             if (!param) return false;
 973              		.loc 1 651 13 is_stmt 1 view .LVU211
 974 00b4 3E48     		ldr	r0, .L91+36
 975              	.LVL79:
 651:quantum/command.c ****             if (!param) return false;
 976              		.loc 1 651 13 is_stmt 0 view .LVU212
 977 00b6 FFF7FEFF 		bl	printf_
 978              	.LVL80:
 652:quantum/command.c ****             param = 0;
 979              		.loc 1 652 13 is_stmt 1 view .LVU213
 652:quantum/command.c ****             param = 0;
 980              		.loc 1 652 16 is_stmt 0 view .LVU214
 981 00ba 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 982 00bc 002B     		cmp	r3, #0
 983 00be 64D0     		beq	.L39
 653:quantum/command.c ****             pp    = NULL;
 984              		.loc 1 653 13 is_stmt 1 view .LVU215
 654:quantum/command.c ****             desc  = NULL;
 985              		.loc 1 654 19 is_stmt 0 view .LVU216
 986 00c0 344A     		ldr	r2, .L91+8
 653:quantum/command.c ****             pp    = NULL;
 987              		.loc 1 653 19 view .LVU217
 988 00c2 0023     		movs	r3, #0
 654:quantum/command.c ****             desc  = NULL;
 989              		.loc 1 654 19 view .LVU218
 990 00c4 1360     		str	r3, [r2]
 655:quantum/command.c ****             break;
 991              		.loc 1 655 19 view .LVU219
 992 00c6 374A     		ldr	r2, .L91+24
 653:quantum/command.c ****             pp    = NULL;
 993              		.loc 1 653 19 view .LVU220
 994 00c8 2370     		strb	r3, [r4]
 654:quantum/command.c ****             desc  = NULL;
 995              		.loc 1 654 13 is_stmt 1 view .LVU221
 655:quantum/command.c ****             break;
 996              		.loc 1 655 13 view .LVU222
 655:quantum/command.c ****             break;
 997              		.loc 1 655 19 is_stmt 0 view .LVU223
 998 00ca 1360     		str	r3, [r2]
 656:quantum/command.c **** 
 999              		.loc 1 656 13 is_stmt 1 view .LVU224
 714:quantum/command.c ****         if (pp) {
 1000              		.loc 1 714 5 view .LVU225
 1001 00cc E4E7     		b	.L61
 1002              	.LVL81:
 1003              	.L42:
 660:quantum/command.c ****             mousekey_param_print();
 1004              		.loc 1 660 13 view .LVU226
 1005 00ce 3948     		ldr	r0, .L91+40
 1006              	.LVL82:
 660:quantum/command.c ****             mousekey_param_print();
 1007              		.loc 1 660 13 is_stmt 0 view .LVU227
 1008 00d0 FFF7FEFF 		bl	printf_
 1009              	.LVL83:
 661:quantum/command.c **** #    endif
 1010              		.loc 1 661 13 is_stmt 1 view .LVU228
 1011 00d4 FFF7FEFF 		bl	mousekey_param_print
 1012              	.LVL84:
 663:quantum/command.c **** 
 1013              		.loc 1 663 13 view .LVU229
 714:quantum/command.c ****         if (pp) {
 1014              		.loc 1 714 5 view .LVU230
 1015 00d8 DEE7     		b	.L61
 1016              	.L59:
 671:quantum/command.c ****                 PARAM(2, mk_interval);
 1017              		.loc 1 671 17 view .LVU231
 1018 00da 2E4B     		ldr	r3, .L91+8
 1019 00dc 364A     		ldr	r2, .L91+44
 1020 00de 1A60     		str	r2, [r3]
 671:quantum/command.c ****                 PARAM(2, mk_interval);
 1021              		.loc 1 671 17 view .LVU232
 1022 00e0 304B     		ldr	r3, .L91+24
 1023 00e2 364A     		ldr	r2, .L91+48
 1024              	.L88:
 672:quantum/command.c ****                 PARAM(3, mk_max_speed);
 1025              		.loc 1 672 17 is_stmt 0 view .LVU233
 1026 00e4 1A60     		str	r2, [r3]
 672:quantum/command.c ****                 PARAM(3, mk_max_speed);
 1027              		.loc 1 672 17 is_stmt 1 view .LVU234
 1028              	.L63:
 685:quantum/command.c ****             break;
 1029              		.loc 1 685 13 view .LVU235
 685:quantum/command.c ****             break;
 1030              		.loc 1 685 17 is_stmt 0 view .LVU236
 1031 00e6 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 685:quantum/command.c ****             break;
 1032              		.loc 1 685 16 view .LVU237
 1033 00e8 0029     		cmp	r1, #0
 1034 00ea D5D0     		beq	.L61
 685:quantum/command.c ****             break;
 1035              		.loc 1 685 24 is_stmt 1 view .LVU238
 1036 00ec 3448     		ldr	r0, .L91+52
 1037              	.LVL85:
 1038              	.L89:
 1039              	.LBB33:
 723:quantum/command.c ****         } else {
 1040              		.loc 1 723 13 is_stmt 0 view .LVU239
 1041 00ee FFF7FEFF 		bl	printf_
 1042              	.LVL86:
 1043              	.LBE33:
 1044 00f2 D1E7     		b	.L61
 1045              	.LVL87:
 1046              	.L58:
 672:quantum/command.c ****                 PARAM(3, mk_max_speed);
 1047              		.loc 1 672 17 is_stmt 1 view .LVU240
 1048 00f4 274B     		ldr	r3, .L91+8
 1049 00f6 334A     		ldr	r2, .L91+56
 1050 00f8 1A60     		str	r2, [r3]
 672:quantum/command.c ****                 PARAM(3, mk_max_speed);
 1051              		.loc 1 672 17 view .LVU241
 1052 00fa 2A4B     		ldr	r3, .L91+24
 1053 00fc 324A     		ldr	r2, .L91+60
 1054 00fe F1E7     		b	.L88
 1055              	.L57:
 673:quantum/command.c ****                 PARAM(4, mk_time_to_max);
 1056              		.loc 1 673 17 view .LVU242
 1057 0100 244B     		ldr	r3, .L91+8
 1058 0102 324A     		ldr	r2, .L91+64
 1059 0104 1A60     		str	r2, [r3]
 673:quantum/command.c ****                 PARAM(4, mk_time_to_max);
 1060              		.loc 1 673 17 view .LVU243
 1061 0106 274B     		ldr	r3, .L91+24
 1062 0108 314A     		ldr	r2, .L91+68
 1063 010a EBE7     		b	.L88
 1064              	.L56:
 674:quantum/command.c ****                 PARAM(5, mk_wheel_max_speed);
 1065              		.loc 1 674 17 view .LVU244
 1066 010c 214B     		ldr	r3, .L91+8
 1067 010e 314A     		ldr	r2, .L91+72
 1068 0110 1A60     		str	r2, [r3]
 674:quantum/command.c ****                 PARAM(5, mk_wheel_max_speed);
 1069              		.loc 1 674 17 view .LVU245
 1070 0112 244B     		ldr	r3, .L91+24
 1071 0114 304A     		ldr	r2, .L91+76
 1072 0116 E5E7     		b	.L88
 1073              	.L55:
 675:quantum/command.c ****                 PARAM(6, mk_wheel_time_to_max);
 1074              		.loc 1 675 17 view .LVU246
 1075 0118 1E4B     		ldr	r3, .L91+8
 1076 011a 304A     		ldr	r2, .L91+80
 1077 011c 1A60     		str	r2, [r3]
 675:quantum/command.c ****                 PARAM(6, mk_wheel_time_to_max);
 1078              		.loc 1 675 17 view .LVU247
 1079 011e 214B     		ldr	r3, .L91+24
 1080 0120 2F4A     		ldr	r2, .L91+84
 1081 0122 DFE7     		b	.L88
 1082              	.L53:
 676:quantum/command.c **** #endif /* MK_3_SPEED */
 1083              		.loc 1 676 17 view .LVU248
 1084 0124 1B4B     		ldr	r3, .L91+8
 1085 0126 2F4A     		ldr	r2, .L91+88
 1086 0128 1A60     		str	r2, [r3]
 676:quantum/command.c **** #endif /* MK_3_SPEED */
 1087              		.loc 1 676 17 view .LVU249
 1088 012a 1E4B     		ldr	r3, .L91+24
 1089 012c 2E4A     		ldr	r2, .L91+92
 1090 012e D9E7     		b	.L88
 1091              	.L52:
 681:quantum/command.c ****                     print("?\n");
 1092              		.loc 1 681 21 view .LVU250
 681:quantum/command.c ****                     print("?\n");
 1093              		.loc 1 681 27 is_stmt 0 view .LVU251
 1094 0130 0023     		movs	r3, #0
 682:quantum/command.c ****                     break;
 1095              		.loc 1 682 21 view .LVU252
 1096 0132 1748     		ldr	r0, .L91+4
 681:quantum/command.c ****                     print("?\n");
 1097              		.loc 1 681 27 view .LVU253
 1098 0134 2370     		strb	r3, [r4]
 682:quantum/command.c ****                     break;
 1099              		.loc 1 682 21 is_stmt 1 view .LVU254
 1100 0136 FFF7FEFF 		bl	printf_
 1101              	.LVL88:
 683:quantum/command.c ****             } /* clang-format on */
 1102              		.loc 1 683 21 view .LVU255
 1103 013a D4E7     		b	.L63
 1104              	.LVL89:
 1105              	.L44:
 698:quantum/command.c ****             mk_interval          = MOUSEKEY_INTERVAL;
 1106              		.loc 1 698 13 view .LVU256
 698:quantum/command.c ****             mk_interval          = MOUSEKEY_INTERVAL;
 1107              		.loc 1 698 34 is_stmt 0 view .LVU257
 1108 013c 1E4B     		ldr	r3, .L91+44
 706:quantum/command.c ****             break;
 1109              		.loc 1 706 13 view .LVU258
 1110 013e 2B48     		ldr	r0, .L91+96
 1111              	.LVL90:
 698:quantum/command.c ****             mk_interval          = MOUSEKEY_INTERVAL;
 1112              		.loc 1 698 34 view .LVU259
 1113 0140 1E22     		movs	r2, #30
 1114 0142 1A70     		strb	r2, [r3]
 699:quantum/command.c ****             mk_max_speed         = MOUSEKEY_MAX_SPEED;
 1115              		.loc 1 699 13 is_stmt 1 view .LVU260
 699:quantum/command.c ****             mk_max_speed         = MOUSEKEY_MAX_SPEED;
 1116              		.loc 1 699 34 is_stmt 0 view .LVU261
 1117 0144 1F4B     		ldr	r3, .L91+56
 1118 0146 3222     		movs	r2, #50
 1119 0148 1A70     		strb	r2, [r3]
 700:quantum/command.c ****             mk_time_to_max       = MOUSEKEY_TIME_TO_MAX;
 1120              		.loc 1 700 13 is_stmt 1 view .LVU262
 700:quantum/command.c ****             mk_time_to_max       = MOUSEKEY_TIME_TO_MAX;
 1121              		.loc 1 700 34 is_stmt 0 view .LVU263
 1122 014a 204B     		ldr	r3, .L91+64
 1123 014c 0A22     		movs	r2, #10
 1124 014e 1A70     		strb	r2, [r3]
 701:quantum/command.c ****             mk_wheel_max_speed   = MOUSEKEY_WHEEL_MAX_SPEED;
 1125              		.loc 1 701 13 is_stmt 1 view .LVU264
 701:quantum/command.c ****             mk_wheel_max_speed   = MOUSEKEY_WHEEL_MAX_SPEED;
 1126              		.loc 1 701 34 is_stmt 0 view .LVU265
 1127 0150 204B     		ldr	r3, .L91+72
 1128 0152 1422     		movs	r2, #20
 1129 0154 1A70     		strb	r2, [r3]
 702:quantum/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 1130              		.loc 1 702 13 is_stmt 1 view .LVU266
 702:quantum/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 1131              		.loc 1 702 34 is_stmt 0 view .LVU267
 1132 0156 214B     		ldr	r3, .L91+80
 1133 0158 0822     		movs	r2, #8
 1134 015a 1A70     		strb	r2, [r3]
 703:quantum/command.c **** #    endif /* MK_3_SPEED */
 1135              		.loc 1 703 13 is_stmt 1 view .LVU268
 703:quantum/command.c **** #    endif /* MK_3_SPEED */
 1136              		.loc 1 703 34 is_stmt 0 view .LVU269
 1137 015c 214B     		ldr	r3, .L91+88
 1138 015e 2822     		movs	r2, #40
 1139 0160 1A70     		strb	r2, [r3]
 706:quantum/command.c ****             break;
 1140              		.loc 1 706 13 is_stmt 1 view .LVU270
 1141              	.LVL91:
 1142              	.L90:
 725:quantum/command.c ****         }
 1143              		.loc 1 725 13 is_stmt 0 view .LVU271
 1144 0162 FFF7FEFF 		bl	printf_
 1145              	.LVL92:
 1146 0166 97E7     		b	.L61
 1147              	.LVL93:
 1148              	.L50:
 691:quantum/command.c ****         case KC_RIGHT: change = +10; break;
 1149              		.loc 1 691 31 view .LVU272
 1150 0168 6FF00901 		mvn	r1, #9
 1151 016c 58E7     		b	.L47
 1152              	.L49:
 690:quantum/command.c ****         case KC_LEFT:  change = -10; break;
 1153              		.loc 1 690 31 view .LVU273
 1154 016e 4FF0FF31 		mov	r1, #-1
 1155 0172 55E7     		b	.L47
 1156              	.L70:
 689:quantum/command.c ****         case KC_DOWN:  change =  -1; break;
 1157              		.loc 1 689 31 view .LVU274
 1158 0174 0121     		movs	r1, #1
 1159 0176 53E7     		b	.L47
 1160              	.LVL94:
 1161              	.L65:
 1162              	.LBB34:
 719:quantum/command.c ****                 *pp = 0;
 1163              		.loc 1 719 18 is_stmt 1 view .LVU275
 719:quantum/command.c ****                 *pp = 0;
 1164              		.loc 1 719 21 is_stmt 0 view .LVU276
 1165 0178 002A     		cmp	r2, #0
 720:quantum/command.c ****             else
 1166              		.loc 1 720 17 is_stmt 1 view .LVU277
 720:quantum/command.c ****             else
 1167              		.loc 1 720 21 is_stmt 0 view .LVU278
 1168 017a B8BF     		it	lt
 1169 017c 0022     		movlt	r2, #0
 1170              	.LVL95:
 720:quantum/command.c ****             else
 1171              		.loc 1 720 21 view .LVU279
 1172 017e 59E7     		b	.L67
 1173              	.LVL96:
 1174              	.L68:
 720:quantum/command.c ****             else
 1175              		.loc 1 720 21 view .LVU280
 1176              	.LBE34:
 732:quantum/command.c ****     }
 1177              		.loc 1 732 9 is_stmt 1 view .LVU281
 735:quantum/command.c **** 
 1178              		.loc 1 735 1 is_stmt 0 view .LVU282
 1179 0180 BDE81040 		pop	{r4, lr}
 1180              		.cfi_remember_state
 1181              		.cfi_restore 14
 1182              		.cfi_restore 4
 1183              		.cfi_def_cfa_offset 0
 732:quantum/command.c ****     }
 1184              		.loc 1 732 9 view .LVU283
 1185 0184 1A48     		ldr	r0, .L91+100
 1186 0186 FFF7FEBF 		b	printf_
 1187              	.LVL97:
 1188              	.L39:
 1189              		.cfi_restore_state
 735:quantum/command.c **** 
 1190              		.loc 1 735 1 view .LVU284
 1191 018a 10BD     		pop	{r4, pc}
 1192              	.L92:
 1193              		.align	2
 1194              	.L91:
 1195 018c 00000000 		.word	.LANCHOR1
 1196 0190 4A010000 		.word	.LC34
 1197 0194 00000000 		.word	.LANCHOR2
 1198 0198 5B010000 		.word	.LC37
 1199 019c 04000000 		.word	.LC24
 1200 01a0 14000000 		.word	.LC25
 1201 01a4 00000000 		.word	.LANCHOR3
 1202 01a8 61010000 		.word	.LC38
 1203 01ac 00000000 		.word	.LC23
 1204 01b0 E0000000 		.word	.LC26
 1205 01b4 E3000000 		.word	.LC27
 1206 01b8 00000000 		.word	mk_delay
 1207 01bc F1000000 		.word	.LC28
 1208 01c0 4D010000 		.word	.LC35
 1209 01c4 00000000 		.word	mk_interval
 1210 01c8 FA000000 		.word	.LC29
 1211 01cc 00000000 		.word	mk_max_speed
 1212 01d0 06010000 		.word	.LC30
 1213 01d4 00000000 		.word	mk_time_to_max
 1214 01d8 13010000 		.word	.LC31
 1215 01dc 00000000 		.word	mk_wheel_max_speed
 1216 01e0 22010000 		.word	.LC32
 1217 01e4 00000000 		.word	mk_wheel_time_to_max
 1218 01e8 35010000 		.word	.LC33
 1219 01ec 51010000 		.word	.LC36
 1220 01f0 6A010000 		.word	.LC39
 1221              		.cfi_endproc
 1222              	.LFE307:
 1224              		.section	.text.command_extra,"ax",%progbits
 1225              		.align	1
 1226              		.weak	command_extra
 1227              		.syntax unified
 1228              		.thumb
 1229              		.thumb_func
 1230              		.fpu fpv4-sp-d16
 1232              	command_extra:
 1233              	.LVL98:
 1234              	.LFB292:
  91:quantum/command.c ****     (void)code;
 1235              		.loc 1 91 34 is_stmt 1 view -0
 1236              		.cfi_startproc
 1237              		@ args = 0, pretend = 0, frame = 0
 1238              		@ frame_needed = 0, uses_anonymous_args = 0
 1239              		@ link register save eliminated.
  92:quantum/command.c ****     return false;
 1240              		.loc 1 92 5 view .LVU286
  93:quantum/command.c **** }
 1241              		.loc 1 93 5 view .LVU287
  94:quantum/command.c **** 
 1242              		.loc 1 94 1 is_stmt 0 view .LVU288
 1243 0000 0020     		movs	r0, #0
 1244              	.LVL99:
  94:quantum/command.c **** 
 1245              		.loc 1 94 1 view .LVU289
 1246 0002 7047     		bx	lr
 1247              		.cfi_endproc
 1248              	.LFE292:
 1250              		.section	.text.command_console_extra,"ax",%progbits
 1251              		.align	1
 1252              		.weak	command_console_extra
 1253              		.syntax unified
 1254              		.thumb
 1255              		.thumb_func
 1256              		.fpu fpv4-sp-d16
 1258              	command_console_extra:
 1259              	.LFB306:
 1260              		.cfi_startproc
 1261              		@ args = 0, pretend = 0, frame = 0
 1262              		@ frame_needed = 0, uses_anonymous_args = 0
 1263              		@ link register save eliminated.
 1264 0000 0020     		movs	r0, #0
 1265 0002 7047     		bx	lr
 1266              		.cfi_endproc
 1267              	.LFE306:
 1269              		.section	.text.command_proc,"ax",%progbits
 1270              		.align	1
 1271              		.global	command_proc
 1272              		.syntax unified
 1273              		.thumb
 1274              		.thumb_func
 1275              		.fpu fpv4-sp-d16
 1277              	command_proc:
 1278              	.LVL100:
 1279              	.LFB291:
  64:quantum/command.c ****     switch (command_state) {
 1280              		.loc 1 64 33 is_stmt 1 view -0
 1281              		.cfi_startproc
 1282              		@ args = 0, pretend = 0, frame = 0
 1283              		@ frame_needed = 0, uses_anonymous_args = 0
  65:quantum/command.c ****         case ONESHOT:
 1284              		.loc 1 65 5 view .LVU291
  64:quantum/command.c ****     switch (command_state) {
 1285              		.loc 1 64 33 is_stmt 0 view .LVU292
 1286 0000 70B5     		push	{r4, r5, r6, lr}
 1287              		.cfi_def_cfa_offset 16
 1288              		.cfi_offset 4, -16
 1289              		.cfi_offset 5, -12
 1290              		.cfi_offset 6, -8
 1291              		.cfi_offset 14, -4
  65:quantum/command.c ****         case ONESHOT:
 1292              		.loc 1 65 5 view .LVU293
 1293 0002 264E     		ldr	r6, .L124
 1294 0004 3478     		ldrb	r4, [r6]	@ zero_extendqisi2
 1295 0006 012C     		cmp	r4, #1
  64:quantum/command.c ****     switch (command_state) {
 1296              		.loc 1 64 33 view .LVU294
 1297 0008 0546     		mov	r5, r0
  65:quantum/command.c ****         case ONESHOT:
 1298              		.loc 1 65 5 view .LVU295
 1299 000a 14D0     		beq	.L96
 1300 000c 022C     		cmp	r4, #2
 1301 000e 3FD0     		beq	.L97
 1302 0010 002C     		cmp	r4, #0
 1303 0012 40D1     		bne	.L98
  67:quantum/command.c ****             return (command_extra(code) || command_common(code));
 1304              		.loc 1 67 13 is_stmt 1 view .LVU296
  67:quantum/command.c ****             return (command_extra(code) || command_common(code));
 1305              		.loc 1 67 18 is_stmt 0 view .LVU297
 1306 0014 FFF7FEFF 		bl	get_mods
 1307              	.LVL101:
  67:quantum/command.c ****             return (command_extra(code) || command_common(code));
 1308              		.loc 1 67 16 view .LVU298
 1309 0018 2228     		cmp	r0, #34
 1310 001a 0AD1     		bne	.L99
  68:quantum/command.c ****             break;
 1311              		.loc 1 68 13 is_stmt 1 view .LVU299
  68:quantum/command.c ****             break;
 1312              		.loc 1 68 21 is_stmt 0 view .LVU300
 1313 001c 2846     		mov	r0, r5
 1314 001e FFF7FEFF 		bl	command_extra
 1315              	.LVL102:
  68:quantum/command.c ****             break;
 1316              		.loc 1 68 41 view .LVU301
 1317 0022 18B9     		cbnz	r0, .L110
 1318              	.L123:
  72:quantum/command.c ****             else
 1319              		.loc 1 72 48 discriminator 2 view .LVU302
 1320 0024 2846     		mov	r0, r5
 1321 0026 FFF7FEFF 		bl	command_common
 1322              	.LVL103:
 1323 002a 00E0     		b	.L102
 1324              	.L110:
  68:quantum/command.c ****             break;
 1325              		.loc 1 68 41 view .LVU303
 1326 002c 0120     		movs	r0, #1
 1327              	.L102:
  72:quantum/command.c ****             else
 1328              		.loc 1 72 45 discriminator 6 view .LVU304
 1329 002e 00F00104 		and	r4, r0, #1
 1330              	.L99:
  86:quantum/command.c **** 
 1331              		.loc 1 86 1 view .LVU305
 1332 0032 2046     		mov	r0, r4
 1333 0034 70BD     		pop	{r4, r5, r6, pc}
 1334              	.LVL104:
 1335              	.L96:
  69:quantum/command.c ****         case CONSOLE:
 1336              		.loc 1 69 13 is_stmt 1 view .LVU306
  71:quantum/command.c ****                 return (command_extra(code) || command_common(code));
 1337              		.loc 1 71 13 view .LVU307
  71:quantum/command.c ****                 return (command_extra(code) || command_common(code));
 1338              		.loc 1 71 17 is_stmt 0 view .LVU308
 1339 0036 FFF7FEFF 		bl	get_mods
 1340              	.LVL105:
  71:quantum/command.c ****                 return (command_extra(code) || command_common(code));
 1341              		.loc 1 71 16 view .LVU309
 1342 003a 2228     		cmp	r0, #34
  72:quantum/command.c ****             else
 1343              		.loc 1 72 25 view .LVU310
 1344 003c 2846     		mov	r0, r5
  71:quantum/command.c ****                 return (command_extra(code) || command_common(code));
 1345              		.loc 1 71 16 view .LVU311
 1346 003e 05D1     		bne	.L101
  72:quantum/command.c ****             else
 1347              		.loc 1 72 17 is_stmt 1 view .LVU312
  72:quantum/command.c ****             else
 1348              		.loc 1 72 25 is_stmt 0 view .LVU313
 1349 0040 FFF7FEFF 		bl	command_extra
 1350              	.LVL106:
  72:quantum/command.c ****             else
 1351              		.loc 1 72 45 view .LVU314
 1352 0044 0028     		cmp	r0, #0
 1353 0046 EDD0     		beq	.L123
 1354 0048 2046     		mov	r0, r4
 1355 004a F0E7     		b	.L102
 1356              	.L101:
  74:quantum/command.c ****             break;
 1357              		.loc 1 74 17 is_stmt 1 view .LVU315
  74:quantum/command.c ****             break;
 1358              		.loc 1 74 25 is_stmt 0 view .LVU316
 1359 004c FFF7FEFF 		bl	command_console_extra
 1360              	.LVL107:
  74:quantum/command.c ****             break;
 1361              		.loc 1 74 53 view .LVU317
 1362 0050 0028     		cmp	r0, #0
 1363 0052 EED1     		bne	.L99
 1364              	.LVL108:
 1365              	.LBB39:
 1366              	.LBI39:
 547:quantum/command.c ****     switch (code) {
 1367              		.loc 1 547 13 is_stmt 1 view .LVU318
 1368              	.LBB40:
 548:quantum/command.c ****         case KC_H:
 1369              		.loc 1 548 5 view .LVU319
 1370 0054 142D     		cmp	r5, #20
 1371 0056 1ED0     		beq	.L98
 1372 0058 08D8     		bhi	.L105
 1373 005a 0B2D     		cmp	r5, #11
 1374 005c 0AD0     		beq	.L106
 1375 005e 102D     		cmp	r5, #16
 1376 0060 10D0     		beq	.L107
 1377              	.L108:
 565:quantum/command.c ****             return false;
 1378              		.loc 1 565 13 view .LVU320
 1379 0062 0F48     		ldr	r0, .L124+4
 1380 0064 FFF7FEFF 		bl	printf_
 1381              	.LVL109:
 566:quantum/command.c ****     }
 1382              		.loc 1 566 13 view .LVU321
 566:quantum/command.c ****     }
 1383              		.loc 1 566 13 is_stmt 0 view .LVU322
 1384              	.LBE40:
 1385              	.LBE39:
  74:quantum/command.c ****             break;
 1386              		.loc 1 74 53 view .LVU323
 1387 0068 0024     		movs	r4, #0
 1388 006a E2E7     		b	.L99
 1389              	.LVL110:
 1390              	.L105:
 1391              	.LBB45:
 1392              	.LBB43:
 548:quantum/command.c ****         case KC_H:
 1393              		.loc 1 548 5 view .LVU324
 1394 006c 292D     		cmp	r5, #41
 1395 006e 12D0     		beq	.L98
 1396 0070 382D     		cmp	r5, #56
 1397 0072 F6D1     		bne	.L108
 1398              	.L106:
 551:quantum/command.c ****             print("C> ");
 1399              		.loc 1 551 13 is_stmt 1 view .LVU325
 1400              	.LBB41:
 1401              	.LBI41:
 538:quantum/command.c ****     print("\n\t- Console -\n"
 1402              		.loc 1 538 13 view .LVU326
 1403              	.LBB42:
 539:quantum/command.c ****           "ESC/q:	quit\n"
 1404              		.loc 1 539 5 view .LVU327
 1405 0074 0B48     		ldr	r0, .L124+8
 1406 0076 FFF7FEFF 		bl	printf_
 1407              	.LVL111:
 1408              	.LBE42:
 1409              	.LBE41:
 552:quantum/command.c ****             return true;
 1410              		.loc 1 552 13 view .LVU328
 1411 007a 0B48     		ldr	r0, .L124+12
 1412 007c FFF7FEFF 		bl	printf_
 1413              	.LVL112:
 553:quantum/command.c ****         case KC_Q:
 1414              		.loc 1 553 13 view .LVU329
 1415              	.L122:
 553:quantum/command.c ****         case KC_Q:
 1416              		.loc 1 553 13 is_stmt 0 view .LVU330
 1417              	.LBE43:
 1418              	.LBE45:
  79:quantum/command.c **** #endif
 1419              		.loc 1 79 13 is_stmt 1 view .LVU331
  85:quantum/command.c **** }
 1420              		.loc 1 85 5 view .LVU332
  85:quantum/command.c **** }
 1421              		.loc 1 85 12 is_stmt 0 view .LVU333
 1422 0080 0124     		movs	r4, #1
 1423 0082 D6E7     		b	.L99
 1424              	.LVL113:
 1425              	.L107:
 1426              	.LBB46:
 1427              	.LBB44:
 560:quantum/command.c ****             mousekey_console(KC_SLASH /* ? */);
 1428              		.loc 1 560 13 is_stmt 1 view .LVU334
 560:quantum/command.c ****             mousekey_console(KC_SLASH /* ? */);
 1429              		.loc 1 560 27 is_stmt 0 view .LVU335
 1430 0084 0223     		movs	r3, #2
 561:quantum/command.c ****             return true;
 1431              		.loc 1 561 13 view .LVU336
 1432 0086 3820     		movs	r0, #56
 560:quantum/command.c ****             mousekey_console(KC_SLASH /* ? */);
 1433              		.loc 1 560 27 view .LVU337
 1434 0088 3370     		strb	r3, [r6]
 561:quantum/command.c ****             return true;
 1435              		.loc 1 561 13 is_stmt 1 view .LVU338
 1436 008a FFF7FEFF 		bl	mousekey_console.isra.0
 1437              	.LVL114:
 562:quantum/command.c **** #endif
 1438              		.loc 1 562 13 view .LVU339
 562:quantum/command.c **** #endif
 1439              		.loc 1 562 13 is_stmt 0 view .LVU340
 1440 008e D0E7     		b	.L99
 1441              	.LVL115:
 1442              	.L97:
 562:quantum/command.c **** #endif
 1443              		.loc 1 562 13 view .LVU341
 1444              	.LBE44:
 1445              	.LBE46:
  75:quantum/command.c **** #if defined(MOUSEKEY_ENABLE) && !defined(MK_3_SPEED)
 1446              		.loc 1 75 13 is_stmt 1 view .LVU342
  78:quantum/command.c ****             break;
 1447              		.loc 1 78 13 view .LVU343
 1448 0090 FFF7FEFF 		bl	mousekey_console.isra.0
 1449              	.LVL116:
  78:quantum/command.c ****             break;
 1450              		.loc 1 78 13 is_stmt 0 view .LVU344
 1451 0094 F4E7     		b	.L122
 1452              	.L98:
  82:quantum/command.c ****             return false;
 1453              		.loc 1 82 13 is_stmt 1 view .LVU345
  82:quantum/command.c ****             return false;
 1454              		.loc 1 82 27 is_stmt 0 view .LVU346
 1455 0096 0024     		movs	r4, #0
 1456 0098 3470     		strb	r4, [r6]
  83:quantum/command.c ****     }
 1457              		.loc 1 83 13 is_stmt 1 view .LVU347
  83:quantum/command.c ****     }
 1458              		.loc 1 83 20 is_stmt 0 view .LVU348
 1459 009a CAE7     		b	.L99
 1460              	.L125:
 1461              		.align	2
 1462              	.L124:
 1463 009c 00000000 		.word	.LANCHOR0
 1464 00a0 38050000 		.word	.LC22
 1465 00a4 0E030000 		.word	.LC7
 1466 00a8 35030000 		.word	.LC8
 1467              		.cfi_endproc
 1468              	.LFE291:
 1470              		.global	command_state
 1471              		.section	.bss.command_state,"aw",%nobits
 1472              		.set	.LANCHOR0,. + 0
 1475              	command_state:
 1476 0000 00       		.space	1
 1477              		.section	.bss.desc.0,"aw",%nobits
 1478              		.align	2
 1479              		.set	.LANCHOR3,. + 0
 1482              	desc.0:
 1483 0000 00000000 		.space	4
 1484              		.section	.bss.param.2,"aw",%nobits
 1485              		.set	.LANCHOR1,. + 0
 1488              	param.2:
 1489 0000 00       		.space	1
 1490              		.section	.bss.pp.1,"aw",%nobits
 1491              		.align	2
 1492              		.set	.LANCHOR2,. + 0
 1495              	pp.1:
 1496 0000 00000000 		.space	4
 1497              		.text
 1498              	.Letext0:
 1499              		.file 2 "c:\\qmk_msys\\mingw64\\arm-none-eabi\\include\\machine\\_default_types.h"
 1500              		.file 3 "c:\\qmk_msys\\mingw64\\arm-none-eabi\\include\\sys\\_stdint.h"
 1501              		.file 4 "tmk_core/common/host.h"
 1502              		.file 5 "quantum/logging/debug.h"
 1503              		.file 6 "quantum/keycode_config.h"
 1504              		.file 7 "tmk_core/common/action_layer.h"
 1505              		.file 8 "quantum/sequencer/sequencer.h"
 1506              		.file 9 "quantum/command.h"
 1507              		.file 10 "quantum/mousekey.h"
 1508              		.file 11 "lib/printf/printf.h"
 1509              		.file 12 "tmk_core/common/action.h"
 1510              		.file 13 "tmk_core/common/eeconfig.h"
 1511              		.file 14 "tmk_core/common/timer.h"
 1512              		.file 15 "quantum/quantum.h"
 1513              		.file 16 "tmk_core/common/action_util.h"
 1514              		.file 17 "tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:24     .text.mousekey_param_print:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:31     .text.mousekey_param_print:0000000000000000 mousekey_param_print
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:70     .text.mousekey_param_print:000000000000002c $d
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:84     .text.switch_default_layer:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:90     .text.switch_default_layer:0000000000000000 switch_default_layer
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:130    .text.switch_default_layer:000000000000001c $d
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:202    .text.command_common:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:208    .text.command_common:0000000000000000 command_common
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:228    .text.command_common:0000000000000010 $d
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:291    .text.command_common:000000000000008e $t
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:718    .text.command_common:0000000000000240 $d
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:788    .text.mousekey_console.isra.0:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:794    .text.mousekey_console.isra.0:0000000000000000 mousekey_console.isra.0
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:889    .text.mousekey_console.isra.0:0000000000000058 $d
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:896    .text.mousekey_console.isra.0:000000000000005e $t
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:913    .text.mousekey_console.isra.0:0000000000000074 $d
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:918    .text.mousekey_console.isra.0:0000000000000084 $t
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:1195   .text.mousekey_console.isra.0:000000000000018c $d
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:1225   .text.command_extra:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:1232   .text.command_extra:0000000000000000 command_extra
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:1251   .text.command_console_extra:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:1258   .text.command_console_extra:0000000000000000 command_console_extra
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:1270   .text.command_proc:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:1277   .text.command_proc:0000000000000000 command_proc
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:1463   .text.command_proc:000000000000009c $d
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:1475   .bss.command_state:0000000000000000 command_state
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:1476   .bss.command_state:0000000000000000 $d
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:1478   .bss.desc.0:0000000000000000 $d
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:1482   .bss.desc.0:0000000000000000 desc.0
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:1488   .bss.param.2:0000000000000000 param.2
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:1489   .bss.param.2:0000000000000000 $d
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:1491   .bss.pp.1:0000000000000000 $d
C:\Users\lhanj\AppData\Local\Temp\ccFVSRyi.s:1495   .bss.pp.1:0000000000000000 pp.1

UNDEFINED SYMBOLS
printf_
mk_wheel_time_to_max
mk_interval
mk_wheel_max_speed
mk_delay
mk_time_to_max
mk_max_speed
default_layer_set
clear_keyboard
eeconfig_read_default_layer
eeconfig_read_debug
eeconfig_read_keymap
eeconfig_init
reset_keyboard
host_keyboard_leds
timer_read32
debug_config
keyboard_protocol
keyboard_idle
keymap_config
get_mods

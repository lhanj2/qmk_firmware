   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"chthreads.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._thread_init,"ax",%progbits
  18              		.align	1
  19              		.global	_thread_init
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	_thread_init:
  27              	.LVL0:
  28              	.LFB239:
  29              		.file 1 "lib/chibios/os/rt/src/chthreads.c"
   1:lib/chibios/os/rt/src/chthreads.c **** /*
   2:lib/chibios/os/rt/src/chthreads.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:lib/chibios/os/rt/src/chthreads.c **** 
   4:lib/chibios/os/rt/src/chthreads.c ****     This file is part of ChibiOS.
   5:lib/chibios/os/rt/src/chthreads.c **** 
   6:lib/chibios/os/rt/src/chthreads.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:lib/chibios/os/rt/src/chthreads.c ****     it under the terms of the GNU General Public License as published by
   8:lib/chibios/os/rt/src/chthreads.c ****     the Free Software Foundation; either version 3 of the License, or
   9:lib/chibios/os/rt/src/chthreads.c ****     (at your option) any later version.
  10:lib/chibios/os/rt/src/chthreads.c **** 
  11:lib/chibios/os/rt/src/chthreads.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:lib/chibios/os/rt/src/chthreads.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:lib/chibios/os/rt/src/chthreads.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:lib/chibios/os/rt/src/chthreads.c ****     GNU General Public License for more details.
  15:lib/chibios/os/rt/src/chthreads.c **** 
  16:lib/chibios/os/rt/src/chthreads.c ****     You should have received a copy of the GNU General Public License
  17:lib/chibios/os/rt/src/chthreads.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:lib/chibios/os/rt/src/chthreads.c **** */
  19:lib/chibios/os/rt/src/chthreads.c **** 
  20:lib/chibios/os/rt/src/chthreads.c **** /**
  21:lib/chibios/os/rt/src/chthreads.c ****  * @file    rt/src/chthreads.c
  22:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Threads code.
  23:lib/chibios/os/rt/src/chthreads.c ****  *
  24:lib/chibios/os/rt/src/chthreads.c ****  * @addtogroup threads
  25:lib/chibios/os/rt/src/chthreads.c ****  * @details Threads related APIs and services.
  26:lib/chibios/os/rt/src/chthreads.c ****  *          <h2>Operation mode</h2>
  27:lib/chibios/os/rt/src/chthreads.c ****  *          A thread is an abstraction of an independent instructions flow.
  28:lib/chibios/os/rt/src/chthreads.c ****  *          In ChibiOS/RT a thread is represented by a "C" function owning
  29:lib/chibios/os/rt/src/chthreads.c ****  *          a processor context, state informations and a dedicated stack
  30:lib/chibios/os/rt/src/chthreads.c ****  *          area. In this scenario static variables are shared among all
  31:lib/chibios/os/rt/src/chthreads.c ****  *          threads while automatic variables are local to the thread.<br>
  32:lib/chibios/os/rt/src/chthreads.c ****  *          Operations defined for threads:
  33:lib/chibios/os/rt/src/chthreads.c ****  *          - <b>Create</b>, a thread is started on the specified thread
  34:lib/chibios/os/rt/src/chthreads.c ****  *            function. This operation is available in multiple variants,
  35:lib/chibios/os/rt/src/chthreads.c ****  *            both static and dynamic.
  36:lib/chibios/os/rt/src/chthreads.c ****  *          - <b>Exit</b>, a thread terminates by returning from its top
  37:lib/chibios/os/rt/src/chthreads.c ****  *            level function or invoking a specific API, the thread can
  38:lib/chibios/os/rt/src/chthreads.c ****  *            return a value that can be retrieved by other threads.
  39:lib/chibios/os/rt/src/chthreads.c ****  *          - <b>Wait</b>, a thread waits for the termination of another
  40:lib/chibios/os/rt/src/chthreads.c ****  *            thread and retrieves its return value.
  41:lib/chibios/os/rt/src/chthreads.c ****  *          - <b>Resume</b>, a thread created in suspended state is started.
  42:lib/chibios/os/rt/src/chthreads.c ****  *          - <b>Sleep</b>, the execution of a thread is suspended for the
  43:lib/chibios/os/rt/src/chthreads.c ****  *            specified amount of time or the specified future absolute time
  44:lib/chibios/os/rt/src/chthreads.c ****  *            is reached.
  45:lib/chibios/os/rt/src/chthreads.c ****  *          - <b>SetPriority</b>, a thread changes its own priority level.
  46:lib/chibios/os/rt/src/chthreads.c ****  *          - <b>Yield</b>, a thread voluntarily renounces to its time slot.
  47:lib/chibios/os/rt/src/chthreads.c ****  *          .
  48:lib/chibios/os/rt/src/chthreads.c ****  * @{
  49:lib/chibios/os/rt/src/chthreads.c ****  */
  50:lib/chibios/os/rt/src/chthreads.c **** 
  51:lib/chibios/os/rt/src/chthreads.c **** #include "ch.h"
  52:lib/chibios/os/rt/src/chthreads.c **** 
  53:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  54:lib/chibios/os/rt/src/chthreads.c **** /* Module local definitions.                                                 */
  55:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  56:lib/chibios/os/rt/src/chthreads.c **** 
  57:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  58:lib/chibios/os/rt/src/chthreads.c **** /* Module exported variables.                                                */
  59:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  60:lib/chibios/os/rt/src/chthreads.c **** 
  61:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  62:lib/chibios/os/rt/src/chthreads.c **** /* Module local types.                                                       */
  63:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  64:lib/chibios/os/rt/src/chthreads.c **** 
  65:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  66:lib/chibios/os/rt/src/chthreads.c **** /* Module local variables.                                                   */
  67:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  68:lib/chibios/os/rt/src/chthreads.c **** 
  69:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  70:lib/chibios/os/rt/src/chthreads.c **** /* Module local functions.                                                   */
  71:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  72:lib/chibios/os/rt/src/chthreads.c **** 
  73:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  74:lib/chibios/os/rt/src/chthreads.c **** /* Module exported functions.                                                */
  75:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  76:lib/chibios/os/rt/src/chthreads.c **** 
  77:lib/chibios/os/rt/src/chthreads.c **** /**
  78:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Initializes a thread structure.
  79:lib/chibios/os/rt/src/chthreads.c ****  * @note    This is an internal functions, do not use it in application code.
  80:lib/chibios/os/rt/src/chthreads.c ****  *
  81:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
  82:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] name      thread name
  83:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] prio      the priority level for the new thread
  84:lib/chibios/os/rt/src/chthreads.c ****  * @return              The same thread pointer passed as parameter.
  85:lib/chibios/os/rt/src/chthreads.c ****  *
  86:lib/chibios/os/rt/src/chthreads.c ****  * @notapi
  87:lib/chibios/os/rt/src/chthreads.c ****  */
  88:lib/chibios/os/rt/src/chthreads.c **** thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {
  30              		.loc 1 88 70 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  89:lib/chibios/os/rt/src/chthreads.c **** 
  90:lib/chibios/os/rt/src/chthreads.c ****   tp->prio      = prio;
  35              		.loc 1 90 3 view .LVU1
  36              		.loc 1 90 17 is_stmt 0 view .LVU2
  37 0000 8260     		str	r2, [r0, #8]
  91:lib/chibios/os/rt/src/chthreads.c ****   tp->state     = CH_STATE_WTSTART;
  38              		.loc 1 91 3 is_stmt 1 view .LVU3
  92:lib/chibios/os/rt/src/chthreads.c ****   tp->flags     = CH_FLAG_MODE_STATIC;
  39              		.loc 1 92 3 view .LVU4
  91:lib/chibios/os/rt/src/chthreads.c ****   tp->state     = CH_STATE_WTSTART;
  40              		.loc 1 91 17 is_stmt 0 view .LVU5
  41 0002 0221     		movs	r1, #2
  42              	.LVL1:
  93:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
  94:lib/chibios/os/rt/src/chthreads.c ****   tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
  95:lib/chibios/os/rt/src/chthreads.c **** #endif
  96:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_MUTEXES == TRUE
  97:lib/chibios/os/rt/src/chthreads.c ****   tp->realprio  = prio;
  43              		.loc 1 97 17 view .LVU6
  44 0004 0262     		str	r2, [r0, #32]
  98:lib/chibios/os/rt/src/chthreads.c ****   tp->mtxlist   = NULL;
  45              		.loc 1 98 17 view .LVU7
  46 0006 0022     		movs	r2, #0
  47              	.LVL2:
  99:lib/chibios/os/rt/src/chthreads.c **** #endif
 100:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_EVENTS == TRUE
 101:lib/chibios/os/rt/src/chthreads.c ****   tp->epending  = (eventmask_t)0;
  48              		.loc 1 101 17 view .LVU8
  49 0008 C0E90622 		strd	r2, r2, [r0, #24]
  91:lib/chibios/os/rt/src/chthreads.c ****   tp->flags     = CH_FLAG_MODE_STATIC;
  50              		.loc 1 91 17 view .LVU9
  51 000c 0182     		strh	r1, [r0, #16]	@ movhi
  97:lib/chibios/os/rt/src/chthreads.c ****   tp->mtxlist   = NULL;
  52              		.loc 1 97 3 is_stmt 1 view .LVU10
  98:lib/chibios/os/rt/src/chthreads.c **** #endif
  53              		.loc 1 98 3 view .LVU11
 102:lib/chibios/os/rt/src/chthreads.c **** #endif
 103:lib/chibios/os/rt/src/chthreads.c **** #if CH_DBG_THREADS_PROFILING == TRUE
 104:lib/chibios/os/rt/src/chthreads.c ****   tp->time      = (systime_t)0;
 105:lib/chibios/os/rt/src/chthreads.c **** #endif
 106:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 107:lib/chibios/os/rt/src/chthreads.c ****   tp->refs      = (trefs_t)1;
 108:lib/chibios/os/rt/src/chthreads.c ****   tp->name      = name;
 109:lib/chibios/os/rt/src/chthreads.c ****   REG_INSERT(tp);
 110:lib/chibios/os/rt/src/chthreads.c **** #else
 111:lib/chibios/os/rt/src/chthreads.c ****   (void)name;
  54              		.loc 1 111 3 view .LVU12
 112:lib/chibios/os/rt/src/chthreads.c **** #endif
 113:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_WAITEXIT == TRUE
 114:lib/chibios/os/rt/src/chthreads.c ****   list_init(&tp->waiting);
 115:lib/chibios/os/rt/src/chthreads.c **** #endif
 116:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_MESSAGES == TRUE
 117:lib/chibios/os/rt/src/chthreads.c ****   queue_init(&tp->msgqueue);
 118:lib/chibios/os/rt/src/chthreads.c **** #endif
 119:lib/chibios/os/rt/src/chthreads.c **** #if CH_DBG_STATISTICS == TRUE
 120:lib/chibios/os/rt/src/chthreads.c ****   chTMObjectInit(&tp->stats);
 121:lib/chibios/os/rt/src/chthreads.c **** #endif
 122:lib/chibios/os/rt/src/chthreads.c ****   CH_CFG_THREAD_INIT_HOOK(tp);
  55              		.loc 1 122 3 view .LVU13
  56              		.loc 1 122 30 view .LVU14
 123:lib/chibios/os/rt/src/chthreads.c ****   return tp;
  57              		.loc 1 123 3 view .LVU15
 124:lib/chibios/os/rt/src/chthreads.c **** }
  58              		.loc 1 124 1 is_stmt 0 view .LVU16
  59 000e 7047     		bx	lr
  60              		.cfi_endproc
  61              	.LFE239:
  63              		.section	.text.chThdCreateSuspendedI,"ax",%progbits
  64              		.align	1
  65              		.global	chThdCreateSuspendedI
  66              		.syntax unified
  67              		.thumb
  68              		.thumb_func
  69              		.fpu fpv4-sp-d16
  71              	chThdCreateSuspendedI:
  72              	.LVL3:
  73              	.LFB240:
 125:lib/chibios/os/rt/src/chthreads.c **** 
 126:lib/chibios/os/rt/src/chthreads.c **** #if (CH_DBG_FILL_THREADS == TRUE) || defined(__DOXYGEN__)
 127:lib/chibios/os/rt/src/chthreads.c **** /**
 128:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Memory fill utility.
 129:lib/chibios/os/rt/src/chthreads.c ****  *
 130:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] startp    first address to fill
 131:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] endp      last address to fill +1
 132:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] v         filler value
 133:lib/chibios/os/rt/src/chthreads.c ****  *
 134:lib/chibios/os/rt/src/chthreads.c ****  * @notapi
 135:lib/chibios/os/rt/src/chthreads.c ****  */
 136:lib/chibios/os/rt/src/chthreads.c **** void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {
 137:lib/chibios/os/rt/src/chthreads.c **** 
 138:lib/chibios/os/rt/src/chthreads.c ****   while (startp < endp) {
 139:lib/chibios/os/rt/src/chthreads.c ****     *startp++ = v;
 140:lib/chibios/os/rt/src/chthreads.c ****   }
 141:lib/chibios/os/rt/src/chthreads.c **** }
 142:lib/chibios/os/rt/src/chthreads.c **** #endif /* CH_DBG_FILL_THREADS */
 143:lib/chibios/os/rt/src/chthreads.c **** 
 144:lib/chibios/os/rt/src/chthreads.c **** /**
 145:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 146:lib/chibios/os/rt/src/chthreads.c ****  * @details The new thread is initialized but not inserted in the ready list,
 147:lib/chibios/os/rt/src/chthreads.c ****  *          the initial state is @p CH_STATE_WTSTART.
 148:lib/chibios/os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 149:lib/chibios/os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 150:lib/chibios/os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 151:lib/chibios/os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 152:lib/chibios/os/rt/src/chthreads.c ****  * @post    The initialized thread can be subsequently started by invoking
 153:lib/chibios/os/rt/src/chthreads.c ****  *          @p chThdStart(), @p chThdStartI() or @p chSchWakeupS()
 154:lib/chibios/os/rt/src/chthreads.c ****  *          depending on the execution context.
 155:lib/chibios/os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 156:lib/chibios/os/rt/src/chthreads.c ****  *          returning from its main function.
 157:lib/chibios/os/rt/src/chthreads.c ****  * @note    Threads created using this function do not obey to the
 158:lib/chibios/os/rt/src/chthreads.c ****  *          @p CH_DBG_FILL_THREADS debug option because it would keep
 159:lib/chibios/os/rt/src/chthreads.c ****  *          the kernel locked for too much time.
 160:lib/chibios/os/rt/src/chthreads.c ****  *
 161:lib/chibios/os/rt/src/chthreads.c ****  * @param[out] tdp      pointer to the thread descriptor
 162:lib/chibios/os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 163:lib/chibios/os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 164:lib/chibios/os/rt/src/chthreads.c ****  *
 165:lib/chibios/os/rt/src/chthreads.c ****  * @iclass
 166:lib/chibios/os/rt/src/chthreads.c ****  */
 167:lib/chibios/os/rt/src/chthreads.c **** thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
  74              		.loc 1 167 65 is_stmt 1 view -0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              		@ link register save eliminated.
 168:lib/chibios/os/rt/src/chthreads.c ****   thread_t *tp;
  79              		.loc 1 168 3 view .LVU18
 169:lib/chibios/os/rt/src/chthreads.c **** 
 170:lib/chibios/os/rt/src/chthreads.c ****   chDbgCheckClassI();
  80              		.loc 1 170 21 view .LVU19
 171:lib/chibios/os/rt/src/chthreads.c ****   chDbgCheck(tdp != NULL);
  81              		.loc 1 171 3 view .LVU20
  82              		.loc 1 171 3 view .LVU21
  83              		.loc 1 171 3 view .LVU22
 172:lib/chibios/os/rt/src/chthreads.c ****   chDbgCheck(MEM_IS_ALIGNED(tdp->wbase, PORT_WORKING_AREA_ALIGN) &&
  84              		.loc 1 172 3 view .LVU23
  85              		.loc 1 172 3 view .LVU24
  86              		.loc 1 172 3 view .LVU25
 173:lib/chibios/os/rt/src/chthreads.c ****              MEM_IS_ALIGNED(tdp->wend, PORT_STACK_ALIGN) &&
 174:lib/chibios/os/rt/src/chthreads.c ****              (tdp->wend > tdp->wbase) &&
 175:lib/chibios/os/rt/src/chthreads.c ****              (((size_t)tdp->wend - (size_t)tdp->wbase) >= THD_WORKING_AREA_SIZE(0)));
 176:lib/chibios/os/rt/src/chthreads.c ****   chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));
  87              		.loc 1 176 3 view .LVU26
  88              		.loc 1 176 3 view .LVU27
  89              		.loc 1 176 3 view .LVU28
 177:lib/chibios/os/rt/src/chthreads.c **** 
 178:lib/chibios/os/rt/src/chthreads.c ****   /* The thread structure is laid out in the upper part of the thread
 179:lib/chibios/os/rt/src/chthreads.c ****      workspace. The thread position structure is aligned to the required
 180:lib/chibios/os/rt/src/chthreads.c ****      stack alignment because it represents the stack top.*/
 181:lib/chibios/os/rt/src/chthreads.c ****   tp = (thread_t *)((uint8_t *)tdp->wend -
  90              		.loc 1 181 3 view .LVU29
  91              		.loc 1 181 35 is_stmt 0 view .LVU30
  92 0000 8368     		ldr	r3, [r0, #8]
  93              	.LVL4:
 182:lib/chibios/os/rt/src/chthreads.c ****                     MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));
 183:lib/chibios/os/rt/src/chthreads.c **** 
 184:lib/chibios/os/rt/src/chthreads.c **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
 185:lib/chibios/os/rt/src/chthreads.c ****   /* Stack boundary.*/
 186:lib/chibios/os/rt/src/chthreads.c ****   tp->wabase = tdp->wbase;
 187:lib/chibios/os/rt/src/chthreads.c **** #endif
 188:lib/chibios/os/rt/src/chthreads.c **** 
 189:lib/chibios/os/rt/src/chthreads.c ****   /* Setting up the port-dependent part of the working area.*/
 190:lib/chibios/os/rt/src/chthreads.c ****   PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  94              		.loc 1 190 3 is_stmt 1 view .LVU31
 191:lib/chibios/os/rt/src/chthreads.c **** 
 192:lib/chibios/os/rt/src/chthreads.c ****   /* The driver object is initialized but not started.*/
 193:lib/chibios/os/rt/src/chthreads.c ****   return _thread_init(tp, tdp->name, tdp->prio);
  95              		.loc 1 193 10 is_stmt 0 view .LVU32
  96 0002 C168     		ldr	r1, [r0, #12]
 190:lib/chibios/os/rt/src/chthreads.c **** 
  97              		.loc 1 190 3 view .LVU33
  98 0004 A3F18C02 		sub	r2, r3, #140
  99 0008 43F81C2C 		str	r2, [r3, #-28]
 190:lib/chibios/os/rt/src/chthreads.c **** 
 100              		.loc 1 190 3 is_stmt 1 view .LVU34
 101 000c 0269     		ldr	r2, [r0, #16]
 102 000e 43F84C2C 		str	r2, [r3, #-76]
 190:lib/chibios/os/rt/src/chthreads.c **** 
 103              		.loc 1 190 3 view .LVU35
 104 0012 4269     		ldr	r2, [r0, #20]
 105 0014 43F8482C 		str	r2, [r3, #-72]
 190:lib/chibios/os/rt/src/chthreads.c **** 
 106              		.loc 1 190 3 view .LVU36
 107 0018 084A     		ldr	r2, .L3
 108 001a 43F82C2C 		str	r2, [r3, #-44]
 190:lib/chibios/os/rt/src/chthreads.c **** 
 109              		.loc 1 190 3 view .LVU37
 190:lib/chibios/os/rt/src/chthreads.c **** 
 110              		.loc 1 190 3 view .LVU38
 190:lib/chibios/os/rt/src/chthreads.c **** 
 111              		.loc 1 190 63 view .LVU39
 112              		.loc 1 193 3 view .LVU40
 113              	.LVL5:
 114              	.LBB163:
 115              	.LBI163:
  88:lib/chibios/os/rt/src/chthreads.c **** 
 116              		.loc 1 88 11 view .LVU41
 117              	.LBB164:
  90:lib/chibios/os/rt/src/chthreads.c ****   tp->state     = CH_STATE_WTSTART;
 118              		.loc 1 90 3 view .LVU42
  91:lib/chibios/os/rt/src/chthreads.c ****   tp->flags     = CH_FLAG_MODE_STATIC;
 119              		.loc 1 91 17 is_stmt 0 view .LVU43
 120 001e 0222     		movs	r2, #2
 121 0020 03F8182C 		strb	r2, [r3, #-24]
 122              	.LVL6:
  92:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
 123              		.loc 1 92 17 view .LVU44
 124 0024 0022     		movs	r2, #0
  98:lib/chibios/os/rt/src/chthreads.c **** #endif
 125              		.loc 1 98 17 view .LVU45
 126 0026 43E90321 		strd	r2, r1, [r3, #-12]
  90:lib/chibios/os/rt/src/chthreads.c ****   tp->state     = CH_STATE_WTSTART;
 127              		.loc 1 90 17 view .LVU46
 128 002a 43F8201C 		str	r1, [r3, #-32]
  91:lib/chibios/os/rt/src/chthreads.c ****   tp->flags     = CH_FLAG_MODE_STATIC;
 129              		.loc 1 91 3 is_stmt 1 view .LVU47
  92:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
 130              		.loc 1 92 3 view .LVU48
  92:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
 131              		.loc 1 92 17 is_stmt 0 view .LVU49
 132 002e 03F8172C 		strb	r2, [r3, #-23]
  97:lib/chibios/os/rt/src/chthreads.c ****   tp->mtxlist   = NULL;
 133              		.loc 1 97 3 is_stmt 1 view .LVU50
 101:lib/chibios/os/rt/src/chthreads.c **** #endif
 134              		.loc 1 101 3 view .LVU51
 101:lib/chibios/os/rt/src/chthreads.c **** #endif
 135              		.loc 1 101 17 is_stmt 0 view .LVU52
 136 0032 43F8102C 		str	r2, [r3, #-16]
 111:lib/chibios/os/rt/src/chthreads.c **** #endif
 137              		.loc 1 111 3 is_stmt 1 view .LVU53
 122:lib/chibios/os/rt/src/chthreads.c ****   return tp;
 138              		.loc 1 122 3 view .LVU54
 122:lib/chibios/os/rt/src/chthreads.c ****   return tp;
 139              		.loc 1 122 30 view .LVU55
 123:lib/chibios/os/rt/src/chthreads.c **** }
 140              		.loc 1 123 3 view .LVU56
 141              	.LVL7:
 123:lib/chibios/os/rt/src/chthreads.c **** }
 142              		.loc 1 123 3 is_stmt 0 view .LVU57
 143              	.LBE164:
 144              	.LBE163:
 194:lib/chibios/os/rt/src/chthreads.c **** }
 145              		.loc 1 194 1 view .LVU58
 146 0036 A3F12800 		sub	r0, r3, #40
 147              	.LVL8:
 148              		.loc 1 194 1 view .LVU59
 149 003a 7047     		bx	lr
 150              	.L4:
 151              		.align	2
 152              	.L3:
 153 003c 00000000 		.word	_port_thread_start
 154              		.cfi_endproc
 155              	.LFE240:
 157              		.section	.text.chThdCreateSuspended,"ax",%progbits
 158              		.align	1
 159              		.global	chThdCreateSuspended
 160              		.syntax unified
 161              		.thumb
 162              		.thumb_func
 163              		.fpu fpv4-sp-d16
 165              	chThdCreateSuspended:
 166              	.LVL9:
 167              	.LFB241:
 195:lib/chibios/os/rt/src/chthreads.c **** 
 196:lib/chibios/os/rt/src/chthreads.c **** /**
 197:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 198:lib/chibios/os/rt/src/chthreads.c ****  * @details The new thread is initialized but not inserted in the ready list,
 199:lib/chibios/os/rt/src/chthreads.c ****  *          the initial state is @p CH_STATE_WTSTART.
 200:lib/chibios/os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 201:lib/chibios/os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 202:lib/chibios/os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 203:lib/chibios/os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 204:lib/chibios/os/rt/src/chthreads.c ****  * @post    The initialized thread can be subsequently started by invoking
 205:lib/chibios/os/rt/src/chthreads.c ****  *          @p chThdStart(), @p chThdStartI() or @p chSchWakeupS()
 206:lib/chibios/os/rt/src/chthreads.c ****  *          depending on the execution context.
 207:lib/chibios/os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 208:lib/chibios/os/rt/src/chthreads.c ****  *          returning from its main function.
 209:lib/chibios/os/rt/src/chthreads.c ****  *
 210:lib/chibios/os/rt/src/chthreads.c ****  * @param[out] tdp      pointer to the thread descriptor
 211:lib/chibios/os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 212:lib/chibios/os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 213:lib/chibios/os/rt/src/chthreads.c ****  *
 214:lib/chibios/os/rt/src/chthreads.c ****  * @api
 215:lib/chibios/os/rt/src/chthreads.c ****  */
 216:lib/chibios/os/rt/src/chthreads.c **** thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp) {
 168              		.loc 1 216 64 is_stmt 1 view -0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 0
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 217:lib/chibios/os/rt/src/chthreads.c ****   thread_t *tp;
 172              		.loc 1 217 3 view .LVU61
 218:lib/chibios/os/rt/src/chthreads.c **** 
 219:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 220:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 221:lib/chibios/os/rt/src/chthreads.c ****               "working area in use");
 222:lib/chibios/os/rt/src/chthreads.c **** #endif
 223:lib/chibios/os/rt/src/chthreads.c **** 
 224:lib/chibios/os/rt/src/chthreads.c **** #if CH_DBG_FILL_THREADS == TRUE
 225:lib/chibios/os/rt/src/chthreads.c ****   _thread_memfill((uint8_t *)tdp->wbase,
 226:lib/chibios/os/rt/src/chthreads.c ****                   (uint8_t *)tdp->wend,
 227:lib/chibios/os/rt/src/chthreads.c ****                   CH_DBG_STACK_FILL_VALUE);
 228:lib/chibios/os/rt/src/chthreads.c **** #endif
 229:lib/chibios/os/rt/src/chthreads.c **** 
 230:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 173              		.loc 1 230 3 view .LVU62
 174              	.LBB165:
 175              	.LBI165:
 176              		.file 2 "./lib/chibios/os/rt/include/chsys.h"
   1:./lib/chibios/os/rt/include/chsys.h **** /*
   2:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chsys.h **** 
   4:./lib/chibios/os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chsys.h **** 
   6:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chsys.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chsys.h **** 
  11:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chsys.h **** 
  16:./lib/chibios/os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chsys.h **** */
  19:./lib/chibios/os/rt/include/chsys.h **** 
  20:./lib/chibios/os/rt/include/chsys.h **** /**
  21:./lib/chibios/os/rt/include/chsys.h ****  * @file    rt/include/chsys.h
  22:./lib/chibios/os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:./lib/chibios/os/rt/include/chsys.h ****  *
  24:./lib/chibios/os/rt/include/chsys.h ****  * @addtogroup system
  25:./lib/chibios/os/rt/include/chsys.h ****  * @{
  26:./lib/chibios/os/rt/include/chsys.h ****  */
  27:./lib/chibios/os/rt/include/chsys.h **** 
  28:./lib/chibios/os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:./lib/chibios/os/rt/include/chsys.h **** #define CHSYS_H
  30:./lib/chibios/os/rt/include/chsys.h **** 
  31:./lib/chibios/os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:./lib/chibios/os/rt/include/chsys.h **** 
  33:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chsys.h **** 
  37:./lib/chibios/os/rt/include/chsys.h **** /**
  38:./lib/chibios/os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:./lib/chibios/os/rt/include/chsys.h ****  * @{
  40:./lib/chibios/os/rt/include/chsys.h ****  */
  41:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:./lib/chibios/os/rt/include/chsys.h **** /** @} */
  46:./lib/chibios/os/rt/include/chsys.h **** 
  47:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  48:./lib/chibios/os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  50:./lib/chibios/os/rt/include/chsys.h **** 
  51:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  52:./lib/chibios/os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  54:./lib/chibios/os/rt/include/chsys.h **** 
  55:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  56:./lib/chibios/os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  58:./lib/chibios/os/rt/include/chsys.h **** 
  59:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  60:./lib/chibios/os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  62:./lib/chibios/os/rt/include/chsys.h **** 
  63:./lib/chibios/os/rt/include/chsys.h **** /**
  64:./lib/chibios/os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:./lib/chibios/os/rt/include/chsys.h ****  */
  66:./lib/chibios/os/rt/include/chsys.h **** /**
  67:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  68:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  69:./lib/chibios/os/rt/include/chsys.h ****  *          level for the underlying architecture.
  70:./lib/chibios/os/rt/include/chsys.h ****  *
  71:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  72:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  73:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  74:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  75:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  76:./lib/chibios/os/rt/include/chsys.h ****  */
  77:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  78:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  79:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  80:./lib/chibios/os/rt/include/chsys.h **** #else
  81:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  82:./lib/chibios/os/rt/include/chsys.h **** #endif
  83:./lib/chibios/os/rt/include/chsys.h **** 
  84:./lib/chibios/os/rt/include/chsys.h **** /**
  85:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  86:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  87:./lib/chibios/os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  88:./lib/chibios/os/rt/include/chsys.h ****  *
  89:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  90:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  91:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  92:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  93:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  94:./lib/chibios/os/rt/include/chsys.h ****  */
  95:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  96:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  97:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  98:./lib/chibios/os/rt/include/chsys.h **** #else
  99:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 100:./lib/chibios/os/rt/include/chsys.h **** #endif
 101:./lib/chibios/os/rt/include/chsys.h **** 
 102:./lib/chibios/os/rt/include/chsys.h **** /**
 103:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 104:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 105:./lib/chibios/os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 106:./lib/chibios/os/rt/include/chsys.h ****  *
 107:./lib/chibios/os/rt/include/chsys.h ****  * @special
 108:./lib/chibios/os/rt/include/chsys.h ****  */
 109:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 110:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 111:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 112:./lib/chibios/os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 113:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 114:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 115:./lib/chibios/os/rt/include/chsys.h **** 
 116:./lib/chibios/os/rt/include/chsys.h **** /**
 117:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 118:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 119:./lib/chibios/os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 120:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 121:./lib/chibios/os/rt/include/chsys.h ****  *
 122:./lib/chibios/os/rt/include/chsys.h ****  * @special
 123:./lib/chibios/os/rt/include/chsys.h ****  */
 124:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 125:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 126:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 127:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 128:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 129:./lib/chibios/os/rt/include/chsys.h **** 
 130:./lib/chibios/os/rt/include/chsys.h **** /**
 131:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 132:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 133:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 134:./lib/chibios/os/rt/include/chsys.h ****  *
 135:./lib/chibios/os/rt/include/chsys.h ****  * @special
 136:./lib/chibios/os/rt/include/chsys.h ****  */
 137:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 138:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 139:./lib/chibios/os/rt/include/chsys.h **** 
 140:./lib/chibios/os/rt/include/chsys.h **** /**
 141:./lib/chibios/os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 142:./lib/chibios/os/rt/include/chsys.h ****  */
 143:./lib/chibios/os/rt/include/chsys.h **** /**
 144:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 145:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 146:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 147:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 148:./lib/chibios/os/rt/include/chsys.h ****  *
 149:./lib/chibios/os/rt/include/chsys.h ****  * @special
 150:./lib/chibios/os/rt/include/chsys.h ****  */
 151:./lib/chibios/os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 152:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 153:./lib/chibios/os/rt/include/chsys.h **** 
 154:./lib/chibios/os/rt/include/chsys.h **** /**
 155:./lib/chibios/os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 156:./lib/chibios/os/rt/include/chsys.h ****  * @{
 157:./lib/chibios/os/rt/include/chsys.h ****  */
 158:./lib/chibios/os/rt/include/chsys.h **** /**
 159:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 160:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 161:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 162:./lib/chibios/os/rt/include/chsys.h ****  *
 163:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 164:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 165:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 166:./lib/chibios/os/rt/include/chsys.h ****  *
 167:./lib/chibios/os/rt/include/chsys.h ****  * @api
 168:./lib/chibios/os/rt/include/chsys.h ****  */
 169:./lib/chibios/os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 170:./lib/chibios/os/rt/include/chsys.h **** 
 171:./lib/chibios/os/rt/include/chsys.h **** /**
 172:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 173:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 174:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 175:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 176:./lib/chibios/os/rt/include/chsys.h ****  *
 177:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 178:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 179:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 180:./lib/chibios/os/rt/include/chsys.h ****  *
 181:./lib/chibios/os/rt/include/chsys.h ****  * @api
 182:./lib/chibios/os/rt/include/chsys.h ****  */
 183:./lib/chibios/os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 184:./lib/chibios/os/rt/include/chsys.h **** 
 185:./lib/chibios/os/rt/include/chsys.h **** /**
 186:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 187:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 188:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 189:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 190:./lib/chibios/os/rt/include/chsys.h ****  *
 191:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 192:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 193:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 194:./lib/chibios/os/rt/include/chsys.h ****  *
 195:./lib/chibios/os/rt/include/chsys.h ****  * @api
 196:./lib/chibios/os/rt/include/chsys.h ****  */
 197:./lib/chibios/os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 198:./lib/chibios/os/rt/include/chsys.h **** 
 199:./lib/chibios/os/rt/include/chsys.h **** /**
 200:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 201:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 202:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 203:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 204:./lib/chibios/os/rt/include/chsys.h ****  *
 205:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 206:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 207:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of seconds.
 208:./lib/chibios/os/rt/include/chsys.h ****  *
 209:./lib/chibios/os/rt/include/chsys.h ****  * @api
 210:./lib/chibios/os/rt/include/chsys.h ****  */
 211:./lib/chibios/os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 212:./lib/chibios/os/rt/include/chsys.h **** 
 213:./lib/chibios/os/rt/include/chsys.h **** /**
 214:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 215:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 216:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 217:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 218:./lib/chibios/os/rt/include/chsys.h ****  *
 219:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 220:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 221:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 222:./lib/chibios/os/rt/include/chsys.h ****  *
 223:./lib/chibios/os/rt/include/chsys.h ****  * @api
 224:./lib/chibios/os/rt/include/chsys.h ****  */
 225:./lib/chibios/os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 226:./lib/chibios/os/rt/include/chsys.h **** 
 227:./lib/chibios/os/rt/include/chsys.h **** /**
 228:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 229:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 230:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 231:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 232:./lib/chibios/os/rt/include/chsys.h ****  *
 233:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 234:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 235:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of microseconds.
 236:./lib/chibios/os/rt/include/chsys.h ****  *
 237:./lib/chibios/os/rt/include/chsys.h ****  * @api
 238:./lib/chibios/os/rt/include/chsys.h ****  */
 239:./lib/chibios/os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 240:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 241:./lib/chibios/os/rt/include/chsys.h **** 
 242:./lib/chibios/os/rt/include/chsys.h **** /**
 243:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 244:./lib/chibios/os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 245:./lib/chibios/os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 246:./lib/chibios/os/rt/include/chsys.h ****  *
 247:./lib/chibios/os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 248:./lib/chibios/os/rt/include/chsys.h ****  *                      type rtcnt_t.
 249:./lib/chibios/os/rt/include/chsys.h ****  *
 250:./lib/chibios/os/rt/include/chsys.h ****  * @xclass
 251:./lib/chibios/os/rt/include/chsys.h ****  */
 252:./lib/chibios/os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 253:./lib/chibios/os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 254:./lib/chibios/os/rt/include/chsys.h **** #endif
 255:./lib/chibios/os/rt/include/chsys.h **** 
 256:./lib/chibios/os/rt/include/chsys.h **** /**
 257:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 258:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 259:./lib/chibios/os/rt/include/chsys.h ****  *          itself or from within the port layer.
 260:./lib/chibios/os/rt/include/chsys.h ****  *
 261:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 262:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 263:./lib/chibios/os/rt/include/chsys.h ****  *
 264:./lib/chibios/os/rt/include/chsys.h ****  * @special
 265:./lib/chibios/os/rt/include/chsys.h ****  */
 266:./lib/chibios/os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 267:./lib/chibios/os/rt/include/chsys.h ****                                                                             \
 268:./lib/chibios/os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 269:./lib/chibios/os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 270:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 271:./lib/chibios/os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 272:./lib/chibios/os/rt/include/chsys.h **** }
 273:./lib/chibios/os/rt/include/chsys.h **** 
 274:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 275:./lib/chibios/os/rt/include/chsys.h **** /* External declarations.                                                    */
 276:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 277:./lib/chibios/os/rt/include/chsys.h **** 
 278:./lib/chibios/os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 279:./lib/chibios/os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 280:./lib/chibios/os/rt/include/chsys.h **** #endif
 281:./lib/chibios/os/rt/include/chsys.h **** 
 282:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 283:./lib/chibios/os/rt/include/chsys.h **** extern "C" {
 284:./lib/chibios/os/rt/include/chsys.h **** #endif
 285:./lib/chibios/os/rt/include/chsys.h ****   void chSysInit(void);
 286:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 287:./lib/chibios/os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 288:./lib/chibios/os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 289:./lib/chibios/os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 290:./lib/chibios/os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 291:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 292:./lib/chibios/os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 293:./lib/chibios/os/rt/include/chsys.h **** #endif
 294:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 295:./lib/chibios/os/rt/include/chsys.h **** }
 296:./lib/chibios/os/rt/include/chsys.h **** #endif
 297:./lib/chibios/os/rt/include/chsys.h **** 
 298:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 299:./lib/chibios/os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 300:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 301:./lib/chibios/os/rt/include/chsys.h **** 
 302:./lib/chibios/os/rt/include/chsys.h **** /**
 303:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 304:./lib/chibios/os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 305:./lib/chibios/os/rt/include/chsys.h ****  *          hardware priority.
 306:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 307:./lib/chibios/os/rt/include/chsys.h ****  *
 308:./lib/chibios/os/rt/include/chsys.h ****  * @special
 309:./lib/chibios/os/rt/include/chsys.h ****  */
 310:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 311:./lib/chibios/os/rt/include/chsys.h **** 
 312:./lib/chibios/os/rt/include/chsys.h ****   port_disable();
 313:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_disable();
 314:./lib/chibios/os/rt/include/chsys.h **** }
 315:./lib/chibios/os/rt/include/chsys.h **** 
 316:./lib/chibios/os/rt/include/chsys.h **** /**
 317:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 318:./lib/chibios/os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 319:./lib/chibios/os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 320:./lib/chibios/os/rt/include/chsys.h ****  *          enabled.
 321:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 322:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 323:./lib/chibios/os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 324:./lib/chibios/os/rt/include/chsys.h ****  *
 325:./lib/chibios/os/rt/include/chsys.h ****  * @special
 326:./lib/chibios/os/rt/include/chsys.h ****  */
 327:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 328:./lib/chibios/os/rt/include/chsys.h **** 
 329:./lib/chibios/os/rt/include/chsys.h ****   port_suspend();
 330:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_suspend();
 331:./lib/chibios/os/rt/include/chsys.h **** }
 332:./lib/chibios/os/rt/include/chsys.h **** 
 333:./lib/chibios/os/rt/include/chsys.h **** /**
 334:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 335:./lib/chibios/os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 336:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 337:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 338:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 339:./lib/chibios/os/rt/include/chsys.h ****  *
 340:./lib/chibios/os/rt/include/chsys.h ****  * @special
 341:./lib/chibios/os/rt/include/chsys.h ****  */
 342:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 343:./lib/chibios/os/rt/include/chsys.h **** 
 344:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enable();
 345:./lib/chibios/os/rt/include/chsys.h ****   port_enable();
 346:./lib/chibios/os/rt/include/chsys.h **** }
 347:./lib/chibios/os/rt/include/chsys.h **** 
 348:./lib/chibios/os/rt/include/chsys.h **** /**
 349:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 350:./lib/chibios/os/rt/include/chsys.h ****  *
 351:./lib/chibios/os/rt/include/chsys.h ****  * @special
 352:./lib/chibios/os/rt/include/chsys.h ****  */
 353:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysLock(void) {
 177              		.loc 2 353 20 view .LVU63
 178              	.LBE165:
 354:./lib/chibios/os/rt/include/chsys.h **** 
 355:./lib/chibios/os/rt/include/chsys.h ****   port_lock();
 179              		.loc 2 355 3 view .LVU64
 180              	.LBB173:
 181              	.LBB166:
 182              	.LBI166:
 183              		.file 3 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
   1:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*
   2:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
   4:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
   6:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     (at your option) any later version.
  10:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  11:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  16:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** */
  19:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  20:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  21:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @file    chcore_v7m.h
  22:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   ARMv7-M architecture port macros and structures.
  23:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
  24:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @addtogroup ARMCMx_V7M_CORE
  25:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
  26:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  27:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  28:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifndef CHCORE_V7M_H
  29:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CHCORE_V7M_H
  30:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  31:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  32:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  34:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  35:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  36:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @name    Port Capabilities and Constants
  37:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
  38:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  39:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  40:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   This port supports a realtime counter.
  41:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  42:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SUPPORTS_RT                TRUE
  43:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  44:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  45:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Natural alignment constant.
  46:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the minimum alignment for pointer-size variables.
  47:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  48:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_NATURAL_ALIGN              sizeof (void *)
  49:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  50:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  51:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Stack alignment constant.
  52:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the alignment required for the stack pointer.
  53:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  54:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_STACK_ALIGN                sizeof (stkalign_t)
  55:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  56:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  57:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Working Areas alignment constant.
  58:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the alignment to be enforced for thread working areas.
  59:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  60:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA_ALIGN         ((PORT_ENABLE_GUARD_PAGES == TRUE) ?\
  61:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                          32U : PORT_STACK_ALIGN)
  62:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /** @} */
  63:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  64:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  65:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Disabled value for BASEPRI register.
  66:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  67:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_BASEPRI_DISABLED         0U
  68:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  69:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  70:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module pre-compile time settings.                                         */
  71:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  72:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  73:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  74:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Implements a syscall interface on SVC.
  75:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  76:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_USE_SYSCALL) || defined(__DOXYGEN__)
  77:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_USE_SYSCALL                FALSE
  78:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
  79:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  80:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  81:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Number of MPU regions to be saved/restored during context switch.
  82:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The first region is always region zero.
  83:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The use of this option has an overhead of 8 bytes for each
  84:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          region for each thread.
  85:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Allowed values are 0..4, zero means none.
  86:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  87:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_SWITCHED_REGIONS_NUMBER) || defined(__DOXYGEN__)
  88:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SWITCHED_REGIONS_NUMBER    0
  89:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
  90:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  91:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  92:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables stack overflow guard pages using MPU.
  93:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    This option can only be enabled if also option
  94:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CH_DBG_ENABLE_STACK_CHECK is enabled.
  95:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The use of this option has an overhead of 32 bytes for each
  96:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          thread.
  97:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  98:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_ENABLE_GUARD_PAGES) || defined(__DOXYGEN__)
  99:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ENABLE_GUARD_PAGES         FALSE
 100:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 101:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 102:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 103:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   MPU region to be used to stack guards.
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Make sure this region is not included in the
 105:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p PORT_SWITCHED_REGIONS_NUMBER regions range.
 106:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 107:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_USE_GUARD_MPU_REGION) || defined(__DOXYGEN__)
 108:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_USE_GUARD_MPU_REGION       MPU_REGION_7
 109:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 110:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 111:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 112:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Stack size for the system idle thread.
 113:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This size depends on the idle thread implementation, usually
 114:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          the idle thread should take no more space than those reserved
 115:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 116:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port it is set to 16 because the idle thread does have
 117:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          a stack frame when compiling without optimizations. You may
 118:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          reduce this value to zero when compiling with optimizations.
 119:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 120:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 121:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IDLE_THREAD_STACK_SIZE     16
 122:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 123:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 124:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 125:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 126:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This constant is used in the calculation of the correct working
 127:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          area size.
 128:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port this value is conservatively set to 64 because the
 129:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          function @p chSchDoReschedule() can have a stack frame, especially
 130:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          with compiler optimizations disabled. The value can be reduced
 131:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          when compiler optimizations are enabled.
 132:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 133:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 134:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INT_REQUIRED_STACK         64
 135:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 136:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 137:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 138:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables the use of the WFI instruction in the idle thread loop.
 139:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 140:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_ENABLE_WFI_IDLE)
 141:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_ENABLE_WFI_IDLE          FALSE
 142:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 143:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 144:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 145:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   FPU support in context switch.
 146:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details Activating this option activates the FPU support in the kernel.
 147:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 148:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_USE_FPU)
 149:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_USE_FPU                  CORTEX_HAS_FPU
 150:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_USE_FPU == TRUE) && (CORTEX_HAS_FPU == FALSE)
 151:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* This setting requires an FPU presence check in case it is externally
 152:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    redefined.*/
 153:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "the selected core does not have an FPU"
 154:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 155:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 156:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 157:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Simplified priority handling flag.
 158:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details Activating this option makes the Kernel work in compact mode.
 159:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          In compact mode interrupts are disabled globally instead of
 160:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          raising the priority mask to some intermediate level.
 161:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 162:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_SIMPLIFIED_PRIORITY)
 163:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_SIMPLIFIED_PRIORITY      FALSE
 164:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 165:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 166:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 167:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   SVCALL handler priority.
 168:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The default SVCALL handler priority is defaulted to
 169:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAXIMUM_PRIORITY+1, this reserves the
 170:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAXIMUM_PRIORITY priority level as fast interrupts
 171:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          priority level.
 172:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 173:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_PRIORITY_SVCALL)
 174:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIORITY_SVCALL          (CORTEX_MAXIMUM_PRIORITY + 1U)
 175:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif !PORT_IRQ_IS_VALID_PRIORITY(CORTEX_PRIORITY_SVCALL)
 176:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* If it is externally redefined then better perform a validity check on it.*/
 177:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "invalid priority level specified for CORTEX_PRIORITY_SVCALL"
 178:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 179:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 180:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 181:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   NVIC PRIGROUP initialization expression.
 182:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details The default assigns all available priority bits as preemption
 183:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          priority with no sub-priority.
 184:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 185:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_PRIGROUP_INIT) || defined(__DOXYGEN__)
 186:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIGROUP_INIT            (7 - CORTEX_PRIORITY_BITS)
 187:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 188:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 189:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 190:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Derived constants and error checks.                                       */
 191:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 192:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 193:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER < 0) || (PORT_SWITCHED_REGIONS_NUMBER > 4)
 194:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "invalid PORT_SWITCHED_REGIONS_NUMBER value"
 195:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 196:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 197:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(_FROM_ASM_)
 198:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 199:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   MPU guard page size.
 200:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 201:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == TRUE) || defined(__DOXYGEN__)
 202:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_DBG_ENABLE_STACK_CHECK == FALSE
 203:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "PORT_ENABLE_GUARD_PAGES requires CH_DBG_ENABLE_STACK_CHECK"
 204:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 205:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if __MPU_PRESENT == 0
 206:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "MPU not present in current device"
 207:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 208:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_GUARD_PAGE_SIZE          32U
 209:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 210:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_GUARD_PAGE_SIZE          0U
 211:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 212:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* !defined(_FROM_ASM_) */
 213:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 214:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 215:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @name    Architecture and Compiler
 216:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
 217:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 218:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_MODEL == 3) || defined(__DOXYGEN__)
 219:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 220:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM3)
 221:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM3 not defined"
 222:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 223:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 224:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM3 == FALSE
 225:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "ChibiOS Cortex-M3 port not licensed"
 226:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 227:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 228:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 229:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Macro defining the specific ARM architecture.
 230:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 231:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_ARM_v7M
 232:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 233:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 234:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Name of the implemented architecture.
 235:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 236:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_NAME          "ARMv7-M"
 237:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 238:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 239:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Name of the architecture variant.
 240:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 241:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == FALSE) || defined(__DOXYGEN__)
 242:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_CORE_VARIANT_NAME        "Cortex-M3"
 243:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 244:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_CORE_VARIANT_NAME        "Cortex-M3 (MPU)"
 245:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 246:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 247:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_MODEL == 4)
 248:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 249:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM4)
 250:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM4 not defined"
 251:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 252:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 253:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM4 == FALSE
 254:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #error "ChibiOS Cortex-M4 port not licensed"
 255:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 256:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 257:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_ARM_v7ME
 258:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_NAME        "ARMv7E-M"
 259:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CORTEX_USE_FPU
 260:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 261:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4F"
 262:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 263:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4F (MPU)"
 264:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 265:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #else
 266:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 267:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4"
 268:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 269:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4 (MPU)"
 270:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 271:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 272:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 273:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_MODEL == 7)
 274:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 275:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM7)
 276:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM7 not defined"
 277:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 278:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 279:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM7 == FALSE
 280:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "ChibiOS Cortex-M7 port not licensed"
 281:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 282:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 283:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_ARM_v7ME
 284:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_NAME        "ARMv7E-M"
 285:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CORTEX_USE_FPU
 286:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 287:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7F"
 288:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 289:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7F (MPU)"
 290:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 291:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #else
 292:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 293:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7"
 294:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 295:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7 (MPU)"
 296:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 297:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 298:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 299:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 300:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 301:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Port-specific information string.
 302:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 303:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 304:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INFO                       "Advanced kernel mode"
 305:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 306:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INFO                       "Compact kernel mode"
 307:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 308:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /** @} */
 309:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 310:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 311:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 312:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Maximum usable priority for normal ISRs.
 313:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 314:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      (CORTEX_PRIORITY_SVCALL + 1U)
 315:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 316:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 317:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   BASEPRI level within kernel lock.
 318:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 319:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_BASEPRI_KERNEL                                               \
 320:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   CORTEX_PRIO_MASK(CORTEX_MAX_KERNEL_PRIORITY)
 321:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 322:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 323:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      0U
 324:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 325:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 326:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 327:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   PendSV priority level.
 328:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    This priority is enforced to be equal to
 329:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAX_KERNEL_PRIORITY, this handler always have the
 330:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          highest priority that cannot preempt the kernel.
 331:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 332:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIORITY_PENDSV          CORTEX_MAX_KERNEL_PRIORITY
 333:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 334:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 335:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module data structures and types.                                         */
 336:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 337:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 338:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* The following code is not processed when the file is included from an
 339:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    asm module.*/
 340:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(_FROM_ASM_)
 341:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 342:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* The documentation of the following declarations is in chconf.h in order
 343:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    to not have duplicated structure names into the documentation.*/
 344:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(__DOXYGEN__)
 345:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_extctx {
 346:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r0;
 347:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r1;
 348:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r2;
 349:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r3;
 350:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r12;
 351:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      lr_thd;
 352:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      pc;
 353:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      xpsr;
 354:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_USE_FPU
 355:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s0;
 356:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s1;
 357:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s2;
 358:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s3;
 359:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s4;
 360:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s5;
 361:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s6;
 362:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s7;
 363:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s8;
 364:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s9;
 365:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s10;
 366:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s11;
 367:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s12;
 368:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s13;
 369:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s14;
 370:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s15;
 371:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      fpscr;
 372:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      reserved;
 373:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_USE_FPU */
 374:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 375:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 376:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 377:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 378:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Link context structure.
 379:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This structure is used when there is the need to save extra
 380:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          context information that is not part of the registers stacked
 381:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          in HW.
 382:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 383:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_linkctx {
 384:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t              control;
 385:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_extctx    *ectxp;
 386:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 388:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_intctx {
 390:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER > 0) || defined(__DOXYGEN__)
 391:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct {
 392:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t    rbar;
 393:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t    rasr;
 394:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   } regions[PORT_SWITCHED_REGIONS_NUMBER];
 395:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_USE_FPU
 397:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s16;
 398:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s17;
 399:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s18;
 400:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s19;
 401:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s20;
 402:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s21;
 403:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s22;
 404:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s23;
 405:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s24;
 406:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s25;
 407:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s26;
 408:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s27;
 409:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s28;
 410:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s29;
 411:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s30;
 412:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s31;
 413:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_USE_FPU */
 414:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r4;
 415:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r5;
 416:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r6;
 417:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r7;
 418:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r8;
 419:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r9;
 420:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r10;
 421:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r11;
 422:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      lr;
 423:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 424:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 425:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_context {
 426:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_intctx    *sp;
 427:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 428:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct {
 429:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t            psp;
 430:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     const void          *p;
 431:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   } syscall;
 432:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 433:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 434:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* !defined(__DOXYGEN__) */
 435:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 436:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 437:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module macros.                                                            */
 438:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 439:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 440:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* By default threads have no syscall context information.*/
 441:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 442:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop)                              \
 443:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.syscall.psp = (uint32_t)(wtop);                                 \
 444:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.syscall.p   = NULL;
 445:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 446:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop)
 447:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 448:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 449:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* By default threads have all regions disabled.*/
 450:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER == 0) || defined(__DOXYGEN__)
 451:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)
 452:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 1) || defined(__DOXYGEN__)
 453:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 454:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 455:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U
 456:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 2) || defined(__DOXYGEN__)
 457:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 458:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 459:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 460:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 461:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U
 462:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 3) || defined(__DOXYGEN__)
 463:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 464:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 465:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 466:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 467:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U;                                      \
 468:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rbar  = 0U;                                      \
 469:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rasr  = 0U
 470:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 4) || defined(__DOXYGEN__)
 471:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 472:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 473:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 474:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 475:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U;                                      \
 476:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rbar  = 0U;                                      \
 477:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rasr  = 0U;                                      \
 478:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[3].rbar  = 0U;                                      \
 479:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[3].rasr  = 0U
 480:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 481:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 482:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 483:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 484:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 485:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This code usually setup the context switching frame represented
 486:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          by an @p port_intctx structure.
 487:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 488:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 489:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                 \
 490:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                         sizeof (struct port_intctx));       \
 491:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->r4 = (uint32_t)(pf);                                        \
 492:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->r5 = (uint32_t)(arg);                                       \
 493:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->lr = (uint32_t)_port_thread_start;                          \
 494:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __PORT_SETUP_CONTEXT_MPU(tp);                                             \
 495:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop);                                   \
 496:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 497:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 498:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** //  __PORT_SETUP_CONTEXT_MPU(tp)
 499:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 500:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 501:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Computes the thread working area global size.
 502:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    There is no need to perform alignments in this macro.
 503:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 504:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WA_SIZE(n) ((size_t)PORT_GUARD_PAGE_SIZE +                     \
 505:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          sizeof (struct port_intctx) +                      \
 506:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          sizeof (struct port_extctx) +                      \
 507:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          (size_t)(n) +                                      \
 508:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          (size_t)PORT_INT_REQUIRED_STACK)
 509:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 510:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 511:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Static working area allocation.
 512:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro is used to allocate a static thread working area
 513:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          aligned as both position and size.
 514:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 515:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] s         the name to be assigned to the stack array
 516:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] n         the stack size to be assigned to the thread
 517:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 518:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == FALSE) || defined(__DOXYGEN__)
 519:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 520:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 521:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 522:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 523:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   ALIGNED_VAR(32) stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 524:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 525:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 526:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 527:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ prologue code.
 528:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 529:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          enabled to invoke system APIs.
 530:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 531:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_PROLOGUE()
 532:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 533:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 534:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ epilogue code.
 535:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 536:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          enabled to invoke system APIs.
 537:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 538:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_EPILOGUE() _port_irq_epilogue()
 539:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 540:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 541:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ handler function declaration.
 542:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    @p id can be a function name or a vector number depending on the
 543:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          port implementation.
 544:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 545:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 546:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_HANDLER(id) extern "C" void id(void)
 547:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 548:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_HANDLER(id) void id(void)
 549:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 550:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 551:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 552:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Fast IRQ handler function declaration.
 553:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    @p id can be a function name or a vector number depending on the
 554:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          port implementation.
 555:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 556:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 557:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_FAST_IRQ_HANDLER(id) extern "C" void id(void)
 558:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 559:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_FAST_IRQ_HANDLER(id) void id(void)
 560:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 561:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 562:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 563:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Performs a context switch between two threads.
 564:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This is the most critical code in any port, this function
 565:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          is responsible for the context switch between 2 threads.
 566:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 567:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          switch performance so optimize here as much as you can.
 568:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 569:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] ntp       the thread to be switched in
 570:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] otp       the thread to be switched out
 571:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 572:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CH_DBG_ENABLE_STACK_CHECK == FALSE) || defined(__DOXYGEN__)
 573:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) _port_switch(ntp, otp)
 574:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 575:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if PORT_ENABLE_GUARD_PAGES == FALSE
 576:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) {                                             \
 577:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_intctx *r13 = (struct port_intctx *)__get_PSP();              \
 578:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   if ((stkalign_t *)(r13 - 1) < (otp)->wabase) {                            \
 579:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     chSysHalt("stack overflow");                                            \
 580:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   }                                                                         \
 581:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   _port_switch(ntp, otp);                                                   \
 582:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 583:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 584:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) {                                             \
 585:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   _port_switch(ntp, otp);                                                   \
 586:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                                                             \
 587:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   /* Setting up the guard page for the switched-in thread.*/                \
 588:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   mpuSetRegionAddress(PORT_USE_GUARD_MPU_REGION,                            \
 589:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                       chThdGetSelfX()->wabase);                             \
 590:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 591:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 592:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 593:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 594:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 595:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* External declarations.                                                    */
 596:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 597:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 598:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 599:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** extern "C" {
 600:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 601:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void port_init(void);
 602:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_irq_epilogue(void);
 603:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 604:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_thread_start(void);
 605:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_switch_from_isr(void);
 606:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_exit_from_isr(void);
 607:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if PORT_USE_SYSCALL == TRUE
 608:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void port_unprivileged_jump(uint32_t pc, uint32_t psp);
 609:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 610:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 611:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 612:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 613:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 614:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 615:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module inline functions.                                                  */
 616:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 617:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 618:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 619:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Returns a word encoding the current interrupts status.
 620:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 621:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The interrupts status.
 622:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 623:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE syssts_t port_get_irq_status(void) {
 624:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   syssts_t sts;
 625:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 626:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 627:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   sts = (syssts_t)__get_BASEPRI();
 628:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 629:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   sts = (syssts_t)__get_PRIMASK();
 630:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 631:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return sts;
 632:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 633:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 634:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 635:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Checks the interrupt status.
 636:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 637:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] sts       the interrupt status word
 638:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 639:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The interrupt status.
 640:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval false        the word specified a disabled interrupts status.
 641:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval true         the word specified an enabled interrupts status.
 642:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 643:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE bool port_irq_enabled(syssts_t sts) {
 644:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 645:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 646:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 647:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 648:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return (sts & (syssts_t)1) == (syssts_t)0;
 649:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 650:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 651:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 652:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 653:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Determines the current execution context.
 654:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 655:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The execution context.
 656:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval false        not running in ISR mode.
 657:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval true         running in ISR mode.
 658:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 659:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE bool port_is_isr_context(void) {
 660:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 661:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 662:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 663:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 664:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 665:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-lock action.
 666:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function raises the base priority to kernel
 667:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 668:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_lock(void) {
 184              		.loc 3 669 27 view .LVU65
 185              	.LBE166:
 186              	.LBE173:
 670:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 671:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 672:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 673:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if __CM7_REV <= 1
 674:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 675:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 676:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
 187              		.loc 3 677 3 view .LVU66
 188              	.LBB174:
 189              	.LBB171:
 190              	.LBB167:
 191              	.LBI167:
 192              		.file 4 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 117:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 118:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 122:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 123:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 133:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 134:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 135:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 136:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 142:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 144:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 145:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 146:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 147:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 150:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 151:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 153:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 154:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 155:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 157:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 158:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 159:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 160:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 162:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 166:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 168:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 169:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 170:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 172:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 173:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 174:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 175:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 176:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 177:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 181:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 183:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 185:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 187:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 189:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 193:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 195:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 197:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 198:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 199:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 200:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 201:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 205:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 207:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 208:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 209:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 211:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 212:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 214:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 215:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 219:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 221:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 222:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 223:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 225:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 226:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 228:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 241:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 243:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 247:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 249:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 250:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 251:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 253:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 254:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 255:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 265:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 268:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 269:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 270:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 271:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 272:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 273:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 277:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 279:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 281:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 282:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 283:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 285:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 289:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 291:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 294:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 296:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 297:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 301:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 303:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 304:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 305:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 307:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 308:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 310:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 312:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 316:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 318:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 319:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 320:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 322:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 323:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 324:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 325:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 326:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 327:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 331:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 333:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 335:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 336:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 337:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 339:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 343:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 345:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 347:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 348:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 355:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 359:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 360:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 362:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 363:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 364:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 365:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 366:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 370:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 372:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 374:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 375:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 378:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 382:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 384:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 385:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 386:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 388:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 389:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 390:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 391:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 393:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 397:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 399:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 400:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 401:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 403:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 404:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 405:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 406:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 407:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 408:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 412:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 414:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 416:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 418:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 420:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 424:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 426:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 428:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 429:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 430:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 435:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 439:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 441:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 443:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 445:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 446:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 450:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 452:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 454:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 455:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 456:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 457:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 461:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 463:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 464:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 465:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 467:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 468:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 469:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 470:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 472:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 476:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 478:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 479:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 480:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 482:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 484:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 486:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 193              		.loc 4 491 27 view .LVU67
 194              	.LBB168:
 492:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 195              		.loc 4 493 3 view .LVU68
 196              	.LBE168:
 197              	.LBE167:
 198              	.LBE171:
 199              	.LBE174:
 216:lib/chibios/os/rt/src/chthreads.c ****   thread_t *tp;
 200              		.loc 1 216 64 is_stmt 0 view .LVU69
 201 0000 08B5     		push	{r3, lr}
 202              		.cfi_def_cfa_offset 8
 203              		.cfi_offset 3, -8
 204              		.cfi_offset 14, -4
 205              	.LBB175:
 206              	.LBB172:
 207              	.LBB170:
 208              	.LBB169:
 209              		.loc 4 493 3 view .LVU70
 210 0002 2023     		movs	r3, #32
 211              		.syntax unified
 212              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 213 0004 83F31188 		MSR basepri, r3
 214              	@ 0 "" 2
 215              	.LVL10:
 216              		.loc 4 493 3 view .LVU71
 217              		.thumb
 218              		.syntax unified
 219              	.LBE169:
 220              	.LBE170:
 221              	.LBE172:
 222              	.LBE175:
 356:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 223              		.loc 2 356 34 is_stmt 1 view .LVU72
 357:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 224              		.loc 2 357 20 view .LVU73
 231:lib/chibios/os/rt/src/chthreads.c ****   tp = chThdCreateSuspendedI(tdp);
 225              		.loc 1 231 3 view .LVU74
 226              		.loc 1 231 8 is_stmt 0 view .LVU75
 227 0008 FFF7FEFF 		bl	chThdCreateSuspendedI
 228              	.LVL11:
 232:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 229              		.loc 1 232 3 is_stmt 1 view .LVU76
 230              	.LBB176:
 231              	.LBI176:
 358:./lib/chibios/os/rt/include/chsys.h **** }
 359:./lib/chibios/os/rt/include/chsys.h **** 
 360:./lib/chibios/os/rt/include/chsys.h **** /**
 361:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 362:./lib/chibios/os/rt/include/chsys.h ****  *
 363:./lib/chibios/os/rt/include/chsys.h ****  * @special
 364:./lib/chibios/os/rt/include/chsys.h ****  */
 365:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 232              		.loc 2 365 20 view .LVU77
 233              	.LBB177:
 366:./lib/chibios/os/rt/include/chsys.h **** 
 367:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_unlock();
 234              		.loc 2 367 22 view .LVU78
 368:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 235              		.loc 2 368 33 view .LVU79
 369:./lib/chibios/os/rt/include/chsys.h **** 
 370:./lib/chibios/os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 371:./lib/chibios/os/rt/include/chsys.h ****      in a critical section not followed by a chSchRescheduleS(), this means
 372:./lib/chibios/os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 373:./lib/chibios/os/rt/include/chsys.h ****      the ready list.*/
 374:./lib/chibios/os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 236              		.loc 2 374 3 view .LVU80
 237              		.loc 2 374 3 view .LVU81
 238              		.loc 2 374 3 view .LVU82
 375:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 376:./lib/chibios/os/rt/include/chsys.h ****               "priority order violation");
 377:./lib/chibios/os/rt/include/chsys.h **** 
 378:./lib/chibios/os/rt/include/chsys.h ****   port_unlock();
 239              		.loc 2 378 3 view .LVU83
 240              	.LBB178:
 241              	.LBI178:
 678:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 679:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if __CM7_REV <= 1
 680:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __enable_irq();
 681:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 682:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 683:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 684:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 685:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 686:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 687:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 688:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 689:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-unlock action.
 690:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function lowers the base priority to user
 691:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 692:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_unlock(void) {
 242              		.loc 3 693 27 view .LVU84
 243              	.LBE178:
 244              	.LBE177:
 245              	.LBE176:
 694:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 695:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 696:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
 246              		.loc 3 696 3 view .LVU85
 247              	.LBB183:
 248              	.LBB182:
 249              	.LBB181:
 250              	.LBB179:
 251              	.LBI179:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 252              		.loc 4 491 27 view .LVU86
 253              	.LBB180:
 254              		.loc 4 493 3 view .LVU87
 255 000c 0023     		movs	r3, #0
 256              		.syntax unified
 257              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 258 000e 83F31188 		MSR basepri, r3
 259              	@ 0 "" 2
 260              	.LVL12:
 261              		.loc 4 493 3 is_stmt 0 view .LVU88
 262              		.thumb
 263              		.syntax unified
 264              	.LBE180:
 265              	.LBE179:
 266              	.LBE181:
 267              	.LBE182:
 268              	.LBE183:
 233:lib/chibios/os/rt/src/chthreads.c **** 
 234:lib/chibios/os/rt/src/chthreads.c ****   return tp;
 269              		.loc 1 234 3 is_stmt 1 view .LVU89
 235:lib/chibios/os/rt/src/chthreads.c **** }
 270              		.loc 1 235 1 is_stmt 0 view .LVU90
 271 0012 08BD     		pop	{r3, pc}
 272              		.cfi_endproc
 273              	.LFE241:
 275              		.section	.text.chThdCreateI,"ax",%progbits
 276              		.align	1
 277              		.global	chThdCreateI
 278              		.syntax unified
 279              		.thumb
 280              		.thumb_func
 281              		.fpu fpv4-sp-d16
 283              	chThdCreateI:
 284              	.LVL13:
 285              	.LFB242:
 236:lib/chibios/os/rt/src/chthreads.c **** 
 237:lib/chibios/os/rt/src/chthreads.c **** /**
 238:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 239:lib/chibios/os/rt/src/chthreads.c ****  * @details The new thread is initialized and make ready to execute.
 240:lib/chibios/os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 241:lib/chibios/os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 242:lib/chibios/os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 243:lib/chibios/os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 244:lib/chibios/os/rt/src/chthreads.c ****  * @post    The initialized thread can be subsequently started by invoking
 245:lib/chibios/os/rt/src/chthreads.c ****  *          @p chThdStart(), @p chThdStartI() or @p chSchWakeupS()
 246:lib/chibios/os/rt/src/chthreads.c ****  *          depending on the execution context.
 247:lib/chibios/os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 248:lib/chibios/os/rt/src/chthreads.c ****  *          returning from its main function.
 249:lib/chibios/os/rt/src/chthreads.c ****  * @note    Threads created using this function do not obey to the
 250:lib/chibios/os/rt/src/chthreads.c ****  *          @p CH_DBG_FILL_THREADS debug option because it would keep
 251:lib/chibios/os/rt/src/chthreads.c ****  *          the kernel locked for too much time.
 252:lib/chibios/os/rt/src/chthreads.c ****  *
 253:lib/chibios/os/rt/src/chthreads.c ****  * @param[out] tdp      pointer to the thread descriptor
 254:lib/chibios/os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 255:lib/chibios/os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 256:lib/chibios/os/rt/src/chthreads.c ****  *
 257:lib/chibios/os/rt/src/chthreads.c ****  * @iclass
 258:lib/chibios/os/rt/src/chthreads.c ****  */
 259:lib/chibios/os/rt/src/chthreads.c **** thread_t *chThdCreateI(const thread_descriptor_t *tdp) {
 286              		.loc 1 259 56 is_stmt 1 view -0
 287              		.cfi_startproc
 288              		@ args = 0, pretend = 0, frame = 0
 289              		@ frame_needed = 0, uses_anonymous_args = 0
 260:lib/chibios/os/rt/src/chthreads.c **** 
 261:lib/chibios/os/rt/src/chthreads.c ****   return chSchReadyI(chThdCreateSuspendedI(tdp));
 290              		.loc 1 261 3 view .LVU92
 259:lib/chibios/os/rt/src/chthreads.c **** 
 291              		.loc 1 259 56 is_stmt 0 view .LVU93
 292 0000 08B5     		push	{r3, lr}
 293              		.cfi_def_cfa_offset 8
 294              		.cfi_offset 3, -8
 295              		.cfi_offset 14, -4
 296              		.loc 1 261 10 view .LVU94
 297 0002 FFF7FEFF 		bl	chThdCreateSuspendedI
 298              	.LVL14:
 262:lib/chibios/os/rt/src/chthreads.c **** }
 299              		.loc 1 262 1 view .LVU95
 300 0006 BDE80840 		pop	{r3, lr}
 301              		.cfi_restore 14
 302              		.cfi_restore 3
 303              		.cfi_def_cfa_offset 0
 261:lib/chibios/os/rt/src/chthreads.c **** }
 304              		.loc 1 261 10 view .LVU96
 305 000a FFF7FEBF 		b	chSchReadyI
 306              	.LVL15:
 307              		.cfi_endproc
 308              	.LFE242:
 310              		.section	.text.chThdCreate,"ax",%progbits
 311              		.align	1
 312              		.global	chThdCreate
 313              		.syntax unified
 314              		.thumb
 315              		.thumb_func
 316              		.fpu fpv4-sp-d16
 318              	chThdCreate:
 319              	.LVL16:
 320              	.LFB243:
 263:lib/chibios/os/rt/src/chthreads.c **** 
 264:lib/chibios/os/rt/src/chthreads.c **** /**
 265:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 266:lib/chibios/os/rt/src/chthreads.c ****  * @details The new thread is initialized and make ready to execute.
 267:lib/chibios/os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 268:lib/chibios/os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 269:lib/chibios/os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 270:lib/chibios/os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 271:lib/chibios/os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 272:lib/chibios/os/rt/src/chthreads.c ****  *          returning from its main function.
 273:lib/chibios/os/rt/src/chthreads.c ****  *
 274:lib/chibios/os/rt/src/chthreads.c ****  * @param[out] tdp      pointer to the thread descriptor
 275:lib/chibios/os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 276:lib/chibios/os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 277:lib/chibios/os/rt/src/chthreads.c ****  *
 278:lib/chibios/os/rt/src/chthreads.c ****  * @iclass
 279:lib/chibios/os/rt/src/chthreads.c ****  */
 280:lib/chibios/os/rt/src/chthreads.c **** thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 321              		.loc 1 280 55 is_stmt 1 view -0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 281:lib/chibios/os/rt/src/chthreads.c ****   thread_t *tp;
 325              		.loc 1 281 3 view .LVU98
 282:lib/chibios/os/rt/src/chthreads.c **** 
 283:lib/chibios/os/rt/src/chthreads.c **** #if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
 284:lib/chibios/os/rt/src/chthreads.c ****     ((CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE))
 285:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 286:lib/chibios/os/rt/src/chthreads.c ****               "working area in use");
 287:lib/chibios/os/rt/src/chthreads.c **** #endif
 288:lib/chibios/os/rt/src/chthreads.c **** 
 289:lib/chibios/os/rt/src/chthreads.c **** #if CH_DBG_FILL_THREADS == TRUE
 290:lib/chibios/os/rt/src/chthreads.c ****   _thread_memfill((uint8_t *)tdp->wbase,
 291:lib/chibios/os/rt/src/chthreads.c ****                   (uint8_t *)tdp->wend,
 292:lib/chibios/os/rt/src/chthreads.c ****                   CH_DBG_STACK_FILL_VALUE);
 293:lib/chibios/os/rt/src/chthreads.c **** #endif
 294:lib/chibios/os/rt/src/chthreads.c **** 
 295:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 326              		.loc 1 295 3 view .LVU99
 327              	.LBB184:
 328              	.LBI184:
 353:./lib/chibios/os/rt/include/chsys.h **** 
 329              		.loc 2 353 20 view .LVU100
 330              	.LBE184:
 355:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 331              		.loc 2 355 3 view .LVU101
 332              	.LBB192:
 333              	.LBB185:
 334              	.LBI185:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 335              		.loc 3 669 27 view .LVU102
 336              	.LBE185:
 337              	.LBE192:
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 338              		.loc 3 677 3 view .LVU103
 339              	.LBB193:
 340              	.LBB190:
 341              	.LBB186:
 342              	.LBI186:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 343              		.loc 4 491 27 view .LVU104
 344              	.LBB187:
 345              		.loc 4 493 3 view .LVU105
 346              	.LBE187:
 347              	.LBE186:
 348              	.LBE190:
 349              	.LBE193:
 280:lib/chibios/os/rt/src/chthreads.c ****   thread_t *tp;
 350              		.loc 1 280 55 is_stmt 0 view .LVU106
 351 0000 10B5     		push	{r4, lr}
 352              		.cfi_def_cfa_offset 8
 353              		.cfi_offset 4, -8
 354              		.cfi_offset 14, -4
 355              	.LBB194:
 356              	.LBB191:
 357              	.LBB189:
 358              	.LBB188:
 359              		.loc 4 493 3 view .LVU107
 360 0002 2023     		movs	r3, #32
 361              		.syntax unified
 362              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 363 0004 83F31188 		MSR basepri, r3
 364              	@ 0 "" 2
 365              	.LVL17:
 366              		.loc 4 493 3 view .LVU108
 367              		.thumb
 368              		.syntax unified
 369              	.LBE188:
 370              	.LBE189:
 371              	.LBE191:
 372              	.LBE194:
 356:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 373              		.loc 2 356 34 is_stmt 1 view .LVU109
 357:./lib/chibios/os/rt/include/chsys.h **** }
 374              		.loc 2 357 20 view .LVU110
 296:lib/chibios/os/rt/src/chthreads.c ****   tp = chThdCreateSuspendedI(tdp);
 375              		.loc 1 296 3 view .LVU111
 376              		.loc 1 296 8 is_stmt 0 view .LVU112
 377 0008 FFF7FEFF 		bl	chThdCreateSuspendedI
 378              	.LVL18:
 297:lib/chibios/os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 379              		.loc 1 297 3 view .LVU113
 380 000c 0021     		movs	r1, #0
 296:lib/chibios/os/rt/src/chthreads.c ****   tp = chThdCreateSuspendedI(tdp);
 381              		.loc 1 296 8 view .LVU114
 382 000e 0446     		mov	r4, r0
 383              	.LVL19:
 384              		.loc 1 297 3 is_stmt 1 view .LVU115
 385 0010 FFF7FEFF 		bl	chSchWakeupS
 386              	.LVL20:
 298:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 387              		.loc 1 298 3 view .LVU116
 388              	.LBB195:
 389              	.LBI195:
 365:./lib/chibios/os/rt/include/chsys.h **** 
 390              		.loc 2 365 20 view .LVU117
 391              	.LBB196:
 367:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 392              		.loc 2 367 22 view .LVU118
 368:./lib/chibios/os/rt/include/chsys.h **** 
 393              		.loc 2 368 33 view .LVU119
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 394              		.loc 2 374 3 view .LVU120
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 395              		.loc 2 374 3 view .LVU121
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 396              		.loc 2 374 3 view .LVU122
 397              		.loc 2 378 3 view .LVU123
 398              	.LBB197:
 399              	.LBI197:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 400              		.loc 3 693 27 view .LVU124
 401              	.LBE197:
 402              	.LBE196:
 403              	.LBE195:
 404              		.loc 3 696 3 view .LVU125
 405              	.LBB202:
 406              	.LBB201:
 407              	.LBB200:
 408              	.LBB198:
 409              	.LBI198:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 410              		.loc 4 491 27 view .LVU126
 411              	.LBB199:
 412              		.loc 4 493 3 view .LVU127
 413 0014 0023     		movs	r3, #0
 414              		.syntax unified
 415              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 416 0016 83F31188 		MSR basepri, r3
 417              	@ 0 "" 2
 418              	.LVL21:
 419              		.loc 4 493 3 is_stmt 0 view .LVU128
 420              		.thumb
 421              		.syntax unified
 422              	.LBE199:
 423              	.LBE198:
 424              	.LBE200:
 425              	.LBE201:
 426              	.LBE202:
 299:lib/chibios/os/rt/src/chthreads.c **** 
 300:lib/chibios/os/rt/src/chthreads.c ****   return tp;
 427              		.loc 1 300 3 is_stmt 1 view .LVU129
 301:lib/chibios/os/rt/src/chthreads.c **** }
 428              		.loc 1 301 1 is_stmt 0 view .LVU130
 429 001a 2046     		mov	r0, r4
 430 001c 10BD     		pop	{r4, pc}
 431              		.loc 1 301 1 view .LVU131
 432              		.cfi_endproc
 433              	.LFE243:
 435              		.section	.text.chThdCreateStatic,"ax",%progbits
 436              		.align	1
 437              		.global	chThdCreateStatic
 438              		.syntax unified
 439              		.thumb
 440              		.thumb_func
 441              		.fpu fpv4-sp-d16
 443              	chThdCreateStatic:
 444              	.LVL22:
 445              	.LFB244:
 302:lib/chibios/os/rt/src/chthreads.c **** 
 303:lib/chibios/os/rt/src/chthreads.c **** /**
 304:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 305:lib/chibios/os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 306:lib/chibios/os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chThdWait()
 307:lib/chibios/os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 308:lib/chibios/os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 309:lib/chibios/os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 310:lib/chibios/os/rt/src/chthreads.c ****  *          returning from its main function.
 311:lib/chibios/os/rt/src/chthreads.c ****  *
 312:lib/chibios/os/rt/src/chthreads.c ****  * @param[out] wsp      pointer to a working area dedicated to the thread stack
 313:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] size      size of the working area
 314:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] prio      the priority level for the new thread
 315:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] pf        the thread function
 316:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] arg       an argument passed to the thread function. It can be
 317:lib/chibios/os/rt/src/chthreads.c ****  *                      @p NULL.
 318:lib/chibios/os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 319:lib/chibios/os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 320:lib/chibios/os/rt/src/chthreads.c ****  *
 321:lib/chibios/os/rt/src/chthreads.c ****  * @api
 322:lib/chibios/os/rt/src/chthreads.c ****  */
 323:lib/chibios/os/rt/src/chthreads.c **** thread_t *chThdCreateStatic(void *wsp, size_t size,
 324:lib/chibios/os/rt/src/chthreads.c ****                             tprio_t prio, tfunc_t pf, void *arg) {
 446              		.loc 1 324 66 is_stmt 1 view -0
 447              		.cfi_startproc
 448              		@ args = 4, pretend = 0, frame = 0
 449              		@ frame_needed = 0, uses_anonymous_args = 0
 325:lib/chibios/os/rt/src/chthreads.c ****   thread_t *tp;
 450              		.loc 1 325 3 view .LVU133
 326:lib/chibios/os/rt/src/chthreads.c **** 
 327:lib/chibios/os/rt/src/chthreads.c ****   chDbgCheck((wsp != NULL) &&
 451              		.loc 1 327 3 view .LVU134
 452              		.loc 1 327 3 view .LVU135
 453              		.loc 1 327 3 view .LVU136
 328:lib/chibios/os/rt/src/chthreads.c ****              MEM_IS_ALIGNED(wsp, PORT_WORKING_AREA_ALIGN) &&
 329:lib/chibios/os/rt/src/chthreads.c ****              (size >= THD_WORKING_AREA_SIZE(0)) &&
 330:lib/chibios/os/rt/src/chthreads.c ****              MEM_IS_ALIGNED(size, PORT_STACK_ALIGN) &&
 331:lib/chibios/os/rt/src/chthreads.c ****              (prio <= HIGHPRIO) && (pf != NULL));
 332:lib/chibios/os/rt/src/chthreads.c **** 
 333:lib/chibios/os/rt/src/chthreads.c **** #if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
 334:lib/chibios/os/rt/src/chthreads.c ****     ((CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE))
 335:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(chRegFindThreadByWorkingArea(wsp) == NULL,
 336:lib/chibios/os/rt/src/chthreads.c ****               "working area in use");
 337:lib/chibios/os/rt/src/chthreads.c **** #endif
 338:lib/chibios/os/rt/src/chthreads.c **** 
 339:lib/chibios/os/rt/src/chthreads.c **** #if CH_DBG_FILL_THREADS == TRUE
 340:lib/chibios/os/rt/src/chthreads.c ****   _thread_memfill((uint8_t *)wsp,
 341:lib/chibios/os/rt/src/chthreads.c ****                   (uint8_t *)wsp + size,
 342:lib/chibios/os/rt/src/chthreads.c ****                   CH_DBG_STACK_FILL_VALUE);
 343:lib/chibios/os/rt/src/chthreads.c **** #endif
 344:lib/chibios/os/rt/src/chthreads.c **** 
 345:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 454              		.loc 1 345 3 view .LVU137
 455              	.LBB203:
 456              	.LBI203:
 353:./lib/chibios/os/rt/include/chsys.h **** 
 457              		.loc 2 353 20 view .LVU138
 458              	.LBE203:
 355:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 459              		.loc 2 355 3 view .LVU139
 460              	.LBB211:
 461              	.LBB204:
 462              	.LBI204:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 463              		.loc 3 669 27 view .LVU140
 464              	.LBE204:
 465              	.LBE211:
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 466              		.loc 3 677 3 view .LVU141
 467              	.LBB212:
 468              	.LBB209:
 469              	.LBB205:
 470              	.LBI205:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 471              		.loc 4 491 27 view .LVU142
 472              	.LBB206:
 473              		.loc 4 493 3 view .LVU143
 474              	.LBE206:
 475              	.LBE205:
 476              	.LBE209:
 477              	.LBE212:
 324:lib/chibios/os/rt/src/chthreads.c ****   thread_t *tp;
 478              		.loc 1 324 66 is_stmt 0 view .LVU144
 479 0000 38B5     		push	{r3, r4, r5, lr}
 480              		.cfi_def_cfa_offset 16
 481              		.cfi_offset 3, -16
 482              		.cfi_offset 4, -12
 483              		.cfi_offset 5, -8
 484              		.cfi_offset 14, -4
 485              	.LBB213:
 486              	.LBB210:
 487              	.LBB208:
 488              	.LBB207:
 489              		.loc 4 493 3 view .LVU145
 490 0002 2024     		movs	r4, #32
 491              		.syntax unified
 492              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 493 0004 84F31188 		MSR basepri, r4
 494              	@ 0 "" 2
 495              	.LVL23:
 496              		.loc 4 493 3 view .LVU146
 497              		.thumb
 498              		.syntax unified
 499              	.LBE207:
 500              	.LBE208:
 501              	.LBE210:
 502              	.LBE213:
 356:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 503              		.loc 2 356 34 is_stmt 1 view .LVU147
 357:./lib/chibios/os/rt/include/chsys.h **** }
 504              		.loc 2 357 20 view .LVU148
 346:lib/chibios/os/rt/src/chthreads.c **** 
 347:lib/chibios/os/rt/src/chthreads.c ****   /* The thread structure is laid out in the upper part of the thread
 348:lib/chibios/os/rt/src/chthreads.c ****      workspace. The thread position structure is aligned to the required
 349:lib/chibios/os/rt/src/chthreads.c ****      stack alignment because it represents the stack top.*/
 350:lib/chibios/os/rt/src/chthreads.c ****   tp = (thread_t *)((uint8_t *)wsp + size -
 505              		.loc 1 350 3 view .LVU149
 506              		.loc 1 350 43 is_stmt 0 view .LVU150
 507 0008 2839     		subs	r1, r1, #40
 508              	.LVL24:
 509              		.loc 1 350 6 view .LVU151
 510 000a 4418     		adds	r4, r0, r1
 511              	.LVL25:
 351:lib/chibios/os/rt/src/chthreads.c ****                     MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));
 352:lib/chibios/os/rt/src/chthreads.c **** 
 353:lib/chibios/os/rt/src/chthreads.c **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
 354:lib/chibios/os/rt/src/chthreads.c ****   /* Stack boundary.*/
 355:lib/chibios/os/rt/src/chthreads.c ****   tp->wabase = (stkalign_t *)wsp;
 356:lib/chibios/os/rt/src/chthreads.c **** #endif
 357:lib/chibios/os/rt/src/chthreads.c **** 
 358:lib/chibios/os/rt/src/chthreads.c ****   /* Setting up the port-dependent part of the working area.*/
 359:lib/chibios/os/rt/src/chthreads.c ****   PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 512              		.loc 1 359 3 is_stmt 1 view .LVU152
 513 000c A4F16401 		sub	r1, r4, #100
 514              	.LVL26:
 515              		.loc 1 359 3 is_stmt 0 view .LVU153
 516 0010 44F8243C 		str	r3, [r4, #-36]
 517 0014 049B     		ldr	r3, [sp, #16]
 518              	.LVL27:
 519              		.loc 1 359 3 view .LVU154
 520 0016 44F8203C 		str	r3, [r4, #-32]
 521 001a 094B     		ldr	r3, .L9
 522 001c 44F8043C 		str	r3, [r4, #-4]
 523              	.LBB214:
 524              	.LBB215:
  98:lib/chibios/os/rt/src/chthreads.c **** #endif
 525              		.loc 1 98 17 view .LVU155
 526 0020 0025     		movs	r5, #0
  91:lib/chibios/os/rt/src/chthreads.c ****   tp->flags     = CH_FLAG_MODE_STATIC;
 527              		.loc 1 91 17 view .LVU156
 528 0022 0223     		movs	r3, #2
 529              	.LBE215:
 530              	.LBE214:
 531              		.loc 1 359 3 view .LVU157
 532 0024 E160     		str	r1, [r4, #12]
 533              		.loc 1 359 3 is_stmt 1 view .LVU158
 534              		.loc 1 359 3 view .LVU159
 535              		.loc 1 359 3 view .LVU160
 536              		.loc 1 359 3 view .LVU161
 537              		.loc 1 359 3 view .LVU162
 538              		.loc 1 359 43 view .LVU163
 360:lib/chibios/os/rt/src/chthreads.c **** 
 361:lib/chibios/os/rt/src/chthreads.c ****   tp = _thread_init(tp, "noname", prio);
 539              		.loc 1 361 3 view .LVU164
 540              	.LVL28:
 541              	.LBB217:
 542              	.LBI214:
  88:lib/chibios/os/rt/src/chthreads.c **** 
 543              		.loc 1 88 11 view .LVU165
 544              	.LBB216:
  90:lib/chibios/os/rt/src/chthreads.c ****   tp->state     = CH_STATE_WTSTART;
 545              		.loc 1 90 3 view .LVU166
 101:lib/chibios/os/rt/src/chthreads.c **** #endif
 546              		.loc 1 101 17 is_stmt 0 view .LVU167
 547 0026 C4E90655 		strd	r5, r5, [r4, #24]
  90:lib/chibios/os/rt/src/chthreads.c ****   tp->state     = CH_STATE_WTSTART;
 548              		.loc 1 90 17 view .LVU168
 549 002a A260     		str	r2, [r4, #8]
  91:lib/chibios/os/rt/src/chthreads.c ****   tp->flags     = CH_FLAG_MODE_STATIC;
 550              		.loc 1 91 3 is_stmt 1 view .LVU169
  92:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
 551              		.loc 1 92 3 view .LVU170
  91:lib/chibios/os/rt/src/chthreads.c ****   tp->flags     = CH_FLAG_MODE_STATIC;
 552              		.loc 1 91 17 is_stmt 0 view .LVU171
 553 002c 2382     		strh	r3, [r4, #16]	@ movhi
  97:lib/chibios/os/rt/src/chthreads.c ****   tp->mtxlist   = NULL;
 554              		.loc 1 97 3 is_stmt 1 view .LVU172
  97:lib/chibios/os/rt/src/chthreads.c ****   tp->mtxlist   = NULL;
 555              		.loc 1 97 17 is_stmt 0 view .LVU173
 556 002e 2262     		str	r2, [r4, #32]
  98:lib/chibios/os/rt/src/chthreads.c **** #endif
 557              		.loc 1 98 3 is_stmt 1 view .LVU174
 111:lib/chibios/os/rt/src/chthreads.c **** #endif
 558              		.loc 1 111 3 view .LVU175
 122:lib/chibios/os/rt/src/chthreads.c ****   return tp;
 559              		.loc 1 122 3 view .LVU176
 122:lib/chibios/os/rt/src/chthreads.c ****   return tp;
 560              		.loc 1 122 30 view .LVU177
 123:lib/chibios/os/rt/src/chthreads.c **** }
 561              		.loc 1 123 3 view .LVU178
 562              	.LVL29:
 123:lib/chibios/os/rt/src/chthreads.c **** }
 563              		.loc 1 123 3 is_stmt 0 view .LVU179
 564              	.LBE216:
 565              	.LBE217:
 362:lib/chibios/os/rt/src/chthreads.c **** 
 363:lib/chibios/os/rt/src/chthreads.c ****   /* Starting the thread immediately.*/
 364:lib/chibios/os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 566              		.loc 1 364 3 is_stmt 1 view .LVU180
 567 0030 2946     		mov	r1, r5
 568 0032 2046     		mov	r0, r4
 569              	.LVL30:
 570              		.loc 1 364 3 is_stmt 0 view .LVU181
 571 0034 FFF7FEFF 		bl	chSchWakeupS
 572              	.LVL31:
 365:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 573              		.loc 1 365 3 is_stmt 1 view .LVU182
 574              	.LBB218:
 575              	.LBI218:
 365:./lib/chibios/os/rt/include/chsys.h **** 
 576              		.loc 2 365 20 view .LVU183
 577              	.LBB219:
 367:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 578              		.loc 2 367 22 view .LVU184
 368:./lib/chibios/os/rt/include/chsys.h **** 
 579              		.loc 2 368 33 view .LVU185
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 580              		.loc 2 374 3 view .LVU186
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 581              		.loc 2 374 3 view .LVU187
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 582              		.loc 2 374 3 view .LVU188
 583              		.loc 2 378 3 view .LVU189
 584              	.LBB220:
 585              	.LBI220:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 586              		.loc 3 693 27 view .LVU190
 587              	.LBE220:
 588              	.LBE219:
 589              	.LBE218:
 590              		.loc 3 696 3 view .LVU191
 591              	.LBB225:
 592              	.LBB224:
 593              	.LBB223:
 594              	.LBB221:
 595              	.LBI221:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 596              		.loc 4 491 27 view .LVU192
 597              	.LBB222:
 598              		.loc 4 493 3 view .LVU193
 599              		.syntax unified
 600              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 601 0038 85F31188 		MSR basepri, r5
 602              	@ 0 "" 2
 603              	.LVL32:
 604              		.loc 4 493 3 is_stmt 0 view .LVU194
 605              		.thumb
 606              		.syntax unified
 607              	.LBE222:
 608              	.LBE221:
 609              	.LBE223:
 610              	.LBE224:
 611              	.LBE225:
 366:lib/chibios/os/rt/src/chthreads.c **** 
 367:lib/chibios/os/rt/src/chthreads.c ****   return tp;
 612              		.loc 1 367 3 is_stmt 1 view .LVU195
 368:lib/chibios/os/rt/src/chthreads.c **** }
 613              		.loc 1 368 1 is_stmt 0 view .LVU196
 614 003c 2046     		mov	r0, r4
 615 003e 38BD     		pop	{r3, r4, r5, pc}
 616              	.LVL33:
 617              	.L10:
 618              		.loc 1 368 1 view .LVU197
 619              		.align	2
 620              	.L9:
 621 0040 00000000 		.word	_port_thread_start
 622              		.cfi_endproc
 623              	.LFE244:
 625              		.section	.text.chThdStart,"ax",%progbits
 626              		.align	1
 627              		.global	chThdStart
 628              		.syntax unified
 629              		.thumb
 630              		.thumb_func
 631              		.fpu fpv4-sp-d16
 633              	chThdStart:
 634              	.LVL34:
 635              	.LFB245:
 369:lib/chibios/os/rt/src/chthreads.c **** 
 370:lib/chibios/os/rt/src/chthreads.c **** /**
 371:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Resumes a thread created with @p chThdCreateI().
 372:lib/chibios/os/rt/src/chthreads.c ****  *
 373:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 374:lib/chibios/os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 375:lib/chibios/os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 376:lib/chibios/os/rt/src/chthreads.c ****  *
 377:lib/chibios/os/rt/src/chthreads.c ****  * @api
 378:lib/chibios/os/rt/src/chthreads.c ****  */
 379:lib/chibios/os/rt/src/chthreads.c **** thread_t *chThdStart(thread_t *tp) {
 636              		.loc 1 379 36 is_stmt 1 view -0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 0
 639              		@ frame_needed = 0, uses_anonymous_args = 0
 380:lib/chibios/os/rt/src/chthreads.c **** 
 381:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 640              		.loc 1 381 3 view .LVU199
 641              	.LBB226:
 642              	.LBI226:
 353:./lib/chibios/os/rt/include/chsys.h **** 
 643              		.loc 2 353 20 view .LVU200
 644              	.LBE226:
 355:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 645              		.loc 2 355 3 view .LVU201
 646              	.LBB237:
 647              	.LBB227:
 648              	.LBI227:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 649              		.loc 3 669 27 view .LVU202
 650              	.LBE227:
 651              	.LBE237:
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 652              		.loc 3 677 3 view .LVU203
 653              	.LBB238:
 654              	.LBB234:
 655              	.LBB228:
 656              	.LBI228:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 657              		.loc 4 491 27 view .LVU204
 658              	.LBB229:
 659              		.loc 4 493 3 view .LVU205
 660              	.LBE229:
 661              	.LBE228:
 662              	.LBE234:
 663              	.LBE238:
 379:lib/chibios/os/rt/src/chthreads.c **** 
 664              		.loc 1 379 36 is_stmt 0 view .LVU206
 665 0000 10B5     		push	{r4, lr}
 666              		.cfi_def_cfa_offset 8
 667              		.cfi_offset 4, -8
 668              		.cfi_offset 14, -4
 669              	.LBB239:
 670              	.LBB235:
 671              	.LBB232:
 672              	.LBB230:
 673              		.loc 4 493 3 view .LVU207
 674 0002 2023     		movs	r3, #32
 675              	.LBE230:
 676              	.LBE232:
 677              	.LBE235:
 678              	.LBE239:
 379:lib/chibios/os/rt/src/chthreads.c **** 
 679              		.loc 1 379 36 view .LVU208
 680 0004 0446     		mov	r4, r0
 681              	.LBB240:
 682              	.LBB236:
 683              	.LBB233:
 684              	.LBB231:
 685              		.loc 4 493 3 view .LVU209
 686              		.syntax unified
 687              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 688 0006 83F31188 		MSR basepri, r3
 689              	@ 0 "" 2
 690              	.LVL35:
 691              		.loc 4 493 3 view .LVU210
 692              		.thumb
 693              		.syntax unified
 694              	.LBE231:
 695              	.LBE233:
 696              	.LBE236:
 697              	.LBE240:
 356:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 698              		.loc 2 356 34 is_stmt 1 view .LVU211
 357:./lib/chibios/os/rt/include/chsys.h **** }
 699              		.loc 2 357 20 view .LVU212
 382:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(tp->state == CH_STATE_WTSTART, "wrong state");
 700              		.loc 1 382 3 view .LVU213
 701              		.loc 1 382 3 view .LVU214
 702              		.loc 1 382 3 view .LVU215
 383:lib/chibios/os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 703              		.loc 1 383 3 view .LVU216
 704 000a 0021     		movs	r1, #0
 705 000c FFF7FEFF 		bl	chSchWakeupS
 706              	.LVL36:
 384:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 707              		.loc 1 384 3 view .LVU217
 708              	.LBB241:
 709              	.LBI241:
 365:./lib/chibios/os/rt/include/chsys.h **** 
 710              		.loc 2 365 20 view .LVU218
 711              	.LBB242:
 367:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 712              		.loc 2 367 22 view .LVU219
 368:./lib/chibios/os/rt/include/chsys.h **** 
 713              		.loc 2 368 33 view .LVU220
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 714              		.loc 2 374 3 view .LVU221
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 715              		.loc 2 374 3 view .LVU222
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 716              		.loc 2 374 3 view .LVU223
 717              		.loc 2 378 3 view .LVU224
 718              	.LBB243:
 719              	.LBI243:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 720              		.loc 3 693 27 view .LVU225
 721              	.LBE243:
 722              	.LBE242:
 723              	.LBE241:
 724              		.loc 3 696 3 view .LVU226
 725              	.LBB248:
 726              	.LBB247:
 727              	.LBB246:
 728              	.LBB244:
 729              	.LBI244:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 730              		.loc 4 491 27 view .LVU227
 731              	.LBB245:
 732              		.loc 4 493 3 view .LVU228
 733 0010 0023     		movs	r3, #0
 734              		.syntax unified
 735              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 736 0012 83F31188 		MSR basepri, r3
 737              	@ 0 "" 2
 738              	.LVL37:
 739              		.loc 4 493 3 is_stmt 0 view .LVU229
 740              		.thumb
 741              		.syntax unified
 742              	.LBE245:
 743              	.LBE244:
 744              	.LBE246:
 745              	.LBE247:
 746              	.LBE248:
 385:lib/chibios/os/rt/src/chthreads.c **** 
 386:lib/chibios/os/rt/src/chthreads.c ****   return tp;
 747              		.loc 1 386 3 is_stmt 1 view .LVU230
 387:lib/chibios/os/rt/src/chthreads.c **** }
 748              		.loc 1 387 1 is_stmt 0 view .LVU231
 749 0016 2046     		mov	r0, r4
 750 0018 10BD     		pop	{r4, pc}
 751              		.loc 1 387 1 view .LVU232
 752              		.cfi_endproc
 753              	.LFE245:
 755              		.section	.text.chThdExitS,"ax",%progbits
 756              		.align	1
 757              		.global	chThdExitS
 758              		.syntax unified
 759              		.thumb
 760              		.thumb_func
 761              		.fpu fpv4-sp-d16
 763              	chThdExitS:
 764              	.LVL38:
 765              	.LFB247:
 388:lib/chibios/os/rt/src/chthreads.c **** 
 389:lib/chibios/os/rt/src/chthreads.c **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 390:lib/chibios/os/rt/src/chthreads.c **** /**
 391:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Adds a reference to a thread object.
 392:lib/chibios/os/rt/src/chthreads.c ****  * @pre     The configuration option @p CH_CFG_USE_REGISTRY must be enabled in
 393:lib/chibios/os/rt/src/chthreads.c ****  *          order to use this function.
 394:lib/chibios/os/rt/src/chthreads.c ****  *
 395:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 396:lib/chibios/os/rt/src/chthreads.c ****  * @return              The same thread pointer passed as parameter
 397:lib/chibios/os/rt/src/chthreads.c ****  *                      representing the new reference.
 398:lib/chibios/os/rt/src/chthreads.c ****  *
 399:lib/chibios/os/rt/src/chthreads.c ****  * @api
 400:lib/chibios/os/rt/src/chthreads.c ****  */
 401:lib/chibios/os/rt/src/chthreads.c **** thread_t *chThdAddRef(thread_t *tp) {
 402:lib/chibios/os/rt/src/chthreads.c **** 
 403:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 404:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(tp->refs < (trefs_t)255, "too many references");
 405:lib/chibios/os/rt/src/chthreads.c ****   tp->refs++;
 406:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 407:lib/chibios/os/rt/src/chthreads.c **** 
 408:lib/chibios/os/rt/src/chthreads.c ****   return tp;
 409:lib/chibios/os/rt/src/chthreads.c **** }
 410:lib/chibios/os/rt/src/chthreads.c **** 
 411:lib/chibios/os/rt/src/chthreads.c **** /**
 412:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Releases a reference to a thread object.
 413:lib/chibios/os/rt/src/chthreads.c ****  * @details If the references counter reaches zero <b>and</b> the thread
 414:lib/chibios/os/rt/src/chthreads.c ****  *          is in the @p CH_STATE_FINAL state then the thread's memory is
 415:lib/chibios/os/rt/src/chthreads.c ****  *          returned to the proper allocator and the thread is removed
 416:lib/chibios/os/rt/src/chthreads.c ****  *          from the registry.<br>
 417:lib/chibios/os/rt/src/chthreads.c ****  *          Threads whose counter reaches zero and are still active become
 418:lib/chibios/os/rt/src/chthreads.c ****  *          "detached" and will be removed from registry on termination.
 419:lib/chibios/os/rt/src/chthreads.c ****  * @pre     The configuration option @p CH_CFG_USE_REGISTRY must be enabled in
 420:lib/chibios/os/rt/src/chthreads.c ****  *          order to use this function.
 421:lib/chibios/os/rt/src/chthreads.c ****  * @note    Static threads are not affected.
 422:lib/chibios/os/rt/src/chthreads.c ****  *
 423:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 424:lib/chibios/os/rt/src/chthreads.c ****  *
 425:lib/chibios/os/rt/src/chthreads.c ****  * @api
 426:lib/chibios/os/rt/src/chthreads.c ****  */
 427:lib/chibios/os/rt/src/chthreads.c **** void chThdRelease(thread_t *tp) {
 428:lib/chibios/os/rt/src/chthreads.c **** 
 429:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 430:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 431:lib/chibios/os/rt/src/chthreads.c ****   tp->refs--;
 432:lib/chibios/os/rt/src/chthreads.c **** 
 433:lib/chibios/os/rt/src/chthreads.c ****   /* If the references counter reaches zero and the thread is in its
 434:lib/chibios/os/rt/src/chthreads.c ****      terminated state then the memory can be returned to the proper
 435:lib/chibios/os/rt/src/chthreads.c ****      allocator.*/
 436:lib/chibios/os/rt/src/chthreads.c ****   if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 437:lib/chibios/os/rt/src/chthreads.c ****     REG_REMOVE(tp);
 438:lib/chibios/os/rt/src/chthreads.c ****     chSysUnlock();
 439:lib/chibios/os/rt/src/chthreads.c **** 
 440:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 441:lib/chibios/os/rt/src/chthreads.c ****     switch (tp->flags & CH_FLAG_MODE_MASK) {
 442:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_HEAP == TRUE
 443:lib/chibios/os/rt/src/chthreads.c ****     case CH_FLAG_MODE_HEAP:
 444:lib/chibios/os/rt/src/chthreads.c ****       chHeapFree(chThdGetWorkingAreaX(tp));
 445:lib/chibios/os/rt/src/chthreads.c ****       break;
 446:lib/chibios/os/rt/src/chthreads.c **** #endif
 447:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_MEMPOOLS == TRUE
 448:lib/chibios/os/rt/src/chthreads.c ****     case CH_FLAG_MODE_MPOOL:
 449:lib/chibios/os/rt/src/chthreads.c ****       chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 450:lib/chibios/os/rt/src/chthreads.c ****       break;
 451:lib/chibios/os/rt/src/chthreads.c **** #endif
 452:lib/chibios/os/rt/src/chthreads.c ****     default:
 453:lib/chibios/os/rt/src/chthreads.c ****       /* Nothing else to do for static threads.*/
 454:lib/chibios/os/rt/src/chthreads.c ****       break;
 455:lib/chibios/os/rt/src/chthreads.c ****     }
 456:lib/chibios/os/rt/src/chthreads.c **** #endif /* CH_CFG_USE_DYNAMIC == TRUE */
 457:lib/chibios/os/rt/src/chthreads.c ****     return;
 458:lib/chibios/os/rt/src/chthreads.c ****   }
 459:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 460:lib/chibios/os/rt/src/chthreads.c **** }
 461:lib/chibios/os/rt/src/chthreads.c **** #endif /* CH_CFG_USE_REGISTRY == TRUE */
 462:lib/chibios/os/rt/src/chthreads.c **** 
 463:lib/chibios/os/rt/src/chthreads.c **** /**
 464:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Terminates the current thread.
 465:lib/chibios/os/rt/src/chthreads.c ****  * @details The thread goes in the @p CH_STATE_FINAL state holding the
 466:lib/chibios/os/rt/src/chthreads.c ****  *          specified exit status code, other threads can retrieve the
 467:lib/chibios/os/rt/src/chthreads.c ****  *          exit status code by invoking the function @p chThdWait().
 468:lib/chibios/os/rt/src/chthreads.c ****  * @post    Eventual code after this function will never be executed,
 469:lib/chibios/os/rt/src/chthreads.c ****  *          this function never returns. The compiler has no way to
 470:lib/chibios/os/rt/src/chthreads.c ****  *          know this so do not assume that the compiler would remove
 471:lib/chibios/os/rt/src/chthreads.c ****  *          the dead code.
 472:lib/chibios/os/rt/src/chthreads.c ****  *
 473:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] msg       thread exit code
 474:lib/chibios/os/rt/src/chthreads.c ****  *
 475:lib/chibios/os/rt/src/chthreads.c ****  * @api
 476:lib/chibios/os/rt/src/chthreads.c ****  */
 477:lib/chibios/os/rt/src/chthreads.c **** void chThdExit(msg_t msg) {
 478:lib/chibios/os/rt/src/chthreads.c **** 
 479:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 480:lib/chibios/os/rt/src/chthreads.c ****   chThdExitS(msg);
 481:lib/chibios/os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 482:lib/chibios/os/rt/src/chthreads.c **** }
 483:lib/chibios/os/rt/src/chthreads.c **** 
 484:lib/chibios/os/rt/src/chthreads.c **** /**
 485:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Terminates the current thread.
 486:lib/chibios/os/rt/src/chthreads.c ****  * @details The thread goes in the @p CH_STATE_FINAL state holding the
 487:lib/chibios/os/rt/src/chthreads.c ****  *          specified exit status code, other threads can retrieve the
 488:lib/chibios/os/rt/src/chthreads.c ****  *          exit status code by invoking the function @p chThdWait().
 489:lib/chibios/os/rt/src/chthreads.c ****  * @post    Exiting a non-static thread that does not have references
 490:lib/chibios/os/rt/src/chthreads.c ****  *          (detached) causes the thread to remain in the registry.
 491:lib/chibios/os/rt/src/chthreads.c ****  *          It can only be removed by performing a registry scan operation.
 492:lib/chibios/os/rt/src/chthreads.c ****  * @post    Eventual code after this function will never be executed,
 493:lib/chibios/os/rt/src/chthreads.c ****  *          this function never returns. The compiler has no way to
 494:lib/chibios/os/rt/src/chthreads.c ****  *          know this so do not assume that the compiler would remove
 495:lib/chibios/os/rt/src/chthreads.c ****  *          the dead code.
 496:lib/chibios/os/rt/src/chthreads.c ****  *
 497:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] msg       thread exit code
 498:lib/chibios/os/rt/src/chthreads.c ****  *
 499:lib/chibios/os/rt/src/chthreads.c ****  * @sclass
 500:lib/chibios/os/rt/src/chthreads.c ****  */
 501:lib/chibios/os/rt/src/chthreads.c **** void chThdExitS(msg_t msg) {
 766              		.loc 1 501 28 is_stmt 1 view -0
 767              		.cfi_startproc
 768              		@ args = 0, pretend = 0, frame = 0
 769              		@ frame_needed = 0, uses_anonymous_args = 0
 770              		@ link register save eliminated.
 502:lib/chibios/os/rt/src/chthreads.c ****   thread_t *tp = currp;
 771              		.loc 1 502 3 view .LVU234
 503:lib/chibios/os/rt/src/chthreads.c **** 
 504:lib/chibios/os/rt/src/chthreads.c ****   /* Storing exit message.*/
 505:lib/chibios/os/rt/src/chthreads.c ****   tp->u.exitcode = msg;
 772              		.loc 1 505 3 view .LVU235
 502:lib/chibios/os/rt/src/chthreads.c ****   thread_t *tp = currp;
 773              		.loc 1 502 13 is_stmt 0 view .LVU236
 774 0000 024B     		ldr	r3, .L13
 775              		.loc 1 505 18 view .LVU237
 776 0002 1B69     		ldr	r3, [r3, #16]
 777 0004 5861     		str	r0, [r3, #20]
 506:lib/chibios/os/rt/src/chthreads.c **** 
 507:lib/chibios/os/rt/src/chthreads.c ****   /* Exit handler hook.*/
 508:lib/chibios/os/rt/src/chthreads.c ****   CH_CFG_THREAD_EXIT_HOOK(tp);
 778              		.loc 1 508 3 is_stmt 1 view .LVU238
 779              		.loc 1 508 30 view .LVU239
 509:lib/chibios/os/rt/src/chthreads.c **** 
 510:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_WAITEXIT == TRUE
 511:lib/chibios/os/rt/src/chthreads.c ****   /* Waking up any waiting thread.*/
 512:lib/chibios/os/rt/src/chthreads.c ****   while (list_notempty(&tp->waiting)) {
 513:lib/chibios/os/rt/src/chthreads.c ****     (void) chSchReadyI(list_remove(&tp->waiting));
 514:lib/chibios/os/rt/src/chthreads.c ****   }
 515:lib/chibios/os/rt/src/chthreads.c **** #endif
 516:lib/chibios/os/rt/src/chthreads.c **** 
 517:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 518:lib/chibios/os/rt/src/chthreads.c ****   /* Static threads with no references are immediately removed from the
 519:lib/chibios/os/rt/src/chthreads.c ****      registry because there is no memory to recover.*/
 520:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 521:lib/chibios/os/rt/src/chthreads.c ****   if ((tp->refs == (trefs_t)0) &&
 522:lib/chibios/os/rt/src/chthreads.c ****       ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 523:lib/chibios/os/rt/src/chthreads.c ****     REG_REMOVE(tp);
 524:lib/chibios/os/rt/src/chthreads.c ****   }
 525:lib/chibios/os/rt/src/chthreads.c **** #else
 526:lib/chibios/os/rt/src/chthreads.c ****   if (tp->refs == (trefs_t)0) {
 527:lib/chibios/os/rt/src/chthreads.c ****     REG_REMOVE(tp);
 528:lib/chibios/os/rt/src/chthreads.c ****   }
 529:lib/chibios/os/rt/src/chthreads.c **** #endif
 530:lib/chibios/os/rt/src/chthreads.c **** #endif
 531:lib/chibios/os/rt/src/chthreads.c **** 
 532:lib/chibios/os/rt/src/chthreads.c ****   /* Going into final state.*/
 533:lib/chibios/os/rt/src/chthreads.c ****   chSchGoSleepS(CH_STATE_FINAL);
 780              		.loc 1 533 3 view .LVU240
 781 0006 0F20     		movs	r0, #15
 782              	.LVL39:
 783              		.loc 1 533 3 is_stmt 0 view .LVU241
 784 0008 FFF7FEBF 		b	chSchGoSleepS
 785              	.LVL40:
 786              	.L14:
 787              		.loc 1 533 3 view .LVU242
 788              		.align	2
 789              	.L13:
 790 000c 00000000 		.word	ch
 791              		.cfi_endproc
 792              	.LFE247:
 794              		.section	.text.chThdExit,"ax",%progbits
 795              		.align	1
 796              		.global	chThdExit
 797              		.syntax unified
 798              		.thumb
 799              		.thumb_func
 800              		.fpu fpv4-sp-d16
 802              	chThdExit:
 803              	.LVL41:
 804              	.LFB246:
 477:lib/chibios/os/rt/src/chthreads.c **** 
 805              		.loc 1 477 27 is_stmt 1 view -0
 806              		.cfi_startproc
 807              		@ args = 0, pretend = 0, frame = 0
 808              		@ frame_needed = 0, uses_anonymous_args = 0
 809              		@ link register save eliminated.
 479:lib/chibios/os/rt/src/chthreads.c ****   chThdExitS(msg);
 810              		.loc 1 479 3 view .LVU244
 811              	.LBB249:
 812              	.LBI249:
 353:./lib/chibios/os/rt/include/chsys.h **** 
 813              		.loc 2 353 20 view .LVU245
 814              	.LBE249:
 355:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 815              		.loc 2 355 3 view .LVU246
 816              	.LBB254:
 817              	.LBB250:
 818              	.LBI250:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 819              		.loc 3 669 27 view .LVU247
 820              	.LBE250:
 821              	.LBE254:
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 822              		.loc 3 677 3 view .LVU248
 823              	.LBB255:
 824              	.LBB253:
 825              	.LBB251:
 826              	.LBI251:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 827              		.loc 4 491 27 view .LVU249
 828              	.LBB252:
 829              		.loc 4 493 3 view .LVU250
 830 0000 2023     		movs	r3, #32
 831              		.syntax unified
 832              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 833 0002 83F31188 		MSR basepri, r3
 834              	@ 0 "" 2
 835              	.LVL42:
 836              		.loc 4 493 3 is_stmt 0 view .LVU251
 837              		.thumb
 838              		.syntax unified
 839              	.LBE252:
 840              	.LBE251:
 841              	.LBE253:
 842              	.LBE255:
 356:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 843              		.loc 2 356 34 is_stmt 1 view .LVU252
 357:./lib/chibios/os/rt/include/chsys.h **** }
 844              		.loc 2 357 20 view .LVU253
 480:lib/chibios/os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 845              		.loc 1 480 3 view .LVU254
 846 0006 FFF7FEBF 		b	chThdExitS
 847              	.LVL43:
 480:lib/chibios/os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 848              		.loc 1 480 3 is_stmt 0 view .LVU255
 849              		.cfi_endproc
 850              	.LFE246:
 852              		.section	.text.chThdSetPriority,"ax",%progbits
 853              		.align	1
 854              		.global	chThdSetPriority
 855              		.syntax unified
 856              		.thumb
 857              		.thumb_func
 858              		.fpu fpv4-sp-d16
 860              	chThdSetPriority:
 861              	.LVL44:
 862              	.LFB248:
 534:lib/chibios/os/rt/src/chthreads.c **** 
 535:lib/chibios/os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 536:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(false, "zombies apocalypse");
 537:lib/chibios/os/rt/src/chthreads.c **** }
 538:lib/chibios/os/rt/src/chthreads.c **** 
 539:lib/chibios/os/rt/src/chthreads.c **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 540:lib/chibios/os/rt/src/chthreads.c **** /**
 541:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Blocks the execution of the invoking thread until the specified
 542:lib/chibios/os/rt/src/chthreads.c ****  *          thread terminates then the exit code is returned.
 543:lib/chibios/os/rt/src/chthreads.c ****  * @details This function waits for the specified thread to terminate then
 544:lib/chibios/os/rt/src/chthreads.c ****  *          decrements its reference counter, if the counter reaches zero then
 545:lib/chibios/os/rt/src/chthreads.c ****  *          the thread working area is returned to the proper allocator and
 546:lib/chibios/os/rt/src/chthreads.c ****  *          the thread is removed from registry.
 547:lib/chibios/os/rt/src/chthreads.c ****  * @pre     The configuration option @p CH_CFG_USE_WAITEXIT must be enabled in
 548:lib/chibios/os/rt/src/chthreads.c ****  *          order to use this function.
 549:lib/chibios/os/rt/src/chthreads.c ****  * @post    Enabling @p chThdWait() requires 2-4 (depending on the
 550:lib/chibios/os/rt/src/chthreads.c ****  *          architecture) extra bytes in the @p thread_t structure.
 551:lib/chibios/os/rt/src/chthreads.c ****  * @note    If @p CH_CFG_USE_DYNAMIC is not specified this function just waits
 552:lib/chibios/os/rt/src/chthreads.c ****  *          for the thread termination, no memory allocators are involved.
 553:lib/chibios/os/rt/src/chthreads.c ****  *
 554:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 555:lib/chibios/os/rt/src/chthreads.c ****  * @return              The exit code from the terminated thread.
 556:lib/chibios/os/rt/src/chthreads.c ****  *
 557:lib/chibios/os/rt/src/chthreads.c ****  * @api
 558:lib/chibios/os/rt/src/chthreads.c ****  */
 559:lib/chibios/os/rt/src/chthreads.c **** msg_t chThdWait(thread_t *tp) {
 560:lib/chibios/os/rt/src/chthreads.c ****   msg_t msg;
 561:lib/chibios/os/rt/src/chthreads.c **** 
 562:lib/chibios/os/rt/src/chthreads.c ****   chDbgCheck(tp != NULL);
 563:lib/chibios/os/rt/src/chthreads.c **** 
 564:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 565:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(tp != currp, "waiting self");
 566:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 567:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(tp->refs > (trefs_t)0, "no references");
 568:lib/chibios/os/rt/src/chthreads.c **** #endif
 569:lib/chibios/os/rt/src/chthreads.c **** 
 570:lib/chibios/os/rt/src/chthreads.c ****   if (tp->state != CH_STATE_FINAL) {
 571:lib/chibios/os/rt/src/chthreads.c ****     list_insert(currp, &tp->waiting);
 572:lib/chibios/os/rt/src/chthreads.c ****     chSchGoSleepS(CH_STATE_WTEXIT);
 573:lib/chibios/os/rt/src/chthreads.c ****   }
 574:lib/chibios/os/rt/src/chthreads.c ****   msg = tp->u.exitcode;
 575:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 576:lib/chibios/os/rt/src/chthreads.c **** 
 577:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 578:lib/chibios/os/rt/src/chthreads.c ****   /* Releasing a reference to the thread.*/
 579:lib/chibios/os/rt/src/chthreads.c ****   chThdRelease(tp);
 580:lib/chibios/os/rt/src/chthreads.c **** #endif
 581:lib/chibios/os/rt/src/chthreads.c **** 
 582:lib/chibios/os/rt/src/chthreads.c ****   return msg;
 583:lib/chibios/os/rt/src/chthreads.c **** }
 584:lib/chibios/os/rt/src/chthreads.c **** #endif /* CH_CFG_USE_WAITEXIT */
 585:lib/chibios/os/rt/src/chthreads.c **** 
 586:lib/chibios/os/rt/src/chthreads.c **** /**
 587:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Changes the running thread priority level then reschedules if
 588:lib/chibios/os/rt/src/chthreads.c ****  *          necessary.
 589:lib/chibios/os/rt/src/chthreads.c ****  * @note    The function returns the real thread priority regardless of the
 590:lib/chibios/os/rt/src/chthreads.c ****  *          current priority that could be higher than the real priority
 591:lib/chibios/os/rt/src/chthreads.c ****  *          because the priority inheritance mechanism.
 592:lib/chibios/os/rt/src/chthreads.c ****  *
 593:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] newprio   the new priority level of the running thread
 594:lib/chibios/os/rt/src/chthreads.c ****  * @return              The old priority level.
 595:lib/chibios/os/rt/src/chthreads.c ****  *
 596:lib/chibios/os/rt/src/chthreads.c ****  * @api
 597:lib/chibios/os/rt/src/chthreads.c ****  */
 598:lib/chibios/os/rt/src/chthreads.c **** tprio_t chThdSetPriority(tprio_t newprio) {
 863              		.loc 1 598 43 is_stmt 1 view -0
 864              		.cfi_startproc
 865              		@ args = 0, pretend = 0, frame = 0
 866              		@ frame_needed = 0, uses_anonymous_args = 0
 599:lib/chibios/os/rt/src/chthreads.c ****   tprio_t oldprio;
 867              		.loc 1 599 3 view .LVU257
 600:lib/chibios/os/rt/src/chthreads.c **** 
 601:lib/chibios/os/rt/src/chthreads.c ****   chDbgCheck(newprio <= HIGHPRIO);
 868              		.loc 1 601 3 view .LVU258
 869              		.loc 1 601 3 view .LVU259
 870              		.loc 1 601 3 view .LVU260
 602:lib/chibios/os/rt/src/chthreads.c **** 
 603:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 871              		.loc 1 603 3 view .LVU261
 872              	.LBB256:
 873              	.LBI256:
 353:./lib/chibios/os/rt/include/chsys.h **** 
 874              		.loc 2 353 20 view .LVU262
 875              	.LBE256:
 355:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 876              		.loc 2 355 3 view .LVU263
 877              	.LBB264:
 878              	.LBB257:
 879              	.LBI257:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 880              		.loc 3 669 27 view .LVU264
 881              	.LBE257:
 882              	.LBE264:
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 883              		.loc 3 677 3 view .LVU265
 884              	.LBB265:
 885              	.LBB262:
 886              	.LBB258:
 887              	.LBI258:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 888              		.loc 4 491 27 view .LVU266
 889              	.LBB259:
 890              		.loc 4 493 3 view .LVU267
 891              	.LBE259:
 892              	.LBE258:
 893              	.LBE262:
 894              	.LBE265:
 598:lib/chibios/os/rt/src/chthreads.c ****   tprio_t oldprio;
 895              		.loc 1 598 43 is_stmt 0 view .LVU268
 896 0000 10B5     		push	{r4, lr}
 897              		.cfi_def_cfa_offset 8
 898              		.cfi_offset 4, -8
 899              		.cfi_offset 14, -4
 900              	.LBB266:
 901              	.LBB263:
 902              	.LBB261:
 903              	.LBB260:
 904              		.loc 4 493 3 view .LVU269
 905 0002 2023     		movs	r3, #32
 906              		.syntax unified
 907              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 908 0004 83F31188 		MSR basepri, r3
 909              	@ 0 "" 2
 910              	.LVL45:
 911              		.loc 4 493 3 view .LVU270
 912              		.thumb
 913              		.syntax unified
 914              	.LBE260:
 915              	.LBE261:
 916              	.LBE263:
 917              	.LBE266:
 356:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 918              		.loc 2 356 34 is_stmt 1 view .LVU271
 357:./lib/chibios/os/rt/include/chsys.h **** }
 919              		.loc 2 357 20 view .LVU272
 604:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_MUTEXES == TRUE
 605:lib/chibios/os/rt/src/chthreads.c ****   oldprio = currp->realprio;
 920              		.loc 1 605 3 view .LVU273
 921              		.loc 1 605 13 is_stmt 0 view .LVU274
 922 0008 084B     		ldr	r3, .L19
 923 000a 1B69     		ldr	r3, [r3, #16]
 924              		.loc 1 605 11 view .LVU275
 925 000c 1C6A     		ldr	r4, [r3, #32]
 926              	.LVL46:
 606:lib/chibios/os/rt/src/chthreads.c ****   if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 927              		.loc 1 606 3 is_stmt 1 view .LVU276
 928              		.loc 1 606 13 is_stmt 0 view .LVU277
 929 000e 9A68     		ldr	r2, [r3, #8]
 930              		.loc 1 606 6 view .LVU278
 931 0010 A242     		cmp	r2, r4
 932 0012 01D0     		beq	.L17
 933              		.loc 1 606 40 discriminator 1 view .LVU279
 934 0014 8242     		cmp	r2, r0
 935 0016 00D2     		bcs	.L18
 936              	.L17:
 607:lib/chibios/os/rt/src/chthreads.c ****     currp->prio = newprio;
 937              		.loc 1 607 5 is_stmt 1 view .LVU280
 938              		.loc 1 607 17 is_stmt 0 view .LVU281
 939 0018 9860     		str	r0, [r3, #8]
 940              	.L18:
 608:lib/chibios/os/rt/src/chthreads.c ****   }
 609:lib/chibios/os/rt/src/chthreads.c ****   currp->realprio = newprio;
 941              		.loc 1 609 3 is_stmt 1 view .LVU282
 942              		.loc 1 609 19 is_stmt 0 view .LVU283
 943 001a 1862     		str	r0, [r3, #32]
 610:lib/chibios/os/rt/src/chthreads.c **** #else
 611:lib/chibios/os/rt/src/chthreads.c ****   oldprio = currp->prio;
 612:lib/chibios/os/rt/src/chthreads.c ****   currp->prio = newprio;
 613:lib/chibios/os/rt/src/chthreads.c **** #endif
 614:lib/chibios/os/rt/src/chthreads.c ****   chSchRescheduleS();
 944              		.loc 1 614 3 is_stmt 1 view .LVU284
 945 001c FFF7FEFF 		bl	chSchRescheduleS
 946              	.LVL47:
 615:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 947              		.loc 1 615 3 view .LVU285
 948              	.LBB267:
 949              	.LBI267:
 365:./lib/chibios/os/rt/include/chsys.h **** 
 950              		.loc 2 365 20 view .LVU286
 951              	.LBB268:
 367:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 952              		.loc 2 367 22 view .LVU287
 368:./lib/chibios/os/rt/include/chsys.h **** 
 953              		.loc 2 368 33 view .LVU288
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 954              		.loc 2 374 3 view .LVU289
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 955              		.loc 2 374 3 view .LVU290
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 956              		.loc 2 374 3 view .LVU291
 957              		.loc 2 378 3 view .LVU292
 958              	.LBB269:
 959              	.LBI269:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 960              		.loc 3 693 27 view .LVU293
 961              	.LBE269:
 962              	.LBE268:
 963              	.LBE267:
 964              		.loc 3 696 3 view .LVU294
 965              	.LBB274:
 966              	.LBB273:
 967              	.LBB272:
 968              	.LBB270:
 969              	.LBI270:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 970              		.loc 4 491 27 view .LVU295
 971              	.LBB271:
 972              		.loc 4 493 3 view .LVU296
 973 0020 0023     		movs	r3, #0
 974              		.syntax unified
 975              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 976 0022 83F31188 		MSR basepri, r3
 977              	@ 0 "" 2
 978              	.LVL48:
 979              		.loc 4 493 3 is_stmt 0 view .LVU297
 980              		.thumb
 981              		.syntax unified
 982              	.LBE271:
 983              	.LBE270:
 984              	.LBE272:
 985              	.LBE273:
 986              	.LBE274:
 616:lib/chibios/os/rt/src/chthreads.c **** 
 617:lib/chibios/os/rt/src/chthreads.c ****   return oldprio;
 987              		.loc 1 617 3 is_stmt 1 view .LVU298
 618:lib/chibios/os/rt/src/chthreads.c **** }
 988              		.loc 1 618 1 is_stmt 0 view .LVU299
 989 0026 2046     		mov	r0, r4
 990 0028 10BD     		pop	{r4, pc}
 991              	.LVL49:
 992              	.L20:
 993              		.loc 1 618 1 view .LVU300
 994 002a 00BF     		.align	2
 995              	.L19:
 996 002c 00000000 		.word	ch
 997              		.cfi_endproc
 998              	.LFE248:
 1000              		.section	.text.chThdTerminate,"ax",%progbits
 1001              		.align	1
 1002              		.global	chThdTerminate
 1003              		.syntax unified
 1004              		.thumb
 1005              		.thumb_func
 1006              		.fpu fpv4-sp-d16
 1008              	chThdTerminate:
 1009              	.LVL50:
 1010              	.LFB249:
 619:lib/chibios/os/rt/src/chthreads.c **** 
 620:lib/chibios/os/rt/src/chthreads.c **** /**
 621:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Requests a thread termination.
 622:lib/chibios/os/rt/src/chthreads.c ****  * @pre     The target thread must be written to invoke periodically
 623:lib/chibios/os/rt/src/chthreads.c ****  *          @p chThdShouldTerminate() and terminate cleanly if it returns
 624:lib/chibios/os/rt/src/chthreads.c ****  *          @p true.
 625:lib/chibios/os/rt/src/chthreads.c ****  * @post    The specified thread will terminate after detecting the termination
 626:lib/chibios/os/rt/src/chthreads.c ****  *          condition.
 627:lib/chibios/os/rt/src/chthreads.c ****  *
 628:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 629:lib/chibios/os/rt/src/chthreads.c ****  *
 630:lib/chibios/os/rt/src/chthreads.c ****  * @api
 631:lib/chibios/os/rt/src/chthreads.c ****  */
 632:lib/chibios/os/rt/src/chthreads.c **** void chThdTerminate(thread_t *tp) {
 1011              		.loc 1 632 35 is_stmt 1 view -0
 1012              		.cfi_startproc
 1013              		@ args = 0, pretend = 0, frame = 0
 1014              		@ frame_needed = 0, uses_anonymous_args = 0
 1015              		@ link register save eliminated.
 633:lib/chibios/os/rt/src/chthreads.c **** 
 634:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 1016              		.loc 1 634 3 view .LVU302
 1017              	.LBB275:
 1018              	.LBI275:
 353:./lib/chibios/os/rt/include/chsys.h **** 
 1019              		.loc 2 353 20 view .LVU303
 1020              	.LBE275:
 355:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 1021              		.loc 2 355 3 view .LVU304
 1022              	.LBB280:
 1023              	.LBB276:
 1024              	.LBI276:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 1025              		.loc 3 669 27 view .LVU305
 1026              	.LBE276:
 1027              	.LBE280:
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 1028              		.loc 3 677 3 view .LVU306
 1029              	.LBB281:
 1030              	.LBB279:
 1031              	.LBB277:
 1032              	.LBI277:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 1033              		.loc 4 491 27 view .LVU307
 1034              	.LBB278:
 1035              		.loc 4 493 3 view .LVU308
 1036 0000 2023     		movs	r3, #32
 1037              		.syntax unified
 1038              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 1039 0002 83F31188 		MSR basepri, r3
 1040              	@ 0 "" 2
 1041              	.LVL51:
 1042              		.loc 4 493 3 is_stmt 0 view .LVU309
 1043              		.thumb
 1044              		.syntax unified
 1045              	.LBE278:
 1046              	.LBE277:
 1047              	.LBE279:
 1048              	.LBE281:
 356:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 1049              		.loc 2 356 34 is_stmt 1 view .LVU310
 357:./lib/chibios/os/rt/include/chsys.h **** }
 1050              		.loc 2 357 20 view .LVU311
 635:lib/chibios/os/rt/src/chthreads.c ****   tp->flags |= CH_FLAG_TERMINATE;
 1051              		.loc 1 635 3 view .LVU312
 1052              		.loc 1 635 13 is_stmt 0 view .LVU313
 1053 0006 437C     		ldrb	r3, [r0, #17]	@ zero_extendqisi2
 1054 0008 43F00403 		orr	r3, r3, #4
 1055 000c 4374     		strb	r3, [r0, #17]
 636:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 1056              		.loc 1 636 3 is_stmt 1 view .LVU314
 1057              	.LBB282:
 1058              	.LBI282:
 365:./lib/chibios/os/rt/include/chsys.h **** 
 1059              		.loc 2 365 20 view .LVU315
 1060              	.LBB283:
 367:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 1061              		.loc 2 367 22 view .LVU316
 368:./lib/chibios/os/rt/include/chsys.h **** 
 1062              		.loc 2 368 33 view .LVU317
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1063              		.loc 2 374 3 view .LVU318
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1064              		.loc 2 374 3 view .LVU319
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1065              		.loc 2 374 3 view .LVU320
 1066              		.loc 2 378 3 view .LVU321
 1067              	.LBB284:
 1068              	.LBI284:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 1069              		.loc 3 693 27 view .LVU322
 1070              	.LBE284:
 1071              	.LBE283:
 1072              	.LBE282:
 1073              		.loc 3 696 3 view .LVU323
 1074              	.LVL52:
 1075              	.LBB289:
 1076              	.LBB288:
 1077              	.LBB287:
 1078              	.LBB285:
 1079              	.LBI285:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 1080              		.loc 4 491 27 view .LVU324
 1081              	.LBB286:
 1082              		.loc 4 493 3 view .LVU325
 1083 000e 0023     		movs	r3, #0
 1084              		.syntax unified
 1085              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 1086 0010 83F31188 		MSR basepri, r3
 1087              	@ 0 "" 2
 1088              	.LVL53:
 1089              		.loc 4 493 3 is_stmt 0 view .LVU326
 1090              		.thumb
 1091              		.syntax unified
 1092              	.LBE286:
 1093              	.LBE285:
 1094              	.LBE287:
 1095              	.LBE288:
 1096              	.LBE289:
 637:lib/chibios/os/rt/src/chthreads.c **** }
 1097              		.loc 1 637 1 view .LVU327
 1098 0014 7047     		bx	lr
 1099              		.cfi_endproc
 1100              	.LFE249:
 1102              		.section	.text.chThdSleep,"ax",%progbits
 1103              		.align	1
 1104              		.global	chThdSleep
 1105              		.syntax unified
 1106              		.thumb
 1107              		.thumb_func
 1108              		.fpu fpv4-sp-d16
 1110              	chThdSleep:
 1111              	.LVL54:
 1112              	.LFB250:
 638:lib/chibios/os/rt/src/chthreads.c **** 
 639:lib/chibios/os/rt/src/chthreads.c **** /**
 640:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Suspends the invoking thread for the specified time.
 641:lib/chibios/os/rt/src/chthreads.c ****  *
 642:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] time      the delay in system ticks, the special values are
 643:lib/chibios/os/rt/src/chthreads.c ****  *                      handled as follow:
 644:lib/chibios/os/rt/src/chthreads.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 645:lib/chibios/os/rt/src/chthreads.c ****  *                        state.
 646:lib/chibios/os/rt/src/chthreads.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 647:lib/chibios/os/rt/src/chthreads.c ****  *                      .
 648:lib/chibios/os/rt/src/chthreads.c ****  *
 649:lib/chibios/os/rt/src/chthreads.c ****  * @api
 650:lib/chibios/os/rt/src/chthreads.c ****  */
 651:lib/chibios/os/rt/src/chthreads.c **** void chThdSleep(sysinterval_t time) {
 1113              		.loc 1 651 37 is_stmt 1 view -0
 1114              		.cfi_startproc
 1115              		@ args = 0, pretend = 0, frame = 0
 1116              		@ frame_needed = 0, uses_anonymous_args = 0
 652:lib/chibios/os/rt/src/chthreads.c **** 
 653:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 1117              		.loc 1 653 3 view .LVU329
 1118              	.LBB301:
 1119              	.LBI301:
 353:./lib/chibios/os/rt/include/chsys.h **** 
 1120              		.loc 2 353 20 view .LVU330
 1121              	.LBE301:
 355:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 1122              		.loc 2 355 3 view .LVU331
 1123              	.LBB309:
 1124              	.LBB302:
 1125              	.LBI302:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 1126              		.loc 3 669 27 view .LVU332
 1127              	.LBE302:
 1128              	.LBE309:
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 1129              		.loc 3 677 3 view .LVU333
 1130              	.LBB310:
 1131              	.LBB307:
 1132              	.LBB303:
 1133              	.LBI303:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 1134              		.loc 4 491 27 view .LVU334
 1135              	.LBB304:
 1136              		.loc 4 493 3 view .LVU335
 1137              	.LBE304:
 1138              	.LBE303:
 1139              	.LBE307:
 1140              	.LBE310:
 651:lib/chibios/os/rt/src/chthreads.c **** 
 1141              		.loc 1 651 37 is_stmt 0 view .LVU336
 1142 0000 08B5     		push	{r3, lr}
 1143              		.cfi_def_cfa_offset 8
 1144              		.cfi_offset 3, -8
 1145              		.cfi_offset 14, -4
 651:lib/chibios/os/rt/src/chthreads.c **** 
 1146              		.loc 1 651 37 view .LVU337
 1147 0002 0146     		mov	r1, r0
 1148              	.LBB311:
 1149              	.LBB308:
 1150              	.LBB306:
 1151              	.LBB305:
 1152              		.loc 4 493 3 view .LVU338
 1153 0004 2023     		movs	r3, #32
 1154              		.syntax unified
 1155              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 1156 0006 83F31188 		MSR basepri, r3
 1157              	@ 0 "" 2
 1158              	.LVL55:
 1159              		.loc 4 493 3 view .LVU339
 1160              		.thumb
 1161              		.syntax unified
 1162              	.LBE305:
 1163              	.LBE306:
 1164              	.LBE308:
 1165              	.LBE311:
 356:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 1166              		.loc 2 356 34 is_stmt 1 view .LVU340
 357:./lib/chibios/os/rt/include/chsys.h **** }
 1167              		.loc 2 357 20 view .LVU341
 654:lib/chibios/os/rt/src/chthreads.c ****   chThdSleepS(time);
 1168              		.loc 1 654 3 view .LVU342
 1169              	.LBB312:
 1170              	.LBI312:
 1171              		.file 5 "./lib/chibios/os/rt/include/chthreads.h"
   1:./lib/chibios/os/rt/include/chthreads.h **** /*
   2:./lib/chibios/os/rt/include/chthreads.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chthreads.h **** 
   4:./lib/chibios/os/rt/include/chthreads.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chthreads.h **** 
   6:./lib/chibios/os/rt/include/chthreads.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chthreads.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chthreads.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chthreads.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chthreads.h **** 
  11:./lib/chibios/os/rt/include/chthreads.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chthreads.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chthreads.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chthreads.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chthreads.h **** 
  16:./lib/chibios/os/rt/include/chthreads.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chthreads.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chthreads.h **** */
  19:./lib/chibios/os/rt/include/chthreads.h **** 
  20:./lib/chibios/os/rt/include/chthreads.h **** /**
  21:./lib/chibios/os/rt/include/chthreads.h ****  * @file    rt/include/chthreads.h
  22:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Threads module macros and structures.
  23:./lib/chibios/os/rt/include/chthreads.h ****  *
  24:./lib/chibios/os/rt/include/chthreads.h ****  * @addtogroup threads
  25:./lib/chibios/os/rt/include/chthreads.h ****  * @{
  26:./lib/chibios/os/rt/include/chthreads.h ****  */
  27:./lib/chibios/os/rt/include/chthreads.h **** 
  28:./lib/chibios/os/rt/include/chthreads.h **** #ifndef CHTHREADS_H
  29:./lib/chibios/os/rt/include/chthreads.h **** #define CHTHREADS_H
  30:./lib/chibios/os/rt/include/chthreads.h **** 
  31:./lib/chibios/os/rt/include/chthreads.h **** /*lint -sem(chThdExit, r_no) -sem(chThdExitS, r_no)*/
  32:./lib/chibios/os/rt/include/chthreads.h **** 
  33:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chthreads.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chthreads.h **** 
  37:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  38:./lib/chibios/os/rt/include/chthreads.h **** /* Module pre-compile time settings.                                         */
  39:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  40:./lib/chibios/os/rt/include/chthreads.h **** 
  41:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  42:./lib/chibios/os/rt/include/chthreads.h **** /* Derived constants and error checks.                                       */
  43:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  44:./lib/chibios/os/rt/include/chthreads.h **** 
  45:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  46:./lib/chibios/os/rt/include/chthreads.h **** /* Module data structures and types.                                         */
  47:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  48:./lib/chibios/os/rt/include/chthreads.h **** 
  49:./lib/chibios/os/rt/include/chthreads.h **** /**
  50:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Thread function.
  51:./lib/chibios/os/rt/include/chthreads.h ****  */
  52:./lib/chibios/os/rt/include/chthreads.h **** typedef void (*tfunc_t)(void *p);
  53:./lib/chibios/os/rt/include/chthreads.h **** 
  54:./lib/chibios/os/rt/include/chthreads.h **** /**
  55:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  56:./lib/chibios/os/rt/include/chthreads.h ****  */
  57:./lib/chibios/os/rt/include/chthreads.h **** typedef struct {
  58:./lib/chibios/os/rt/include/chthreads.h ****   /**
  59:./lib/chibios/os/rt/include/chthreads.h ****    * @brief   Thread name.
  60:./lib/chibios/os/rt/include/chthreads.h ****    */
  61:./lib/chibios/os/rt/include/chthreads.h ****   const char        *name;
  62:./lib/chibios/os/rt/include/chthreads.h ****   /**
  63:./lib/chibios/os/rt/include/chthreads.h ****    * @brief   Pointer to the working area base.
  64:./lib/chibios/os/rt/include/chthreads.h ****    */
  65:./lib/chibios/os/rt/include/chthreads.h ****   stkalign_t        *wbase;
  66:./lib/chibios/os/rt/include/chthreads.h ****   /**
  67:./lib/chibios/os/rt/include/chthreads.h ****    * @brief   End of the working area.
  68:./lib/chibios/os/rt/include/chthreads.h ****    */
  69:./lib/chibios/os/rt/include/chthreads.h ****   stkalign_t        *wend;
  70:./lib/chibios/os/rt/include/chthreads.h ****   /**
  71:./lib/chibios/os/rt/include/chthreads.h ****    * @brief   Thread priority.
  72:./lib/chibios/os/rt/include/chthreads.h ****    */
  73:./lib/chibios/os/rt/include/chthreads.h ****   tprio_t           prio;
  74:./lib/chibios/os/rt/include/chthreads.h ****   /**
  75:./lib/chibios/os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
  76:./lib/chibios/os/rt/include/chthreads.h ****    */
  77:./lib/chibios/os/rt/include/chthreads.h ****   tfunc_t           funcp;
  78:./lib/chibios/os/rt/include/chthreads.h ****   /**
  79:./lib/chibios/os/rt/include/chthreads.h ****    * @brief   Thread argument.
  80:./lib/chibios/os/rt/include/chthreads.h ****    */
  81:./lib/chibios/os/rt/include/chthreads.h ****   void              *arg;
  82:./lib/chibios/os/rt/include/chthreads.h **** } thread_descriptor_t;
  83:./lib/chibios/os/rt/include/chthreads.h **** 
  84:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  85:./lib/chibios/os/rt/include/chthreads.h **** /* Module macros.                                                            */
  86:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  87:./lib/chibios/os/rt/include/chthreads.h **** 
  88:./lib/chibios/os/rt/include/chthreads.h **** /**
  89:./lib/chibios/os/rt/include/chthreads.h ****  * @name    Threads queues
  90:./lib/chibios/os/rt/include/chthreads.h ****  */
  91:./lib/chibios/os/rt/include/chthreads.h **** /**
  92:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Data part of a static threads queue object initializer.
  93:./lib/chibios/os/rt/include/chthreads.h ****  * @details This macro should be used when statically initializing a threads
  94:./lib/chibios/os/rt/include/chthreads.h ****  *          queue that is part of a bigger structure.
  95:./lib/chibios/os/rt/include/chthreads.h ****  *
  96:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
  97:./lib/chibios/os/rt/include/chthreads.h ****  */
  98:./lib/chibios/os/rt/include/chthreads.h **** #define _THREADS_QUEUE_DATA(name) {(thread_t *)&name, (thread_t *)&name}
  99:./lib/chibios/os/rt/include/chthreads.h **** 
 100:./lib/chibios/os/rt/include/chthreads.h **** /**
 101:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Static threads queue object initializer.
 102:./lib/chibios/os/rt/include/chthreads.h ****  * @details Statically initialized threads queues require no explicit
 103:./lib/chibios/os/rt/include/chthreads.h ****  *          initialization using @p queue_init().
 104:./lib/chibios/os/rt/include/chthreads.h ****  *
 105:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
 106:./lib/chibios/os/rt/include/chthreads.h ****  */
 107:./lib/chibios/os/rt/include/chthreads.h **** #define _THREADS_QUEUE_DECL(name)                                           \
 108:./lib/chibios/os/rt/include/chthreads.h ****   threads_queue_t name = _THREADS_QUEUE_DATA(name)
 109:./lib/chibios/os/rt/include/chthreads.h **** /** @} */
 110:./lib/chibios/os/rt/include/chthreads.h **** 
 111:./lib/chibios/os/rt/include/chthreads.h **** /**
 112:./lib/chibios/os/rt/include/chthreads.h ****  * @name    Working Areas
 113:./lib/chibios/os/rt/include/chthreads.h ****  */
 114:./lib/chibios/os/rt/include/chthreads.h **** /**
 115:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Calculates the total Working Area size.
 116:./lib/chibios/os/rt/include/chthreads.h ****  *
 117:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 118:./lib/chibios/os/rt/include/chthreads.h ****  * @return              The total used memory in bytes.
 119:./lib/chibios/os/rt/include/chthreads.h ****  *
 120:./lib/chibios/os/rt/include/chthreads.h ****  * @api
 121:./lib/chibios/os/rt/include/chthreads.h ****  */
 122:./lib/chibios/os/rt/include/chthreads.h **** #define THD_WORKING_AREA_SIZE(n)                                            \
 123:./lib/chibios/os/rt/include/chthreads.h ****   MEM_ALIGN_NEXT(sizeof(thread_t) + PORT_WA_SIZE(n), PORT_STACK_ALIGN)
 124:./lib/chibios/os/rt/include/chthreads.h **** 
 125:./lib/chibios/os/rt/include/chthreads.h **** /**
 126:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Static working area allocation.
 127:./lib/chibios/os/rt/include/chthreads.h ****  * @details This macro is used to allocate a static thread working area
 128:./lib/chibios/os/rt/include/chthreads.h ****  *          aligned as both position and size.
 129:./lib/chibios/os/rt/include/chthreads.h ****  *
 130:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] s         the name to be assigned to the stack array
 131:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 132:./lib/chibios/os/rt/include/chthreads.h ****  *
 133:./lib/chibios/os/rt/include/chthreads.h ****  * @api
 134:./lib/chibios/os/rt/include/chthreads.h ****  */
 135:./lib/chibios/os/rt/include/chthreads.h **** #define THD_WORKING_AREA(s, n) PORT_WORKING_AREA(s, n)
 136:./lib/chibios/os/rt/include/chthreads.h **** 
 137:./lib/chibios/os/rt/include/chthreads.h **** /**
 138:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Base of a working area casted to the correct type.
 139:./lib/chibios/os/rt/include/chthreads.h ****  *
 140:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 141:./lib/chibios/os/rt/include/chthreads.h ****  */
 142:./lib/chibios/os/rt/include/chthreads.h **** #define THD_WORKING_AREA_BASE(s) ((stkalign_t *)(s))
 143:./lib/chibios/os/rt/include/chthreads.h **** 
 144:./lib/chibios/os/rt/include/chthreads.h **** /**
 145:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   End of a working area casted to the correct type.
 146:./lib/chibios/os/rt/include/chthreads.h ****  *
 147:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 148:./lib/chibios/os/rt/include/chthreads.h ****  */
 149:./lib/chibios/os/rt/include/chthreads.h **** #define THD_WORKING_AREA_END(s) (THD_WORKING_AREA_BASE(s) +                 \
 150:./lib/chibios/os/rt/include/chthreads.h ****                                  (sizeof (s) / sizeof (stkalign_t)))
 151:./lib/chibios/os/rt/include/chthreads.h **** /** @} */
 152:./lib/chibios/os/rt/include/chthreads.h **** 
 153:./lib/chibios/os/rt/include/chthreads.h **** /**
 154:./lib/chibios/os/rt/include/chthreads.h ****  * @name    Threads abstraction macros
 155:./lib/chibios/os/rt/include/chthreads.h ****  */
 156:./lib/chibios/os/rt/include/chthreads.h **** /**
 157:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Thread declaration macro.
 158:./lib/chibios/os/rt/include/chthreads.h ****  * @note    Thread declarations should be performed using this macro because
 159:./lib/chibios/os/rt/include/chthreads.h ****  *          the port layer could define optimizations for thread functions.
 160:./lib/chibios/os/rt/include/chthreads.h ****  */
 161:./lib/chibios/os/rt/include/chthreads.h **** #define THD_FUNCTION(tname, arg) PORT_THD_FUNCTION(tname, arg)
 162:./lib/chibios/os/rt/include/chthreads.h **** /** @} */
 163:./lib/chibios/os/rt/include/chthreads.h **** 
 164:./lib/chibios/os/rt/include/chthreads.h **** /**
 165:./lib/chibios/os/rt/include/chthreads.h ****  * @name    Macro Functions
 166:./lib/chibios/os/rt/include/chthreads.h ****  * @{
 167:./lib/chibios/os/rt/include/chthreads.h ****  */
 168:./lib/chibios/os/rt/include/chthreads.h **** /**
 169:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 170:./lib/chibios/os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 171:./lib/chibios/os/rt/include/chthreads.h ****  *          system tick clock.
 172:./lib/chibios/os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 173:./lib/chibios/os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 174:./lib/chibios/os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 175:./lib/chibios/os/rt/include/chthreads.h ****  *          converted.
 176:./lib/chibios/os/rt/include/chthreads.h ****  *
 177:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] sec       time in seconds, must be different from zero
 178:./lib/chibios/os/rt/include/chthreads.h ****  *
 179:./lib/chibios/os/rt/include/chthreads.h ****  * @api
 180:./lib/chibios/os/rt/include/chthreads.h ****  */
 181:./lib/chibios/os/rt/include/chthreads.h **** #define chThdSleepSeconds(sec) chThdSleep(TIME_S2I(sec))
 182:./lib/chibios/os/rt/include/chthreads.h **** 
 183:./lib/chibios/os/rt/include/chthreads.h **** /**
 184:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 185:./lib/chibios/os/rt/include/chthreads.h ****  *          milliseconds.
 186:./lib/chibios/os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 187:./lib/chibios/os/rt/include/chthreads.h ****  *          system tick clock.
 188:./lib/chibios/os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 189:./lib/chibios/os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 190:./lib/chibios/os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 191:./lib/chibios/os/rt/include/chthreads.h ****  *          converted.
 192:./lib/chibios/os/rt/include/chthreads.h ****  *
 193:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 194:./lib/chibios/os/rt/include/chthreads.h ****  *
 195:./lib/chibios/os/rt/include/chthreads.h ****  * @api
 196:./lib/chibios/os/rt/include/chthreads.h ****  */
 197:./lib/chibios/os/rt/include/chthreads.h **** #define chThdSleepMilliseconds(msec) chThdSleep(TIME_MS2I(msec))
 198:./lib/chibios/os/rt/include/chthreads.h **** 
 199:./lib/chibios/os/rt/include/chthreads.h **** /**
 200:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 201:./lib/chibios/os/rt/include/chthreads.h ****  *          microseconds.
 202:./lib/chibios/os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 203:./lib/chibios/os/rt/include/chthreads.h ****  *          system tick clock.
 204:./lib/chibios/os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 205:./lib/chibios/os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 206:./lib/chibios/os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 207:./lib/chibios/os/rt/include/chthreads.h ****  *          converted.
 208:./lib/chibios/os/rt/include/chthreads.h ****  *
 209:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] usec      time in microseconds, must be different from zero
 210:./lib/chibios/os/rt/include/chthreads.h ****  *
 211:./lib/chibios/os/rt/include/chthreads.h ****  * @api
 212:./lib/chibios/os/rt/include/chthreads.h ****  */
 213:./lib/chibios/os/rt/include/chthreads.h **** #define chThdSleepMicroseconds(usec) chThdSleep(TIME_US2I(usec))
 214:./lib/chibios/os/rt/include/chthreads.h **** /** @} */
 215:./lib/chibios/os/rt/include/chthreads.h **** 
 216:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
 217:./lib/chibios/os/rt/include/chthreads.h **** /* External declarations.                                                    */
 218:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
 219:./lib/chibios/os/rt/include/chthreads.h **** 
 220:./lib/chibios/os/rt/include/chthreads.h **** #ifdef __cplusplus
 221:./lib/chibios/os/rt/include/chthreads.h **** extern "C" {
 222:./lib/chibios/os/rt/include/chthreads.h **** #endif
 223:./lib/chibios/os/rt/include/chthreads.h ****    thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio);
 224:./lib/chibios/os/rt/include/chthreads.h **** #if CH_DBG_FILL_THREADS == TRUE
 225:./lib/chibios/os/rt/include/chthreads.h ****   void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v);
 226:./lib/chibios/os/rt/include/chthreads.h **** #endif
 227:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp);
 228:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp);
 229:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *chThdCreateI(const thread_descriptor_t *tdp);
 230:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *chThdCreate(const thread_descriptor_t *tdp);
 231:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *chThdCreateStatic(void *wsp, size_t size,
 232:./lib/chibios/os/rt/include/chthreads.h ****                               tprio_t prio, tfunc_t pf, void *arg);
 233:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *chThdStart(thread_t *tp);
 234:./lib/chibios/os/rt/include/chthreads.h **** #if CH_CFG_USE_REGISTRY == TRUE
 235:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *chThdAddRef(thread_t *tp);
 236:./lib/chibios/os/rt/include/chthreads.h ****   void chThdRelease(thread_t *tp);
 237:./lib/chibios/os/rt/include/chthreads.h **** #endif
 238:./lib/chibios/os/rt/include/chthreads.h ****   void chThdExit(msg_t msg);
 239:./lib/chibios/os/rt/include/chthreads.h ****   void chThdExitS(msg_t msg);
 240:./lib/chibios/os/rt/include/chthreads.h **** #if CH_CFG_USE_WAITEXIT == TRUE
 241:./lib/chibios/os/rt/include/chthreads.h ****   msg_t chThdWait(thread_t *tp);
 242:./lib/chibios/os/rt/include/chthreads.h **** #endif
 243:./lib/chibios/os/rt/include/chthreads.h ****   tprio_t chThdSetPriority(tprio_t newprio);
 244:./lib/chibios/os/rt/include/chthreads.h ****   void chThdTerminate(thread_t *tp);
 245:./lib/chibios/os/rt/include/chthreads.h ****   msg_t chThdSuspendS(thread_reference_t *trp);
 246:./lib/chibios/os/rt/include/chthreads.h ****   msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout);
 247:./lib/chibios/os/rt/include/chthreads.h ****   void chThdResumeI(thread_reference_t *trp, msg_t msg);
 248:./lib/chibios/os/rt/include/chthreads.h ****   void chThdResumeS(thread_reference_t *trp, msg_t msg);
 249:./lib/chibios/os/rt/include/chthreads.h ****   void chThdResume(thread_reference_t *trp, msg_t msg);
 250:./lib/chibios/os/rt/include/chthreads.h ****   msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout);
 251:./lib/chibios/os/rt/include/chthreads.h ****   void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg);
 252:./lib/chibios/os/rt/include/chthreads.h ****   void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg);
 253:./lib/chibios/os/rt/include/chthreads.h ****   void chThdSleep(sysinterval_t time);
 254:./lib/chibios/os/rt/include/chthreads.h ****   void chThdSleepUntil(systime_t time);
 255:./lib/chibios/os/rt/include/chthreads.h ****   systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next);
 256:./lib/chibios/os/rt/include/chthreads.h ****   void chThdYield(void);
 257:./lib/chibios/os/rt/include/chthreads.h **** #ifdef __cplusplus
 258:./lib/chibios/os/rt/include/chthreads.h **** }
 259:./lib/chibios/os/rt/include/chthreads.h **** #endif
 260:./lib/chibios/os/rt/include/chthreads.h **** 
 261:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
 262:./lib/chibios/os/rt/include/chthreads.h **** /* Module inline functions.                                                  */
 263:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
 264:./lib/chibios/os/rt/include/chthreads.h **** 
 265:./lib/chibios/os/rt/include/chthreads.h ****  /**
 266:./lib/chibios/os/rt/include/chthreads.h ****   * @brief   Returns a pointer to the current @p thread_t.
 267:./lib/chibios/os/rt/include/chthreads.h ****   *
 268:./lib/chibios/os/rt/include/chthreads.h ****   * @return             A pointer to the current thread.
 269:./lib/chibios/os/rt/include/chthreads.h ****   *
 270:./lib/chibios/os/rt/include/chthreads.h ****   * @xclass
 271:./lib/chibios/os/rt/include/chthreads.h ****   */
 272:./lib/chibios/os/rt/include/chthreads.h **** static inline thread_t *chThdGetSelfX(void) {
 273:./lib/chibios/os/rt/include/chthreads.h **** 
 274:./lib/chibios/os/rt/include/chthreads.h ****   return ch.rlist.current;
 275:./lib/chibios/os/rt/include/chthreads.h **** }
 276:./lib/chibios/os/rt/include/chthreads.h **** 
 277:./lib/chibios/os/rt/include/chthreads.h **** /**
 278:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Returns the current thread priority.
 279:./lib/chibios/os/rt/include/chthreads.h ****  * @note    Can be invoked in any context.
 280:./lib/chibios/os/rt/include/chthreads.h ****  *
 281:./lib/chibios/os/rt/include/chthreads.h ****  * @return              The current thread priority.
 282:./lib/chibios/os/rt/include/chthreads.h ****  *
 283:./lib/chibios/os/rt/include/chthreads.h ****  * @xclass
 284:./lib/chibios/os/rt/include/chthreads.h ****  */
 285:./lib/chibios/os/rt/include/chthreads.h **** static inline tprio_t chThdGetPriorityX(void) {
 286:./lib/chibios/os/rt/include/chthreads.h **** 
 287:./lib/chibios/os/rt/include/chthreads.h ****   return chThdGetSelfX()->prio;
 288:./lib/chibios/os/rt/include/chthreads.h **** }
 289:./lib/chibios/os/rt/include/chthreads.h **** 
 290:./lib/chibios/os/rt/include/chthreads.h **** /**
 291:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Returns the number of ticks consumed by the specified thread.
 292:./lib/chibios/os/rt/include/chthreads.h ****  * @note    This function is only available when the
 293:./lib/chibios/os/rt/include/chthreads.h ****  *          @p CH_DBG_THREADS_PROFILING configuration option is enabled.
 294:./lib/chibios/os/rt/include/chthreads.h ****  *
 295:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 296:./lib/chibios/os/rt/include/chthreads.h ****  * @return              The number of consumed system ticks.
 297:./lib/chibios/os/rt/include/chthreads.h ****  *
 298:./lib/chibios/os/rt/include/chthreads.h ****  * @xclass
 299:./lib/chibios/os/rt/include/chthreads.h ****  */
 300:./lib/chibios/os/rt/include/chthreads.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 301:./lib/chibios/os/rt/include/chthreads.h **** static inline systime_t chThdGetTicksX(thread_t *tp) {
 302:./lib/chibios/os/rt/include/chthreads.h **** 
 303:./lib/chibios/os/rt/include/chthreads.h ****   return tp->time;
 304:./lib/chibios/os/rt/include/chthreads.h **** }
 305:./lib/chibios/os/rt/include/chthreads.h **** #endif
 306:./lib/chibios/os/rt/include/chthreads.h **** 
 307:./lib/chibios/os/rt/include/chthreads.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 308:./lib/chibios/os/rt/include/chthreads.h ****     defined(__DOXYGEN__)
 309:./lib/chibios/os/rt/include/chthreads.h **** /**
 310:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Returns the working area base of the specified thread.
 311:./lib/chibios/os/rt/include/chthreads.h ****  *
 312:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 313:./lib/chibios/os/rt/include/chthreads.h ****  * @return              The working area base pointer.
 314:./lib/chibios/os/rt/include/chthreads.h ****  *
 315:./lib/chibios/os/rt/include/chthreads.h ****  * @xclass
 316:./lib/chibios/os/rt/include/chthreads.h ****  */
 317:./lib/chibios/os/rt/include/chthreads.h **** static inline stkalign_t *chThdGetWorkingAreaX(thread_t *tp) {
 318:./lib/chibios/os/rt/include/chthreads.h **** 
 319:./lib/chibios/os/rt/include/chthreads.h ****   return tp->wabase;
 320:./lib/chibios/os/rt/include/chthreads.h **** }
 321:./lib/chibios/os/rt/include/chthreads.h **** #endif /* CH_DBG_ENABLE_STACK_CHECK == TRUE */
 322:./lib/chibios/os/rt/include/chthreads.h **** 
 323:./lib/chibios/os/rt/include/chthreads.h **** /**
 324:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Verifies if the specified thread is in the @p CH_STATE_FINAL state.
 325:./lib/chibios/os/rt/include/chthreads.h ****  *
 326:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 327:./lib/chibios/os/rt/include/chthreads.h ****  * @retval true         thread terminated.
 328:./lib/chibios/os/rt/include/chthreads.h ****  * @retval false        thread not terminated.
 329:./lib/chibios/os/rt/include/chthreads.h ****  *
 330:./lib/chibios/os/rt/include/chthreads.h ****  * @xclass
 331:./lib/chibios/os/rt/include/chthreads.h ****  */
 332:./lib/chibios/os/rt/include/chthreads.h **** static inline bool chThdTerminatedX(thread_t *tp) {
 333:./lib/chibios/os/rt/include/chthreads.h **** 
 334:./lib/chibios/os/rt/include/chthreads.h ****   return (bool)(tp->state == CH_STATE_FINAL);
 335:./lib/chibios/os/rt/include/chthreads.h **** }
 336:./lib/chibios/os/rt/include/chthreads.h **** 
 337:./lib/chibios/os/rt/include/chthreads.h **** /**
 338:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Verifies if the current thread has a termination request pending.
 339:./lib/chibios/os/rt/include/chthreads.h ****  *
 340:./lib/chibios/os/rt/include/chthreads.h ****  * @retval true         termination request pending.
 341:./lib/chibios/os/rt/include/chthreads.h ****  * @retval false        termination request not pending.
 342:./lib/chibios/os/rt/include/chthreads.h ****  *
 343:./lib/chibios/os/rt/include/chthreads.h ****  * @xclass
 344:./lib/chibios/os/rt/include/chthreads.h ****  */
 345:./lib/chibios/os/rt/include/chthreads.h **** static inline bool chThdShouldTerminateX(void) {
 346:./lib/chibios/os/rt/include/chthreads.h **** 
 347:./lib/chibios/os/rt/include/chthreads.h ****   return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 348:./lib/chibios/os/rt/include/chthreads.h **** }
 349:./lib/chibios/os/rt/include/chthreads.h **** 
 350:./lib/chibios/os/rt/include/chthreads.h **** /**
 351:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Resumes a thread created with @p chThdCreateI().
 352:./lib/chibios/os/rt/include/chthreads.h ****  *
 353:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 354:./lib/chibios/os/rt/include/chthreads.h ****  * @return              The pointer to the @p thread_t structure allocated for
 355:./lib/chibios/os/rt/include/chthreads.h ****  *                      the thread into the working space area.
 356:./lib/chibios/os/rt/include/chthreads.h ****  *
 357:./lib/chibios/os/rt/include/chthreads.h ****  * @iclass
 358:./lib/chibios/os/rt/include/chthreads.h ****  */
 359:./lib/chibios/os/rt/include/chthreads.h **** static inline thread_t *chThdStartI(thread_t *tp) {
 360:./lib/chibios/os/rt/include/chthreads.h **** 
 361:./lib/chibios/os/rt/include/chthreads.h ****   chDbgAssert(tp->state == CH_STATE_WTSTART, "wrong state");
 362:./lib/chibios/os/rt/include/chthreads.h **** 
 363:./lib/chibios/os/rt/include/chthreads.h ****   return chSchReadyI(tp);
 364:./lib/chibios/os/rt/include/chthreads.h **** }
 365:./lib/chibios/os/rt/include/chthreads.h **** 
 366:./lib/chibios/os/rt/include/chthreads.h **** /**
 367:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Suspends the invoking thread for the specified number of ticks.
 368:./lib/chibios/os/rt/include/chthreads.h ****  *
 369:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] ticks     the delay in system ticks, the special values are
 370:./lib/chibios/os/rt/include/chthreads.h ****  *                      handled as follow:
 371:./lib/chibios/os/rt/include/chthreads.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 372:./lib/chibios/os/rt/include/chthreads.h ****  *                        state.
 373:./lib/chibios/os/rt/include/chthreads.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 374:./lib/chibios/os/rt/include/chthreads.h ****  *                      .
 375:./lib/chibios/os/rt/include/chthreads.h ****  *
 376:./lib/chibios/os/rt/include/chthreads.h ****  * @sclass
 377:./lib/chibios/os/rt/include/chthreads.h ****  */
 378:./lib/chibios/os/rt/include/chthreads.h **** static inline void chThdSleepS(sysinterval_t ticks) {
 1172              		.loc 5 378 20 view .LVU343
 1173              	.LBB313:
 379:./lib/chibios/os/rt/include/chthreads.h **** 
 380:./lib/chibios/os/rt/include/chthreads.h ****   chDbgCheck(ticks != TIME_IMMEDIATE);
 1174              		.loc 5 380 3 view .LVU344
 1175              		.loc 5 380 3 view .LVU345
 1176              		.loc 5 380 3 view .LVU346
 381:./lib/chibios/os/rt/include/chthreads.h **** 
 382:./lib/chibios/os/rt/include/chthreads.h ****   (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 1177              		.loc 5 382 3 view .LVU347
 1178              		.loc 5 382 10 is_stmt 0 view .LVU348
 1179 000a 0820     		movs	r0, #8
 1180              	.LVL56:
 1181              		.loc 5 382 10 view .LVU349
 1182 000c FFF7FEFF 		bl	chSchGoSleepTimeoutS
 1183              	.LVL57:
 1184              		.loc 5 382 10 view .LVU350
 1185              	.LBE313:
 1186              	.LBE312:
 655:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 1187              		.loc 1 655 3 is_stmt 1 view .LVU351
 1188              	.LBB314:
 1189              	.LBI314:
 365:./lib/chibios/os/rt/include/chsys.h **** 
 1190              		.loc 2 365 20 view .LVU352
 1191              	.LBB315:
 367:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 1192              		.loc 2 367 22 view .LVU353
 368:./lib/chibios/os/rt/include/chsys.h **** 
 1193              		.loc 2 368 33 view .LVU354
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1194              		.loc 2 374 3 view .LVU355
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1195              		.loc 2 374 3 view .LVU356
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1196              		.loc 2 374 3 view .LVU357
 1197              		.loc 2 378 3 view .LVU358
 1198              	.LBB316:
 1199              	.LBI316:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 1200              		.loc 3 693 27 view .LVU359
 1201              	.LBE316:
 1202              	.LBE315:
 1203              	.LBE314:
 1204              		.loc 3 696 3 view .LVU360
 1205              	.LBB321:
 1206              	.LBB320:
 1207              	.LBB319:
 1208              	.LBB317:
 1209              	.LBI317:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 1210              		.loc 4 491 27 view .LVU361
 1211              	.LBB318:
 1212              		.loc 4 493 3 view .LVU362
 1213 0010 0023     		movs	r3, #0
 1214              		.syntax unified
 1215              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 1216 0012 83F31188 		MSR basepri, r3
 1217              	@ 0 "" 2
 1218              	.LVL58:
 1219              		.loc 4 493 3 is_stmt 0 view .LVU363
 1220              		.thumb
 1221              		.syntax unified
 1222              	.LBE318:
 1223              	.LBE317:
 1224              	.LBE319:
 1225              	.LBE320:
 1226              	.LBE321:
 656:lib/chibios/os/rt/src/chthreads.c **** }
 1227              		.loc 1 656 1 view .LVU364
 1228 0016 08BD     		pop	{r3, pc}
 1229              		.cfi_endproc
 1230              	.LFE250:
 1232              		.section	.text.chThdSleepUntil,"ax",%progbits
 1233              		.align	1
 1234              		.global	chThdSleepUntil
 1235              		.syntax unified
 1236              		.thumb
 1237              		.thumb_func
 1238              		.fpu fpv4-sp-d16
 1240              	chThdSleepUntil:
 1241              	.LVL59:
 1242              	.LFB251:
 657:lib/chibios/os/rt/src/chthreads.c **** 
 658:lib/chibios/os/rt/src/chthreads.c **** /**
 659:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Suspends the invoking thread until the system time arrives to the
 660:lib/chibios/os/rt/src/chthreads.c ****  *          specified value.
 661:lib/chibios/os/rt/src/chthreads.c ****  * @note    The function has no concept of "past", all specifiable times
 662:lib/chibios/os/rt/src/chthreads.c ****  *          are in the future, this means that if you call this function
 663:lib/chibios/os/rt/src/chthreads.c ****  *          exceeding your calculated intervals then the function will
 664:lib/chibios/os/rt/src/chthreads.c ****  *          return in a far future time, not immediately.
 665:lib/chibios/os/rt/src/chthreads.c ****  * @see     chThdSleepUntilWindowed()
 666:lib/chibios/os/rt/src/chthreads.c ****  *
 667:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] time      absolute system time
 668:lib/chibios/os/rt/src/chthreads.c ****  *
 669:lib/chibios/os/rt/src/chthreads.c ****  * @api
 670:lib/chibios/os/rt/src/chthreads.c ****  */
 671:lib/chibios/os/rt/src/chthreads.c **** void chThdSleepUntil(systime_t time) {
 1243              		.loc 1 671 38 is_stmt 1 view -0
 1244              		.cfi_startproc
 1245              		@ args = 0, pretend = 0, frame = 0
 1246              		@ frame_needed = 0, uses_anonymous_args = 0
 672:lib/chibios/os/rt/src/chthreads.c ****   sysinterval_t interval;
 1247              		.loc 1 672 3 view .LVU366
 673:lib/chibios/os/rt/src/chthreads.c **** 
 674:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 1248              		.loc 1 674 3 view .LVU367
 1249              	.LBB338:
 1250              	.LBI338:
 353:./lib/chibios/os/rt/include/chsys.h **** 
 1251              		.loc 2 353 20 view .LVU368
 1252              	.LBE338:
 355:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 1253              		.loc 2 355 3 view .LVU369
 1254              	.LBB349:
 1255              	.LBB339:
 1256              	.LBI339:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 1257              		.loc 3 669 27 view .LVU370
 1258              	.LBE339:
 1259              	.LBE349:
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 1260              		.loc 3 677 3 view .LVU371
 1261              	.LBB350:
 1262              	.LBB346:
 1263              	.LBB340:
 1264              	.LBI340:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 1265              		.loc 4 491 27 view .LVU372
 1266              	.LBB341:
 1267              		.loc 4 493 3 view .LVU373
 1268              	.LBE341:
 1269              	.LBE340:
 1270              	.LBE346:
 1271              	.LBE350:
 671:lib/chibios/os/rt/src/chthreads.c ****   sysinterval_t interval;
 1272              		.loc 1 671 38 is_stmt 0 view .LVU374
 1273 0000 10B5     		push	{r4, lr}
 1274              		.cfi_def_cfa_offset 8
 1275              		.cfi_offset 4, -8
 1276              		.cfi_offset 14, -4
 1277              	.LBB351:
 1278              	.LBB347:
 1279              	.LBB344:
 1280              	.LBB342:
 1281              		.loc 4 493 3 view .LVU375
 1282 0002 2023     		movs	r3, #32
 1283              	.LBE342:
 1284              	.LBE344:
 1285              	.LBE347:
 1286              	.LBE351:
 671:lib/chibios/os/rt/src/chthreads.c ****   sysinterval_t interval;
 1287              		.loc 1 671 38 view .LVU376
 1288 0004 0446     		mov	r4, r0
 1289              	.LBB352:
 1290              	.LBB348:
 1291              	.LBB345:
 1292              	.LBB343:
 1293              		.loc 4 493 3 view .LVU377
 1294              		.syntax unified
 1295              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 1296 0006 83F31188 		MSR basepri, r3
 1297              	@ 0 "" 2
 1298              	.LVL60:
 1299              		.loc 4 493 3 view .LVU378
 1300              		.thumb
 1301              		.syntax unified
 1302              	.LBE343:
 1303              	.LBE345:
 1304              	.LBE348:
 1305              	.LBE352:
 356:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 1306              		.loc 2 356 34 is_stmt 1 view .LVU379
 357:./lib/chibios/os/rt/include/chsys.h **** }
 1307              		.loc 2 357 20 view .LVU380
 675:lib/chibios/os/rt/src/chthreads.c ****   interval = chTimeDiffX(chVTGetSystemTimeX(), time);
 1308              		.loc 1 675 3 view .LVU381
 1309              	.LBB353:
 1310              	.LBI353:
 1311              		.file 6 "./lib/chibios/os/rt/include/chvt.h"
   1:./lib/chibios/os/rt/include/chvt.h **** /*
   2:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chvt.h **** 
   4:./lib/chibios/os/rt/include/chvt.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chvt.h **** 
   6:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chvt.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chvt.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chvt.h **** 
  11:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chvt.h **** 
  16:./lib/chibios/os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chvt.h **** */
  19:./lib/chibios/os/rt/include/chvt.h **** 
  20:./lib/chibios/os/rt/include/chvt.h **** /**
  21:./lib/chibios/os/rt/include/chvt.h ****  * @file    rt/include/chvt.h
  22:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:./lib/chibios/os/rt/include/chvt.h ****  *
  24:./lib/chibios/os/rt/include/chvt.h ****  * @addtogroup time
  25:./lib/chibios/os/rt/include/chvt.h ****  * @{
  26:./lib/chibios/os/rt/include/chvt.h ****  */
  27:./lib/chibios/os/rt/include/chvt.h **** 
  28:./lib/chibios/os/rt/include/chvt.h **** #ifndef CHVT_H
  29:./lib/chibios/os/rt/include/chvt.h **** #define CHVT_H
  30:./lib/chibios/os/rt/include/chvt.h **** 
  31:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chvt.h **** 
  35:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  38:./lib/chibios/os/rt/include/chvt.h **** 
  39:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  40:./lib/chibios/os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  42:./lib/chibios/os/rt/include/chvt.h **** 
  43:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:./lib/chibios/os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:./lib/chibios/os/rt/include/chvt.h ****        "be zero or greater than one"
  46:./lib/chibios/os/rt/include/chvt.h **** #endif
  47:./lib/chibios/os/rt/include/chvt.h **** 
  48:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:./lib/chibios/os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:./lib/chibios/os/rt/include/chvt.h **** #endif
  51:./lib/chibios/os/rt/include/chvt.h **** 
  52:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:./lib/chibios/os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:./lib/chibios/os/rt/include/chvt.h **** #endif
  55:./lib/chibios/os/rt/include/chvt.h **** 
  56:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  57:./lib/chibios/os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  59:./lib/chibios/os/rt/include/chvt.h **** 
  60:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  61:./lib/chibios/os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  63:./lib/chibios/os/rt/include/chvt.h **** 
  64:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  65:./lib/chibios/os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  67:./lib/chibios/os/rt/include/chvt.h **** 
  68:./lib/chibios/os/rt/include/chvt.h **** /*
  69:./lib/chibios/os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:./lib/chibios/os/rt/include/chvt.h ****  */
  71:./lib/chibios/os/rt/include/chvt.h **** #ifdef __cplusplus
  72:./lib/chibios/os/rt/include/chvt.h **** extern "C" {
  73:./lib/chibios/os/rt/include/chvt.h **** #endif
  74:./lib/chibios/os/rt/include/chvt.h ****   void _vt_init(void);
  75:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  76:./lib/chibios/os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  77:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  78:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoTickI(void);
  79:./lib/chibios/os/rt/include/chvt.h **** #ifdef __cplusplus
  80:./lib/chibios/os/rt/include/chvt.h **** }
  81:./lib/chibios/os/rt/include/chvt.h **** #endif
  82:./lib/chibios/os/rt/include/chvt.h **** 
  83:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  84:./lib/chibios/os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  85:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  86:./lib/chibios/os/rt/include/chvt.h **** 
  87:./lib/chibios/os/rt/include/chvt.h **** /**
  88:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  89:./lib/chibios/os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  90:./lib/chibios/os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  91:./lib/chibios/os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  92:./lib/chibios/os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  93:./lib/chibios/os/rt/include/chvt.h ****  *
  94:./lib/chibios/os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
  95:./lib/chibios/os/rt/include/chvt.h ****  *
  96:./lib/chibios/os/rt/include/chvt.h ****  * @init
  97:./lib/chibios/os/rt/include/chvt.h ****  */
  98:./lib/chibios/os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
  99:./lib/chibios/os/rt/include/chvt.h **** 
 100:./lib/chibios/os/rt/include/chvt.h ****   vtp->func = NULL;
 101:./lib/chibios/os/rt/include/chvt.h **** }
 102:./lib/chibios/os/rt/include/chvt.h **** 
 103:./lib/chibios/os/rt/include/chvt.h **** /**
 104:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Current system time.
 105:./lib/chibios/os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 106:./lib/chibios/os/rt/include/chvt.h ****  *          invocation.
 107:./lib/chibios/os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 108:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 109:./lib/chibios/os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 110:./lib/chibios/os/rt/include/chvt.h ****  *          @p systime_t size.
 111:./lib/chibios/os/rt/include/chvt.h ****  *
 112:./lib/chibios/os/rt/include/chvt.h ****  * @return              The system time in ticks.
 113:./lib/chibios/os/rt/include/chvt.h ****  *
 114:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 115:./lib/chibios/os/rt/include/chvt.h ****  */
 116:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 1312              		.loc 6 116 25 view .LVU382
 1313              	.LBE353:
 117:./lib/chibios/os/rt/include/chvt.h **** 
 118:./lib/chibios/os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 119:./lib/chibios/os/rt/include/chvt.h ****   return ch.vtlist.systime;
 120:./lib/chibios/os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 121:./lib/chibios/os/rt/include/chvt.h ****   return port_timer_get_time();
 1314              		.loc 6 121 3 view .LVU383
 1315              	.LBB356:
 1316              	.LBB354:
 1317              	.LBI354:
 1318              		.file 7 "./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h"
   1:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*
   2:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
   4:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
   6:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     (at your option) any later version.
  10:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  11:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  16:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** */
  19:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  20:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /**
  21:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @file    chcore_timer.h
  22:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @brief   System timer header file.
  23:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
  24:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @addtogroup ARMCMx_TIMER
  25:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @{
  26:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  */
  27:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  28:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** #ifndef CHCORE_TIMER_H
  29:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** #define CHCORE_TIMER_H
  30:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  31:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  32:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  34:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  35:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  36:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* Module pre-compile time settings.                                         */
  37:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  38:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  39:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  40:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* Derived constants and error checks.                                       */
  41:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  42:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  43:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  44:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* Module data structures and types.                                         */
  45:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  46:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  47:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  48:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* Module macros.                                                            */
  49:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  50:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  51:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  52:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* External declarations.                                                    */
  53:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  54:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  55:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** #ifdef __cplusplus
  56:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** extern "C" {
  57:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** #endif
  58:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   void stStartAlarm(systime_t time);
  59:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   void stStopAlarm(void);
  60:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   void stSetAlarm(systime_t time);
  61:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   systime_t stGetCounter(void);
  62:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   systime_t stGetAlarm(void);
  63:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** #ifdef __cplusplus
  64:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
  65:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** #endif
  66:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  67:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  68:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /* Module inline functions.                                                  */
  69:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /*===========================================================================*/
  70:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  71:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /**
  72:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @brief   Starts the alarm.
  73:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @note    Makes sure that no spurious alarms are triggered after
  74:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *          this call.
  75:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
  76:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @param[in] time      the time to be set for the first alarm
  77:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
  78:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @notapi
  79:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  */
  80:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** static inline void port_timer_start_alarm(systime_t time) {
  81:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  82:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   stStartAlarm(time);
  83:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
  84:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  85:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /**
  86:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @brief   Stops the alarm interrupt.
  87:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
  88:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @notapi
  89:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  */
  90:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** static inline void port_timer_stop_alarm(void) {
  91:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  92:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   stStopAlarm();
  93:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
  94:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
  95:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /**
  96:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @brief   Sets the alarm time.
  97:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
  98:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @param[in] time      the time to be set for the next alarm
  99:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
 100:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @notapi
 101:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  */
 102:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** static inline void port_timer_set_alarm(systime_t time) {
 103:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   stSetAlarm(time);
 105:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** }
 106:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
 107:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** /**
 108:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @brief   Returns the system time.
 109:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
 110:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @return              The system time.
 111:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  *
 112:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  * @notapi
 113:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****  */
 114:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** static inline systime_t port_timer_get_time(void) {
 1319              		.loc 7 114 25 view .LVU384
 1320              	.LBB355:
 115:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
 116:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h ****   return stGetCounter();
 1321              		.loc 7 116 3 view .LVU385
 1322              		.loc 7 116 10 is_stmt 0 view .LVU386
 1323 000a FFF7FEFF 		bl	stGetCounter
 1324              	.LVL61:
 1325              		.loc 7 116 10 view .LVU387
 1326              	.LBE355:
 1327              	.LBE354:
 1328              	.LBE356:
 1329              	.LBB357:
 1330              	.LBI357:
 1331              		.file 8 "./lib/chibios/os/rt/include/chtime.h"
   1:./lib/chibios/os/rt/include/chtime.h **** /*
   2:./lib/chibios/os/rt/include/chtime.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chtime.h **** 
   4:./lib/chibios/os/rt/include/chtime.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chtime.h **** 
   6:./lib/chibios/os/rt/include/chtime.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chtime.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chtime.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chtime.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chtime.h **** 
  11:./lib/chibios/os/rt/include/chtime.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chtime.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chtime.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chtime.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chtime.h **** 
  16:./lib/chibios/os/rt/include/chtime.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chtime.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chtime.h **** */
  19:./lib/chibios/os/rt/include/chtime.h **** 
  20:./lib/chibios/os/rt/include/chtime.h **** /**
  21:./lib/chibios/os/rt/include/chtime.h ****  * @file    rt/include/chtime.h
  22:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Time and intervals macros and structures.
  23:./lib/chibios/os/rt/include/chtime.h ****  *
  24:./lib/chibios/os/rt/include/chtime.h ****  * @addtogroup time_intervals
  25:./lib/chibios/os/rt/include/chtime.h ****  * @details This module is responsible for handling of system time and time
  26:./lib/chibios/os/rt/include/chtime.h ****  *          intervals.
  27:./lib/chibios/os/rt/include/chtime.h ****  * @{
  28:./lib/chibios/os/rt/include/chtime.h ****  */
  29:./lib/chibios/os/rt/include/chtime.h **** 
  30:./lib/chibios/os/rt/include/chtime.h **** #ifndef CHTIME_H
  31:./lib/chibios/os/rt/include/chtime.h **** #define CHTIME_H
  32:./lib/chibios/os/rt/include/chtime.h **** 
  33:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chtime.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chtime.h **** 
  37:./lib/chibios/os/rt/include/chtime.h **** /**
  38:./lib/chibios/os/rt/include/chtime.h ****  * @name    Special time constants
  39:./lib/chibios/os/rt/include/chtime.h ****  * @{
  40:./lib/chibios/os/rt/include/chtime.h ****  */
  41:./lib/chibios/os/rt/include/chtime.h **** /**
  42:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Zero interval specification for some functions with a timeout
  43:./lib/chibios/os/rt/include/chtime.h ****  *          specification.
  44:./lib/chibios/os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_IMMEDIATE as timeout parameter,
  45:./lib/chibios/os/rt/include/chtime.h ****  *          see the specific function documentation.
  46:./lib/chibios/os/rt/include/chtime.h ****  */
  47:./lib/chibios/os/rt/include/chtime.h **** #define TIME_IMMEDIATE      ((sysinterval_t)0)
  48:./lib/chibios/os/rt/include/chtime.h **** 
  49:./lib/chibios/os/rt/include/chtime.h **** /**
  50:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Infinite interval specification for all functions with a timeout
  51:./lib/chibios/os/rt/include/chtime.h ****  *          specification.
  52:./lib/chibios/os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_INFINITE as timeout parameter,
  53:./lib/chibios/os/rt/include/chtime.h ****  *          see the specific function documentation.
  54:./lib/chibios/os/rt/include/chtime.h ****  */
  55:./lib/chibios/os/rt/include/chtime.h **** #define TIME_INFINITE       ((sysinterval_t)-1)
  56:./lib/chibios/os/rt/include/chtime.h **** 
  57:./lib/chibios/os/rt/include/chtime.h **** /**
  58:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Maximum interval constant usable as timeout.
  59:./lib/chibios/os/rt/include/chtime.h ****  */
  60:./lib/chibios/os/rt/include/chtime.h **** #define TIME_MAX_INTERVAL   ((sysinterval_t)-2)
  61:./lib/chibios/os/rt/include/chtime.h **** 
  62:./lib/chibios/os/rt/include/chtime.h **** /**
  63:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Maximum system of system time before it wraps.
  64:./lib/chibios/os/rt/include/chtime.h ****  */
  65:./lib/chibios/os/rt/include/chtime.h **** #define TIME_MAX_SYSTIME    ((systime_t)-1)
  66:./lib/chibios/os/rt/include/chtime.h **** /** @} */
  67:./lib/chibios/os/rt/include/chtime.h **** 
  68:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
  69:./lib/chibios/os/rt/include/chtime.h **** /* Module pre-compile time settings.                                         */
  70:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
  71:./lib/chibios/os/rt/include/chtime.h **** 
  72:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
  73:./lib/chibios/os/rt/include/chtime.h **** /* Derived constants and error checks.                                       */
  74:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
  75:./lib/chibios/os/rt/include/chtime.h **** 
  76:./lib/chibios/os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION != 16) && (CH_CFG_ST_RESOLUTION != 32) &&         \
  77:./lib/chibios/os/rt/include/chtime.h ****     (CH_CFG_ST_RESOLUTION != 64)
  78:./lib/chibios/os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_RESOLUTION specified, must be 16, 32 or 64"
  79:./lib/chibios/os/rt/include/chtime.h **** #endif
  80:./lib/chibios/os/rt/include/chtime.h **** 
  81:./lib/chibios/os/rt/include/chtime.h **** #if CH_CFG_ST_FREQUENCY < 10
  82:./lib/chibios/os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_FREQUENCY specified, must be >= 10"
  83:./lib/chibios/os/rt/include/chtime.h **** #endif
  84:./lib/chibios/os/rt/include/chtime.h **** 
  85:./lib/chibios/os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE != 16) && (CH_CFG_INTERVALS_SIZE != 32) &&       \
  86:./lib/chibios/os/rt/include/chtime.h ****     (CH_CFG_INTERVALS_SIZE != 64)
  87:./lib/chibios/os/rt/include/chtime.h **** #error "invalid CH_CFG_INTERVALS_SIZE specified, must be 16, 32 or 64"
  88:./lib/chibios/os/rt/include/chtime.h **** #endif
  89:./lib/chibios/os/rt/include/chtime.h **** 
  90:./lib/chibios/os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE != 16) && (CH_CFG_TIME_TYPES_SIZE != 32)
  91:./lib/chibios/os/rt/include/chtime.h **** #error "invalid CH_CFG_TIME_TYPES_SIZE specified, must be 16 or 32"
  92:./lib/chibios/os/rt/include/chtime.h **** #endif
  93:./lib/chibios/os/rt/include/chtime.h **** 
  94:./lib/chibios/os/rt/include/chtime.h **** #if CH_CFG_INTERVALS_SIZE < CH_CFG_ST_RESOLUTION
  95:./lib/chibios/os/rt/include/chtime.h **** #error "CH_CFG_INTERVALS_SIZE must be >= CH_CFG_ST_RESOLUTION"
  96:./lib/chibios/os/rt/include/chtime.h **** #endif
  97:./lib/chibios/os/rt/include/chtime.h **** 
  98:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
  99:./lib/chibios/os/rt/include/chtime.h **** /* Module data structures and types.                                         */
 100:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
 101:./lib/chibios/os/rt/include/chtime.h **** 
 102:./lib/chibios/os/rt/include/chtime.h **** /**
 103:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Type of system time.
 104:./lib/chibios/os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 105:./lib/chibios/os/rt/include/chtime.h ****  */
 106:./lib/chibios/os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION == 64) || defined(__DOXYGEN__)
 107:./lib/chibios/os/rt/include/chtime.h **** typedef uint64_t systime_t;
 108:./lib/chibios/os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 32
 109:./lib/chibios/os/rt/include/chtime.h **** typedef uint32_t systime_t;
 110:./lib/chibios/os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 16
 111:./lib/chibios/os/rt/include/chtime.h **** typedef uint16_t systime_t;
 112:./lib/chibios/os/rt/include/chtime.h **** #endif
 113:./lib/chibios/os/rt/include/chtime.h **** 
 114:./lib/chibios/os/rt/include/chtime.h **** /**
 115:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Type of time interval.
 116:./lib/chibios/os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 117:./lib/chibios/os/rt/include/chtime.h ****  */
 118:./lib/chibios/os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE == 64) || defined(__DOXYGEN__)
 119:./lib/chibios/os/rt/include/chtime.h **** typedef uint64_t sysinterval_t;
 120:./lib/chibios/os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 32
 121:./lib/chibios/os/rt/include/chtime.h **** typedef uint32_t sysinterval_t;
 122:./lib/chibios/os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 16
 123:./lib/chibios/os/rt/include/chtime.h **** typedef uint16_t sysinterval_t;
 124:./lib/chibios/os/rt/include/chtime.h **** #endif
 125:./lib/chibios/os/rt/include/chtime.h **** 
 126:./lib/chibios/os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE == 32) || defined(__DOXYGEN__)
 127:./lib/chibios/os/rt/include/chtime.h **** /**
 128:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Type of seconds.
 129:./lib/chibios/os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 130:./lib/chibios/os/rt/include/chtime.h ****  */
 131:./lib/chibios/os/rt/include/chtime.h **** typedef uint32_t time_secs_t;
 132:./lib/chibios/os/rt/include/chtime.h **** 
 133:./lib/chibios/os/rt/include/chtime.h **** /**
 134:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Type of milliseconds.
 135:./lib/chibios/os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 136:./lib/chibios/os/rt/include/chtime.h ****  */
 137:./lib/chibios/os/rt/include/chtime.h **** typedef uint32_t time_msecs_t;
 138:./lib/chibios/os/rt/include/chtime.h **** 
 139:./lib/chibios/os/rt/include/chtime.h **** /**
 140:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Type of microseconds.
 141:./lib/chibios/os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 142:./lib/chibios/os/rt/include/chtime.h ****  */
 143:./lib/chibios/os/rt/include/chtime.h **** typedef uint32_t time_usecs_t;
 144:./lib/chibios/os/rt/include/chtime.h **** 
 145:./lib/chibios/os/rt/include/chtime.h **** /**
 146:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Type of time conversion variable.
 147:./lib/chibios/os/rt/include/chtime.h ****  * @note    This type must have double width than other time types, it is
 148:./lib/chibios/os/rt/include/chtime.h ****  *          only used internally for conversions.
 149:./lib/chibios/os/rt/include/chtime.h ****  */
 150:./lib/chibios/os/rt/include/chtime.h **** typedef uint64_t time_conv_t;
 151:./lib/chibios/os/rt/include/chtime.h **** 
 152:./lib/chibios/os/rt/include/chtime.h **** #else
 153:./lib/chibios/os/rt/include/chtime.h **** typedef uint16_t time_secs_t;
 154:./lib/chibios/os/rt/include/chtime.h **** typedef uint16_t time_msecs_t;
 155:./lib/chibios/os/rt/include/chtime.h **** typedef uint16_t time_usecs_t;
 156:./lib/chibios/os/rt/include/chtime.h **** typedef uint32_t time_conv_t;
 157:./lib/chibios/os/rt/include/chtime.h **** #endif
 158:./lib/chibios/os/rt/include/chtime.h **** 
 159:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
 160:./lib/chibios/os/rt/include/chtime.h **** /* Module macros.                                                            */
 161:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
 162:./lib/chibios/os/rt/include/chtime.h **** 
 163:./lib/chibios/os/rt/include/chtime.h **** /**
 164:./lib/chibios/os/rt/include/chtime.h ****  * @name    Fast time conversion utilities
 165:./lib/chibios/os/rt/include/chtime.h ****  * @{
 166:./lib/chibios/os/rt/include/chtime.h ****  */
 167:./lib/chibios/os/rt/include/chtime.h **** /**
 168:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 169:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 170:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 171:./lib/chibios/os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 172:./lib/chibios/os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 173:./lib/chibios/os/rt/include/chtime.h ****  *          converted.
 174:./lib/chibios/os/rt/include/chtime.h ****  *
 175:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 176:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of ticks.
 177:./lib/chibios/os/rt/include/chtime.h ****  *
 178:./lib/chibios/os/rt/include/chtime.h ****  * @api
 179:./lib/chibios/os/rt/include/chtime.h ****  */
 180:./lib/chibios/os/rt/include/chtime.h **** #define TIME_S2I(secs)                                                      \
 181:./lib/chibios/os/rt/include/chtime.h ****   ((sysinterval_t)((time_conv_t)(secs) * (time_conv_t)CH_CFG_ST_FREQUENCY))
 182:./lib/chibios/os/rt/include/chtime.h **** 
 183:./lib/chibios/os/rt/include/chtime.h **** /**
 184:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 185:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 186:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 187:./lib/chibios/os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 188:./lib/chibios/os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 189:./lib/chibios/os/rt/include/chtime.h ****  *          converted.
 190:./lib/chibios/os/rt/include/chtime.h ****  *
 191:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] msecs     number of milliseconds
 192:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of ticks.
 193:./lib/chibios/os/rt/include/chtime.h ****  *
 194:./lib/chibios/os/rt/include/chtime.h ****  * @api
 195:./lib/chibios/os/rt/include/chtime.h ****  */
 196:./lib/chibios/os/rt/include/chtime.h **** #define TIME_MS2I(msecs)                                                    \
 197:./lib/chibios/os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(msecs) *                                 \
 198:./lib/chibios/os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 199:./lib/chibios/os/rt/include/chtime.h ****                     (time_conv_t)999) / (time_conv_t)1000))
 200:./lib/chibios/os/rt/include/chtime.h **** 
 201:./lib/chibios/os/rt/include/chtime.h **** /**
 202:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 203:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 204:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 205:./lib/chibios/os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 206:./lib/chibios/os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 207:./lib/chibios/os/rt/include/chtime.h ****  *          converted.
 208:./lib/chibios/os/rt/include/chtime.h ****  *
 209:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] usecs     number of microseconds
 210:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of ticks.
 211:./lib/chibios/os/rt/include/chtime.h ****  *
 212:./lib/chibios/os/rt/include/chtime.h ****  * @api
 213:./lib/chibios/os/rt/include/chtime.h ****  */
 214:./lib/chibios/os/rt/include/chtime.h **** #define TIME_US2I(usecs)                                                    \
 215:./lib/chibios/os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(usecs) *                                 \
 216:./lib/chibios/os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 217:./lib/chibios/os/rt/include/chtime.h ****                     (time_conv_t)999999) / (time_conv_t)1000000))
 218:./lib/chibios/os/rt/include/chtime.h **** 
 219:./lib/chibios/os/rt/include/chtime.h **** /**
 220:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 221:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from system ticks number to seconds.
 222:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 223:./lib/chibios/os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 224:./lib/chibios/os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 225:./lib/chibios/os/rt/include/chtime.h ****  *          converted.
 226:./lib/chibios/os/rt/include/chtime.h ****  *
 227:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 228:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of seconds.
 229:./lib/chibios/os/rt/include/chtime.h ****  *
 230:./lib/chibios/os/rt/include/chtime.h ****  * @api
 231:./lib/chibios/os/rt/include/chtime.h ****  */
 232:./lib/chibios/os/rt/include/chtime.h **** #define TIME_I2S(interval)                                                  \
 233:./lib/chibios/os/rt/include/chtime.h ****   (time_secs_t)(((time_conv_t)(interval) +                                  \
 234:./lib/chibios/os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY -                         \
 235:./lib/chibios/os/rt/include/chtime.h ****                  (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY)
 236:./lib/chibios/os/rt/include/chtime.h **** 
 237:./lib/chibios/os/rt/include/chtime.h **** /**
 238:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 239:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from system ticks number to milliseconds.
 240:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 241:./lib/chibios/os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 242:./lib/chibios/os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 243:./lib/chibios/os/rt/include/chtime.h ****  *          converted.
 244:./lib/chibios/os/rt/include/chtime.h ****  *
 245:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 246:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 247:./lib/chibios/os/rt/include/chtime.h ****  *
 248:./lib/chibios/os/rt/include/chtime.h ****  * @api
 249:./lib/chibios/os/rt/include/chtime.h ****  */
 250:./lib/chibios/os/rt/include/chtime.h **** #define TIME_I2MS(interval)                                                 \
 251:./lib/chibios/os/rt/include/chtime.h ****   (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000) +           \
 252:./lib/chibios/os/rt/include/chtime.h ****                   (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /      \
 253:./lib/chibios/os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY)
 254:./lib/chibios/os/rt/include/chtime.h **** 
 255:./lib/chibios/os/rt/include/chtime.h **** /**
 256:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 257:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from system ticks number to microseconds.
 258:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 259:./lib/chibios/os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 260:./lib/chibios/os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 261:./lib/chibios/os/rt/include/chtime.h ****  *          converted.
 262:./lib/chibios/os/rt/include/chtime.h ****  *
 263:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 264:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of microseconds.
 265:./lib/chibios/os/rt/include/chtime.h ****  *
 266:./lib/chibios/os/rt/include/chtime.h ****  * @api
 267:./lib/chibios/os/rt/include/chtime.h ****  */
 268:./lib/chibios/os/rt/include/chtime.h **** #define TIME_I2US(interval)                                                 \
 269:./lib/chibios/os/rt/include/chtime.h ****   (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000000) +        \
 270:./lib/chibios/os/rt/include/chtime.h ****                   (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /      \
 271:./lib/chibios/os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY)
 272:./lib/chibios/os/rt/include/chtime.h **** /** @} */
 273:./lib/chibios/os/rt/include/chtime.h **** 
 274:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
 275:./lib/chibios/os/rt/include/chtime.h **** /* External declarations.                                                    */
 276:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
 277:./lib/chibios/os/rt/include/chtime.h **** 
 278:./lib/chibios/os/rt/include/chtime.h **** /*
 279:./lib/chibios/os/rt/include/chtime.h ****  * Virtual Timers APIs.
 280:./lib/chibios/os/rt/include/chtime.h ****  */
 281:./lib/chibios/os/rt/include/chtime.h **** #ifdef __cplusplus
 282:./lib/chibios/os/rt/include/chtime.h **** extern "C" {
 283:./lib/chibios/os/rt/include/chtime.h **** #endif
 284:./lib/chibios/os/rt/include/chtime.h **** 
 285:./lib/chibios/os/rt/include/chtime.h **** #ifdef __cplusplus
 286:./lib/chibios/os/rt/include/chtime.h **** }
 287:./lib/chibios/os/rt/include/chtime.h **** #endif
 288:./lib/chibios/os/rt/include/chtime.h **** 
 289:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
 290:./lib/chibios/os/rt/include/chtime.h **** /* Module inline functions.                                                  */
 291:./lib/chibios/os/rt/include/chtime.h **** /*===========================================================================*/
 292:./lib/chibios/os/rt/include/chtime.h **** 
 293:./lib/chibios/os/rt/include/chtime.h **** /**
 294:./lib/chibios/os/rt/include/chtime.h ****  * @name    Secure time conversion utilities
 295:./lib/chibios/os/rt/include/chtime.h ****  * @{
 296:./lib/chibios/os/rt/include/chtime.h ****  */
 297:./lib/chibios/os/rt/include/chtime.h **** /**
 298:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 299:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 300:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 301:./lib/chibios/os/rt/include/chtime.h ****  *
 302:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 303:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of ticks.
 304:./lib/chibios/os/rt/include/chtime.h ****  *
 305:./lib/chibios/os/rt/include/chtime.h ****  * @special
 306:./lib/chibios/os/rt/include/chtime.h ****  */
 307:./lib/chibios/os/rt/include/chtime.h **** static inline sysinterval_t chTimeS2I(time_secs_t secs) {
 308:./lib/chibios/os/rt/include/chtime.h ****   time_conv_t ticks;
 309:./lib/chibios/os/rt/include/chtime.h **** 
 310:./lib/chibios/os/rt/include/chtime.h ****   ticks = (time_conv_t)secs * (time_conv_t)CH_CFG_ST_FREQUENCY;
 311:./lib/chibios/os/rt/include/chtime.h **** 
 312:./lib/chibios/os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 313:./lib/chibios/os/rt/include/chtime.h ****               "conversion overflow");
 314:./lib/chibios/os/rt/include/chtime.h **** 
 315:./lib/chibios/os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 316:./lib/chibios/os/rt/include/chtime.h **** }
 317:./lib/chibios/os/rt/include/chtime.h **** 
 318:./lib/chibios/os/rt/include/chtime.h **** /**
 319:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 320:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 321:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 322:./lib/chibios/os/rt/include/chtime.h ****  *
 323:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] msec      number of milliseconds
 324:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of ticks.
 325:./lib/chibios/os/rt/include/chtime.h ****  *
 326:./lib/chibios/os/rt/include/chtime.h ****  * @special
 327:./lib/chibios/os/rt/include/chtime.h ****  */
 328:./lib/chibios/os/rt/include/chtime.h **** static inline sysinterval_t chTimeMS2I(time_msecs_t msec) {
 329:./lib/chibios/os/rt/include/chtime.h ****   time_conv_t ticks;
 330:./lib/chibios/os/rt/include/chtime.h **** 
 331:./lib/chibios/os/rt/include/chtime.h ****   ticks = (((time_conv_t)msec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 332:./lib/chibios/os/rt/include/chtime.h ****            (time_conv_t)999) / (time_conv_t)1000;
 333:./lib/chibios/os/rt/include/chtime.h **** 
 334:./lib/chibios/os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 335:./lib/chibios/os/rt/include/chtime.h ****               "conversion overflow");
 336:./lib/chibios/os/rt/include/chtime.h **** 
 337:./lib/chibios/os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 338:./lib/chibios/os/rt/include/chtime.h **** }
 339:./lib/chibios/os/rt/include/chtime.h **** 
 340:./lib/chibios/os/rt/include/chtime.h **** /**
 341:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 342:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 343:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 344:./lib/chibios/os/rt/include/chtime.h ****  *
 345:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] usec      number of microseconds
 346:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of ticks.
 347:./lib/chibios/os/rt/include/chtime.h ****  *
 348:./lib/chibios/os/rt/include/chtime.h ****  * @special
 349:./lib/chibios/os/rt/include/chtime.h ****  */
 350:./lib/chibios/os/rt/include/chtime.h **** static inline sysinterval_t chTimeUS2I(time_usecs_t usec) {
 351:./lib/chibios/os/rt/include/chtime.h ****   time_conv_t ticks;
 352:./lib/chibios/os/rt/include/chtime.h **** 
 353:./lib/chibios/os/rt/include/chtime.h ****   ticks = (((time_conv_t)usec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 354:./lib/chibios/os/rt/include/chtime.h ****            (time_conv_t)999999) / (time_conv_t)1000000;
 355:./lib/chibios/os/rt/include/chtime.h **** 
 356:./lib/chibios/os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 357:./lib/chibios/os/rt/include/chtime.h ****               "conversion overflow");
 358:./lib/chibios/os/rt/include/chtime.h **** 
 359:./lib/chibios/os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 360:./lib/chibios/os/rt/include/chtime.h **** }
 361:./lib/chibios/os/rt/include/chtime.h **** 
 362:./lib/chibios/os/rt/include/chtime.h **** /**
 363:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 364:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from system interval to seconds.
 365:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 366:./lib/chibios/os/rt/include/chtime.h ****  *
 367:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 368:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of seconds.
 369:./lib/chibios/os/rt/include/chtime.h ****  *
 370:./lib/chibios/os/rt/include/chtime.h ****  * @special
 371:./lib/chibios/os/rt/include/chtime.h ****  */
 372:./lib/chibios/os/rt/include/chtime.h **** static inline time_secs_t chTimeI2S(sysinterval_t interval) {
 373:./lib/chibios/os/rt/include/chtime.h ****   time_conv_t secs;
 374:./lib/chibios/os/rt/include/chtime.h **** 
 375:./lib/chibios/os/rt/include/chtime.h ****   secs = ((time_conv_t)interval +
 376:./lib/chibios/os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY -
 377:./lib/chibios/os/rt/include/chtime.h ****           (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY;
 378:./lib/chibios/os/rt/include/chtime.h **** 
 379:./lib/chibios/os/rt/include/chtime.h ****   chDbgAssert(secs < (time_conv_t)((time_secs_t)-1),
 380:./lib/chibios/os/rt/include/chtime.h ****               "conversion overflow");
 381:./lib/chibios/os/rt/include/chtime.h **** 
 382:./lib/chibios/os/rt/include/chtime.h ****   return (time_secs_t)secs;
 383:./lib/chibios/os/rt/include/chtime.h **** }
 384:./lib/chibios/os/rt/include/chtime.h **** 
 385:./lib/chibios/os/rt/include/chtime.h **** /**
 386:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 387:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from system interval to milliseconds.
 388:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 389:./lib/chibios/os/rt/include/chtime.h ****  *
 390:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 391:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 392:./lib/chibios/os/rt/include/chtime.h ****  *
 393:./lib/chibios/os/rt/include/chtime.h ****  * @special
 394:./lib/chibios/os/rt/include/chtime.h ****  */
 395:./lib/chibios/os/rt/include/chtime.h **** static inline time_msecs_t chTimeI2MS(sysinterval_t interval) {
 396:./lib/chibios/os/rt/include/chtime.h ****   time_conv_t msecs;
 397:./lib/chibios/os/rt/include/chtime.h **** 
 398:./lib/chibios/os/rt/include/chtime.h ****   msecs = (((time_conv_t)interval * (time_conv_t)1000) +
 399:./lib/chibios/os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 400:./lib/chibios/os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 401:./lib/chibios/os/rt/include/chtime.h **** 
 402:./lib/chibios/os/rt/include/chtime.h ****   chDbgAssert(msecs < (time_conv_t)((time_msecs_t)-1),
 403:./lib/chibios/os/rt/include/chtime.h ****               "conversion overflow");
 404:./lib/chibios/os/rt/include/chtime.h **** 
 405:./lib/chibios/os/rt/include/chtime.h ****   return (time_msecs_t)msecs;
 406:./lib/chibios/os/rt/include/chtime.h **** }
 407:./lib/chibios/os/rt/include/chtime.h **** 
 408:./lib/chibios/os/rt/include/chtime.h **** /**
 409:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 410:./lib/chibios/os/rt/include/chtime.h ****  * @details Converts from system interval to microseconds.
 411:./lib/chibios/os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 412:./lib/chibios/os/rt/include/chtime.h ****  *
 413:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 414:./lib/chibios/os/rt/include/chtime.h ****  * @return              The number of microseconds.
 415:./lib/chibios/os/rt/include/chtime.h ****  *
 416:./lib/chibios/os/rt/include/chtime.h ****  * @special
 417:./lib/chibios/os/rt/include/chtime.h ****  */
 418:./lib/chibios/os/rt/include/chtime.h **** static inline time_usecs_t chTimeI2US(sysinterval_t interval) {
 419:./lib/chibios/os/rt/include/chtime.h ****   time_conv_t usecs;
 420:./lib/chibios/os/rt/include/chtime.h **** 
 421:./lib/chibios/os/rt/include/chtime.h ****   usecs = (((time_conv_t)interval * (time_conv_t)1000000) +
 422:./lib/chibios/os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 423:./lib/chibios/os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 424:./lib/chibios/os/rt/include/chtime.h **** 
 425:./lib/chibios/os/rt/include/chtime.h ****   chDbgAssert(usecs <= (time_conv_t)((time_usecs_t)-1),
 426:./lib/chibios/os/rt/include/chtime.h ****               "conversion overflow");
 427:./lib/chibios/os/rt/include/chtime.h **** 
 428:./lib/chibios/os/rt/include/chtime.h ****   return (time_usecs_t)usecs;
 429:./lib/chibios/os/rt/include/chtime.h **** }
 430:./lib/chibios/os/rt/include/chtime.h **** 
 431:./lib/chibios/os/rt/include/chtime.h **** /**
 432:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Adds an interval to a system time returning a system time.
 433:./lib/chibios/os/rt/include/chtime.h ****  *
 434:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] systime   base system time
 435:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] interval  interval to be added
 436:./lib/chibios/os/rt/include/chtime.h ****  * @return              The new system time.
 437:./lib/chibios/os/rt/include/chtime.h ****  *
 438:./lib/chibios/os/rt/include/chtime.h ****  * @xclass
 439:./lib/chibios/os/rt/include/chtime.h ****  */
 440:./lib/chibios/os/rt/include/chtime.h **** static inline systime_t chTimeAddX(systime_t systime,
 441:./lib/chibios/os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 442:./lib/chibios/os/rt/include/chtime.h **** 
 443:./lib/chibios/os/rt/include/chtime.h **** #if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
 444:./lib/chibios/os/rt/include/chtime.h ****   chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 445:./lib/chibios/os/rt/include/chtime.h **** #endif
 446:./lib/chibios/os/rt/include/chtime.h **** 
 447:./lib/chibios/os/rt/include/chtime.h ****   return systime + (systime_t)interval;
 448:./lib/chibios/os/rt/include/chtime.h **** }
 449:./lib/chibios/os/rt/include/chtime.h **** 
 450:./lib/chibios/os/rt/include/chtime.h **** /**
 451:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Subtracts two system times returning an interval.
 452:./lib/chibios/os/rt/include/chtime.h ****  *
 453:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] start     first system time
 454:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] end       second system time
 455:./lib/chibios/os/rt/include/chtime.h ****  * @return              The interval representing the time difference.
 456:./lib/chibios/os/rt/include/chtime.h ****  *
 457:./lib/chibios/os/rt/include/chtime.h ****  * @xclass
 458:./lib/chibios/os/rt/include/chtime.h ****  */
 459:./lib/chibios/os/rt/include/chtime.h **** static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 1332              		.loc 8 459 29 is_stmt 1 view .LVU388
 1333              	.LBB358:
 460:./lib/chibios/os/rt/include/chtime.h **** 
 461:./lib/chibios/os/rt/include/chtime.h ****   /*lint -save -e9033 [10.8] This cast is required by the operation, it is
 462:./lib/chibios/os/rt/include/chtime.h ****     known that the destination type can be wider.*/
 463:./lib/chibios/os/rt/include/chtime.h ****   return (sysinterval_t)((systime_t)(end - start));
 1334              		.loc 8 463 3 view .LVU389
 1335              		.loc 8 463 3 is_stmt 0 view .LVU390
 1336              	.LBE358:
 1337              	.LBE357:
 676:lib/chibios/os/rt/src/chthreads.c ****   if (interval > (sysinterval_t)0) {
 1338              		.loc 1 676 3 is_stmt 1 view .LVU391
 1339              		.loc 1 676 6 is_stmt 0 view .LVU392
 1340 000e 211A     		subs	r1, r4, r0
 1341              	.LVL62:
 1342              		.loc 1 676 6 view .LVU393
 1343 0010 02D0     		beq	.L24
 677:lib/chibios/os/rt/src/chthreads.c ****     chThdSleepS(interval);
 1344              		.loc 1 677 5 is_stmt 1 view .LVU394
 1345              	.LVL63:
 1346              	.LBB359:
 1347              	.LBI359:
 378:./lib/chibios/os/rt/include/chthreads.h **** 
 1348              		.loc 5 378 20 view .LVU395
 1349              	.LBB360:
 380:./lib/chibios/os/rt/include/chthreads.h **** 
 1350              		.loc 5 380 3 view .LVU396
 380:./lib/chibios/os/rt/include/chthreads.h **** 
 1351              		.loc 5 380 3 view .LVU397
 380:./lib/chibios/os/rt/include/chthreads.h **** 
 1352              		.loc 5 380 3 view .LVU398
 1353              		.loc 5 382 3 view .LVU399
 1354              		.loc 5 382 10 is_stmt 0 view .LVU400
 1355 0012 0820     		movs	r0, #8
 1356 0014 FFF7FEFF 		bl	chSchGoSleepTimeoutS
 1357              	.LVL64:
 1358              	.L24:
 1359              		.loc 5 382 10 view .LVU401
 1360              	.LBE360:
 1361              	.LBE359:
 678:lib/chibios/os/rt/src/chthreads.c ****   }
 679:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 1362              		.loc 1 679 3 is_stmt 1 view .LVU402
 1363              	.LBB361:
 1364              	.LBI361:
 365:./lib/chibios/os/rt/include/chsys.h **** 
 1365              		.loc 2 365 20 view .LVU403
 1366              	.LBB362:
 367:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 1367              		.loc 2 367 22 view .LVU404
 368:./lib/chibios/os/rt/include/chsys.h **** 
 1368              		.loc 2 368 33 view .LVU405
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1369              		.loc 2 374 3 view .LVU406
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1370              		.loc 2 374 3 view .LVU407
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1371              		.loc 2 374 3 view .LVU408
 1372              		.loc 2 378 3 view .LVU409
 1373              	.LBB363:
 1374              	.LBI363:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 1375              		.loc 3 693 27 view .LVU410
 1376              	.LBE363:
 1377              	.LBE362:
 1378              	.LBE361:
 1379              		.loc 3 696 3 view .LVU411
 1380              	.LBB368:
 1381              	.LBB367:
 1382              	.LBB366:
 1383              	.LBB364:
 1384              	.LBI364:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 1385              		.loc 4 491 27 view .LVU412
 1386              	.LBB365:
 1387              		.loc 4 493 3 view .LVU413
 1388 0018 0023     		movs	r3, #0
 1389              		.syntax unified
 1390              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 1391 001a 83F31188 		MSR basepri, r3
 1392              	@ 0 "" 2
 1393              	.LVL65:
 1394              		.loc 4 493 3 is_stmt 0 view .LVU414
 1395              		.thumb
 1396              		.syntax unified
 1397              	.LBE365:
 1398              	.LBE364:
 1399              	.LBE366:
 1400              	.LBE367:
 1401              	.LBE368:
 680:lib/chibios/os/rt/src/chthreads.c **** }
 1402              		.loc 1 680 1 view .LVU415
 1403 001e 10BD     		pop	{r4, pc}
 1404              		.loc 1 680 1 view .LVU416
 1405              		.cfi_endproc
 1406              	.LFE251:
 1408              		.section	.text.chThdSleepUntilWindowed,"ax",%progbits
 1409              		.align	1
 1410              		.global	chThdSleepUntilWindowed
 1411              		.syntax unified
 1412              		.thumb
 1413              		.thumb_func
 1414              		.fpu fpv4-sp-d16
 1416              	chThdSleepUntilWindowed:
 1417              	.LVL66:
 1418              	.LFB252:
 681:lib/chibios/os/rt/src/chthreads.c **** 
 682:lib/chibios/os/rt/src/chthreads.c **** /**
 683:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Suspends the invoking thread until the system time arrives to the
 684:lib/chibios/os/rt/src/chthreads.c ****  *          specified value.
 685:lib/chibios/os/rt/src/chthreads.c ****  * @note    The system time is assumed to be between @p prev and @p next
 686:lib/chibios/os/rt/src/chthreads.c ****  *          else the call is assumed to have been called outside the
 687:lib/chibios/os/rt/src/chthreads.c ****  *          allowed time interval, in this case no sleep is performed.
 688:lib/chibios/os/rt/src/chthreads.c ****  * @see     chThdSleepUntil()
 689:lib/chibios/os/rt/src/chthreads.c ****  *
 690:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] prev      absolute system time of the previous deadline
 691:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] next      absolute system time of the next deadline
 692:lib/chibios/os/rt/src/chthreads.c ****  * @return              the @p next parameter
 693:lib/chibios/os/rt/src/chthreads.c ****  *
 694:lib/chibios/os/rt/src/chthreads.c ****  * @api
 695:lib/chibios/os/rt/src/chthreads.c ****  */
 696:lib/chibios/os/rt/src/chthreads.c **** systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next) {
 1419              		.loc 1 696 67 is_stmt 1 view -0
 1420              		.cfi_startproc
 1421              		@ args = 0, pretend = 0, frame = 0
 1422              		@ frame_needed = 0, uses_anonymous_args = 0
 697:lib/chibios/os/rt/src/chthreads.c ****   systime_t time;
 1423              		.loc 1 697 3 view .LVU418
 698:lib/chibios/os/rt/src/chthreads.c **** 
 699:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 1424              		.loc 1 699 3 view .LVU419
 1425              	.LBB387:
 1426              	.LBI387:
 353:./lib/chibios/os/rt/include/chsys.h **** 
 1427              		.loc 2 353 20 view .LVU420
 1428              	.LBE387:
 355:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 1429              		.loc 2 355 3 view .LVU421
 1430              	.LBB395:
 1431              	.LBB388:
 1432              	.LBI388:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 1433              		.loc 3 669 27 view .LVU422
 1434              	.LBE388:
 1435              	.LBE395:
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 1436              		.loc 3 677 3 view .LVU423
 1437              	.LBB396:
 1438              	.LBB393:
 1439              	.LBB389:
 1440              	.LBI389:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 1441              		.loc 4 491 27 view .LVU424
 1442              	.LBB390:
 1443              		.loc 4 493 3 view .LVU425
 1444              	.LBE390:
 1445              	.LBE389:
 1446              	.LBE393:
 1447              	.LBE396:
 696:lib/chibios/os/rt/src/chthreads.c ****   systime_t time;
 1448              		.loc 1 696 67 is_stmt 0 view .LVU426
 1449 0000 38B5     		push	{r3, r4, r5, lr}
 1450              		.cfi_def_cfa_offset 16
 1451              		.cfi_offset 3, -16
 1452              		.cfi_offset 4, -12
 1453              		.cfi_offset 5, -8
 1454              		.cfi_offset 14, -4
 696:lib/chibios/os/rt/src/chthreads.c ****   systime_t time;
 1455              		.loc 1 696 67 view .LVU427
 1456 0002 0446     		mov	r4, r0
 1457 0004 0D46     		mov	r5, r1
 1458              	.LBB397:
 1459              	.LBB394:
 1460              	.LBB392:
 1461              	.LBB391:
 1462              		.loc 4 493 3 view .LVU428
 1463 0006 2023     		movs	r3, #32
 1464              		.syntax unified
 1465              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 1466 0008 83F31188 		MSR basepri, r3
 1467              	@ 0 "" 2
 1468              	.LVL67:
 1469              		.loc 4 493 3 view .LVU429
 1470              		.thumb
 1471              		.syntax unified
 1472              	.LBE391:
 1473              	.LBE392:
 1474              	.LBE394:
 1475              	.LBE397:
 356:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 1476              		.loc 2 356 34 is_stmt 1 view .LVU430
 357:./lib/chibios/os/rt/include/chsys.h **** }
 1477              		.loc 2 357 20 view .LVU431
 700:lib/chibios/os/rt/src/chthreads.c ****   time = chVTGetSystemTimeX();
 1478              		.loc 1 700 3 view .LVU432
 1479              	.LBB398:
 1480              	.LBI398:
 116:./lib/chibios/os/rt/include/chvt.h **** 
 1481              		.loc 6 116 25 view .LVU433
 1482              	.LBE398:
 1483              		.loc 6 121 3 view .LVU434
 1484              	.LBB401:
 1485              	.LBB399:
 1486              	.LBI399:
 114:./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h **** 
 1487              		.loc 7 114 25 view .LVU435
 1488              	.LBB400:
 1489              		.loc 7 116 3 view .LVU436
 1490              		.loc 7 116 10 is_stmt 0 view .LVU437
 1491 000c FFF7FEFF 		bl	stGetCounter
 1492              	.LVL68:
 1493              		.loc 7 116 10 view .LVU438
 1494              	.LBE400:
 1495              	.LBE399:
 1496              	.LBE401:
 701:lib/chibios/os/rt/src/chthreads.c ****   if (chTimeIsInRangeX(time, prev, next)) {
 1497              		.loc 1 701 3 is_stmt 1 view .LVU439
 1498              	.LBB402:
 1499              	.LBI402:
 464:./lib/chibios/os/rt/include/chtime.h ****   /*lint -restore*/
 465:./lib/chibios/os/rt/include/chtime.h **** }
 466:./lib/chibios/os/rt/include/chtime.h **** 
 467:./lib/chibios/os/rt/include/chtime.h **** /**
 468:./lib/chibios/os/rt/include/chtime.h ****  * @brief   Checks if the specified time is within the specified time range.
 469:./lib/chibios/os/rt/include/chtime.h ****  * @note    When start==end then the function returns always false because the
 470:./lib/chibios/os/rt/include/chtime.h ****  *          time window has zero size.
 471:./lib/chibios/os/rt/include/chtime.h ****  *
 472:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] time      the time to be verified
 473:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] start     the start of the time window (inclusive)
 474:./lib/chibios/os/rt/include/chtime.h ****  * @param[in] end       the end of the time window (non inclusive)
 475:./lib/chibios/os/rt/include/chtime.h ****  * @retval true         current time within the specified time window.
 476:./lib/chibios/os/rt/include/chtime.h ****  * @retval false        current time not within the specified time window.
 477:./lib/chibios/os/rt/include/chtime.h ****  *
 478:./lib/chibios/os/rt/include/chtime.h ****  * @xclass
 479:./lib/chibios/os/rt/include/chtime.h ****  */
 480:./lib/chibios/os/rt/include/chtime.h **** static inline bool chTimeIsInRangeX(systime_t time,
 1500              		.loc 8 480 20 view .LVU440
 1501              	.LBB403:
 481:./lib/chibios/os/rt/include/chtime.h ****                                     systime_t start,
 482:./lib/chibios/os/rt/include/chtime.h ****                                     systime_t end) {
 483:./lib/chibios/os/rt/include/chtime.h **** 
 484:./lib/chibios/os/rt/include/chtime.h ****   return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 1502              		.loc 8 484 3 view .LVU441
 485:./lib/chibios/os/rt/include/chtime.h ****                 (systime_t)((systime_t)end - (systime_t)start));
 1503              		.loc 8 485 17 is_stmt 0 view .LVU442
 1504 0010 2B1B     		subs	r3, r5, r4
 484:./lib/chibios/os/rt/include/chtime.h ****                 (systime_t)((systime_t)end - (systime_t)start));
 1505              		.loc 8 484 17 view .LVU443
 1506 0012 041B     		subs	r4, r0, r4
 1507              	.LVL69:
 484:./lib/chibios/os/rt/include/chtime.h ****                 (systime_t)((systime_t)end - (systime_t)start));
 1508              		.loc 8 484 17 view .LVU444
 1509              	.LBE403:
 1510              	.LBE402:
 1511              		.loc 1 701 6 view .LVU445
 1512 0014 A342     		cmp	r3, r4
 1513 0016 03D9     		bls	.L29
 702:lib/chibios/os/rt/src/chthreads.c ****     chThdSleepS(chTimeDiffX(time, next));
 1514              		.loc 1 702 5 is_stmt 1 view .LVU446
 1515              	.LVL70:
 1516              	.LBB404:
 1517              	.LBI404:
 459:./lib/chibios/os/rt/include/chtime.h **** 
 1518              		.loc 8 459 29 view .LVU447
 1519              	.LBB405:
 463:./lib/chibios/os/rt/include/chtime.h ****   /*lint -restore*/
 1520              		.loc 8 463 3 view .LVU448
 463:./lib/chibios/os/rt/include/chtime.h ****   /*lint -restore*/
 1521              		.loc 8 463 3 is_stmt 0 view .LVU449
 1522              	.LBE405:
 1523              	.LBE404:
 1524              	.LBB406:
 1525              	.LBI406:
 378:./lib/chibios/os/rt/include/chthreads.h **** 
 1526              		.loc 5 378 20 is_stmt 1 view .LVU450
 1527              	.LBB407:
 380:./lib/chibios/os/rt/include/chthreads.h **** 
 1528              		.loc 5 380 3 view .LVU451
 380:./lib/chibios/os/rt/include/chthreads.h **** 
 1529              		.loc 5 380 3 view .LVU452
 380:./lib/chibios/os/rt/include/chthreads.h **** 
 1530              		.loc 5 380 3 view .LVU453
 1531              		.loc 5 382 3 view .LVU454
 1532              		.loc 5 382 10 is_stmt 0 view .LVU455
 1533 0018 291A     		subs	r1, r5, r0
 1534              	.LVL71:
 1535              		.loc 5 382 10 view .LVU456
 1536 001a 0820     		movs	r0, #8
 1537              	.LVL72:
 1538              		.loc 5 382 10 view .LVU457
 1539 001c FFF7FEFF 		bl	chSchGoSleepTimeoutS
 1540              	.LVL73:
 1541              	.L29:
 1542              		.loc 5 382 10 view .LVU458
 1543              	.LBE407:
 1544              	.LBE406:
 703:lib/chibios/os/rt/src/chthreads.c ****   }
 704:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 1545              		.loc 1 704 3 is_stmt 1 view .LVU459
 1546              	.LBB408:
 1547              	.LBI408:
 365:./lib/chibios/os/rt/include/chsys.h **** 
 1548              		.loc 2 365 20 view .LVU460
 1549              	.LBB409:
 367:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 1550              		.loc 2 367 22 view .LVU461
 368:./lib/chibios/os/rt/include/chsys.h **** 
 1551              		.loc 2 368 33 view .LVU462
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1552              		.loc 2 374 3 view .LVU463
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1553              		.loc 2 374 3 view .LVU464
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1554              		.loc 2 374 3 view .LVU465
 1555              		.loc 2 378 3 view .LVU466
 1556              	.LBB410:
 1557              	.LBI410:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 1558              		.loc 3 693 27 view .LVU467
 1559              	.LBE410:
 1560              	.LBE409:
 1561              	.LBE408:
 1562              		.loc 3 696 3 view .LVU468
 1563              	.LBB415:
 1564              	.LBB414:
 1565              	.LBB413:
 1566              	.LBB411:
 1567              	.LBI411:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 1568              		.loc 4 491 27 view .LVU469
 1569              	.LBB412:
 1570              		.loc 4 493 3 view .LVU470
 1571 0020 0023     		movs	r3, #0
 1572              		.syntax unified
 1573              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 1574 0022 83F31188 		MSR basepri, r3
 1575              	@ 0 "" 2
 1576              	.LVL74:
 1577              		.loc 4 493 3 is_stmt 0 view .LVU471
 1578              		.thumb
 1579              		.syntax unified
 1580              	.LBE412:
 1581              	.LBE411:
 1582              	.LBE413:
 1583              	.LBE414:
 1584              	.LBE415:
 705:lib/chibios/os/rt/src/chthreads.c **** 
 706:lib/chibios/os/rt/src/chthreads.c ****   return next;
 1585              		.loc 1 706 3 is_stmt 1 view .LVU472
 707:lib/chibios/os/rt/src/chthreads.c **** }
 1586              		.loc 1 707 1 is_stmt 0 view .LVU473
 1587 0026 2846     		mov	r0, r5
 1588 0028 38BD     		pop	{r3, r4, r5, pc}
 1589              		.loc 1 707 1 view .LVU474
 1590              		.cfi_endproc
 1591              	.LFE252:
 1593              		.section	.text.chThdYield,"ax",%progbits
 1594              		.align	1
 1595              		.global	chThdYield
 1596              		.syntax unified
 1597              		.thumb
 1598              		.thumb_func
 1599              		.fpu fpv4-sp-d16
 1601              	chThdYield:
 1602              	.LFB253:
 708:lib/chibios/os/rt/src/chthreads.c **** 
 709:lib/chibios/os/rt/src/chthreads.c **** /**
 710:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Yields the time slot.
 711:lib/chibios/os/rt/src/chthreads.c ****  * @details Yields the CPU control to the next thread in the ready list with
 712:lib/chibios/os/rt/src/chthreads.c ****  *          equal priority, if any.
 713:lib/chibios/os/rt/src/chthreads.c ****  *
 714:lib/chibios/os/rt/src/chthreads.c ****  * @api
 715:lib/chibios/os/rt/src/chthreads.c ****  */
 716:lib/chibios/os/rt/src/chthreads.c **** void chThdYield(void) {
 1603              		.loc 1 716 23 is_stmt 1 view -0
 1604              		.cfi_startproc
 1605              		@ args = 0, pretend = 0, frame = 0
 1606              		@ frame_needed = 0, uses_anonymous_args = 0
 717:lib/chibios/os/rt/src/chthreads.c **** 
 718:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 1607              		.loc 1 718 3 view .LVU476
 1608              	.LBB429:
 1609              	.LBI429:
 353:./lib/chibios/os/rt/include/chsys.h **** 
 1610              		.loc 2 353 20 view .LVU477
 1611              	.LBE429:
 355:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 1612              		.loc 2 355 3 view .LVU478
 1613              	.LBB437:
 1614              	.LBB430:
 1615              	.LBI430:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 1616              		.loc 3 669 27 view .LVU479
 1617              	.LBE430:
 1618              	.LBE437:
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 1619              		.loc 3 677 3 view .LVU480
 1620              	.LVL75:
 1621              	.LBB438:
 1622              	.LBB435:
 1623              	.LBB431:
 1624              	.LBI431:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 1625              		.loc 4 491 27 view .LVU481
 1626              	.LBB432:
 1627              		.loc 4 493 3 view .LVU482
 1628              	.LBE432:
 1629              	.LBE431:
 1630              	.LBE435:
 1631              	.LBE438:
 716:lib/chibios/os/rt/src/chthreads.c **** 
 1632              		.loc 1 716 23 is_stmt 0 view .LVU483
 1633 0000 08B5     		push	{r3, lr}
 1634              		.cfi_def_cfa_offset 8
 1635              		.cfi_offset 3, -8
 1636              		.cfi_offset 14, -4
 1637              	.LBB439:
 1638              	.LBB436:
 1639              	.LBB434:
 1640              	.LBB433:
 1641              		.loc 4 493 3 view .LVU484
 1642 0002 2023     		movs	r3, #32
 1643              		.syntax unified
 1644              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 1645 0004 83F31188 		MSR basepri, r3
 1646              	@ 0 "" 2
 1647              	.LVL76:
 1648              		.loc 4 493 3 view .LVU485
 1649              		.thumb
 1650              		.syntax unified
 1651              	.LBE433:
 1652              	.LBE434:
 1653              	.LBE436:
 1654              	.LBE439:
 356:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 1655              		.loc 2 356 34 is_stmt 1 view .LVU486
 357:./lib/chibios/os/rt/include/chsys.h **** }
 1656              		.loc 2 357 20 view .LVU487
 719:lib/chibios/os/rt/src/chthreads.c ****   chSchDoYieldS();
 1657              		.loc 1 719 3 view .LVU488
 1658              	.LBB440:
 1659              	.LBI440:
 1660              		.file 9 "./lib/chibios/os/rt/include/chschd.h"
   1:./lib/chibios/os/rt/include/chschd.h **** /*
   2:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chschd.h **** 
   4:./lib/chibios/os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chschd.h **** 
   6:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chschd.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chschd.h **** 
  11:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chschd.h **** 
  16:./lib/chibios/os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chschd.h **** */
  19:./lib/chibios/os/rt/include/chschd.h **** 
  20:./lib/chibios/os/rt/include/chschd.h **** /**
  21:./lib/chibios/os/rt/include/chschd.h ****  * @file    rt/include/chschd.h
  22:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:./lib/chibios/os/rt/include/chschd.h ****  *
  24:./lib/chibios/os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:./lib/chibios/os/rt/include/chschd.h ****  * @{
  26:./lib/chibios/os/rt/include/chschd.h ****  */
  27:./lib/chibios/os/rt/include/chschd.h **** 
  28:./lib/chibios/os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:./lib/chibios/os/rt/include/chschd.h **** #define CHSCHD_H
  30:./lib/chibios/os/rt/include/chschd.h **** 
  31:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chschd.h **** 
  35:./lib/chibios/os/rt/include/chschd.h **** /**
  36:./lib/chibios/os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:./lib/chibios/os/rt/include/chschd.h ****  * @{
  38:./lib/chibios/os/rt/include/chschd.h ****  */
  39:./lib/chibios/os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:./lib/chibios/os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  42:./lib/chibios/os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  44:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  45:./lib/chibios/os/rt/include/chschd.h **** 
  46:./lib/chibios/os/rt/include/chschd.h **** /**
  47:./lib/chibios/os/rt/include/chschd.h ****  * @name    Priority constants
  48:./lib/chibios/os/rt/include/chschd.h ****  * @{
  49:./lib/chibios/os/rt/include/chschd.h ****  */
  50:./lib/chibios/os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:./lib/chibios/os/rt/include/chschd.h ****                                                  priority.                  */
  52:./lib/chibios/os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:./lib/chibios/os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:./lib/chibios/os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:./lib/chibios/os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  57:./lib/chibios/os/rt/include/chschd.h **** 
  58:./lib/chibios/os/rt/include/chschd.h **** /**
  59:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread states
  60:./lib/chibios/os/rt/include/chschd.h ****  * @{
  61:./lib/chibios/os/rt/include/chschd.h ****  */
  62:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:./lib/chibios/os/rt/include/chschd.h ****                                                   ready list.               */
  64:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On a queue.        */
  68:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:./lib/chibios/os/rt/include/chschd.h ****                                                   in queue.                 */
  77:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:./lib/chibios/os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:./lib/chibios/os/rt/include/chschd.h ****                                                   message.                  */
  81:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:./lib/chibios/os/rt/include/chschd.h **** 
  83:./lib/chibios/os/rt/include/chschd.h **** /**
  84:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:./lib/chibios/os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:./lib/chibios/os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:./lib/chibios/os/rt/include/chschd.h ****  */
  88:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:./lib/chibios/os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:./lib/chibios/os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:./lib/chibios/os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  93:./lib/chibios/os/rt/include/chschd.h **** 
  94:./lib/chibios/os/rt/include/chschd.h **** /**
  95:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:./lib/chibios/os/rt/include/chschd.h ****  * @{
  97:./lib/chibios/os/rt/include/chschd.h ****  */
  98:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:./lib/chibios/os/rt/include/chschd.h ****                                                  mask.                      */
 100:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:./lib/chibios/os/rt/include/chschd.h ****                                                  flag.                      */
 107:./lib/chibios/os/rt/include/chschd.h **** /** @} */
 108:./lib/chibios/os/rt/include/chschd.h **** 
 109:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 110:./lib/chibios/os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 112:./lib/chibios/os/rt/include/chschd.h **** 
 113:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 114:./lib/chibios/os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 116:./lib/chibios/os/rt/include/chschd.h **** 
 117:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 118:./lib/chibios/os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 119:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 120:./lib/chibios/os/rt/include/chschd.h **** 
 121:./lib/chibios/os/rt/include/chschd.h **** /**
 122:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 123:./lib/chibios/os/rt/include/chschd.h ****  */
 124:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_list {
 125:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 126:./lib/chibios/os/rt/include/chschd.h **** };
 127:./lib/chibios/os/rt/include/chschd.h **** 
 128:./lib/chibios/os/rt/include/chschd.h **** /**
 129:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 130:./lib/chibios/os/rt/include/chschd.h ****  */
 131:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_queue {
 132:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 133:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 134:./lib/chibios/os/rt/include/chschd.h **** };
 135:./lib/chibios/os/rt/include/chschd.h **** 
 136:./lib/chibios/os/rt/include/chschd.h **** /**
 137:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 138:./lib/chibios/os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 139:./lib/chibios/os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 140:./lib/chibios/os/rt/include/chschd.h ****  *          by shrinking this structure.
 141:./lib/chibios/os/rt/include/chschd.h ****  */
 142:./lib/chibios/os/rt/include/chschd.h **** struct ch_thread {
 143:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 144:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 145:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 146:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 147:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 148:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 149:./lib/chibios/os/rt/include/chschd.h **** #endif
 150:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 151:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 152:./lib/chibios/os/rt/include/chschd.h ****   /**
 153:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 154:./lib/chibios/os/rt/include/chschd.h ****    */
 155:./lib/chibios/os/rt/include/chschd.h ****   const char            *name;
 156:./lib/chibios/os/rt/include/chschd.h **** #endif
 157:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 158:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 159:./lib/chibios/os/rt/include/chschd.h ****   /**
 160:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Working area base address.
 161:./lib/chibios/os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 162:./lib/chibios/os/rt/include/chschd.h ****    *          dynamic threading.
 163:./lib/chibios/os/rt/include/chschd.h ****    */
 164:./lib/chibios/os/rt/include/chschd.h ****   stkalign_t            *wabase;
 165:./lib/chibios/os/rt/include/chschd.h **** #endif
 166:./lib/chibios/os/rt/include/chschd.h ****   /**
 167:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Current thread state.
 168:./lib/chibios/os/rt/include/chschd.h ****    */
 169:./lib/chibios/os/rt/include/chschd.h ****   tstate_t              state;
 170:./lib/chibios/os/rt/include/chschd.h ****   /**
 171:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Various thread flags.
 172:./lib/chibios/os/rt/include/chschd.h ****    */
 173:./lib/chibios/os/rt/include/chschd.h ****   tmode_t               flags;
 174:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 175:./lib/chibios/os/rt/include/chschd.h ****   /**
 176:./lib/chibios/os/rt/include/chschd.h ****    * @brief   References to this thread.
 177:./lib/chibios/os/rt/include/chschd.h ****    */
 178:./lib/chibios/os/rt/include/chschd.h ****   trefs_t               refs;
 179:./lib/chibios/os/rt/include/chschd.h **** #endif
 180:./lib/chibios/os/rt/include/chschd.h ****   /**
 181:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 182:./lib/chibios/os/rt/include/chschd.h ****    */
 183:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 184:./lib/chibios/os/rt/include/chschd.h ****   tslices_t             ticks;
 185:./lib/chibios/os/rt/include/chschd.h **** #endif
 186:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 187:./lib/chibios/os/rt/include/chschd.h ****   /**
 188:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 189:./lib/chibios/os/rt/include/chschd.h ****    * @note    This field can overflow.
 190:./lib/chibios/os/rt/include/chschd.h ****    */
 191:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    time;
 192:./lib/chibios/os/rt/include/chschd.h **** #endif
 193:./lib/chibios/os/rt/include/chschd.h ****   /**
 194:./lib/chibios/os/rt/include/chschd.h ****    * @brief   State-specific fields.
 195:./lib/chibios/os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 196:./lib/chibios/os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 197:./lib/chibios/os/rt/include/chschd.h ****    */
 198:./lib/chibios/os/rt/include/chschd.h ****   union {
 199:./lib/chibios/os/rt/include/chschd.h ****     /**
 200:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 201:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 202:./lib/chibios/os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 203:./lib/chibios/os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 204:./lib/chibios/os/rt/include/chschd.h ****      */
 205:./lib/chibios/os/rt/include/chschd.h ****     msg_t               rdymsg;
 206:./lib/chibios/os/rt/include/chschd.h ****     /**
 207:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread exit code.
 208:./lib/chibios/os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 209:./lib/chibios/os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 210:./lib/chibios/os/rt/include/chschd.h ****      *          this thread.
 211:./lib/chibios/os/rt/include/chschd.h ****      */
 212:./lib/chibios/os/rt/include/chschd.h ****     msg_t               exitcode;
 213:./lib/chibios/os/rt/include/chschd.h ****     /**
 214:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 215:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 216:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 217:./lib/chibios/os/rt/include/chschd.h ****      *          states.
 218:./lib/chibios/os/rt/include/chschd.h ****      */
 219:./lib/chibios/os/rt/include/chschd.h ****     void                *wtobjp;
 220:./lib/chibios/os/rt/include/chschd.h ****     /**
 221:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 222:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 223:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 224:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 225:./lib/chibios/os/rt/include/chschd.h ****      */
 226:./lib/chibios/os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 227:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 228:./lib/chibios/os/rt/include/chschd.h ****     /**
 229:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread sent message.
 230:./lib/chibios/os/rt/include/chschd.h ****      */
 231:./lib/chibios/os/rt/include/chschd.h ****     msg_t               sentmsg;
 232:./lib/chibios/os/rt/include/chschd.h **** #endif
 233:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 234:./lib/chibios/os/rt/include/chschd.h ****     /**
 235:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 236:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 237:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 238:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 239:./lib/chibios/os/rt/include/chschd.h ****      */
 240:./lib/chibios/os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 241:./lib/chibios/os/rt/include/chschd.h **** #endif
 242:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 243:./lib/chibios/os/rt/include/chschd.h ****     /**
 244:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 245:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 246:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 247:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 248:./lib/chibios/os/rt/include/chschd.h ****      */
 249:./lib/chibios/os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 250:./lib/chibios/os/rt/include/chschd.h **** #endif
 251:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 252:./lib/chibios/os/rt/include/chschd.h ****     /**
 253:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 254:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 255:./lib/chibios/os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 256:./lib/chibios/os/rt/include/chschd.h ****      */
 257:./lib/chibios/os/rt/include/chschd.h ****     eventmask_t         ewmask;
 258:./lib/chibios/os/rt/include/chschd.h **** #endif
 259:./lib/chibios/os/rt/include/chschd.h ****   }                     u;
 260:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 261:./lib/chibios/os/rt/include/chschd.h ****   /**
 262:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 263:./lib/chibios/os/rt/include/chschd.h ****    */
 264:./lib/chibios/os/rt/include/chschd.h ****   threads_list_t        waiting;
 265:./lib/chibios/os/rt/include/chschd.h **** #endif
 266:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 267:./lib/chibios/os/rt/include/chschd.h ****   /**
 268:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Messages queue.
 269:./lib/chibios/os/rt/include/chschd.h ****    */
 270:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 271:./lib/chibios/os/rt/include/chschd.h **** #endif
 272:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 273:./lib/chibios/os/rt/include/chschd.h ****   /**
 274:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pending events mask.
 275:./lib/chibios/os/rt/include/chschd.h ****    */
 276:./lib/chibios/os/rt/include/chschd.h ****   eventmask_t           epending;
 277:./lib/chibios/os/rt/include/chschd.h **** #endif
 278:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 279:./lib/chibios/os/rt/include/chschd.h ****   /**
 280:./lib/chibios/os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 281:./lib/chibios/os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 282:./lib/chibios/os/rt/include/chschd.h ****    */
 283:./lib/chibios/os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 284:./lib/chibios/os/rt/include/chschd.h ****   /**
 285:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 286:./lib/chibios/os/rt/include/chschd.h ****    */
 287:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               realprio;
 288:./lib/chibios/os/rt/include/chschd.h **** #endif
 289:./lib/chibios/os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 290:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 291:./lib/chibios/os/rt/include/chschd.h ****   /**
 292:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 293:./lib/chibios/os/rt/include/chschd.h ****    */
 294:./lib/chibios/os/rt/include/chschd.h ****   void                  *mpool;
 295:./lib/chibios/os/rt/include/chschd.h **** #endif
 296:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 297:./lib/chibios/os/rt/include/chschd.h ****   /**
 298:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread statistics.
 299:./lib/chibios/os/rt/include/chschd.h ****    */
 300:./lib/chibios/os/rt/include/chschd.h ****   time_measurement_t    stats;
 301:./lib/chibios/os/rt/include/chschd.h **** #endif
 302:./lib/chibios/os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 303:./lib/chibios/os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 304:./lib/chibios/os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 305:./lib/chibios/os/rt/include/chschd.h **** #endif
 306:./lib/chibios/os/rt/include/chschd.h **** };
 307:./lib/chibios/os/rt/include/chschd.h **** 
 308:./lib/chibios/os/rt/include/chschd.h **** /**
 309:./lib/chibios/os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 310:./lib/chibios/os/rt/include/chschd.h ****  *
 311:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 312:./lib/chibios/os/rt/include/chschd.h ****  */
 313:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timer {
 314:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 315:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 316:./lib/chibios/os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Time delta before timeout.  */
 317:./lib/chibios/os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 318:./lib/chibios/os/rt/include/chschd.h ****                                                 pointer.                    */
 319:./lib/chibios/os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 320:./lib/chibios/os/rt/include/chschd.h ****                                                 parameter.                  */
 321:./lib/chibios/os/rt/include/chschd.h **** };
 322:./lib/chibios/os/rt/include/chschd.h **** 
 323:./lib/chibios/os/rt/include/chschd.h **** /**
 324:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 325:./lib/chibios/os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 326:./lib/chibios/os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 327:./lib/chibios/os/rt/include/chschd.h ****  *          timer is often used in the code.
 328:./lib/chibios/os/rt/include/chschd.h ****  */
 329:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 330:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 331:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 332:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 333:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 334:./lib/chibios/os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Must be initialized to -1.  */
 335:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 336:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 337:./lib/chibios/os/rt/include/chschd.h **** #endif
 338:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 339:./lib/chibios/os/rt/include/chschd.h ****   /**
 340:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 341:./lib/chibios/os/rt/include/chschd.h ****    */
 342:./lib/chibios/os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 343:./lib/chibios/os/rt/include/chschd.h ****                                                 tick event.                 */
 344:./lib/chibios/os/rt/include/chschd.h **** #endif
 345:./lib/chibios/os/rt/include/chschd.h **** };
 346:./lib/chibios/os/rt/include/chschd.h **** 
 347:./lib/chibios/os/rt/include/chschd.h **** /**
 348:./lib/chibios/os/rt/include/chschd.h ****  * @extends threads_queue_t
 349:./lib/chibios/os/rt/include/chschd.h ****  */
 350:./lib/chibios/os/rt/include/chschd.h **** struct ch_ready_list {
 351:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 352:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 353:./lib/chibios/os/rt/include/chschd.h ****                                                 initialized to zero.        */
 354:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 355:./lib/chibios/os/rt/include/chschd.h ****                                                 offsets.                    */
 356:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 357:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 358:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 359:./lib/chibios/os/rt/include/chschd.h **** #endif
 360:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 361:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 362:./lib/chibios/os/rt/include/chschd.h ****                                                 thread.                     */
 363:./lib/chibios/os/rt/include/chschd.h **** };
 364:./lib/chibios/os/rt/include/chschd.h **** 
 365:./lib/chibios/os/rt/include/chschd.h **** /**
 366:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System debug data structure.
 367:./lib/chibios/os/rt/include/chschd.h ****  */
 368:./lib/chibios/os/rt/include/chschd.h **** struct ch_system_debug {
 369:./lib/chibios/os/rt/include/chschd.h ****   /**
 370:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 371:./lib/chibios/os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 372:./lib/chibios/os/rt/include/chschd.h ****    *          written once and then the system is halted.
 373:./lib/chibios/os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 374:./lib/chibios/os/rt/include/chschd.h ****    *          field itself is declared volatile.
 375:./lib/chibios/os/rt/include/chschd.h ****    */
 376:./lib/chibios/os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 377:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 378:./lib/chibios/os/rt/include/chschd.h ****   /**
 379:./lib/chibios/os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 380:./lib/chibios/os/rt/include/chschd.h ****    */
 381:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 382:./lib/chibios/os/rt/include/chschd.h ****   /**
 383:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 384:./lib/chibios/os/rt/include/chschd.h ****    */
 385:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 386:./lib/chibios/os/rt/include/chschd.h **** #endif
 387:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 388:./lib/chibios/os/rt/include/chschd.h ****   /**
 389:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 390:./lib/chibios/os/rt/include/chschd.h ****    */
 391:./lib/chibios/os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 392:./lib/chibios/os/rt/include/chschd.h **** #endif
 393:./lib/chibios/os/rt/include/chschd.h **** };
 394:./lib/chibios/os/rt/include/chschd.h **** 
 395:./lib/chibios/os/rt/include/chschd.h **** /**
 396:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System data structure.
 397:./lib/chibios/os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 398:./lib/chibios/os/rt/include/chschd.h ****  *          stacks.
 399:./lib/chibios/os/rt/include/chschd.h ****  */
 400:./lib/chibios/os/rt/include/chschd.h **** struct ch_system {
 401:./lib/chibios/os/rt/include/chschd.h ****   /**
 402:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Ready list header.
 403:./lib/chibios/os/rt/include/chschd.h ****    */
 404:./lib/chibios/os/rt/include/chschd.h ****   ready_list_t          rlist;
 405:./lib/chibios/os/rt/include/chschd.h ****   /**
 406:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 407:./lib/chibios/os/rt/include/chschd.h ****    */
 408:./lib/chibios/os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 409:./lib/chibios/os/rt/include/chschd.h ****   /**
 410:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System debug.
 411:./lib/chibios/os/rt/include/chschd.h ****    */
 412:./lib/chibios/os/rt/include/chschd.h ****   system_debug_t        dbg;
 413:./lib/chibios/os/rt/include/chschd.h ****   /**
 414:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 415:./lib/chibios/os/rt/include/chschd.h ****    */
 416:./lib/chibios/os/rt/include/chschd.h ****   thread_t              mainthread;
 417:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 418:./lib/chibios/os/rt/include/chschd.h ****   /**
 419:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 420:./lib/chibios/os/rt/include/chschd.h ****    */
 421:./lib/chibios/os/rt/include/chschd.h ****   tm_calibration_t      tm;
 422:./lib/chibios/os/rt/include/chschd.h **** #endif
 423:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 424:./lib/chibios/os/rt/include/chschd.h ****   /**
 425:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 426:./lib/chibios/os/rt/include/chschd.h ****    */
 427:./lib/chibios/os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 428:./lib/chibios/os/rt/include/chschd.h **** #endif
 429:./lib/chibios/os/rt/include/chschd.h ****   CH_CFG_SYSTEM_EXTRA_FIELDS
 430:./lib/chibios/os/rt/include/chschd.h **** };
 431:./lib/chibios/os/rt/include/chschd.h **** 
 432:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 433:./lib/chibios/os/rt/include/chschd.h **** /* Module macros.                                                            */
 434:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 435:./lib/chibios/os/rt/include/chschd.h **** 
 436:./lib/chibios/os/rt/include/chschd.h **** /**
 437:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 438:./lib/chibios/os/rt/include/chschd.h ****  *
 439:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 440:./lib/chibios/os/rt/include/chschd.h ****  */
 441:./lib/chibios/os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 442:./lib/chibios/os/rt/include/chschd.h **** 
 443:./lib/chibios/os/rt/include/chschd.h **** /**
 444:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 445:./lib/chibios/os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 446:./lib/chibios/os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 447:./lib/chibios/os/rt/include/chschd.h ****  */
 448:./lib/chibios/os/rt/include/chschd.h **** #define currp ch.rlist.current
 449:./lib/chibios/os/rt/include/chschd.h **** 
 450:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 451:./lib/chibios/os/rt/include/chschd.h **** /* External declarations.                                                    */
 452:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 453:./lib/chibios/os/rt/include/chschd.h **** 
 454:./lib/chibios/os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 455:./lib/chibios/os/rt/include/chschd.h **** extern ch_system_t ch;
 456:./lib/chibios/os/rt/include/chschd.h **** #endif
 457:./lib/chibios/os/rt/include/chschd.h **** 
 458:./lib/chibios/os/rt/include/chschd.h **** /*
 459:./lib/chibios/os/rt/include/chschd.h ****  * Scheduler APIs.
 460:./lib/chibios/os/rt/include/chschd.h ****  */
 461:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 462:./lib/chibios/os/rt/include/chschd.h **** extern "C" {
 463:./lib/chibios/os/rt/include/chschd.h **** #endif
 464:./lib/chibios/os/rt/include/chschd.h ****   void _scheduler_init(void);
 465:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 466:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 467:./lib/chibios/os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 468:./lib/chibios/os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout);
 469:./lib/chibios/os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 470:./lib/chibios/os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 471:./lib/chibios/os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 472:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 473:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 474:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 475:./lib/chibios/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 476:./lib/chibios/os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 477:./lib/chibios/os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 478:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 479:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 480:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 481:./lib/chibios/os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 482:./lib/chibios/os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 483:./lib/chibios/os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 484:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 485:./lib/chibios/os/rt/include/chschd.h **** }
 486:./lib/chibios/os/rt/include/chschd.h **** #endif
 487:./lib/chibios/os/rt/include/chschd.h **** 
 488:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 489:./lib/chibios/os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 490:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 491:./lib/chibios/os/rt/include/chschd.h **** 
 492:./lib/chibios/os/rt/include/chschd.h **** /**
 493:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 494:./lib/chibios/os/rt/include/chschd.h ****  *
 495:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 496:./lib/chibios/os/rt/include/chschd.h ****  *
 497:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 498:./lib/chibios/os/rt/include/chschd.h ****  */
 499:./lib/chibios/os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 500:./lib/chibios/os/rt/include/chschd.h **** 
 501:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 502:./lib/chibios/os/rt/include/chschd.h **** }
 503:./lib/chibios/os/rt/include/chschd.h **** 
 504:./lib/chibios/os/rt/include/chschd.h **** /**
 505:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 506:./lib/chibios/os/rt/include/chschd.h ****  *
 507:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 508:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 509:./lib/chibios/os/rt/include/chschd.h ****  *
 510:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 511:./lib/chibios/os/rt/include/chschd.h ****  */
 512:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 513:./lib/chibios/os/rt/include/chschd.h **** 
 514:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 515:./lib/chibios/os/rt/include/chschd.h **** }
 516:./lib/chibios/os/rt/include/chschd.h **** 
 517:./lib/chibios/os/rt/include/chschd.h **** /**
 518:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 519:./lib/chibios/os/rt/include/chschd.h ****  *
 520:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 521:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 522:./lib/chibios/os/rt/include/chschd.h ****  *
 523:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 524:./lib/chibios/os/rt/include/chschd.h ****  */
 525:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 526:./lib/chibios/os/rt/include/chschd.h **** 
 527:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 528:./lib/chibios/os/rt/include/chschd.h **** }
 529:./lib/chibios/os/rt/include/chschd.h **** 
 530:./lib/chibios/os/rt/include/chschd.h **** /**
 531:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 532:./lib/chibios/os/rt/include/chschd.h ****  *
 533:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 534:./lib/chibios/os/rt/include/chschd.h ****  *
 535:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 536:./lib/chibios/os/rt/include/chschd.h ****  */
 537:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 538:./lib/chibios/os/rt/include/chschd.h **** 
 539:./lib/chibios/os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
 540:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 541:./lib/chibios/os/rt/include/chschd.h **** }
 542:./lib/chibios/os/rt/include/chschd.h **** 
 543:./lib/chibios/os/rt/include/chschd.h **** /**
 544:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is empty.
 545:./lib/chibios/os/rt/include/chschd.h ****  *
 546:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 547:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the queue.
 548:./lib/chibios/os/rt/include/chschd.h ****  *
 549:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 550:./lib/chibios/os/rt/include/chschd.h ****  */
 551:./lib/chibios/os/rt/include/chschd.h **** static inline bool queue_isempty(const threads_queue_t *tqp) {
 552:./lib/chibios/os/rt/include/chschd.h **** 
 553:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tqp->next == (const thread_t *)tqp);
 554:./lib/chibios/os/rt/include/chschd.h **** }
 555:./lib/chibios/os/rt/include/chschd.h **** 
 556:./lib/chibios/os/rt/include/chschd.h **** /**
 557:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is not empty.
 558:./lib/chibios/os/rt/include/chschd.h ****  *
 559:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 560:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the queue.
 561:./lib/chibios/os/rt/include/chschd.h ****  *
 562:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 563:./lib/chibios/os/rt/include/chschd.h ****  */
 564:./lib/chibios/os/rt/include/chschd.h **** static inline bool queue_notempty(const threads_queue_t *tqp) {
 565:./lib/chibios/os/rt/include/chschd.h **** 
 566:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tqp->next != (const thread_t *)tqp);
 567:./lib/chibios/os/rt/include/chschd.h **** }
 568:./lib/chibios/os/rt/include/chschd.h **** 
 569:./lib/chibios/os/rt/include/chschd.h **** /* If the performance code path has been chosen then all the following
 570:./lib/chibios/os/rt/include/chschd.h ****    functions are inlined into the various kernel modules.*/
 571:./lib/chibios/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == TRUE
 572:./lib/chibios/os/rt/include/chschd.h **** static inline void list_insert(thread_t *tp, threads_list_t *tlp) {
 573:./lib/chibios/os/rt/include/chschd.h **** 
 574:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next = tlp->next;
 575:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = tp;
 576:./lib/chibios/os/rt/include/chschd.h **** }
 577:./lib/chibios/os/rt/include/chschd.h **** 
 578:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *list_remove(threads_list_t *tlp) {
 579:./lib/chibios/os/rt/include/chschd.h **** 
 580:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tlp->next;
 581:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = tp->queue.next;
 582:./lib/chibios/os/rt/include/chschd.h **** 
 583:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 584:./lib/chibios/os/rt/include/chschd.h **** }
 585:./lib/chibios/os/rt/include/chschd.h **** 
 586:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
 587:./lib/chibios/os/rt/include/chschd.h **** 
 588:./lib/chibios/os/rt/include/chschd.h ****   thread_t *cp = (thread_t *)tqp;
 589:./lib/chibios/os/rt/include/chschd.h ****   do {
 590:./lib/chibios/os/rt/include/chschd.h ****     cp = cp->queue.next;
 591:./lib/chibios/os/rt/include/chschd.h ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 592:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next             = cp;
 593:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev             = cp->queue.prev;
 594:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 595:./lib/chibios/os/rt/include/chschd.h ****   cp->queue.prev             = tp;
 596:./lib/chibios/os/rt/include/chschd.h **** }
 597:./lib/chibios/os/rt/include/chschd.h **** 
 598:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 599:./lib/chibios/os/rt/include/chschd.h **** 
 600:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next             = (thread_t *)tqp;
 601:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 602:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 603:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev                  = tp;
 604:./lib/chibios/os/rt/include/chschd.h **** }
 605:./lib/chibios/os/rt/include/chschd.h **** 
 606:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 607:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 608:./lib/chibios/os/rt/include/chschd.h **** 
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next             = tp->queue.next;
 610:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 611:./lib/chibios/os/rt/include/chschd.h **** 
 612:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 613:./lib/chibios/os/rt/include/chschd.h **** }
 614:./lib/chibios/os/rt/include/chschd.h **** 
 615:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
 616:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->prev;
 617:./lib/chibios/os/rt/include/chschd.h **** 
 618:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev             = tp->queue.prev;
 619:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev->queue.next = (thread_t *)tqp;
 620:./lib/chibios/os/rt/include/chschd.h **** 
 621:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 622:./lib/chibios/os/rt/include/chschd.h **** }
 623:./lib/chibios/os/rt/include/chschd.h **** 
 624:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *queue_dequeue(thread_t *tp) {
 625:./lib/chibios/os/rt/include/chschd.h **** 
 626:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp->queue.next;
 627:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next->queue.prev = tp->queue.prev;
 628:./lib/chibios/os/rt/include/chschd.h **** 
 629:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 630:./lib/chibios/os/rt/include/chschd.h **** }
 631:./lib/chibios/os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == TRUE */
 632:./lib/chibios/os/rt/include/chschd.h **** 
 633:./lib/chibios/os/rt/include/chschd.h **** /**
 634:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Determines if the current thread must reschedule.
 635:./lib/chibios/os/rt/include/chschd.h ****  * @details This function returns @p true if there is a ready thread with
 636:./lib/chibios/os/rt/include/chschd.h ****  *          higher priority.
 637:./lib/chibios/os/rt/include/chschd.h ****  *
 638:./lib/chibios/os/rt/include/chschd.h ****  * @return              The priorities situation.
 639:./lib/chibios/os/rt/include/chschd.h ****  * @retval false        if rescheduling is not necessary.
 640:./lib/chibios/os/rt/include/chschd.h ****  * @retval true         if there is a ready thread at higher priority.
 641:./lib/chibios/os/rt/include/chschd.h ****  *
 642:./lib/chibios/os/rt/include/chschd.h ****  * @iclass
 643:./lib/chibios/os/rt/include/chschd.h ****  */
 644:./lib/chibios/os/rt/include/chschd.h **** static inline bool chSchIsRescRequiredI(void) {
 645:./lib/chibios/os/rt/include/chschd.h **** 
 646:./lib/chibios/os/rt/include/chschd.h ****   chDbgCheckClassI();
 647:./lib/chibios/os/rt/include/chschd.h **** 
 648:./lib/chibios/os/rt/include/chschd.h ****   return firstprio(&ch.rlist.queue) > currp->prio;
 649:./lib/chibios/os/rt/include/chschd.h **** }
 650:./lib/chibios/os/rt/include/chschd.h **** 
 651:./lib/chibios/os/rt/include/chschd.h **** /**
 652:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Determines if yielding is possible.
 653:./lib/chibios/os/rt/include/chschd.h ****  * @details This function returns @p true if there is a ready thread with
 654:./lib/chibios/os/rt/include/chschd.h ****  *          equal or higher priority.
 655:./lib/chibios/os/rt/include/chschd.h ****  *
 656:./lib/chibios/os/rt/include/chschd.h ****  * @return              The priorities situation.
 657:./lib/chibios/os/rt/include/chschd.h ****  * @retval false        if yielding is not possible.
 658:./lib/chibios/os/rt/include/chschd.h ****  * @retval true         if there is a ready thread at equal or higher priority.
 659:./lib/chibios/os/rt/include/chschd.h ****  *
 660:./lib/chibios/os/rt/include/chschd.h ****  * @sclass
 661:./lib/chibios/os/rt/include/chschd.h ****  */
 662:./lib/chibios/os/rt/include/chschd.h **** static inline bool chSchCanYieldS(void) {
 663:./lib/chibios/os/rt/include/chschd.h **** 
 664:./lib/chibios/os/rt/include/chschd.h ****   chDbgCheckClassS();
 665:./lib/chibios/os/rt/include/chschd.h **** 
 666:./lib/chibios/os/rt/include/chschd.h ****   return firstprio(&ch.rlist.queue) >= currp->prio;
 667:./lib/chibios/os/rt/include/chschd.h **** }
 668:./lib/chibios/os/rt/include/chschd.h **** 
 669:./lib/chibios/os/rt/include/chschd.h **** /**
 670:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Yields the time slot.
 671:./lib/chibios/os/rt/include/chschd.h ****  * @details Yields the CPU control to the next thread in the ready list with
 672:./lib/chibios/os/rt/include/chschd.h ****  *          equal or higher priority, if any.
 673:./lib/chibios/os/rt/include/chschd.h ****  *
 674:./lib/chibios/os/rt/include/chschd.h ****  * @sclass
 675:./lib/chibios/os/rt/include/chschd.h ****  */
 676:./lib/chibios/os/rt/include/chschd.h **** static inline void chSchDoYieldS(void) {
 1661              		.loc 9 676 20 view .LVU489
 1662              	.LBB441:
 677:./lib/chibios/os/rt/include/chschd.h **** 
 678:./lib/chibios/os/rt/include/chschd.h ****   chDbgCheckClassS();
 1663              		.loc 9 678 21 view .LVU490
 679:./lib/chibios/os/rt/include/chschd.h **** 
 680:./lib/chibios/os/rt/include/chschd.h ****   if (chSchCanYieldS()) {
 1664              		.loc 9 680 3 view .LVU491
 1665              	.LBB442:
 1666              	.LBI442:
 662:./lib/chibios/os/rt/include/chschd.h **** 
 1667              		.loc 9 662 20 view .LVU492
 1668              	.LBB443:
 664:./lib/chibios/os/rt/include/chschd.h **** 
 1669              		.loc 9 664 21 view .LVU493
 666:./lib/chibios/os/rt/include/chschd.h **** }
 1670              		.loc 9 666 3 view .LVU494
 666:./lib/chibios/os/rt/include/chschd.h **** }
 1671              		.loc 9 666 10 is_stmt 0 view .LVU495
 1672 0008 064B     		ldr	r3, .L32
 1673 000a 1A68     		ldr	r2, [r3]
 666:./lib/chibios/os/rt/include/chschd.h **** }
 1674              		.loc 9 666 45 view .LVU496
 1675 000c 1B69     		ldr	r3, [r3, #16]
 1676              	.LBE443:
 1677              	.LBE442:
 1678              		.loc 9 680 6 view .LVU497
 1679 000e 9268     		ldr	r2, [r2, #8]
 1680 0010 9B68     		ldr	r3, [r3, #8]
 1681 0012 9A42     		cmp	r2, r3
 1682 0014 01D3     		bcc	.L31
 681:./lib/chibios/os/rt/include/chschd.h ****     chSchDoRescheduleBehind();
 1683              		.loc 9 681 5 is_stmt 1 view .LVU498
 1684 0016 FFF7FEFF 		bl	chSchDoRescheduleBehind
 1685              	.LVL77:
 1686              	.L31:
 1687              	.LBE441:
 1688              	.LBE440:
 720:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 1689              		.loc 1 720 3 view .LVU499
 1690              	.LBB444:
 1691              	.LBI444:
 365:./lib/chibios/os/rt/include/chsys.h **** 
 1692              		.loc 2 365 20 view .LVU500
 1693              	.LBB445:
 367:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 1694              		.loc 2 367 22 view .LVU501
 368:./lib/chibios/os/rt/include/chsys.h **** 
 1695              		.loc 2 368 33 view .LVU502
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1696              		.loc 2 374 3 view .LVU503
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1697              		.loc 2 374 3 view .LVU504
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1698              		.loc 2 374 3 view .LVU505
 1699              		.loc 2 378 3 view .LVU506
 1700              	.LBB446:
 1701              	.LBI446:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 1702              		.loc 3 693 27 view .LVU507
 1703              	.LBE446:
 1704              	.LBE445:
 1705              	.LBE444:
 1706              		.loc 3 696 3 view .LVU508
 1707              	.LBB451:
 1708              	.LBB450:
 1709              	.LBB449:
 1710              	.LBB447:
 1711              	.LBI447:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 1712              		.loc 4 491 27 view .LVU509
 1713              	.LBB448:
 1714              		.loc 4 493 3 view .LVU510
 1715 001a 0023     		movs	r3, #0
 1716              		.syntax unified
 1717              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 1718 001c 83F31188 		MSR basepri, r3
 1719              	@ 0 "" 2
 1720              	.LVL78:
 1721              		.loc 4 493 3 is_stmt 0 view .LVU511
 1722              		.thumb
 1723              		.syntax unified
 1724              	.LBE448:
 1725              	.LBE447:
 1726              	.LBE449:
 1727              	.LBE450:
 1728              	.LBE451:
 721:lib/chibios/os/rt/src/chthreads.c **** }
 1729              		.loc 1 721 1 view .LVU512
 1730 0020 08BD     		pop	{r3, pc}
 1731              	.L33:
 1732 0022 00BF     		.align	2
 1733              	.L32:
 1734 0024 00000000 		.word	ch
 1735              		.cfi_endproc
 1736              	.LFE253:
 1738              		.section	.text.chThdSuspendS,"ax",%progbits
 1739              		.align	1
 1740              		.global	chThdSuspendS
 1741              		.syntax unified
 1742              		.thumb
 1743              		.thumb_func
 1744              		.fpu fpv4-sp-d16
 1746              	chThdSuspendS:
 1747              	.LVL79:
 1748              	.LFB254:
 722:lib/chibios/os/rt/src/chthreads.c **** 
 723:lib/chibios/os/rt/src/chthreads.c **** /**
 724:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 725:lib/chibios/os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 726:lib/chibios/os/rt/src/chthreads.c ****  *          context.
 727:lib/chibios/os/rt/src/chthreads.c ****  *
 728:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 729:lib/chibios/os/rt/src/chthreads.c ****  * @return              The wake up message.
 730:lib/chibios/os/rt/src/chthreads.c ****  *
 731:lib/chibios/os/rt/src/chthreads.c ****  * @sclass
 732:lib/chibios/os/rt/src/chthreads.c ****  */
 733:lib/chibios/os/rt/src/chthreads.c **** msg_t chThdSuspendS(thread_reference_t *trp) {
 1749              		.loc 1 733 46 is_stmt 1 view -0
 1750              		.cfi_startproc
 1751              		@ args = 0, pretend = 0, frame = 0
 1752              		@ frame_needed = 0, uses_anonymous_args = 0
 734:lib/chibios/os/rt/src/chthreads.c ****   thread_t *tp = chThdGetSelfX();
 1753              		.loc 1 734 3 view .LVU514
 1754              	.LBB452:
 1755              	.LBI452:
 272:./lib/chibios/os/rt/include/chthreads.h **** 
 1756              		.loc 5 272 25 view .LVU515
 1757              	.LBB453:
 274:./lib/chibios/os/rt/include/chthreads.h **** }
 1758              		.loc 5 274 3 view .LVU516
 1759              	.LBE453:
 1760              	.LBE452:
 733:lib/chibios/os/rt/src/chthreads.c ****   thread_t *tp = chThdGetSelfX();
 1761              		.loc 1 733 46 is_stmt 0 view .LVU517
 1762 0000 10B5     		push	{r4, lr}
 1763              		.cfi_def_cfa_offset 8
 1764              		.cfi_offset 4, -8
 1765              		.cfi_offset 14, -4
 1766              	.LBB455:
 1767              	.LBB454:
 274:./lib/chibios/os/rt/include/chthreads.h **** }
 1768              		.loc 5 274 18 view .LVU518
 1769 0002 054C     		ldr	r4, .L35
 1770 0004 2369     		ldr	r3, [r4, #16]
 1771              	.LVL80:
 274:./lib/chibios/os/rt/include/chthreads.h **** }
 1772              		.loc 5 274 18 view .LVU519
 1773              	.LBE454:
 1774              	.LBE455:
 735:lib/chibios/os/rt/src/chthreads.c **** 
 736:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(*trp == NULL, "not NULL");
 1775              		.loc 1 736 3 is_stmt 1 view .LVU520
 1776              		.loc 1 736 3 view .LVU521
 1777              		.loc 1 736 3 view .LVU522
 737:lib/chibios/os/rt/src/chthreads.c **** 
 738:lib/chibios/os/rt/src/chthreads.c ****   *trp = tp;
 1778              		.loc 1 738 3 view .LVU523
 1779              		.loc 1 738 8 is_stmt 0 view .LVU524
 1780 0006 0360     		str	r3, [r0]
 739:lib/chibios/os/rt/src/chthreads.c ****   tp->u.wttrp = trp;
 1781              		.loc 1 739 3 is_stmt 1 view .LVU525
 1782              		.loc 1 739 15 is_stmt 0 view .LVU526
 1783 0008 5861     		str	r0, [r3, #20]
 740:lib/chibios/os/rt/src/chthreads.c ****   chSchGoSleepS(CH_STATE_SUSPENDED);
 1784              		.loc 1 740 3 is_stmt 1 view .LVU527
 1785 000a 0320     		movs	r0, #3
 1786              	.LVL81:
 1787              		.loc 1 740 3 is_stmt 0 view .LVU528
 1788 000c FFF7FEFF 		bl	chSchGoSleepS
 1789              	.LVL82:
 741:lib/chibios/os/rt/src/chthreads.c **** 
 742:lib/chibios/os/rt/src/chthreads.c ****   return chThdGetSelfX()->u.rdymsg;
 1790              		.loc 1 742 3 is_stmt 1 view .LVU529
 1791              	.LBB456:
 1792              	.LBI456:
 272:./lib/chibios/os/rt/include/chthreads.h **** 
 1793              		.loc 5 272 25 view .LVU530
 1794              	.LBB457:
 274:./lib/chibios/os/rt/include/chthreads.h **** }
 1795              		.loc 5 274 3 view .LVU531
 1796              	.LBE457:
 1797              	.LBE456:
 1798              		.loc 1 742 28 is_stmt 0 view .LVU532
 1799 0010 2369     		ldr	r3, [r4, #16]
 743:lib/chibios/os/rt/src/chthreads.c **** }
 1800              		.loc 1 743 1 view .LVU533
 1801 0012 5869     		ldr	r0, [r3, #20]
 1802 0014 10BD     		pop	{r4, pc}
 1803              	.L36:
 1804 0016 00BF     		.align	2
 1805              	.L35:
 1806 0018 00000000 		.word	ch
 1807              		.cfi_endproc
 1808              	.LFE254:
 1810              		.section	.text.chThdSuspendTimeoutS,"ax",%progbits
 1811              		.align	1
 1812              		.global	chThdSuspendTimeoutS
 1813              		.syntax unified
 1814              		.thumb
 1815              		.thumb_func
 1816              		.fpu fpv4-sp-d16
 1818              	chThdSuspendTimeoutS:
 1819              	.LVL83:
 1820              	.LFB255:
 744:lib/chibios/os/rt/src/chthreads.c **** 
 745:lib/chibios/os/rt/src/chthreads.c **** /**
 746:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 747:lib/chibios/os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 748:lib/chibios/os/rt/src/chthreads.c ****  *          context.
 749:lib/chibios/os/rt/src/chthreads.c ****  *
 750:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 751:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] timeout   the timeout in system ticks, the special values are
 752:lib/chibios/os/rt/src/chthreads.c ****  *                      handled as follow:
 753:lib/chibios/os/rt/src/chthreads.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 754:lib/chibios/os/rt/src/chthreads.c ****  *                        state.
 755:lib/chibios/os/rt/src/chthreads.c ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 756:lib/chibios/os/rt/src/chthreads.c ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 757:lib/chibios/os/rt/src/chthreads.c ****  *                        occurred.
 758:lib/chibios/os/rt/src/chthreads.c ****  *                      .
 759:lib/chibios/os/rt/src/chthreads.c ****  * @return              The wake up message.
 760:lib/chibios/os/rt/src/chthreads.c ****  * @retval MSG_TIMEOUT  if the operation timed out.
 761:lib/chibios/os/rt/src/chthreads.c ****  *
 762:lib/chibios/os/rt/src/chthreads.c ****  * @sclass
 763:lib/chibios/os/rt/src/chthreads.c ****  */
 764:lib/chibios/os/rt/src/chthreads.c **** msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 1821              		.loc 1 764 76 is_stmt 1 view -0
 1822              		.cfi_startproc
 1823              		@ args = 0, pretend = 0, frame = 0
 1824              		@ frame_needed = 0, uses_anonymous_args = 0
 1825              		@ link register save eliminated.
 765:lib/chibios/os/rt/src/chthreads.c ****   thread_t *tp = chThdGetSelfX();
 1826              		.loc 1 765 3 view .LVU535
 1827              	.LBB458:
 1828              	.LBI458:
 272:./lib/chibios/os/rt/include/chthreads.h **** 
 1829              		.loc 5 272 25 view .LVU536
 1830              	.LBB459:
 274:./lib/chibios/os/rt/include/chthreads.h **** }
 1831              		.loc 5 274 3 view .LVU537
 274:./lib/chibios/os/rt/include/chthreads.h **** }
 1832              		.loc 5 274 18 is_stmt 0 view .LVU538
 1833 0000 054B     		ldr	r3, .L39
 1834 0002 1B69     		ldr	r3, [r3, #16]
 1835              	.LVL84:
 274:./lib/chibios/os/rt/include/chthreads.h **** }
 1836              		.loc 5 274 18 view .LVU539
 1837              	.LBE459:
 1838              	.LBE458:
 766:lib/chibios/os/rt/src/chthreads.c **** 
 767:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(*trp == NULL, "not NULL");
 1839              		.loc 1 767 3 is_stmt 1 view .LVU540
 1840              		.loc 1 767 3 view .LVU541
 1841              		.loc 1 767 3 view .LVU542
 768:lib/chibios/os/rt/src/chthreads.c **** 
 769:lib/chibios/os/rt/src/chthreads.c ****   if (TIME_IMMEDIATE == timeout) {
 1842              		.loc 1 769 3 view .LVU543
 1843              		.loc 1 769 6 is_stmt 0 view .LVU544
 1844 0004 21B1     		cbz	r1, .L38
 770:lib/chibios/os/rt/src/chthreads.c ****     return MSG_TIMEOUT;
 771:lib/chibios/os/rt/src/chthreads.c ****   }
 772:lib/chibios/os/rt/src/chthreads.c **** 
 773:lib/chibios/os/rt/src/chthreads.c ****   *trp = tp;
 1845              		.loc 1 773 3 is_stmt 1 view .LVU545
 1846              		.loc 1 773 8 is_stmt 0 view .LVU546
 1847 0006 0360     		str	r3, [r0]
 774:lib/chibios/os/rt/src/chthreads.c ****   tp->u.wttrp = trp;
 1848              		.loc 1 774 3 is_stmt 1 view .LVU547
 1849              		.loc 1 774 15 is_stmt 0 view .LVU548
 1850 0008 5861     		str	r0, [r3, #20]
 775:lib/chibios/os/rt/src/chthreads.c **** 
 776:lib/chibios/os/rt/src/chthreads.c ****   return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 1851              		.loc 1 776 3 is_stmt 1 view .LVU549
 1852              		.loc 1 776 10 is_stmt 0 view .LVU550
 1853 000a 0320     		movs	r0, #3
 1854              	.LVL85:
 1855              		.loc 1 776 10 view .LVU551
 1856 000c FFF7FEBF 		b	chSchGoSleepTimeoutS
 1857              	.LVL86:
 1858              	.L38:
 777:lib/chibios/os/rt/src/chthreads.c **** }
 1859              		.loc 1 777 1 view .LVU552
 1860 0010 4FF0FF30 		mov	r0, #-1
 1861              	.LVL87:
 1862              		.loc 1 777 1 view .LVU553
 1863 0014 7047     		bx	lr
 1864              	.L40:
 1865 0016 00BF     		.align	2
 1866              	.L39:
 1867 0018 00000000 		.word	ch
 1868              		.cfi_endproc
 1869              	.LFE255:
 1871              		.section	.text.chThdResumeI,"ax",%progbits
 1872              		.align	1
 1873              		.global	chThdResumeI
 1874              		.syntax unified
 1875              		.thumb
 1876              		.thumb_func
 1877              		.fpu fpv4-sp-d16
 1879              	chThdResumeI:
 1880              	.LVL88:
 1881              	.LFB256:
 778:lib/chibios/os/rt/src/chthreads.c **** 
 779:lib/chibios/os/rt/src/chthreads.c **** /**
 780:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 781:lib/chibios/os/rt/src/chthreads.c ****  * @note    This function must not reschedule because it can be called from
 782:lib/chibios/os/rt/src/chthreads.c ****  *          ISR context.
 783:lib/chibios/os/rt/src/chthreads.c ****  *
 784:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 785:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 786:lib/chibios/os/rt/src/chthreads.c ****  *
 787:lib/chibios/os/rt/src/chthreads.c ****  * @iclass
 788:lib/chibios/os/rt/src/chthreads.c ****  */
 789:lib/chibios/os/rt/src/chthreads.c **** void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 1882              		.loc 1 789 55 is_stmt 1 view -0
 1883              		.cfi_startproc
 1884              		@ args = 0, pretend = 0, frame = 0
 1885              		@ frame_needed = 0, uses_anonymous_args = 0
 1886              		@ link register save eliminated.
 790:lib/chibios/os/rt/src/chthreads.c **** 
 791:lib/chibios/os/rt/src/chthreads.c ****   if (*trp != NULL) {
 1887              		.loc 1 791 3 view .LVU555
 1888              		.loc 1 791 7 is_stmt 0 view .LVU556
 1889 0000 0368     		ldr	r3, [r0]
 1890              		.loc 1 791 6 view .LVU557
 1891 0002 2BB1     		cbz	r3, .L41
 1892              	.LBB460:
 792:lib/chibios/os/rt/src/chthreads.c ****     thread_t *tp = *trp;
 1893              		.loc 1 792 5 is_stmt 1 view .LVU558
 1894              	.LVL89:
 793:lib/chibios/os/rt/src/chthreads.c **** 
 794:lib/chibios/os/rt/src/chthreads.c ****     chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 1895              		.loc 1 794 5 view .LVU559
 1896              		.loc 1 794 5 view .LVU560
 1897              		.loc 1 794 5 view .LVU561
 795:lib/chibios/os/rt/src/chthreads.c **** 
 796:lib/chibios/os/rt/src/chthreads.c ****     *trp = NULL;
 1898              		.loc 1 796 5 view .LVU562
 1899              		.loc 1 796 10 is_stmt 0 view .LVU563
 1900 0004 0022     		movs	r2, #0
 1901 0006 0260     		str	r2, [r0]
 797:lib/chibios/os/rt/src/chthreads.c ****     tp->u.rdymsg = msg;
 1902              		.loc 1 797 5 is_stmt 1 view .LVU564
 1903              		.loc 1 797 18 is_stmt 0 view .LVU565
 1904 0008 5961     		str	r1, [r3, #20]
 798:lib/chibios/os/rt/src/chthreads.c ****     (void) chSchReadyI(tp);
 1905              		.loc 1 798 5 is_stmt 1 view .LVU566
 1906              		.loc 1 798 12 is_stmt 0 view .LVU567
 1907 000a 1846     		mov	r0, r3
 1908              	.LVL90:
 1909              		.loc 1 798 12 view .LVU568
 1910 000c FFF7FEBF 		b	chSchReadyI
 1911              	.LVL91:
 1912              	.L41:
 1913              		.loc 1 798 12 view .LVU569
 1914              	.LBE460:
 799:lib/chibios/os/rt/src/chthreads.c ****   }
 800:lib/chibios/os/rt/src/chthreads.c **** }
 1915              		.loc 1 800 1 view .LVU570
 1916 0010 7047     		bx	lr
 1917              		.cfi_endproc
 1918              	.LFE256:
 1920              		.section	.text.chThdResumeS,"ax",%progbits
 1921              		.align	1
 1922              		.global	chThdResumeS
 1923              		.syntax unified
 1924              		.thumb
 1925              		.thumb_func
 1926              		.fpu fpv4-sp-d16
 1928              	chThdResumeS:
 1929              	.LVL92:
 1930              	.LFB257:
 801:lib/chibios/os/rt/src/chthreads.c **** 
 802:lib/chibios/os/rt/src/chthreads.c **** /**
 803:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 804:lib/chibios/os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 805:lib/chibios/os/rt/src/chthreads.c ****  *          context.
 806:lib/chibios/os/rt/src/chthreads.c ****  *
 807:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 808:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 809:lib/chibios/os/rt/src/chthreads.c ****  *
 810:lib/chibios/os/rt/src/chthreads.c ****  * @iclass
 811:lib/chibios/os/rt/src/chthreads.c ****  */
 812:lib/chibios/os/rt/src/chthreads.c **** void chThdResumeS(thread_reference_t *trp, msg_t msg) {
 1931              		.loc 1 812 55 is_stmt 1 view -0
 1932              		.cfi_startproc
 1933              		@ args = 0, pretend = 0, frame = 0
 1934              		@ frame_needed = 0, uses_anonymous_args = 0
 1935              		@ link register save eliminated.
 813:lib/chibios/os/rt/src/chthreads.c **** 
 814:lib/chibios/os/rt/src/chthreads.c ****   if (*trp != NULL) {
 1936              		.loc 1 814 3 view .LVU572
 1937              		.loc 1 814 7 is_stmt 0 view .LVU573
 1938 0000 0368     		ldr	r3, [r0]
 1939              		.loc 1 814 6 view .LVU574
 1940 0002 23B1     		cbz	r3, .L43
 1941              	.LBB461:
 815:lib/chibios/os/rt/src/chthreads.c ****     thread_t *tp = *trp;
 1942              		.loc 1 815 5 is_stmt 1 view .LVU575
 1943              	.LVL93:
 816:lib/chibios/os/rt/src/chthreads.c **** 
 817:lib/chibios/os/rt/src/chthreads.c ****     chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 1944              		.loc 1 817 5 view .LVU576
 1945              		.loc 1 817 5 view .LVU577
 1946              		.loc 1 817 5 view .LVU578
 818:lib/chibios/os/rt/src/chthreads.c **** 
 819:lib/chibios/os/rt/src/chthreads.c ****     *trp = NULL;
 1947              		.loc 1 819 5 view .LVU579
 1948              		.loc 1 819 10 is_stmt 0 view .LVU580
 1949 0004 0022     		movs	r2, #0
 1950 0006 0260     		str	r2, [r0]
 820:lib/chibios/os/rt/src/chthreads.c ****     chSchWakeupS(tp, msg);
 1951              		.loc 1 820 5 is_stmt 1 view .LVU581
 1952 0008 1846     		mov	r0, r3
 1953              	.LVL94:
 1954              		.loc 1 820 5 is_stmt 0 view .LVU582
 1955 000a FFF7FEBF 		b	chSchWakeupS
 1956              	.LVL95:
 1957              	.L43:
 1958              		.loc 1 820 5 view .LVU583
 1959              	.LBE461:
 821:lib/chibios/os/rt/src/chthreads.c ****   }
 822:lib/chibios/os/rt/src/chthreads.c **** }
 1960              		.loc 1 822 1 view .LVU584
 1961 000e 7047     		bx	lr
 1962              		.cfi_endproc
 1963              	.LFE257:
 1965              		.section	.text.chThdResume,"ax",%progbits
 1966              		.align	1
 1967              		.global	chThdResume
 1968              		.syntax unified
 1969              		.thumb
 1970              		.thumb_func
 1971              		.fpu fpv4-sp-d16
 1973              	chThdResume:
 1974              	.LVL96:
 1975              	.LFB258:
 823:lib/chibios/os/rt/src/chthreads.c **** 
 824:lib/chibios/os/rt/src/chthreads.c **** /**
 825:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 826:lib/chibios/os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 827:lib/chibios/os/rt/src/chthreads.c ****  *          context.
 828:lib/chibios/os/rt/src/chthreads.c ****  *
 829:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 830:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 831:lib/chibios/os/rt/src/chthreads.c ****  *
 832:lib/chibios/os/rt/src/chthreads.c ****  * @api
 833:lib/chibios/os/rt/src/chthreads.c ****  */
 834:lib/chibios/os/rt/src/chthreads.c **** void chThdResume(thread_reference_t *trp, msg_t msg) {
 1976              		.loc 1 834 54 is_stmt 1 view -0
 1977              		.cfi_startproc
 1978              		@ args = 0, pretend = 0, frame = 0
 1979              		@ frame_needed = 0, uses_anonymous_args = 0
 835:lib/chibios/os/rt/src/chthreads.c **** 
 836:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 1980              		.loc 1 836 3 view .LVU586
 1981              	.LBB462:
 1982              	.LBI462:
 353:./lib/chibios/os/rt/include/chsys.h **** 
 1983              		.loc 2 353 20 view .LVU587
 1984              	.LBE462:
 355:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 1985              		.loc 2 355 3 view .LVU588
 1986              	.LBB470:
 1987              	.LBB463:
 1988              	.LBI463:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 1989              		.loc 3 669 27 view .LVU589
 1990              	.LBE463:
 1991              	.LBE470:
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 1992              		.loc 3 677 3 view .LVU590
 1993              	.LBB471:
 1994              	.LBB468:
 1995              	.LBB464:
 1996              	.LBI464:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 1997              		.loc 4 491 27 view .LVU591
 1998              	.LBB465:
 1999              		.loc 4 493 3 view .LVU592
 2000              	.LBE465:
 2001              	.LBE464:
 2002              	.LBE468:
 2003              	.LBE471:
 834:lib/chibios/os/rt/src/chthreads.c **** 
 2004              		.loc 1 834 54 is_stmt 0 view .LVU593
 2005 0000 08B5     		push	{r3, lr}
 2006              		.cfi_def_cfa_offset 8
 2007              		.cfi_offset 3, -8
 2008              		.cfi_offset 14, -4
 2009              	.LBB472:
 2010              	.LBB469:
 2011              	.LBB467:
 2012              	.LBB466:
 2013              		.loc 4 493 3 view .LVU594
 2014 0002 2023     		movs	r3, #32
 2015              		.syntax unified
 2016              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 2017 0004 83F31188 		MSR basepri, r3
 2018              	@ 0 "" 2
 2019              	.LVL97:
 2020              		.loc 4 493 3 view .LVU595
 2021              		.thumb
 2022              		.syntax unified
 2023              	.LBE466:
 2024              	.LBE467:
 2025              	.LBE469:
 2026              	.LBE472:
 356:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 2027              		.loc 2 356 34 is_stmt 1 view .LVU596
 357:./lib/chibios/os/rt/include/chsys.h **** }
 2028              		.loc 2 357 20 view .LVU597
 837:lib/chibios/os/rt/src/chthreads.c ****   chThdResumeS(trp, msg);
 2029              		.loc 1 837 3 view .LVU598
 2030 0008 FFF7FEFF 		bl	chThdResumeS
 2031              	.LVL98:
 838:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 2032              		.loc 1 838 3 view .LVU599
 2033              	.LBB473:
 2034              	.LBI473:
 365:./lib/chibios/os/rt/include/chsys.h **** 
 2035              		.loc 2 365 20 view .LVU600
 2036              	.LBB474:
 367:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 2037              		.loc 2 367 22 view .LVU601
 368:./lib/chibios/os/rt/include/chsys.h **** 
 2038              		.loc 2 368 33 view .LVU602
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 2039              		.loc 2 374 3 view .LVU603
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 2040              		.loc 2 374 3 view .LVU604
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 2041              		.loc 2 374 3 view .LVU605
 2042              		.loc 2 378 3 view .LVU606
 2043              	.LBB475:
 2044              	.LBI475:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 2045              		.loc 3 693 27 view .LVU607
 2046              	.LBE475:
 2047              	.LBE474:
 2048              	.LBE473:
 2049              		.loc 3 696 3 view .LVU608
 2050              	.LBB480:
 2051              	.LBB479:
 2052              	.LBB478:
 2053              	.LBB476:
 2054              	.LBI476:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 2055              		.loc 4 491 27 view .LVU609
 2056              	.LBB477:
 2057              		.loc 4 493 3 view .LVU610
 2058 000c 0023     		movs	r3, #0
 2059              		.syntax unified
 2060              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 2061 000e 83F31188 		MSR basepri, r3
 2062              	@ 0 "" 2
 2063              	.LVL99:
 2064              		.loc 4 493 3 is_stmt 0 view .LVU611
 2065              		.thumb
 2066              		.syntax unified
 2067              	.LBE477:
 2068              	.LBE476:
 2069              	.LBE478:
 2070              	.LBE479:
 2071              	.LBE480:
 839:lib/chibios/os/rt/src/chthreads.c **** }
 2072              		.loc 1 839 1 view .LVU612
 2073 0012 08BD     		pop	{r3, pc}
 2074              		.cfi_endproc
 2075              	.LFE258:
 2077              		.section	.text.chThdEnqueueTimeoutS,"ax",%progbits
 2078              		.align	1
 2079              		.global	chThdEnqueueTimeoutS
 2080              		.syntax unified
 2081              		.thumb
 2082              		.thumb_func
 2083              		.fpu fpv4-sp-d16
 2085              	chThdEnqueueTimeoutS:
 2086              	.LVL100:
 2087              	.LFB259:
 840:lib/chibios/os/rt/src/chthreads.c **** 
 841:lib/chibios/os/rt/src/chthreads.c **** /**
 842:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Enqueues the caller thread on a threads queue object.
 843:lib/chibios/os/rt/src/chthreads.c ****  * @details The caller thread is enqueued and put to sleep until it is
 844:lib/chibios/os/rt/src/chthreads.c ****  *          dequeued or the specified timeouts expires.
 845:lib/chibios/os/rt/src/chthreads.c ****  *
 846:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to the threads queue object
 847:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] timeout   the timeout in system ticks, the special values are
 848:lib/chibios/os/rt/src/chthreads.c ****  *                      handled as follow:
 849:lib/chibios/os/rt/src/chthreads.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 850:lib/chibios/os/rt/src/chthreads.c ****  *                        state.
 851:lib/chibios/os/rt/src/chthreads.c ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 852:lib/chibios/os/rt/src/chthreads.c ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 853:lib/chibios/os/rt/src/chthreads.c ****  *                        occurred.
 854:lib/chibios/os/rt/src/chthreads.c ****  *                      .
 855:lib/chibios/os/rt/src/chthreads.c ****  * @return              The message from @p osalQueueWakeupOneI() or
 856:lib/chibios/os/rt/src/chthreads.c ****  *                      @p osalQueueWakeupAllI() functions.
 857:lib/chibios/os/rt/src/chthreads.c ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 858:lib/chibios/os/rt/src/chthreads.c ****  *                      specified timeout or if the function has been
 859:lib/chibios/os/rt/src/chthreads.c ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 860:lib/chibios/os/rt/src/chthreads.c ****  *                      specification.
 861:lib/chibios/os/rt/src/chthreads.c ****  *
 862:lib/chibios/os/rt/src/chthreads.c ****  * @sclass
 863:lib/chibios/os/rt/src/chthreads.c ****  */
 864:lib/chibios/os/rt/src/chthreads.c **** msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 2088              		.loc 1 864 73 is_stmt 1 view -0
 2089              		.cfi_startproc
 2090              		@ args = 0, pretend = 0, frame = 0
 2091              		@ frame_needed = 0, uses_anonymous_args = 0
 2092              		@ link register save eliminated.
 865:lib/chibios/os/rt/src/chthreads.c **** 
 866:lib/chibios/os/rt/src/chthreads.c ****   if (TIME_IMMEDIATE == timeout) {
 2093              		.loc 1 866 3 view .LVU614
 2094              		.loc 1 866 6 is_stmt 0 view .LVU615
 2095 0000 49B1     		cbz	r1, .L47
 867:lib/chibios/os/rt/src/chthreads.c ****     return MSG_TIMEOUT;
 868:lib/chibios/os/rt/src/chthreads.c ****   }
 869:lib/chibios/os/rt/src/chthreads.c **** 
 870:lib/chibios/os/rt/src/chthreads.c ****   queue_insert(currp, tqp);
 2096              		.loc 1 870 3 is_stmt 1 view .LVU616
 2097 0002 064B     		ldr	r3, .L48
 2098              	.LBB481:
 2099              	.LBB482:
 601:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 2100              		.loc 9 601 35 is_stmt 0 view .LVU617
 2101 0004 4268     		ldr	r2, [r0, #4]
 2102              	.LBE482:
 2103              	.LBE481:
 2104              		.loc 1 870 3 view .LVU618
 2105 0006 1B69     		ldr	r3, [r3, #16]
 2106              	.LVL101:
 2107              	.LBB484:
 2108              	.LBI481:
 598:./lib/chibios/os/rt/include/chschd.h **** 
 2109              		.loc 9 598 20 is_stmt 1 view .LVU619
 2110              	.LBB483:
 600:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 2111              		.loc 9 600 3 view .LVU620
 600:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 2112              		.loc 9 600 30 is_stmt 0 view .LVU621
 2113 0008 1860     		str	r0, [r3]
 601:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 2114              		.loc 9 601 3 is_stmt 1 view .LVU622
 601:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 2115              		.loc 9 601 30 is_stmt 0 view .LVU623
 2116 000a 5A60     		str	r2, [r3, #4]
 602:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev                  = tp;
 2117              		.loc 9 602 3 is_stmt 1 view .LVU624
 602:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev                  = tp;
 2118              		.loc 9 602 30 is_stmt 0 view .LVU625
 2119 000c 1360     		str	r3, [r2]
 603:./lib/chibios/os/rt/include/chschd.h **** }
 2120              		.loc 9 603 3 is_stmt 1 view .LVU626
 603:./lib/chibios/os/rt/include/chschd.h **** }
 2121              		.loc 9 603 30 is_stmt 0 view .LVU627
 2122 000e 4360     		str	r3, [r0, #4]
 2123              	.LVL102:
 603:./lib/chibios/os/rt/include/chschd.h **** }
 2124              		.loc 9 603 30 view .LVU628
 2125              	.LBE483:
 2126              	.LBE484:
 871:lib/chibios/os/rt/src/chthreads.c **** 
 872:lib/chibios/os/rt/src/chthreads.c ****   return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 2127              		.loc 1 872 3 is_stmt 1 view .LVU629
 2128              		.loc 1 872 10 is_stmt 0 view .LVU630
 2129 0010 0420     		movs	r0, #4
 2130              	.LVL103:
 2131              		.loc 1 872 10 view .LVU631
 2132 0012 FFF7FEBF 		b	chSchGoSleepTimeoutS
 2133              	.LVL104:
 2134              	.L47:
 873:lib/chibios/os/rt/src/chthreads.c **** }
 2135              		.loc 1 873 1 view .LVU632
 2136 0016 4FF0FF30 		mov	r0, #-1
 2137              	.LVL105:
 2138              		.loc 1 873 1 view .LVU633
 2139 001a 7047     		bx	lr
 2140              	.L49:
 2141              		.align	2
 2142              	.L48:
 2143 001c 00000000 		.word	ch
 2144              		.cfi_endproc
 2145              	.LFE259:
 2147              		.section	.text.chThdDequeueNextI,"ax",%progbits
 2148              		.align	1
 2149              		.global	chThdDequeueNextI
 2150              		.syntax unified
 2151              		.thumb
 2152              		.thumb_func
 2153              		.fpu fpv4-sp-d16
 2155              	chThdDequeueNextI:
 2156              	.LVL106:
 2157              	.LFB260:
 874:lib/chibios/os/rt/src/chthreads.c **** 
 875:lib/chibios/os/rt/src/chthreads.c **** /**
 876:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Dequeues and wakes up one thread from the threads queue object,
 877:lib/chibios/os/rt/src/chthreads.c ****  *          if any.
 878:lib/chibios/os/rt/src/chthreads.c ****  *
 879:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to the threads queue object
 880:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 881:lib/chibios/os/rt/src/chthreads.c ****  *
 882:lib/chibios/os/rt/src/chthreads.c ****  * @iclass
 883:lib/chibios/os/rt/src/chthreads.c ****  */
 884:lib/chibios/os/rt/src/chthreads.c **** void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 2158              		.loc 1 884 57 is_stmt 1 view -0
 2159              		.cfi_startproc
 2160              		@ args = 0, pretend = 0, frame = 0
 2161              		@ frame_needed = 0, uses_anonymous_args = 0
 2162              		@ link register save eliminated.
 885:lib/chibios/os/rt/src/chthreads.c **** 
 886:lib/chibios/os/rt/src/chthreads.c ****   if (queue_notempty(tqp)) {
 2163              		.loc 1 886 3 view .LVU635
 2164              	.LBB491:
 2165              	.LBI491:
 564:./lib/chibios/os/rt/include/chschd.h **** 
 2166              		.loc 9 564 20 view .LVU636
 2167              	.LBB492:
 566:./lib/chibios/os/rt/include/chschd.h **** }
 2168              		.loc 9 566 3 view .LVU637
 566:./lib/chibios/os/rt/include/chschd.h **** }
 2169              		.loc 9 566 20 is_stmt 0 view .LVU638
 2170 0000 0368     		ldr	r3, [r0]
 2171              	.LVL107:
 566:./lib/chibios/os/rt/include/chschd.h **** }
 2172              		.loc 9 566 20 view .LVU639
 2173              	.LBE492:
 2174              	.LBE491:
 2175              		.loc 1 886 6 view .LVU640
 2176 0002 9842     		cmp	r0, r3
 2177 0004 06D0     		beq	.L50
 887:lib/chibios/os/rt/src/chthreads.c ****     chThdDoDequeueNextI(tqp, msg);
 2178              		.loc 1 887 5 is_stmt 1 view .LVU641
 2179              	.LVL108:
 2180              	.LBB493:
 2181              	.LBI493:
 383:./lib/chibios/os/rt/include/chthreads.h **** }
 384:./lib/chibios/os/rt/include/chthreads.h **** 
 385:./lib/chibios/os/rt/include/chthreads.h **** /**
 386:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Initializes a threads queue object.
 387:./lib/chibios/os/rt/include/chthreads.h ****  *
 388:./lib/chibios/os/rt/include/chthreads.h ****  * @param[out] tqp      pointer to the threads queue object
 389:./lib/chibios/os/rt/include/chthreads.h ****  *
 390:./lib/chibios/os/rt/include/chthreads.h ****  * @init
 391:./lib/chibios/os/rt/include/chthreads.h ****  */
 392:./lib/chibios/os/rt/include/chthreads.h **** static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 393:./lib/chibios/os/rt/include/chthreads.h **** 
 394:./lib/chibios/os/rt/include/chthreads.h ****   queue_init(tqp);
 395:./lib/chibios/os/rt/include/chthreads.h **** }
 396:./lib/chibios/os/rt/include/chthreads.h **** 
 397:./lib/chibios/os/rt/include/chthreads.h **** /**
 398:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Evaluates to @p true if the specified queue is empty.
 399:./lib/chibios/os/rt/include/chthreads.h ****  *
 400:./lib/chibios/os/rt/include/chthreads.h ****  * @param[out] tqp      pointer to the threads queue object
 401:./lib/chibios/os/rt/include/chthreads.h ****  * @return              The queue status.
 402:./lib/chibios/os/rt/include/chthreads.h ****  * @retval false        if the queue is not empty.
 403:./lib/chibios/os/rt/include/chthreads.h ****  * @retval true         if the queue is empty.
 404:./lib/chibios/os/rt/include/chthreads.h ****  *
 405:./lib/chibios/os/rt/include/chthreads.h ****  * @iclass
 406:./lib/chibios/os/rt/include/chthreads.h ****  */
 407:./lib/chibios/os/rt/include/chthreads.h **** static inline bool chThdQueueIsEmptyI(threads_queue_t *tqp) {
 408:./lib/chibios/os/rt/include/chthreads.h **** 
 409:./lib/chibios/os/rt/include/chthreads.h ****   chDbgCheckClassI();
 410:./lib/chibios/os/rt/include/chthreads.h **** 
 411:./lib/chibios/os/rt/include/chthreads.h ****   return queue_isempty(tqp);
 412:./lib/chibios/os/rt/include/chthreads.h **** }
 413:./lib/chibios/os/rt/include/chthreads.h **** 
 414:./lib/chibios/os/rt/include/chthreads.h **** /**
 415:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Dequeues and wakes up one thread from the threads queue object.
 416:./lib/chibios/os/rt/include/chthreads.h ****  * @details Dequeues one thread from the queue without checking if the queue
 417:./lib/chibios/os/rt/include/chthreads.h ****  *          is empty.
 418:./lib/chibios/os/rt/include/chthreads.h ****  * @pre     The queue must contain at least an object.
 419:./lib/chibios/os/rt/include/chthreads.h ****  *
 420:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] tqp       pointer to the threads queue object
 421:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] msg       the message code
 422:./lib/chibios/os/rt/include/chthreads.h ****  *
 423:./lib/chibios/os/rt/include/chthreads.h ****  * @iclass
 424:./lib/chibios/os/rt/include/chthreads.h ****  */
 425:./lib/chibios/os/rt/include/chthreads.h **** static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 2182              		.loc 5 425 20 view .LVU642
 2183              	.LBB494:
 426:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *tp;
 2184              		.loc 5 426 3 view .LVU643
 427:./lib/chibios/os/rt/include/chthreads.h **** 
 428:./lib/chibios/os/rt/include/chthreads.h ****   chDbgAssert(queue_notempty(tqp), "empty queue");
 2185              		.loc 5 428 3 view .LVU644
 2186              		.loc 5 428 3 view .LVU645
 2187              		.loc 5 428 3 view .LVU646
 429:./lib/chibios/os/rt/include/chthreads.h **** 
 430:./lib/chibios/os/rt/include/chthreads.h ****   tp = queue_fifo_remove(tqp);
 2188              		.loc 5 430 3 view .LVU647
 2189              	.LBB495:
 2190              	.LBI495:
 606:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 2191              		.loc 9 606 25 view .LVU648
 2192              	.LBB496:
 607:./lib/chibios/os/rt/include/chschd.h **** 
 2193              		.loc 9 607 3 view .LVU649
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 2194              		.loc 9 609 3 view .LVU650
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 2195              		.loc 9 609 36 is_stmt 0 view .LVU651
 2196 0006 1A68     		ldr	r2, [r3]
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 2197              		.loc 9 609 25 view .LVU652
 2198 0008 0260     		str	r2, [r0]
 610:./lib/chibios/os/rt/include/chschd.h **** 
 2199              		.loc 9 610 3 is_stmt 1 view .LVU653
 610:./lib/chibios/os/rt/include/chschd.h **** 
 2200              		.loc 9 610 25 is_stmt 0 view .LVU654
 2201 000a 5060     		str	r0, [r2, #4]
 612:./lib/chibios/os/rt/include/chschd.h **** }
 2202              		.loc 9 612 3 is_stmt 1 view .LVU655
 2203              	.LVL109:
 612:./lib/chibios/os/rt/include/chschd.h **** }
 2204              		.loc 9 612 3 is_stmt 0 view .LVU656
 2205              	.LBE496:
 2206              	.LBE495:
 431:./lib/chibios/os/rt/include/chthreads.h **** 
 432:./lib/chibios/os/rt/include/chthreads.h ****   chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 2207              		.loc 5 432 3 is_stmt 1 view .LVU657
 2208              		.loc 5 432 3 view .LVU658
 2209              		.loc 5 432 3 view .LVU659
 433:./lib/chibios/os/rt/include/chthreads.h **** 
 434:./lib/chibios/os/rt/include/chthreads.h ****   tp->u.rdymsg = msg;
 2210              		.loc 5 434 3 view .LVU660
 2211              		.loc 5 434 16 is_stmt 0 view .LVU661
 2212 000c 5961     		str	r1, [r3, #20]
 435:./lib/chibios/os/rt/include/chthreads.h ****   (void) chSchReadyI(tp);
 2213              		.loc 5 435 3 is_stmt 1 view .LVU662
 2214              		.loc 5 435 10 is_stmt 0 view .LVU663
 2215 000e 1846     		mov	r0, r3
 2216              	.LVL110:
 2217              		.loc 5 435 10 view .LVU664
 2218 0010 FFF7FEBF 		b	chSchReadyI
 2219              	.LVL111:
 2220              	.L50:
 2221              		.loc 5 435 10 view .LVU665
 2222              	.LBE494:
 2223              	.LBE493:
 888:lib/chibios/os/rt/src/chthreads.c ****   }
 889:lib/chibios/os/rt/src/chthreads.c **** }
 2224              		.loc 1 889 1 view .LVU666
 2225 0014 7047     		bx	lr
 2226              		.cfi_endproc
 2227              	.LFE260:
 2229              		.section	.text.chThdDequeueAllI,"ax",%progbits
 2230              		.align	1
 2231              		.global	chThdDequeueAllI
 2232              		.syntax unified
 2233              		.thumb
 2234              		.thumb_func
 2235              		.fpu fpv4-sp-d16
 2237              	chThdDequeueAllI:
 2238              	.LVL112:
 2239              	.LFB261:
 890:lib/chibios/os/rt/src/chthreads.c **** 
 891:lib/chibios/os/rt/src/chthreads.c **** /**
 892:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Dequeues and wakes up all threads from the threads queue object.
 893:lib/chibios/os/rt/src/chthreads.c ****  *
 894:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to the threads queue object
 895:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 896:lib/chibios/os/rt/src/chthreads.c ****  *
 897:lib/chibios/os/rt/src/chthreads.c ****  * @iclass
 898:lib/chibios/os/rt/src/chthreads.c ****  */
 899:lib/chibios/os/rt/src/chthreads.c **** void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 2240              		.loc 1 899 56 is_stmt 1 view -0
 2241              		.cfi_startproc
 2242              		@ args = 0, pretend = 0, frame = 0
 2243              		@ frame_needed = 0, uses_anonymous_args = 0
 2244              		.loc 1 899 56 is_stmt 0 view .LVU668
 2245 0000 38B5     		push	{r3, r4, r5, lr}
 2246              		.cfi_def_cfa_offset 16
 2247              		.cfi_offset 3, -16
 2248              		.cfi_offset 4, -12
 2249              		.cfi_offset 5, -8
 2250              		.cfi_offset 14, -4
 2251 0002 0446     		mov	r4, r0
 2252 0004 0D46     		mov	r5, r1
 900:lib/chibios/os/rt/src/chthreads.c **** 
 901:lib/chibios/os/rt/src/chthreads.c ****   while (queue_notempty(tqp)) {
 2253              		.loc 1 901 3 is_stmt 1 view .LVU669
 2254              	.LVL113:
 2255              	.L53:
 2256              		.loc 1 901 9 view .LVU670
 2257              	.LBB503:
 2258              	.LBI503:
 564:./lib/chibios/os/rt/include/chschd.h **** 
 2259              		.loc 9 564 20 view .LVU671
 2260              	.LBB504:
 566:./lib/chibios/os/rt/include/chschd.h **** }
 2261              		.loc 9 566 3 view .LVU672
 566:./lib/chibios/os/rt/include/chschd.h **** }
 2262              		.loc 9 566 20 is_stmt 0 view .LVU673
 2263 0006 2068     		ldr	r0, [r4]
 2264              	.LVL114:
 566:./lib/chibios/os/rt/include/chschd.h **** }
 2265              		.loc 9 566 20 view .LVU674
 2266              	.LBE504:
 2267              	.LBE503:
 2268              		.loc 1 901 9 view .LVU675
 2269 0008 8442     		cmp	r4, r0
 2270 000a 00D1     		bne	.L54
 902:lib/chibios/os/rt/src/chthreads.c ****     chThdDoDequeueNextI(tqp, msg);
 903:lib/chibios/os/rt/src/chthreads.c ****   }
 904:lib/chibios/os/rt/src/chthreads.c **** }
 2271              		.loc 1 904 1 view .LVU676
 2272 000c 38BD     		pop	{r3, r4, r5, pc}
 2273              	.LVL115:
 2274              	.L54:
 902:lib/chibios/os/rt/src/chthreads.c ****     chThdDoDequeueNextI(tqp, msg);
 2275              		.loc 1 902 5 is_stmt 1 view .LVU677
 2276              	.LBB505:
 2277              	.LBI505:
 425:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *tp;
 2278              		.loc 5 425 20 view .LVU678
 2279              	.LBB506:
 426:./lib/chibios/os/rt/include/chthreads.h **** 
 2280              		.loc 5 426 3 view .LVU679
 428:./lib/chibios/os/rt/include/chthreads.h **** 
 2281              		.loc 5 428 3 view .LVU680
 428:./lib/chibios/os/rt/include/chthreads.h **** 
 2282              		.loc 5 428 3 view .LVU681
 428:./lib/chibios/os/rt/include/chthreads.h **** 
 2283              		.loc 5 428 3 view .LVU682
 430:./lib/chibios/os/rt/include/chthreads.h **** 
 2284              		.loc 5 430 3 view .LVU683
 2285              	.LBB507:
 2286              	.LBI507:
 606:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 2287              		.loc 9 606 25 view .LVU684
 2288              	.LBB508:
 607:./lib/chibios/os/rt/include/chschd.h **** 
 2289              		.loc 9 607 3 view .LVU685
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 2290              		.loc 9 609 3 view .LVU686
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 2291              		.loc 9 609 36 is_stmt 0 view .LVU687
 2292 000e 0368     		ldr	r3, [r0]
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 2293              		.loc 9 609 25 view .LVU688
 2294 0010 2360     		str	r3, [r4]
 610:./lib/chibios/os/rt/include/chschd.h **** 
 2295              		.loc 9 610 3 is_stmt 1 view .LVU689
 610:./lib/chibios/os/rt/include/chschd.h **** 
 2296              		.loc 9 610 25 is_stmt 0 view .LVU690
 2297 0012 5C60     		str	r4, [r3, #4]
 612:./lib/chibios/os/rt/include/chschd.h **** }
 2298              		.loc 9 612 3 is_stmt 1 view .LVU691
 2299              	.LVL116:
 612:./lib/chibios/os/rt/include/chschd.h **** }
 2300              		.loc 9 612 3 is_stmt 0 view .LVU692
 2301              	.LBE508:
 2302              	.LBE507:
 432:./lib/chibios/os/rt/include/chthreads.h **** 
 2303              		.loc 5 432 3 is_stmt 1 view .LVU693
 432:./lib/chibios/os/rt/include/chthreads.h **** 
 2304              		.loc 5 432 3 view .LVU694
 432:./lib/chibios/os/rt/include/chthreads.h **** 
 2305              		.loc 5 432 3 view .LVU695
 434:./lib/chibios/os/rt/include/chthreads.h ****   (void) chSchReadyI(tp);
 2306              		.loc 5 434 3 view .LVU696
 434:./lib/chibios/os/rt/include/chthreads.h ****   (void) chSchReadyI(tp);
 2307              		.loc 5 434 16 is_stmt 0 view .LVU697
 2308 0014 4561     		str	r5, [r0, #20]
 2309              		.loc 5 435 3 is_stmt 1 view .LVU698
 2310              		.loc 5 435 10 is_stmt 0 view .LVU699
 2311 0016 FFF7FEFF 		bl	chSchReadyI
 2312              	.LVL117:
 436:./lib/chibios/os/rt/include/chthreads.h **** }
 2313              		.loc 5 436 1 view .LVU700
 2314 001a F4E7     		b	.L53
 2315              	.LBE506:
 2316              	.LBE505:
 2317              		.cfi_endproc
 2318              	.LFE261:
 2320              		.text
 2321              	.Letext0:
 2322              		.file 10 "c:\\qmk_msys\\mingw64\\lib\\gcc\\arm-none-eabi\\10.1.0\\include\\stddef.h"
 2323              		.file 11 "c:\\qmk_msys\\mingw64\\arm-none-eabi\\include\\machine\\_default_types.h"
 2324              		.file 12 "c:\\qmk_msys\\mingw64\\arm-none-eabi\\include\\sys\\_stdint.h"
 2325              		.file 13 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 2326              		.file 14 "./lib/chibios/os/rt/include/chsystypes.h"
 2327              		.file 15 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 2328              		.file 16 "./lib/chibios/os/rt/include/chsem.h"
 2329              		.file 17 "./lib/chibios/os/rt/include/chmtx.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chthreads.c
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:18     .text._thread_init:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:26     .text._thread_init:0000000000000000 _thread_init
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:64     .text.chThdCreateSuspendedI:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:71     .text.chThdCreateSuspendedI:0000000000000000 chThdCreateSuspendedI
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:153    .text.chThdCreateSuspendedI:000000000000003c $d
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:158    .text.chThdCreateSuspended:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:165    .text.chThdCreateSuspended:0000000000000000 chThdCreateSuspended
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:276    .text.chThdCreateI:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:283    .text.chThdCreateI:0000000000000000 chThdCreateI
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:311    .text.chThdCreate:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:318    .text.chThdCreate:0000000000000000 chThdCreate
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:436    .text.chThdCreateStatic:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:443    .text.chThdCreateStatic:0000000000000000 chThdCreateStatic
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:621    .text.chThdCreateStatic:0000000000000040 $d
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:626    .text.chThdStart:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:633    .text.chThdStart:0000000000000000 chThdStart
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:756    .text.chThdExitS:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:763    .text.chThdExitS:0000000000000000 chThdExitS
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:790    .text.chThdExitS:000000000000000c $d
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:795    .text.chThdExit:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:802    .text.chThdExit:0000000000000000 chThdExit
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:853    .text.chThdSetPriority:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:860    .text.chThdSetPriority:0000000000000000 chThdSetPriority
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:996    .text.chThdSetPriority:000000000000002c $d
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1001   .text.chThdTerminate:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1008   .text.chThdTerminate:0000000000000000 chThdTerminate
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1103   .text.chThdSleep:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1110   .text.chThdSleep:0000000000000000 chThdSleep
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1233   .text.chThdSleepUntil:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1240   .text.chThdSleepUntil:0000000000000000 chThdSleepUntil
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1409   .text.chThdSleepUntilWindowed:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1416   .text.chThdSleepUntilWindowed:0000000000000000 chThdSleepUntilWindowed
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1594   .text.chThdYield:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1601   .text.chThdYield:0000000000000000 chThdYield
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1734   .text.chThdYield:0000000000000024 $d
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1739   .text.chThdSuspendS:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1746   .text.chThdSuspendS:0000000000000000 chThdSuspendS
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1806   .text.chThdSuspendS:0000000000000018 $d
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1811   .text.chThdSuspendTimeoutS:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1818   .text.chThdSuspendTimeoutS:0000000000000000 chThdSuspendTimeoutS
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1867   .text.chThdSuspendTimeoutS:0000000000000018 $d
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1872   .text.chThdResumeI:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1879   .text.chThdResumeI:0000000000000000 chThdResumeI
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1921   .text.chThdResumeS:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1928   .text.chThdResumeS:0000000000000000 chThdResumeS
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1966   .text.chThdResume:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:1973   .text.chThdResume:0000000000000000 chThdResume
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:2078   .text.chThdEnqueueTimeoutS:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:2085   .text.chThdEnqueueTimeoutS:0000000000000000 chThdEnqueueTimeoutS
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:2143   .text.chThdEnqueueTimeoutS:000000000000001c $d
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:2148   .text.chThdDequeueNextI:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:2155   .text.chThdDequeueNextI:0000000000000000 chThdDequeueNextI
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:2230   .text.chThdDequeueAllI:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cczbX8lN.s:2237   .text.chThdDequeueAllI:0000000000000000 chThdDequeueAllI

UNDEFINED SYMBOLS
_port_thread_start
chSchReadyI
chSchWakeupS
chSchGoSleepS
ch
chSchRescheduleS
chSchGoSleepTimeoutS
stGetCounter
chSchDoRescheduleBehind

   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"chmtx.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.queue_prio_insert,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	queue_prio_insert:
  26              	.LVL0:
  27              	.LFB164:
  28              		.file 1 "./lib/chibios/os/rt/include/chschd.h"
   1:./lib/chibios/os/rt/include/chschd.h **** /*
   2:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chschd.h **** 
   4:./lib/chibios/os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chschd.h **** 
   6:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chschd.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chschd.h **** 
  11:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chschd.h **** 
  16:./lib/chibios/os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chschd.h **** */
  19:./lib/chibios/os/rt/include/chschd.h **** 
  20:./lib/chibios/os/rt/include/chschd.h **** /**
  21:./lib/chibios/os/rt/include/chschd.h ****  * @file    rt/include/chschd.h
  22:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:./lib/chibios/os/rt/include/chschd.h ****  *
  24:./lib/chibios/os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:./lib/chibios/os/rt/include/chschd.h ****  * @{
  26:./lib/chibios/os/rt/include/chschd.h ****  */
  27:./lib/chibios/os/rt/include/chschd.h **** 
  28:./lib/chibios/os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:./lib/chibios/os/rt/include/chschd.h **** #define CHSCHD_H
  30:./lib/chibios/os/rt/include/chschd.h **** 
  31:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chschd.h **** 
  35:./lib/chibios/os/rt/include/chschd.h **** /**
  36:./lib/chibios/os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:./lib/chibios/os/rt/include/chschd.h ****  * @{
  38:./lib/chibios/os/rt/include/chschd.h ****  */
  39:./lib/chibios/os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:./lib/chibios/os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  42:./lib/chibios/os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  44:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  45:./lib/chibios/os/rt/include/chschd.h **** 
  46:./lib/chibios/os/rt/include/chschd.h **** /**
  47:./lib/chibios/os/rt/include/chschd.h ****  * @name    Priority constants
  48:./lib/chibios/os/rt/include/chschd.h ****  * @{
  49:./lib/chibios/os/rt/include/chschd.h ****  */
  50:./lib/chibios/os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:./lib/chibios/os/rt/include/chschd.h ****                                                  priority.                  */
  52:./lib/chibios/os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:./lib/chibios/os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:./lib/chibios/os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:./lib/chibios/os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  57:./lib/chibios/os/rt/include/chschd.h **** 
  58:./lib/chibios/os/rt/include/chschd.h **** /**
  59:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread states
  60:./lib/chibios/os/rt/include/chschd.h ****  * @{
  61:./lib/chibios/os/rt/include/chschd.h ****  */
  62:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:./lib/chibios/os/rt/include/chschd.h ****                                                   ready list.               */
  64:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On a queue.        */
  68:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:./lib/chibios/os/rt/include/chschd.h ****                                                   in queue.                 */
  77:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:./lib/chibios/os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:./lib/chibios/os/rt/include/chschd.h ****                                                   message.                  */
  81:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:./lib/chibios/os/rt/include/chschd.h **** 
  83:./lib/chibios/os/rt/include/chschd.h **** /**
  84:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:./lib/chibios/os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:./lib/chibios/os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:./lib/chibios/os/rt/include/chschd.h ****  */
  88:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:./lib/chibios/os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:./lib/chibios/os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:./lib/chibios/os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  93:./lib/chibios/os/rt/include/chschd.h **** 
  94:./lib/chibios/os/rt/include/chschd.h **** /**
  95:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:./lib/chibios/os/rt/include/chschd.h ****  * @{
  97:./lib/chibios/os/rt/include/chschd.h ****  */
  98:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:./lib/chibios/os/rt/include/chschd.h ****                                                  mask.                      */
 100:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:./lib/chibios/os/rt/include/chschd.h ****                                                  flag.                      */
 107:./lib/chibios/os/rt/include/chschd.h **** /** @} */
 108:./lib/chibios/os/rt/include/chschd.h **** 
 109:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 110:./lib/chibios/os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 112:./lib/chibios/os/rt/include/chschd.h **** 
 113:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 114:./lib/chibios/os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 116:./lib/chibios/os/rt/include/chschd.h **** 
 117:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 118:./lib/chibios/os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 119:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 120:./lib/chibios/os/rt/include/chschd.h **** 
 121:./lib/chibios/os/rt/include/chschd.h **** /**
 122:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 123:./lib/chibios/os/rt/include/chschd.h ****  */
 124:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_list {
 125:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 126:./lib/chibios/os/rt/include/chschd.h **** };
 127:./lib/chibios/os/rt/include/chschd.h **** 
 128:./lib/chibios/os/rt/include/chschd.h **** /**
 129:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 130:./lib/chibios/os/rt/include/chschd.h ****  */
 131:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_queue {
 132:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 133:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 134:./lib/chibios/os/rt/include/chschd.h **** };
 135:./lib/chibios/os/rt/include/chschd.h **** 
 136:./lib/chibios/os/rt/include/chschd.h **** /**
 137:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 138:./lib/chibios/os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 139:./lib/chibios/os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 140:./lib/chibios/os/rt/include/chschd.h ****  *          by shrinking this structure.
 141:./lib/chibios/os/rt/include/chschd.h ****  */
 142:./lib/chibios/os/rt/include/chschd.h **** struct ch_thread {
 143:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 144:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 145:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 146:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 147:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 148:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 149:./lib/chibios/os/rt/include/chschd.h **** #endif
 150:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 151:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 152:./lib/chibios/os/rt/include/chschd.h ****   /**
 153:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 154:./lib/chibios/os/rt/include/chschd.h ****    */
 155:./lib/chibios/os/rt/include/chschd.h ****   const char            *name;
 156:./lib/chibios/os/rt/include/chschd.h **** #endif
 157:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 158:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 159:./lib/chibios/os/rt/include/chschd.h ****   /**
 160:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Working area base address.
 161:./lib/chibios/os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 162:./lib/chibios/os/rt/include/chschd.h ****    *          dynamic threading.
 163:./lib/chibios/os/rt/include/chschd.h ****    */
 164:./lib/chibios/os/rt/include/chschd.h ****   stkalign_t            *wabase;
 165:./lib/chibios/os/rt/include/chschd.h **** #endif
 166:./lib/chibios/os/rt/include/chschd.h ****   /**
 167:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Current thread state.
 168:./lib/chibios/os/rt/include/chschd.h ****    */
 169:./lib/chibios/os/rt/include/chschd.h ****   tstate_t              state;
 170:./lib/chibios/os/rt/include/chschd.h ****   /**
 171:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Various thread flags.
 172:./lib/chibios/os/rt/include/chschd.h ****    */
 173:./lib/chibios/os/rt/include/chschd.h ****   tmode_t               flags;
 174:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 175:./lib/chibios/os/rt/include/chschd.h ****   /**
 176:./lib/chibios/os/rt/include/chschd.h ****    * @brief   References to this thread.
 177:./lib/chibios/os/rt/include/chschd.h ****    */
 178:./lib/chibios/os/rt/include/chschd.h ****   trefs_t               refs;
 179:./lib/chibios/os/rt/include/chschd.h **** #endif
 180:./lib/chibios/os/rt/include/chschd.h ****   /**
 181:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 182:./lib/chibios/os/rt/include/chschd.h ****    */
 183:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 184:./lib/chibios/os/rt/include/chschd.h ****   tslices_t             ticks;
 185:./lib/chibios/os/rt/include/chschd.h **** #endif
 186:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 187:./lib/chibios/os/rt/include/chschd.h ****   /**
 188:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 189:./lib/chibios/os/rt/include/chschd.h ****    * @note    This field can overflow.
 190:./lib/chibios/os/rt/include/chschd.h ****    */
 191:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    time;
 192:./lib/chibios/os/rt/include/chschd.h **** #endif
 193:./lib/chibios/os/rt/include/chschd.h ****   /**
 194:./lib/chibios/os/rt/include/chschd.h ****    * @brief   State-specific fields.
 195:./lib/chibios/os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 196:./lib/chibios/os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 197:./lib/chibios/os/rt/include/chschd.h ****    */
 198:./lib/chibios/os/rt/include/chschd.h ****   union {
 199:./lib/chibios/os/rt/include/chschd.h ****     /**
 200:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 201:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 202:./lib/chibios/os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 203:./lib/chibios/os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 204:./lib/chibios/os/rt/include/chschd.h ****      */
 205:./lib/chibios/os/rt/include/chschd.h ****     msg_t               rdymsg;
 206:./lib/chibios/os/rt/include/chschd.h ****     /**
 207:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread exit code.
 208:./lib/chibios/os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 209:./lib/chibios/os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 210:./lib/chibios/os/rt/include/chschd.h ****      *          this thread.
 211:./lib/chibios/os/rt/include/chschd.h ****      */
 212:./lib/chibios/os/rt/include/chschd.h ****     msg_t               exitcode;
 213:./lib/chibios/os/rt/include/chschd.h ****     /**
 214:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 215:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 216:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 217:./lib/chibios/os/rt/include/chschd.h ****      *          states.
 218:./lib/chibios/os/rt/include/chschd.h ****      */
 219:./lib/chibios/os/rt/include/chschd.h ****     void                *wtobjp;
 220:./lib/chibios/os/rt/include/chschd.h ****     /**
 221:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 222:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 223:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 224:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 225:./lib/chibios/os/rt/include/chschd.h ****      */
 226:./lib/chibios/os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 227:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 228:./lib/chibios/os/rt/include/chschd.h ****     /**
 229:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread sent message.
 230:./lib/chibios/os/rt/include/chschd.h ****      */
 231:./lib/chibios/os/rt/include/chschd.h ****     msg_t               sentmsg;
 232:./lib/chibios/os/rt/include/chschd.h **** #endif
 233:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 234:./lib/chibios/os/rt/include/chschd.h ****     /**
 235:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 236:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 237:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 238:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 239:./lib/chibios/os/rt/include/chschd.h ****      */
 240:./lib/chibios/os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 241:./lib/chibios/os/rt/include/chschd.h **** #endif
 242:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 243:./lib/chibios/os/rt/include/chschd.h ****     /**
 244:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 245:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 246:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 247:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 248:./lib/chibios/os/rt/include/chschd.h ****      */
 249:./lib/chibios/os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 250:./lib/chibios/os/rt/include/chschd.h **** #endif
 251:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 252:./lib/chibios/os/rt/include/chschd.h ****     /**
 253:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 254:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 255:./lib/chibios/os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 256:./lib/chibios/os/rt/include/chschd.h ****      */
 257:./lib/chibios/os/rt/include/chschd.h ****     eventmask_t         ewmask;
 258:./lib/chibios/os/rt/include/chschd.h **** #endif
 259:./lib/chibios/os/rt/include/chschd.h ****   }                     u;
 260:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 261:./lib/chibios/os/rt/include/chschd.h ****   /**
 262:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 263:./lib/chibios/os/rt/include/chschd.h ****    */
 264:./lib/chibios/os/rt/include/chschd.h ****   threads_list_t        waiting;
 265:./lib/chibios/os/rt/include/chschd.h **** #endif
 266:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 267:./lib/chibios/os/rt/include/chschd.h ****   /**
 268:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Messages queue.
 269:./lib/chibios/os/rt/include/chschd.h ****    */
 270:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 271:./lib/chibios/os/rt/include/chschd.h **** #endif
 272:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 273:./lib/chibios/os/rt/include/chschd.h ****   /**
 274:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pending events mask.
 275:./lib/chibios/os/rt/include/chschd.h ****    */
 276:./lib/chibios/os/rt/include/chschd.h ****   eventmask_t           epending;
 277:./lib/chibios/os/rt/include/chschd.h **** #endif
 278:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 279:./lib/chibios/os/rt/include/chschd.h ****   /**
 280:./lib/chibios/os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 281:./lib/chibios/os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 282:./lib/chibios/os/rt/include/chschd.h ****    */
 283:./lib/chibios/os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 284:./lib/chibios/os/rt/include/chschd.h ****   /**
 285:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 286:./lib/chibios/os/rt/include/chschd.h ****    */
 287:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               realprio;
 288:./lib/chibios/os/rt/include/chschd.h **** #endif
 289:./lib/chibios/os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 290:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 291:./lib/chibios/os/rt/include/chschd.h ****   /**
 292:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 293:./lib/chibios/os/rt/include/chschd.h ****    */
 294:./lib/chibios/os/rt/include/chschd.h ****   void                  *mpool;
 295:./lib/chibios/os/rt/include/chschd.h **** #endif
 296:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 297:./lib/chibios/os/rt/include/chschd.h ****   /**
 298:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread statistics.
 299:./lib/chibios/os/rt/include/chschd.h ****    */
 300:./lib/chibios/os/rt/include/chschd.h ****   time_measurement_t    stats;
 301:./lib/chibios/os/rt/include/chschd.h **** #endif
 302:./lib/chibios/os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 303:./lib/chibios/os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 304:./lib/chibios/os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 305:./lib/chibios/os/rt/include/chschd.h **** #endif
 306:./lib/chibios/os/rt/include/chschd.h **** };
 307:./lib/chibios/os/rt/include/chschd.h **** 
 308:./lib/chibios/os/rt/include/chschd.h **** /**
 309:./lib/chibios/os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 310:./lib/chibios/os/rt/include/chschd.h ****  *
 311:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 312:./lib/chibios/os/rt/include/chschd.h ****  */
 313:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timer {
 314:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 315:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 316:./lib/chibios/os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Time delta before timeout.  */
 317:./lib/chibios/os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 318:./lib/chibios/os/rt/include/chschd.h ****                                                 pointer.                    */
 319:./lib/chibios/os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 320:./lib/chibios/os/rt/include/chschd.h ****                                                 parameter.                  */
 321:./lib/chibios/os/rt/include/chschd.h **** };
 322:./lib/chibios/os/rt/include/chschd.h **** 
 323:./lib/chibios/os/rt/include/chschd.h **** /**
 324:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 325:./lib/chibios/os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 326:./lib/chibios/os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 327:./lib/chibios/os/rt/include/chschd.h ****  *          timer is often used in the code.
 328:./lib/chibios/os/rt/include/chschd.h ****  */
 329:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 330:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 331:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 332:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 333:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 334:./lib/chibios/os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Must be initialized to -1.  */
 335:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 336:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 337:./lib/chibios/os/rt/include/chschd.h **** #endif
 338:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 339:./lib/chibios/os/rt/include/chschd.h ****   /**
 340:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 341:./lib/chibios/os/rt/include/chschd.h ****    */
 342:./lib/chibios/os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 343:./lib/chibios/os/rt/include/chschd.h ****                                                 tick event.                 */
 344:./lib/chibios/os/rt/include/chschd.h **** #endif
 345:./lib/chibios/os/rt/include/chschd.h **** };
 346:./lib/chibios/os/rt/include/chschd.h **** 
 347:./lib/chibios/os/rt/include/chschd.h **** /**
 348:./lib/chibios/os/rt/include/chschd.h ****  * @extends threads_queue_t
 349:./lib/chibios/os/rt/include/chschd.h ****  */
 350:./lib/chibios/os/rt/include/chschd.h **** struct ch_ready_list {
 351:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 352:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 353:./lib/chibios/os/rt/include/chschd.h ****                                                 initialized to zero.        */
 354:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 355:./lib/chibios/os/rt/include/chschd.h ****                                                 offsets.                    */
 356:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 357:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 358:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 359:./lib/chibios/os/rt/include/chschd.h **** #endif
 360:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 361:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 362:./lib/chibios/os/rt/include/chschd.h ****                                                 thread.                     */
 363:./lib/chibios/os/rt/include/chschd.h **** };
 364:./lib/chibios/os/rt/include/chschd.h **** 
 365:./lib/chibios/os/rt/include/chschd.h **** /**
 366:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System debug data structure.
 367:./lib/chibios/os/rt/include/chschd.h ****  */
 368:./lib/chibios/os/rt/include/chschd.h **** struct ch_system_debug {
 369:./lib/chibios/os/rt/include/chschd.h ****   /**
 370:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 371:./lib/chibios/os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 372:./lib/chibios/os/rt/include/chschd.h ****    *          written once and then the system is halted.
 373:./lib/chibios/os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 374:./lib/chibios/os/rt/include/chschd.h ****    *          field itself is declared volatile.
 375:./lib/chibios/os/rt/include/chschd.h ****    */
 376:./lib/chibios/os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 377:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 378:./lib/chibios/os/rt/include/chschd.h ****   /**
 379:./lib/chibios/os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 380:./lib/chibios/os/rt/include/chschd.h ****    */
 381:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 382:./lib/chibios/os/rt/include/chschd.h ****   /**
 383:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 384:./lib/chibios/os/rt/include/chschd.h ****    */
 385:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 386:./lib/chibios/os/rt/include/chschd.h **** #endif
 387:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 388:./lib/chibios/os/rt/include/chschd.h ****   /**
 389:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 390:./lib/chibios/os/rt/include/chschd.h ****    */
 391:./lib/chibios/os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 392:./lib/chibios/os/rt/include/chschd.h **** #endif
 393:./lib/chibios/os/rt/include/chschd.h **** };
 394:./lib/chibios/os/rt/include/chschd.h **** 
 395:./lib/chibios/os/rt/include/chschd.h **** /**
 396:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System data structure.
 397:./lib/chibios/os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 398:./lib/chibios/os/rt/include/chschd.h ****  *          stacks.
 399:./lib/chibios/os/rt/include/chschd.h ****  */
 400:./lib/chibios/os/rt/include/chschd.h **** struct ch_system {
 401:./lib/chibios/os/rt/include/chschd.h ****   /**
 402:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Ready list header.
 403:./lib/chibios/os/rt/include/chschd.h ****    */
 404:./lib/chibios/os/rt/include/chschd.h ****   ready_list_t          rlist;
 405:./lib/chibios/os/rt/include/chschd.h ****   /**
 406:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 407:./lib/chibios/os/rt/include/chschd.h ****    */
 408:./lib/chibios/os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 409:./lib/chibios/os/rt/include/chschd.h ****   /**
 410:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System debug.
 411:./lib/chibios/os/rt/include/chschd.h ****    */
 412:./lib/chibios/os/rt/include/chschd.h ****   system_debug_t        dbg;
 413:./lib/chibios/os/rt/include/chschd.h ****   /**
 414:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 415:./lib/chibios/os/rt/include/chschd.h ****    */
 416:./lib/chibios/os/rt/include/chschd.h ****   thread_t              mainthread;
 417:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 418:./lib/chibios/os/rt/include/chschd.h ****   /**
 419:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 420:./lib/chibios/os/rt/include/chschd.h ****    */
 421:./lib/chibios/os/rt/include/chschd.h ****   tm_calibration_t      tm;
 422:./lib/chibios/os/rt/include/chschd.h **** #endif
 423:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 424:./lib/chibios/os/rt/include/chschd.h ****   /**
 425:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 426:./lib/chibios/os/rt/include/chschd.h ****    */
 427:./lib/chibios/os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 428:./lib/chibios/os/rt/include/chschd.h **** #endif
 429:./lib/chibios/os/rt/include/chschd.h ****   CH_CFG_SYSTEM_EXTRA_FIELDS
 430:./lib/chibios/os/rt/include/chschd.h **** };
 431:./lib/chibios/os/rt/include/chschd.h **** 
 432:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 433:./lib/chibios/os/rt/include/chschd.h **** /* Module macros.                                                            */
 434:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 435:./lib/chibios/os/rt/include/chschd.h **** 
 436:./lib/chibios/os/rt/include/chschd.h **** /**
 437:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 438:./lib/chibios/os/rt/include/chschd.h ****  *
 439:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 440:./lib/chibios/os/rt/include/chschd.h ****  */
 441:./lib/chibios/os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 442:./lib/chibios/os/rt/include/chschd.h **** 
 443:./lib/chibios/os/rt/include/chschd.h **** /**
 444:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 445:./lib/chibios/os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 446:./lib/chibios/os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 447:./lib/chibios/os/rt/include/chschd.h ****  */
 448:./lib/chibios/os/rt/include/chschd.h **** #define currp ch.rlist.current
 449:./lib/chibios/os/rt/include/chschd.h **** 
 450:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 451:./lib/chibios/os/rt/include/chschd.h **** /* External declarations.                                                    */
 452:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 453:./lib/chibios/os/rt/include/chschd.h **** 
 454:./lib/chibios/os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 455:./lib/chibios/os/rt/include/chschd.h **** extern ch_system_t ch;
 456:./lib/chibios/os/rt/include/chschd.h **** #endif
 457:./lib/chibios/os/rt/include/chschd.h **** 
 458:./lib/chibios/os/rt/include/chschd.h **** /*
 459:./lib/chibios/os/rt/include/chschd.h ****  * Scheduler APIs.
 460:./lib/chibios/os/rt/include/chschd.h ****  */
 461:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 462:./lib/chibios/os/rt/include/chschd.h **** extern "C" {
 463:./lib/chibios/os/rt/include/chschd.h **** #endif
 464:./lib/chibios/os/rt/include/chschd.h ****   void _scheduler_init(void);
 465:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 466:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 467:./lib/chibios/os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 468:./lib/chibios/os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout);
 469:./lib/chibios/os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 470:./lib/chibios/os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 471:./lib/chibios/os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 472:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 473:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 474:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 475:./lib/chibios/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 476:./lib/chibios/os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 477:./lib/chibios/os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 478:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 479:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 480:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 481:./lib/chibios/os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 482:./lib/chibios/os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 483:./lib/chibios/os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 484:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 485:./lib/chibios/os/rt/include/chschd.h **** }
 486:./lib/chibios/os/rt/include/chschd.h **** #endif
 487:./lib/chibios/os/rt/include/chschd.h **** 
 488:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 489:./lib/chibios/os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 490:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 491:./lib/chibios/os/rt/include/chschd.h **** 
 492:./lib/chibios/os/rt/include/chschd.h **** /**
 493:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 494:./lib/chibios/os/rt/include/chschd.h ****  *
 495:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 496:./lib/chibios/os/rt/include/chschd.h ****  *
 497:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 498:./lib/chibios/os/rt/include/chschd.h ****  */
 499:./lib/chibios/os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 500:./lib/chibios/os/rt/include/chschd.h **** 
 501:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 502:./lib/chibios/os/rt/include/chschd.h **** }
 503:./lib/chibios/os/rt/include/chschd.h **** 
 504:./lib/chibios/os/rt/include/chschd.h **** /**
 505:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 506:./lib/chibios/os/rt/include/chschd.h ****  *
 507:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 508:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 509:./lib/chibios/os/rt/include/chschd.h ****  *
 510:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 511:./lib/chibios/os/rt/include/chschd.h ****  */
 512:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 513:./lib/chibios/os/rt/include/chschd.h **** 
 514:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 515:./lib/chibios/os/rt/include/chschd.h **** }
 516:./lib/chibios/os/rt/include/chschd.h **** 
 517:./lib/chibios/os/rt/include/chschd.h **** /**
 518:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 519:./lib/chibios/os/rt/include/chschd.h ****  *
 520:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 521:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 522:./lib/chibios/os/rt/include/chschd.h ****  *
 523:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 524:./lib/chibios/os/rt/include/chschd.h ****  */
 525:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 526:./lib/chibios/os/rt/include/chschd.h **** 
 527:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 528:./lib/chibios/os/rt/include/chschd.h **** }
 529:./lib/chibios/os/rt/include/chschd.h **** 
 530:./lib/chibios/os/rt/include/chschd.h **** /**
 531:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 532:./lib/chibios/os/rt/include/chschd.h ****  *
 533:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 534:./lib/chibios/os/rt/include/chschd.h ****  *
 535:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 536:./lib/chibios/os/rt/include/chschd.h ****  */
 537:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 538:./lib/chibios/os/rt/include/chschd.h **** 
 539:./lib/chibios/os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
 540:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 541:./lib/chibios/os/rt/include/chschd.h **** }
 542:./lib/chibios/os/rt/include/chschd.h **** 
 543:./lib/chibios/os/rt/include/chschd.h **** /**
 544:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is empty.
 545:./lib/chibios/os/rt/include/chschd.h ****  *
 546:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 547:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the queue.
 548:./lib/chibios/os/rt/include/chschd.h ****  *
 549:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 550:./lib/chibios/os/rt/include/chschd.h ****  */
 551:./lib/chibios/os/rt/include/chschd.h **** static inline bool queue_isempty(const threads_queue_t *tqp) {
 552:./lib/chibios/os/rt/include/chschd.h **** 
 553:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tqp->next == (const thread_t *)tqp);
 554:./lib/chibios/os/rt/include/chschd.h **** }
 555:./lib/chibios/os/rt/include/chschd.h **** 
 556:./lib/chibios/os/rt/include/chschd.h **** /**
 557:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is not empty.
 558:./lib/chibios/os/rt/include/chschd.h ****  *
 559:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 560:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the queue.
 561:./lib/chibios/os/rt/include/chschd.h ****  *
 562:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 563:./lib/chibios/os/rt/include/chschd.h ****  */
 564:./lib/chibios/os/rt/include/chschd.h **** static inline bool queue_notempty(const threads_queue_t *tqp) {
 565:./lib/chibios/os/rt/include/chschd.h **** 
 566:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tqp->next != (const thread_t *)tqp);
 567:./lib/chibios/os/rt/include/chschd.h **** }
 568:./lib/chibios/os/rt/include/chschd.h **** 
 569:./lib/chibios/os/rt/include/chschd.h **** /* If the performance code path has been chosen then all the following
 570:./lib/chibios/os/rt/include/chschd.h ****    functions are inlined into the various kernel modules.*/
 571:./lib/chibios/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == TRUE
 572:./lib/chibios/os/rt/include/chschd.h **** static inline void list_insert(thread_t *tp, threads_list_t *tlp) {
 573:./lib/chibios/os/rt/include/chschd.h **** 
 574:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next = tlp->next;
 575:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = tp;
 576:./lib/chibios/os/rt/include/chschd.h **** }
 577:./lib/chibios/os/rt/include/chschd.h **** 
 578:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *list_remove(threads_list_t *tlp) {
 579:./lib/chibios/os/rt/include/chschd.h **** 
 580:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tlp->next;
 581:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = tp->queue.next;
 582:./lib/chibios/os/rt/include/chschd.h **** 
 583:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 584:./lib/chibios/os/rt/include/chschd.h **** }
 585:./lib/chibios/os/rt/include/chschd.h **** 
 586:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
  29              		.loc 1 586 74 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
 587:./lib/chibios/os/rt/include/chschd.h **** 
 588:./lib/chibios/os/rt/include/chschd.h ****   thread_t *cp = (thread_t *)tqp;
  33              		.loc 1 588 3 view .LVU1
 586:./lib/chibios/os/rt/include/chschd.h **** 
  34              		.loc 1 586 74 is_stmt 0 view .LVU2
  35 0000 10B5     		push	{r4, lr}
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 4, -8
  38              		.cfi_offset 14, -4
  39              		.loc 1 588 13 view .LVU3
  40 0002 0B46     		mov	r3, r1
  41              	.LVL1:
  42              	.L3:
 589:./lib/chibios/os/rt/include/chschd.h ****   do {
  43              		.loc 1 589 3 is_stmt 1 discriminator 2 view .LVU4
 590:./lib/chibios/os/rt/include/chschd.h ****     cp = cp->queue.next;
  44              		.loc 1 590 5 discriminator 2 view .LVU5
  45              		.loc 1 590 8 is_stmt 0 discriminator 2 view .LVU6
  46 0004 1B68     		ldr	r3, [r3]
  47              	.LVL2:
 591:./lib/chibios/os/rt/include/chschd.h ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  48              		.loc 1 591 11 is_stmt 1 discriminator 2 view .LVU7
  49              		.loc 1 591 3 is_stmt 0 discriminator 2 view .LVU8
  50 0006 9942     		cmp	r1, r3
  51 0008 03D0     		beq	.L2
  52              		.loc 1 591 36 discriminator 1 view .LVU9
  53 000a 9C68     		ldr	r4, [r3, #8]
  54 000c 8268     		ldr	r2, [r0, #8]
  55 000e 9442     		cmp	r4, r2
  56 0010 F8D2     		bcs	.L3
  57              	.L2:
 592:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next             = cp;
  58              		.loc 1 592 3 is_stmt 1 view .LVU10
 593:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev             = cp->queue.prev;
  59              		.loc 1 593 41 is_stmt 0 view .LVU11
  60 0012 5A68     		ldr	r2, [r3, #4]
 592:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next             = cp;
  61              		.loc 1 592 30 view .LVU12
  62 0014 0360     		str	r3, [r0]
  63              		.loc 1 593 3 is_stmt 1 view .LVU13
  64              		.loc 1 593 30 is_stmt 0 view .LVU14
  65 0016 4260     		str	r2, [r0, #4]
 594:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
  66              		.loc 1 594 3 is_stmt 1 view .LVU15
  67              		.loc 1 594 30 is_stmt 0 view .LVU16
  68 0018 1060     		str	r0, [r2]
 595:./lib/chibios/os/rt/include/chschd.h ****   cp->queue.prev             = tp;
  69              		.loc 1 595 3 is_stmt 1 view .LVU17
  70              		.loc 1 595 30 is_stmt 0 view .LVU18
  71 001a 5860     		str	r0, [r3, #4]
 596:./lib/chibios/os/rt/include/chschd.h **** }
  72              		.loc 1 596 1 view .LVU19
  73 001c 10BD     		pop	{r4, pc}
  74              		.cfi_endproc
  75              	.LFE164:
  77              		.section	.text.chMtxObjectInit,"ax",%progbits
  78              		.align	1
  79              		.global	chMtxObjectInit
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  83              		.fpu fpv4-sp-d16
  85              	chMtxObjectInit:
  86              	.LVL3:
  87              	.LFB239:
  88              		.file 2 "lib/chibios/os/rt/src/chmtx.c"
   1:lib/chibios/os/rt/src/chmtx.c **** /*
   2:lib/chibios/os/rt/src/chmtx.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:lib/chibios/os/rt/src/chmtx.c **** 
   4:lib/chibios/os/rt/src/chmtx.c ****     This file is part of ChibiOS.
   5:lib/chibios/os/rt/src/chmtx.c **** 
   6:lib/chibios/os/rt/src/chmtx.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:lib/chibios/os/rt/src/chmtx.c ****     it under the terms of the GNU General Public License as published by
   8:lib/chibios/os/rt/src/chmtx.c ****     the Free Software Foundation; either version 3 of the License, or
   9:lib/chibios/os/rt/src/chmtx.c ****     (at your option) any later version.
  10:lib/chibios/os/rt/src/chmtx.c **** 
  11:lib/chibios/os/rt/src/chmtx.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:lib/chibios/os/rt/src/chmtx.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:lib/chibios/os/rt/src/chmtx.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:lib/chibios/os/rt/src/chmtx.c ****     GNU General Public License for more details.
  15:lib/chibios/os/rt/src/chmtx.c **** 
  16:lib/chibios/os/rt/src/chmtx.c ****     You should have received a copy of the GNU General Public License
  17:lib/chibios/os/rt/src/chmtx.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:lib/chibios/os/rt/src/chmtx.c **** */
  19:lib/chibios/os/rt/src/chmtx.c **** 
  20:lib/chibios/os/rt/src/chmtx.c **** /**
  21:lib/chibios/os/rt/src/chmtx.c ****  * @file    rt/src/chmtx.c
  22:lib/chibios/os/rt/src/chmtx.c ****  * @brief   Mutexes code.
  23:lib/chibios/os/rt/src/chmtx.c ****  *
  24:lib/chibios/os/rt/src/chmtx.c ****  * @addtogroup mutexes
  25:lib/chibios/os/rt/src/chmtx.c ****  * @details Mutexes related APIs and services.
  26:lib/chibios/os/rt/src/chmtx.c ****  *          <h2>Operation mode</h2>
  27:lib/chibios/os/rt/src/chmtx.c ****  *          A mutex is a threads synchronization object that can be in two
  28:lib/chibios/os/rt/src/chmtx.c ****  *          distinct states:
  29:lib/chibios/os/rt/src/chmtx.c ****  *          - Not owned (unlocked).
  30:lib/chibios/os/rt/src/chmtx.c ****  *          - Owned by a thread (locked).
  31:lib/chibios/os/rt/src/chmtx.c ****  *          .
  32:lib/chibios/os/rt/src/chmtx.c ****  *          Operations defined for mutexes:
  33:lib/chibios/os/rt/src/chmtx.c ****  *          - <b>Lock</b>: The mutex is checked, if the mutex is not owned by
  34:lib/chibios/os/rt/src/chmtx.c ****  *            some other thread then it is associated to the locking thread
  35:lib/chibios/os/rt/src/chmtx.c ****  *            else the thread is queued on the mutex in a list ordered by
  36:lib/chibios/os/rt/src/chmtx.c ****  *            priority.
  37:lib/chibios/os/rt/src/chmtx.c ****  *          - <b>Unlock</b>: The mutex is released by the owner and the highest
  38:lib/chibios/os/rt/src/chmtx.c ****  *            priority thread waiting in the queue, if any, is resumed and made
  39:lib/chibios/os/rt/src/chmtx.c ****  *            owner of the mutex.
  40:lib/chibios/os/rt/src/chmtx.c ****  *          .
  41:lib/chibios/os/rt/src/chmtx.c ****  *          <h2>Constraints</h2>
  42:lib/chibios/os/rt/src/chmtx.c ****  *          In ChibiOS/RT the Unlock operations must always be performed
  43:lib/chibios/os/rt/src/chmtx.c ****  *          in lock-reverse order. This restriction both improves the
  44:lib/chibios/os/rt/src/chmtx.c ****  *          performance and is required for an efficient implementation
  45:lib/chibios/os/rt/src/chmtx.c ****  *          of the priority inheritance mechanism.<br>
  46:lib/chibios/os/rt/src/chmtx.c ****  *          Operating under this restriction also ensures that deadlocks
  47:lib/chibios/os/rt/src/chmtx.c ****  *          are no possible.
  48:lib/chibios/os/rt/src/chmtx.c ****  *
  49:lib/chibios/os/rt/src/chmtx.c ****  *          <h2>Recursive mode</h2>
  50:lib/chibios/os/rt/src/chmtx.c ****  *          By default mutexes are not recursive, this mean that it is not
  51:lib/chibios/os/rt/src/chmtx.c ****  *          possible to take a mutex already owned by the same thread.
  52:lib/chibios/os/rt/src/chmtx.c ****  *          It is possible to enable the recursive behavior by enabling the
  53:lib/chibios/os/rt/src/chmtx.c ****  *          option @p CH_CFG_USE_MUTEXES_RECURSIVE.
  54:lib/chibios/os/rt/src/chmtx.c ****  *
  55:lib/chibios/os/rt/src/chmtx.c ****  *          <h2>The priority inversion problem</h2>
  56:lib/chibios/os/rt/src/chmtx.c ****  *          The mutexes in ChibiOS/RT implements the <b>full</b> priority
  57:lib/chibios/os/rt/src/chmtx.c ****  *          inheritance mechanism in order handle the priority inversion
  58:lib/chibios/os/rt/src/chmtx.c ****  *          problem.<br>
  59:lib/chibios/os/rt/src/chmtx.c ****  *          When a thread is queued on a mutex, any thread, directly or
  60:lib/chibios/os/rt/src/chmtx.c ****  *          indirectly, holding the mutex gains the same priority of the
  61:lib/chibios/os/rt/src/chmtx.c ****  *          waiting thread (if their priority was not already equal or higher).
  62:lib/chibios/os/rt/src/chmtx.c ****  *          The mechanism works with any number of nested mutexes and any
  63:lib/chibios/os/rt/src/chmtx.c ****  *          number of involved threads. The algorithm complexity (worst case)
  64:lib/chibios/os/rt/src/chmtx.c ****  *          is N with N equal to the number of nested mutexes.
  65:lib/chibios/os/rt/src/chmtx.c ****  * @pre     In order to use the mutex APIs the @p CH_CFG_USE_MUTEXES option
  66:lib/chibios/os/rt/src/chmtx.c ****  *          must be enabled in @p chconf.h.
  67:lib/chibios/os/rt/src/chmtx.c ****  * @post    Enabling mutexes requires 5-12 (depending on the architecture)
  68:lib/chibios/os/rt/src/chmtx.c ****  *          extra bytes in the @p thread_t structure.
  69:lib/chibios/os/rt/src/chmtx.c ****  * @{
  70:lib/chibios/os/rt/src/chmtx.c ****  */
  71:lib/chibios/os/rt/src/chmtx.c **** 
  72:lib/chibios/os/rt/src/chmtx.c **** #include "ch.h"
  73:lib/chibios/os/rt/src/chmtx.c **** 
  74:lib/chibios/os/rt/src/chmtx.c **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  75:lib/chibios/os/rt/src/chmtx.c **** 
  76:lib/chibios/os/rt/src/chmtx.c **** /*===========================================================================*/
  77:lib/chibios/os/rt/src/chmtx.c **** /* Module exported variables.                                                */
  78:lib/chibios/os/rt/src/chmtx.c **** /*===========================================================================*/
  79:lib/chibios/os/rt/src/chmtx.c **** 
  80:lib/chibios/os/rt/src/chmtx.c **** /*===========================================================================*/
  81:lib/chibios/os/rt/src/chmtx.c **** /* Module local types.                                                       */
  82:lib/chibios/os/rt/src/chmtx.c **** /*===========================================================================*/
  83:lib/chibios/os/rt/src/chmtx.c **** 
  84:lib/chibios/os/rt/src/chmtx.c **** /*===========================================================================*/
  85:lib/chibios/os/rt/src/chmtx.c **** /* Module local variables.                                                   */
  86:lib/chibios/os/rt/src/chmtx.c **** /*===========================================================================*/
  87:lib/chibios/os/rt/src/chmtx.c **** 
  88:lib/chibios/os/rt/src/chmtx.c **** /*===========================================================================*/
  89:lib/chibios/os/rt/src/chmtx.c **** /* Module local functions.                                                   */
  90:lib/chibios/os/rt/src/chmtx.c **** /*===========================================================================*/
  91:lib/chibios/os/rt/src/chmtx.c **** 
  92:lib/chibios/os/rt/src/chmtx.c **** /*===========================================================================*/
  93:lib/chibios/os/rt/src/chmtx.c **** /* Module exported functions.                                                */
  94:lib/chibios/os/rt/src/chmtx.c **** /*===========================================================================*/
  95:lib/chibios/os/rt/src/chmtx.c **** 
  96:lib/chibios/os/rt/src/chmtx.c **** /**
  97:lib/chibios/os/rt/src/chmtx.c ****  * @brief   Initializes s @p mutex_t structure.
  98:lib/chibios/os/rt/src/chmtx.c ****  *
  99:lib/chibios/os/rt/src/chmtx.c ****  * @param[out] mp       pointer to a @p mutex_t structure
 100:lib/chibios/os/rt/src/chmtx.c ****  *
 101:lib/chibios/os/rt/src/chmtx.c ****  * @init
 102:lib/chibios/os/rt/src/chmtx.c ****  */
 103:lib/chibios/os/rt/src/chmtx.c **** void chMtxObjectInit(mutex_t *mp) {
  89              		.loc 2 103 35 is_stmt 1 view -0
  90              		.cfi_startproc
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
  93              		@ link register save eliminated.
 104:lib/chibios/os/rt/src/chmtx.c **** 
 105:lib/chibios/os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
  94              		.loc 2 105 3 view .LVU21
  95              		.loc 2 105 3 view .LVU22
  96              		.loc 2 105 3 view .LVU23
 106:lib/chibios/os/rt/src/chmtx.c **** 
 107:lib/chibios/os/rt/src/chmtx.c ****   queue_init(&mp->queue);
  97              		.loc 2 107 3 view .LVU24
  98              	.LBB93:
  99              	.LBI93:
 537:./lib/chibios/os/rt/include/chschd.h **** 
 100              		.loc 1 537 20 view .LVU25
 101              	.LBB94:
 539:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 102              		.loc 1 539 3 view .LVU26
 103              	.LBE94:
 104              	.LBE93:
 108:lib/chibios/os/rt/src/chmtx.c ****   mp->owner = NULL;
 105              		.loc 2 108 13 is_stmt 0 view .LVU27
 106 0000 0023     		movs	r3, #0
 107              	.LBB96:
 108              	.LBB95:
 540:./lib/chibios/os/rt/include/chschd.h **** }
 109              		.loc 1 540 13 view .LVU28
 110 0002 C0E90000 		strd	r0, r0, [r0]
 111              	.LVL4:
 540:./lib/chibios/os/rt/include/chschd.h **** }
 112              		.loc 1 540 13 view .LVU29
 113              	.LBE95:
 114              	.LBE96:
 115              		.loc 2 108 3 is_stmt 1 view .LVU30
 116              		.loc 2 108 13 is_stmt 0 view .LVU31
 117 0006 8360     		str	r3, [r0, #8]
 109:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 110:lib/chibios/os/rt/src/chmtx.c ****   mp->cnt = (cnt_t)0;
 111:lib/chibios/os/rt/src/chmtx.c **** #endif
 112:lib/chibios/os/rt/src/chmtx.c **** }
 118              		.loc 2 112 1 view .LVU32
 119 0008 7047     		bx	lr
 120              		.cfi_endproc
 121              	.LFE239:
 123              		.section	.text.chMtxLockS,"ax",%progbits
 124              		.align	1
 125              		.global	chMtxLockS
 126              		.syntax unified
 127              		.thumb
 128              		.thumb_func
 129              		.fpu fpv4-sp-d16
 131              	chMtxLockS:
 132              	.LVL5:
 133              	.LFB241:
 113:lib/chibios/os/rt/src/chmtx.c **** 
 114:lib/chibios/os/rt/src/chmtx.c **** /**
 115:lib/chibios/os/rt/src/chmtx.c ****  * @brief   Locks the specified mutex.
 116:lib/chibios/os/rt/src/chmtx.c ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
 117:lib/chibios/os/rt/src/chmtx.c ****  *          mutexes.
 118:lib/chibios/os/rt/src/chmtx.c ****  *
 119:lib/chibios/os/rt/src/chmtx.c ****  * @param[in] mp        pointer to the @p mutex_t structure
 120:lib/chibios/os/rt/src/chmtx.c ****  *
 121:lib/chibios/os/rt/src/chmtx.c ****  * @api
 122:lib/chibios/os/rt/src/chmtx.c ****  */
 123:lib/chibios/os/rt/src/chmtx.c **** void chMtxLock(mutex_t *mp) {
 124:lib/chibios/os/rt/src/chmtx.c **** 
 125:lib/chibios/os/rt/src/chmtx.c ****   chSysLock();
 126:lib/chibios/os/rt/src/chmtx.c ****   chMtxLockS(mp);
 127:lib/chibios/os/rt/src/chmtx.c ****   chSysUnlock();
 128:lib/chibios/os/rt/src/chmtx.c **** }
 129:lib/chibios/os/rt/src/chmtx.c **** 
 130:lib/chibios/os/rt/src/chmtx.c **** /**
 131:lib/chibios/os/rt/src/chmtx.c ****  * @brief   Locks the specified mutex.
 132:lib/chibios/os/rt/src/chmtx.c ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
 133:lib/chibios/os/rt/src/chmtx.c ****  *          mutexes.
 134:lib/chibios/os/rt/src/chmtx.c ****  *
 135:lib/chibios/os/rt/src/chmtx.c ****  * @param[in] mp        pointer to the @p mutex_t structure
 136:lib/chibios/os/rt/src/chmtx.c ****  *
 137:lib/chibios/os/rt/src/chmtx.c ****  * @sclass
 138:lib/chibios/os/rt/src/chmtx.c ****  */
 139:lib/chibios/os/rt/src/chmtx.c **** void chMtxLockS(mutex_t *mp) {
 134              		.loc 2 139 30 is_stmt 1 view -0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 140:lib/chibios/os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 138              		.loc 2 140 3 view .LVU34
 139:lib/chibios/os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 139              		.loc 2 139 30 is_stmt 0 view .LVU35
 140 0000 38B5     		push	{r3, r4, r5, lr}
 141              		.cfi_def_cfa_offset 16
 142              		.cfi_offset 3, -16
 143              		.cfi_offset 4, -12
 144              		.cfi_offset 5, -8
 145              		.cfi_offset 14, -4
 146              		.loc 2 140 13 view .LVU36
 147 0002 164B     		ldr	r3, .L14
 139:lib/chibios/os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 148              		.loc 2 139 30 view .LVU37
 149 0004 0446     		mov	r4, r0
 141:lib/chibios/os/rt/src/chmtx.c **** 
 142:lib/chibios/os/rt/src/chmtx.c ****   chDbgCheckClassS();
 143:lib/chibios/os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 144:lib/chibios/os/rt/src/chmtx.c **** 
 145:lib/chibios/os/rt/src/chmtx.c ****   /* Is the mutex already locked? */
 146:lib/chibios/os/rt/src/chmtx.c ****   if (mp->owner != NULL) {
 150              		.loc 2 146 9 view .LVU38
 151 0006 8068     		ldr	r0, [r0, #8]
 152              	.LVL6:
 140:lib/chibios/os/rt/src/chmtx.c **** 
 153              		.loc 2 140 13 view .LVU39
 154 0008 1D69     		ldr	r5, [r3, #16]
 155              	.LVL7:
 142:lib/chibios/os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 156              		.loc 2 142 21 is_stmt 1 view .LVU40
 143:lib/chibios/os/rt/src/chmtx.c **** 
 157              		.loc 2 143 3 view .LVU41
 143:lib/chibios/os/rt/src/chmtx.c **** 
 158              		.loc 2 143 3 view .LVU42
 143:lib/chibios/os/rt/src/chmtx.c **** 
 159              		.loc 2 143 3 view .LVU43
 160              		.loc 2 146 3 view .LVU44
 161              		.loc 2 146 6 is_stmt 0 view .LVU45
 162 000a 90B9     		cbnz	r0, .L7
 147:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 148:lib/chibios/os/rt/src/chmtx.c **** 
 149:lib/chibios/os/rt/src/chmtx.c ****     chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");
 150:lib/chibios/os/rt/src/chmtx.c **** 
 151:lib/chibios/os/rt/src/chmtx.c ****     /* If the mutex is already owned by this thread, the counter is increased
 152:lib/chibios/os/rt/src/chmtx.c ****        and there is no need of more actions.*/
 153:lib/chibios/os/rt/src/chmtx.c ****     if (mp->owner == ctp) {
 154:lib/chibios/os/rt/src/chmtx.c ****       mp->cnt++;
 155:lib/chibios/os/rt/src/chmtx.c ****     }
 156:lib/chibios/os/rt/src/chmtx.c ****     else {
 157:lib/chibios/os/rt/src/chmtx.c **** #endif
 158:lib/chibios/os/rt/src/chmtx.c ****       /* Priority inheritance protocol; explores the thread-mutex dependencies
 159:lib/chibios/os/rt/src/chmtx.c ****          boosting the priority of all the affected threads to equal the
 160:lib/chibios/os/rt/src/chmtx.c ****          priority of the running thread requesting the mutex.*/
 161:lib/chibios/os/rt/src/chmtx.c ****       thread_t *tp = mp->owner;
 162:lib/chibios/os/rt/src/chmtx.c **** 
 163:lib/chibios/os/rt/src/chmtx.c ****       /* Does the running thread have higher priority than the mutex
 164:lib/chibios/os/rt/src/chmtx.c ****          owning thread? */
 165:lib/chibios/os/rt/src/chmtx.c ****       while (tp->prio < ctp->prio) {
 166:lib/chibios/os/rt/src/chmtx.c ****         /* Make priority of thread tp match the running thread's priority.*/
 167:lib/chibios/os/rt/src/chmtx.c ****         tp->prio = ctp->prio;
 168:lib/chibios/os/rt/src/chmtx.c **** 
 169:lib/chibios/os/rt/src/chmtx.c ****         /* The following states need priority queues reordering.*/
 170:lib/chibios/os/rt/src/chmtx.c ****         switch (tp->state) {
 171:lib/chibios/os/rt/src/chmtx.c ****         case CH_STATE_WTMTX:
 172:lib/chibios/os/rt/src/chmtx.c ****           /* Re-enqueues the mutex owner with its new priority.*/
 173:lib/chibios/os/rt/src/chmtx.c ****           queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 174:lib/chibios/os/rt/src/chmtx.c ****           tp = tp->u.wtmtxp->owner;
 175:lib/chibios/os/rt/src/chmtx.c ****           /*lint -e{9042} [16.1] Continues the while.*/
 176:lib/chibios/os/rt/src/chmtx.c ****           continue;
 177:lib/chibios/os/rt/src/chmtx.c **** #if (CH_CFG_USE_CONDVARS == TRUE) ||                                        \
 178:lib/chibios/os/rt/src/chmtx.c ****     ((CH_CFG_USE_SEMAPHORES == TRUE) &&                                     \
 179:lib/chibios/os/rt/src/chmtx.c ****      (CH_CFG_USE_SEMAPHORES_PRIORITY == TRUE)) ||                           \
 180:lib/chibios/os/rt/src/chmtx.c ****     ((CH_CFG_USE_MESSAGES == TRUE) &&                                       \
 181:lib/chibios/os/rt/src/chmtx.c ****      (CH_CFG_USE_MESSAGES_PRIORITY == TRUE))
 182:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_CONDVARS == TRUE
 183:lib/chibios/os/rt/src/chmtx.c ****         case CH_STATE_WTCOND:
 184:lib/chibios/os/rt/src/chmtx.c **** #endif
 185:lib/chibios/os/rt/src/chmtx.c **** #if (CH_CFG_USE_SEMAPHORES == TRUE) &&                                      \
 186:lib/chibios/os/rt/src/chmtx.c ****     (CH_CFG_USE_SEMAPHORES_PRIORITY == TRUE)
 187:lib/chibios/os/rt/src/chmtx.c ****         case CH_STATE_WTSEM:
 188:lib/chibios/os/rt/src/chmtx.c **** #endif
 189:lib/chibios/os/rt/src/chmtx.c **** #if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
 190:lib/chibios/os/rt/src/chmtx.c ****         case CH_STATE_SNDMSGQ:
 191:lib/chibios/os/rt/src/chmtx.c **** #endif
 192:lib/chibios/os/rt/src/chmtx.c ****           /* Re-enqueues tp with its new priority on the queue.*/
 193:lib/chibios/os/rt/src/chmtx.c ****           queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 194:lib/chibios/os/rt/src/chmtx.c ****           break;
 195:lib/chibios/os/rt/src/chmtx.c **** #endif
 196:lib/chibios/os/rt/src/chmtx.c ****         case CH_STATE_READY:
 197:lib/chibios/os/rt/src/chmtx.c **** #if CH_DBG_ENABLE_ASSERTS == TRUE
 198:lib/chibios/os/rt/src/chmtx.c ****           /* Prevents an assertion in chSchReadyI().*/
 199:lib/chibios/os/rt/src/chmtx.c ****           tp->state = CH_STATE_CURRENT;
 200:lib/chibios/os/rt/src/chmtx.c **** #endif
 201:lib/chibios/os/rt/src/chmtx.c ****           /* Re-enqueues tp with its new priority on the ready list.*/
 202:lib/chibios/os/rt/src/chmtx.c ****           (void) chSchReadyI(queue_dequeue(tp));
 203:lib/chibios/os/rt/src/chmtx.c ****           break;
 204:lib/chibios/os/rt/src/chmtx.c ****         default:
 205:lib/chibios/os/rt/src/chmtx.c ****           /* Nothing to do for other states.*/
 206:lib/chibios/os/rt/src/chmtx.c ****           break;
 207:lib/chibios/os/rt/src/chmtx.c ****         }
 208:lib/chibios/os/rt/src/chmtx.c ****         break;
 209:lib/chibios/os/rt/src/chmtx.c ****       }
 210:lib/chibios/os/rt/src/chmtx.c **** 
 211:lib/chibios/os/rt/src/chmtx.c ****       /* Sleep on the mutex.*/
 212:lib/chibios/os/rt/src/chmtx.c ****       queue_prio_insert(ctp, &mp->queue);
 213:lib/chibios/os/rt/src/chmtx.c ****       ctp->u.wtmtxp = mp;
 214:lib/chibios/os/rt/src/chmtx.c ****       chSchGoSleepS(CH_STATE_WTMTX);
 215:lib/chibios/os/rt/src/chmtx.c **** 
 216:lib/chibios/os/rt/src/chmtx.c ****       /* It is assumed that the thread performing the unlock operation assigns
 217:lib/chibios/os/rt/src/chmtx.c ****          the mutex to this thread.*/
 218:lib/chibios/os/rt/src/chmtx.c ****       chDbgAssert(mp->owner == ctp, "not owner");
 219:lib/chibios/os/rt/src/chmtx.c ****       chDbgAssert(ctp->mtxlist == mp, "not owned");
 220:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 221:lib/chibios/os/rt/src/chmtx.c ****       chDbgAssert(mp->cnt == (cnt_t)1, "counter is not one");
 222:lib/chibios/os/rt/src/chmtx.c ****     }
 223:lib/chibios/os/rt/src/chmtx.c **** #endif
 224:lib/chibios/os/rt/src/chmtx.c ****   }
 225:lib/chibios/os/rt/src/chmtx.c ****   else {
 226:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 227:lib/chibios/os/rt/src/chmtx.c ****     chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");
 228:lib/chibios/os/rt/src/chmtx.c **** 
 229:lib/chibios/os/rt/src/chmtx.c ****     mp->cnt++;
 230:lib/chibios/os/rt/src/chmtx.c **** #endif
 231:lib/chibios/os/rt/src/chmtx.c ****     /* It was not owned, inserted in the owned mutexes list.*/
 232:lib/chibios/os/rt/src/chmtx.c ****     mp->owner = ctp;
 163              		.loc 2 232 5 is_stmt 1 view .LVU46
 233:lib/chibios/os/rt/src/chmtx.c ****     mp->next = ctp->mtxlist;
 164              		.loc 2 233 14 is_stmt 0 view .LVU47
 165 000c EB69     		ldr	r3, [r5, #28]
 232:lib/chibios/os/rt/src/chmtx.c ****     mp->next = ctp->mtxlist;
 166              		.loc 2 232 15 view .LVU48
 167 000e A560     		str	r5, [r4, #8]
 168              		.loc 2 233 5 is_stmt 1 view .LVU49
 169              		.loc 2 233 14 is_stmt 0 view .LVU50
 170 0010 E360     		str	r3, [r4, #12]
 234:lib/chibios/os/rt/src/chmtx.c ****     ctp->mtxlist = mp;
 171              		.loc 2 234 5 is_stmt 1 view .LVU51
 172              		.loc 2 234 18 is_stmt 0 view .LVU52
 173 0012 EC61     		str	r4, [r5, #28]
 235:lib/chibios/os/rt/src/chmtx.c ****   }
 236:lib/chibios/os/rt/src/chmtx.c **** }
 174              		.loc 2 236 1 view .LVU53
 175 0014 38BD     		pop	{r3, r4, r5, pc}
 176              	.LVL8:
 177              	.L11:
 178              	.LBB97:
 167:lib/chibios/os/rt/src/chmtx.c **** 
 179              		.loc 2 167 9 is_stmt 1 view .LVU54
 167:lib/chibios/os/rt/src/chmtx.c **** 
 180              		.loc 2 167 18 is_stmt 0 view .LVU55
 181 0016 8360     		str	r3, [r0, #8]
 170:lib/chibios/os/rt/src/chmtx.c ****         case CH_STATE_WTMTX:
 182              		.loc 2 170 9 is_stmt 1 view .LVU56
 170:lib/chibios/os/rt/src/chmtx.c ****         case CH_STATE_WTMTX:
 183              		.loc 2 170 19 is_stmt 0 view .LVU57
 184 0018 037C     		ldrb	r3, [r0, #16]	@ zero_extendqisi2
 170:lib/chibios/os/rt/src/chmtx.c ****         case CH_STATE_WTMTX:
 185              		.loc 2 170 9 view .LVU58
 186 001a 7BB1     		cbz	r3, .L9
 170:lib/chibios/os/rt/src/chmtx.c ****         case CH_STATE_WTMTX:
 187              		.loc 2 170 9 view .LVU59
 188 001c 062B     		cmp	r3, #6
 189 001e 13D1     		bne	.L10
 173:lib/chibios/os/rt/src/chmtx.c ****           tp = tp->u.wtmtxp->owner;
 190              		.loc 2 173 11 is_stmt 1 view .LVU60
 191              	.LVL9:
 192              	.LBB98:
 193              	.LBI98:
 597:./lib/chibios/os/rt/include/chschd.h **** 
 598:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 599:./lib/chibios/os/rt/include/chschd.h **** 
 600:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next             = (thread_t *)tqp;
 601:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 602:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 603:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev                  = tp;
 604:./lib/chibios/os/rt/include/chschd.h **** }
 605:./lib/chibios/os/rt/include/chschd.h **** 
 606:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 607:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 608:./lib/chibios/os/rt/include/chschd.h **** 
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next             = tp->queue.next;
 610:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 611:./lib/chibios/os/rt/include/chschd.h **** 
 612:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 613:./lib/chibios/os/rt/include/chschd.h **** }
 614:./lib/chibios/os/rt/include/chschd.h **** 
 615:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
 616:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->prev;
 617:./lib/chibios/os/rt/include/chschd.h **** 
 618:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev             = tp->queue.prev;
 619:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev->queue.next = (thread_t *)tqp;
 620:./lib/chibios/os/rt/include/chschd.h **** 
 621:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 622:./lib/chibios/os/rt/include/chschd.h **** }
 623:./lib/chibios/os/rt/include/chschd.h **** 
 624:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *queue_dequeue(thread_t *tp) {
 194              		.loc 1 624 25 view .LVU61
 195              	.LBB99:
 625:./lib/chibios/os/rt/include/chschd.h **** 
 626:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp->queue.next;
 196              		.loc 1 626 3 view .LVU62
 197              		.loc 1 626 41 is_stmt 0 view .LVU63
 198 0020 D0E90032 		ldrd	r3, r2, [r0]
 199              	.LBE99:
 200              	.LBE98:
 173:lib/chibios/os/rt/src/chmtx.c ****           tp = tp->u.wtmtxp->owner;
 201              		.loc 2 173 11 view .LVU64
 202 0024 4169     		ldr	r1, [r0, #20]
 203              	.LBB101:
 204              	.LBB100:
 205              		.loc 1 626 30 view .LVU65
 206 0026 1360     		str	r3, [r2]
 627:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next->queue.prev = tp->queue.prev;
 207              		.loc 1 627 3 is_stmt 1 view .LVU66
 208              		.loc 1 627 30 is_stmt 0 view .LVU67
 209 0028 5A60     		str	r2, [r3, #4]
 628:./lib/chibios/os/rt/include/chschd.h **** 
 629:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 210              		.loc 1 629 3 is_stmt 1 view .LVU68
 211              	.LVL10:
 212              		.loc 1 629 3 is_stmt 0 view .LVU69
 213              	.LBE100:
 214              	.LBE101:
 173:lib/chibios/os/rt/src/chmtx.c ****           tp = tp->u.wtmtxp->owner;
 215              		.loc 2 173 11 view .LVU70
 216 002a FFF7FEFF 		bl	queue_prio_insert
 217              	.LVL11:
 174:lib/chibios/os/rt/src/chmtx.c ****           /*lint -e{9042} [16.1] Continues the while.*/
 218              		.loc 2 174 11 is_stmt 1 view .LVU71
 174:lib/chibios/os/rt/src/chmtx.c ****           /*lint -e{9042} [16.1] Continues the while.*/
 219              		.loc 2 174 21 is_stmt 0 view .LVU72
 220 002e 4369     		ldr	r3, [r0, #20]
 174:lib/chibios/os/rt/src/chmtx.c ****           /*lint -e{9042} [16.1] Continues the while.*/
 221              		.loc 2 174 14 view .LVU73
 222 0030 9868     		ldr	r0, [r3, #8]
 223              	.LVL12:
 176:lib/chibios/os/rt/src/chmtx.c **** #if (CH_CFG_USE_CONDVARS == TRUE) ||                                        \
 224              		.loc 2 176 11 is_stmt 1 view .LVU74
 225              	.L7:
 165:lib/chibios/os/rt/src/chmtx.c ****         /* Make priority of thread tp match the running thread's priority.*/
 226              		.loc 2 165 13 view .LVU75
 165:lib/chibios/os/rt/src/chmtx.c ****         /* Make priority of thread tp match the running thread's priority.*/
 227              		.loc 2 165 28 is_stmt 0 view .LVU76
 228 0032 AB68     		ldr	r3, [r5, #8]
 165:lib/chibios/os/rt/src/chmtx.c ****         /* Make priority of thread tp match the running thread's priority.*/
 229              		.loc 2 165 13 view .LVU77
 230 0034 8268     		ldr	r2, [r0, #8]
 231 0036 9A42     		cmp	r2, r3
 232 0038 EDD3     		bcc	.L11
 233 003a 05E0     		b	.L10
 234              	.L9:
 202:lib/chibios/os/rt/src/chmtx.c ****           break;
 235              		.loc 2 202 11 is_stmt 1 view .LVU78
 236              	.LVL13:
 237              	.LBB102:
 238              	.LBI102:
 624:./lib/chibios/os/rt/include/chschd.h **** 
 239              		.loc 1 624 25 view .LVU79
 240              	.LBB103:
 626:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next->queue.prev = tp->queue.prev;
 241              		.loc 1 626 3 view .LVU80
 626:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next->queue.prev = tp->queue.prev;
 242              		.loc 1 626 41 is_stmt 0 view .LVU81
 243 003c D0E90032 		ldrd	r3, r2, [r0]
 626:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next->queue.prev = tp->queue.prev;
 244              		.loc 1 626 30 view .LVU82
 245 0040 1360     		str	r3, [r2]
 627:./lib/chibios/os/rt/include/chschd.h **** 
 246              		.loc 1 627 3 is_stmt 1 view .LVU83
 627:./lib/chibios/os/rt/include/chschd.h **** 
 247              		.loc 1 627 30 is_stmt 0 view .LVU84
 248 0042 5A60     		str	r2, [r3, #4]
 249              		.loc 1 629 3 is_stmt 1 view .LVU85
 250              	.LVL14:
 251              		.loc 1 629 3 is_stmt 0 view .LVU86
 252              	.LBE103:
 253              	.LBE102:
 202:lib/chibios/os/rt/src/chmtx.c ****           break;
 254              		.loc 2 202 18 view .LVU87
 255 0044 FFF7FEFF 		bl	chSchReadyI
 256              	.LVL15:
 203:lib/chibios/os/rt/src/chmtx.c ****         default:
 257              		.loc 2 203 11 is_stmt 1 view .LVU88
 258              	.L10:
 212:lib/chibios/os/rt/src/chmtx.c ****       ctp->u.wtmtxp = mp;
 259              		.loc 2 212 7 view .LVU89
 260 0048 2846     		mov	r0, r5
 261 004a 2146     		mov	r1, r4
 262 004c FFF7FEFF 		bl	queue_prio_insert
 263              	.LVL16:
 213:lib/chibios/os/rt/src/chmtx.c ****       chSchGoSleepS(CH_STATE_WTMTX);
 264              		.loc 2 213 7 view .LVU90
 213:lib/chibios/os/rt/src/chmtx.c ****       chSchGoSleepS(CH_STATE_WTMTX);
 265              		.loc 2 213 21 is_stmt 0 view .LVU91
 266 0050 6C61     		str	r4, [r5, #20]
 214:lib/chibios/os/rt/src/chmtx.c **** 
 267              		.loc 2 214 7 is_stmt 1 view .LVU92
 268 0052 0620     		movs	r0, #6
 269              	.LBE97:
 270              		.loc 2 236 1 is_stmt 0 view .LVU93
 271 0054 BDE83840 		pop	{r3, r4, r5, lr}
 272              		.cfi_restore 14
 273              		.cfi_restore 5
 274              		.cfi_restore 4
 275              		.cfi_restore 3
 276              		.cfi_def_cfa_offset 0
 277              	.LVL17:
 278              	.LBB104:
 214:lib/chibios/os/rt/src/chmtx.c **** 
 279              		.loc 2 214 7 view .LVU94
 280 0058 FFF7FEBF 		b	chSchGoSleepS
 281              	.LVL18:
 282              	.L15:
 214:lib/chibios/os/rt/src/chmtx.c **** 
 283              		.loc 2 214 7 view .LVU95
 284              		.align	2
 285              	.L14:
 286 005c 00000000 		.word	ch
 287              	.LBE104:
 288              		.cfi_endproc
 289              	.LFE241:
 291              		.section	.text.chMtxLock,"ax",%progbits
 292              		.align	1
 293              		.global	chMtxLock
 294              		.syntax unified
 295              		.thumb
 296              		.thumb_func
 297              		.fpu fpv4-sp-d16
 299              	chMtxLock:
 300              	.LVL19:
 301              	.LFB240:
 123:lib/chibios/os/rt/src/chmtx.c **** 
 302              		.loc 2 123 29 is_stmt 1 view -0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 0
 305              		@ frame_needed = 0, uses_anonymous_args = 0
 125:lib/chibios/os/rt/src/chmtx.c ****   chMtxLockS(mp);
 306              		.loc 2 125 3 view .LVU97
 307              	.LBB105:
 308              	.LBI105:
 309              		.file 3 "./lib/chibios/os/rt/include/chsys.h"
   1:./lib/chibios/os/rt/include/chsys.h **** /*
   2:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chsys.h **** 
   4:./lib/chibios/os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chsys.h **** 
   6:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chsys.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chsys.h **** 
  11:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chsys.h **** 
  16:./lib/chibios/os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chsys.h **** */
  19:./lib/chibios/os/rt/include/chsys.h **** 
  20:./lib/chibios/os/rt/include/chsys.h **** /**
  21:./lib/chibios/os/rt/include/chsys.h ****  * @file    rt/include/chsys.h
  22:./lib/chibios/os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:./lib/chibios/os/rt/include/chsys.h ****  *
  24:./lib/chibios/os/rt/include/chsys.h ****  * @addtogroup system
  25:./lib/chibios/os/rt/include/chsys.h ****  * @{
  26:./lib/chibios/os/rt/include/chsys.h ****  */
  27:./lib/chibios/os/rt/include/chsys.h **** 
  28:./lib/chibios/os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:./lib/chibios/os/rt/include/chsys.h **** #define CHSYS_H
  30:./lib/chibios/os/rt/include/chsys.h **** 
  31:./lib/chibios/os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:./lib/chibios/os/rt/include/chsys.h **** 
  33:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chsys.h **** 
  37:./lib/chibios/os/rt/include/chsys.h **** /**
  38:./lib/chibios/os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:./lib/chibios/os/rt/include/chsys.h ****  * @{
  40:./lib/chibios/os/rt/include/chsys.h ****  */
  41:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:./lib/chibios/os/rt/include/chsys.h **** /** @} */
  46:./lib/chibios/os/rt/include/chsys.h **** 
  47:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  48:./lib/chibios/os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  50:./lib/chibios/os/rt/include/chsys.h **** 
  51:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  52:./lib/chibios/os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  54:./lib/chibios/os/rt/include/chsys.h **** 
  55:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  56:./lib/chibios/os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  58:./lib/chibios/os/rt/include/chsys.h **** 
  59:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  60:./lib/chibios/os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  62:./lib/chibios/os/rt/include/chsys.h **** 
  63:./lib/chibios/os/rt/include/chsys.h **** /**
  64:./lib/chibios/os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:./lib/chibios/os/rt/include/chsys.h ****  */
  66:./lib/chibios/os/rt/include/chsys.h **** /**
  67:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  68:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  69:./lib/chibios/os/rt/include/chsys.h ****  *          level for the underlying architecture.
  70:./lib/chibios/os/rt/include/chsys.h ****  *
  71:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  72:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  73:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  74:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  75:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  76:./lib/chibios/os/rt/include/chsys.h ****  */
  77:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  78:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  79:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  80:./lib/chibios/os/rt/include/chsys.h **** #else
  81:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  82:./lib/chibios/os/rt/include/chsys.h **** #endif
  83:./lib/chibios/os/rt/include/chsys.h **** 
  84:./lib/chibios/os/rt/include/chsys.h **** /**
  85:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  86:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  87:./lib/chibios/os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  88:./lib/chibios/os/rt/include/chsys.h ****  *
  89:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  90:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  91:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  92:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  93:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  94:./lib/chibios/os/rt/include/chsys.h ****  */
  95:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  96:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  97:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  98:./lib/chibios/os/rt/include/chsys.h **** #else
  99:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 100:./lib/chibios/os/rt/include/chsys.h **** #endif
 101:./lib/chibios/os/rt/include/chsys.h **** 
 102:./lib/chibios/os/rt/include/chsys.h **** /**
 103:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 104:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 105:./lib/chibios/os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 106:./lib/chibios/os/rt/include/chsys.h ****  *
 107:./lib/chibios/os/rt/include/chsys.h ****  * @special
 108:./lib/chibios/os/rt/include/chsys.h ****  */
 109:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 110:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 111:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 112:./lib/chibios/os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 113:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 114:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 115:./lib/chibios/os/rt/include/chsys.h **** 
 116:./lib/chibios/os/rt/include/chsys.h **** /**
 117:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 118:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 119:./lib/chibios/os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 120:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 121:./lib/chibios/os/rt/include/chsys.h ****  *
 122:./lib/chibios/os/rt/include/chsys.h ****  * @special
 123:./lib/chibios/os/rt/include/chsys.h ****  */
 124:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 125:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 126:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 127:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 128:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 129:./lib/chibios/os/rt/include/chsys.h **** 
 130:./lib/chibios/os/rt/include/chsys.h **** /**
 131:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 132:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 133:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 134:./lib/chibios/os/rt/include/chsys.h ****  *
 135:./lib/chibios/os/rt/include/chsys.h ****  * @special
 136:./lib/chibios/os/rt/include/chsys.h ****  */
 137:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 138:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 139:./lib/chibios/os/rt/include/chsys.h **** 
 140:./lib/chibios/os/rt/include/chsys.h **** /**
 141:./lib/chibios/os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 142:./lib/chibios/os/rt/include/chsys.h ****  */
 143:./lib/chibios/os/rt/include/chsys.h **** /**
 144:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 145:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 146:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 147:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 148:./lib/chibios/os/rt/include/chsys.h ****  *
 149:./lib/chibios/os/rt/include/chsys.h ****  * @special
 150:./lib/chibios/os/rt/include/chsys.h ****  */
 151:./lib/chibios/os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 152:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 153:./lib/chibios/os/rt/include/chsys.h **** 
 154:./lib/chibios/os/rt/include/chsys.h **** /**
 155:./lib/chibios/os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 156:./lib/chibios/os/rt/include/chsys.h ****  * @{
 157:./lib/chibios/os/rt/include/chsys.h ****  */
 158:./lib/chibios/os/rt/include/chsys.h **** /**
 159:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 160:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 161:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 162:./lib/chibios/os/rt/include/chsys.h ****  *
 163:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 164:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 165:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 166:./lib/chibios/os/rt/include/chsys.h ****  *
 167:./lib/chibios/os/rt/include/chsys.h ****  * @api
 168:./lib/chibios/os/rt/include/chsys.h ****  */
 169:./lib/chibios/os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 170:./lib/chibios/os/rt/include/chsys.h **** 
 171:./lib/chibios/os/rt/include/chsys.h **** /**
 172:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 173:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 174:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 175:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 176:./lib/chibios/os/rt/include/chsys.h ****  *
 177:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 178:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 179:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 180:./lib/chibios/os/rt/include/chsys.h ****  *
 181:./lib/chibios/os/rt/include/chsys.h ****  * @api
 182:./lib/chibios/os/rt/include/chsys.h ****  */
 183:./lib/chibios/os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 184:./lib/chibios/os/rt/include/chsys.h **** 
 185:./lib/chibios/os/rt/include/chsys.h **** /**
 186:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 187:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 188:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 189:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 190:./lib/chibios/os/rt/include/chsys.h ****  *
 191:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 192:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 193:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 194:./lib/chibios/os/rt/include/chsys.h ****  *
 195:./lib/chibios/os/rt/include/chsys.h ****  * @api
 196:./lib/chibios/os/rt/include/chsys.h ****  */
 197:./lib/chibios/os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 198:./lib/chibios/os/rt/include/chsys.h **** 
 199:./lib/chibios/os/rt/include/chsys.h **** /**
 200:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 201:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 202:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 203:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 204:./lib/chibios/os/rt/include/chsys.h ****  *
 205:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 206:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 207:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of seconds.
 208:./lib/chibios/os/rt/include/chsys.h ****  *
 209:./lib/chibios/os/rt/include/chsys.h ****  * @api
 210:./lib/chibios/os/rt/include/chsys.h ****  */
 211:./lib/chibios/os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 212:./lib/chibios/os/rt/include/chsys.h **** 
 213:./lib/chibios/os/rt/include/chsys.h **** /**
 214:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 215:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 216:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 217:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 218:./lib/chibios/os/rt/include/chsys.h ****  *
 219:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 220:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 221:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 222:./lib/chibios/os/rt/include/chsys.h ****  *
 223:./lib/chibios/os/rt/include/chsys.h ****  * @api
 224:./lib/chibios/os/rt/include/chsys.h ****  */
 225:./lib/chibios/os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 226:./lib/chibios/os/rt/include/chsys.h **** 
 227:./lib/chibios/os/rt/include/chsys.h **** /**
 228:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 229:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 230:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 231:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 232:./lib/chibios/os/rt/include/chsys.h ****  *
 233:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 234:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 235:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of microseconds.
 236:./lib/chibios/os/rt/include/chsys.h ****  *
 237:./lib/chibios/os/rt/include/chsys.h ****  * @api
 238:./lib/chibios/os/rt/include/chsys.h ****  */
 239:./lib/chibios/os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 240:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 241:./lib/chibios/os/rt/include/chsys.h **** 
 242:./lib/chibios/os/rt/include/chsys.h **** /**
 243:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 244:./lib/chibios/os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 245:./lib/chibios/os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 246:./lib/chibios/os/rt/include/chsys.h ****  *
 247:./lib/chibios/os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 248:./lib/chibios/os/rt/include/chsys.h ****  *                      type rtcnt_t.
 249:./lib/chibios/os/rt/include/chsys.h ****  *
 250:./lib/chibios/os/rt/include/chsys.h ****  * @xclass
 251:./lib/chibios/os/rt/include/chsys.h ****  */
 252:./lib/chibios/os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 253:./lib/chibios/os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 254:./lib/chibios/os/rt/include/chsys.h **** #endif
 255:./lib/chibios/os/rt/include/chsys.h **** 
 256:./lib/chibios/os/rt/include/chsys.h **** /**
 257:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 258:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 259:./lib/chibios/os/rt/include/chsys.h ****  *          itself or from within the port layer.
 260:./lib/chibios/os/rt/include/chsys.h ****  *
 261:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 262:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 263:./lib/chibios/os/rt/include/chsys.h ****  *
 264:./lib/chibios/os/rt/include/chsys.h ****  * @special
 265:./lib/chibios/os/rt/include/chsys.h ****  */
 266:./lib/chibios/os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 267:./lib/chibios/os/rt/include/chsys.h ****                                                                             \
 268:./lib/chibios/os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 269:./lib/chibios/os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 270:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 271:./lib/chibios/os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 272:./lib/chibios/os/rt/include/chsys.h **** }
 273:./lib/chibios/os/rt/include/chsys.h **** 
 274:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 275:./lib/chibios/os/rt/include/chsys.h **** /* External declarations.                                                    */
 276:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 277:./lib/chibios/os/rt/include/chsys.h **** 
 278:./lib/chibios/os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 279:./lib/chibios/os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 280:./lib/chibios/os/rt/include/chsys.h **** #endif
 281:./lib/chibios/os/rt/include/chsys.h **** 
 282:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 283:./lib/chibios/os/rt/include/chsys.h **** extern "C" {
 284:./lib/chibios/os/rt/include/chsys.h **** #endif
 285:./lib/chibios/os/rt/include/chsys.h ****   void chSysInit(void);
 286:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 287:./lib/chibios/os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 288:./lib/chibios/os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 289:./lib/chibios/os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 290:./lib/chibios/os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 291:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 292:./lib/chibios/os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 293:./lib/chibios/os/rt/include/chsys.h **** #endif
 294:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 295:./lib/chibios/os/rt/include/chsys.h **** }
 296:./lib/chibios/os/rt/include/chsys.h **** #endif
 297:./lib/chibios/os/rt/include/chsys.h **** 
 298:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 299:./lib/chibios/os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 300:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 301:./lib/chibios/os/rt/include/chsys.h **** 
 302:./lib/chibios/os/rt/include/chsys.h **** /**
 303:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 304:./lib/chibios/os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 305:./lib/chibios/os/rt/include/chsys.h ****  *          hardware priority.
 306:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 307:./lib/chibios/os/rt/include/chsys.h ****  *
 308:./lib/chibios/os/rt/include/chsys.h ****  * @special
 309:./lib/chibios/os/rt/include/chsys.h ****  */
 310:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 311:./lib/chibios/os/rt/include/chsys.h **** 
 312:./lib/chibios/os/rt/include/chsys.h ****   port_disable();
 313:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_disable();
 314:./lib/chibios/os/rt/include/chsys.h **** }
 315:./lib/chibios/os/rt/include/chsys.h **** 
 316:./lib/chibios/os/rt/include/chsys.h **** /**
 317:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 318:./lib/chibios/os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 319:./lib/chibios/os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 320:./lib/chibios/os/rt/include/chsys.h ****  *          enabled.
 321:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 322:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 323:./lib/chibios/os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 324:./lib/chibios/os/rt/include/chsys.h ****  *
 325:./lib/chibios/os/rt/include/chsys.h ****  * @special
 326:./lib/chibios/os/rt/include/chsys.h ****  */
 327:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 328:./lib/chibios/os/rt/include/chsys.h **** 
 329:./lib/chibios/os/rt/include/chsys.h ****   port_suspend();
 330:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_suspend();
 331:./lib/chibios/os/rt/include/chsys.h **** }
 332:./lib/chibios/os/rt/include/chsys.h **** 
 333:./lib/chibios/os/rt/include/chsys.h **** /**
 334:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 335:./lib/chibios/os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 336:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 337:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 338:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 339:./lib/chibios/os/rt/include/chsys.h ****  *
 340:./lib/chibios/os/rt/include/chsys.h ****  * @special
 341:./lib/chibios/os/rt/include/chsys.h ****  */
 342:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 343:./lib/chibios/os/rt/include/chsys.h **** 
 344:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enable();
 345:./lib/chibios/os/rt/include/chsys.h ****   port_enable();
 346:./lib/chibios/os/rt/include/chsys.h **** }
 347:./lib/chibios/os/rt/include/chsys.h **** 
 348:./lib/chibios/os/rt/include/chsys.h **** /**
 349:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 350:./lib/chibios/os/rt/include/chsys.h ****  *
 351:./lib/chibios/os/rt/include/chsys.h ****  * @special
 352:./lib/chibios/os/rt/include/chsys.h ****  */
 353:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysLock(void) {
 310              		.loc 3 353 20 view .LVU98
 311              	.LBE105:
 354:./lib/chibios/os/rt/include/chsys.h **** 
 355:./lib/chibios/os/rt/include/chsys.h ****   port_lock();
 312              		.loc 3 355 3 view .LVU99
 313              	.LBB113:
 314              	.LBB106:
 315              	.LBI106:
 316              		.file 4 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
   1:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*
   2:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
   4:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
   6:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     (at your option) any later version.
  10:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  11:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  16:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** */
  19:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  20:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  21:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @file    chcore_v7m.h
  22:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   ARMv7-M architecture port macros and structures.
  23:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
  24:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @addtogroup ARMCMx_V7M_CORE
  25:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
  26:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  27:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  28:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifndef CHCORE_V7M_H
  29:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CHCORE_V7M_H
  30:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  31:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  32:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  34:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  35:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  36:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @name    Port Capabilities and Constants
  37:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
  38:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  39:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  40:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   This port supports a realtime counter.
  41:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  42:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SUPPORTS_RT                TRUE
  43:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  44:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  45:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Natural alignment constant.
  46:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the minimum alignment for pointer-size variables.
  47:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  48:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_NATURAL_ALIGN              sizeof (void *)
  49:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  50:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  51:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Stack alignment constant.
  52:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the alignment required for the stack pointer.
  53:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  54:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_STACK_ALIGN                sizeof (stkalign_t)
  55:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  56:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  57:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Working Areas alignment constant.
  58:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the alignment to be enforced for thread working areas.
  59:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  60:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA_ALIGN         ((PORT_ENABLE_GUARD_PAGES == TRUE) ?\
  61:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                          32U : PORT_STACK_ALIGN)
  62:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /** @} */
  63:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  64:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  65:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Disabled value for BASEPRI register.
  66:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  67:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_BASEPRI_DISABLED         0U
  68:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  69:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  70:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module pre-compile time settings.                                         */
  71:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  72:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  73:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  74:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Implements a syscall interface on SVC.
  75:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  76:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_USE_SYSCALL) || defined(__DOXYGEN__)
  77:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_USE_SYSCALL                FALSE
  78:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
  79:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  80:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  81:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Number of MPU regions to be saved/restored during context switch.
  82:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The first region is always region zero.
  83:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The use of this option has an overhead of 8 bytes for each
  84:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          region for each thread.
  85:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Allowed values are 0..4, zero means none.
  86:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  87:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_SWITCHED_REGIONS_NUMBER) || defined(__DOXYGEN__)
  88:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SWITCHED_REGIONS_NUMBER    0
  89:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
  90:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  91:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  92:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables stack overflow guard pages using MPU.
  93:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    This option can only be enabled if also option
  94:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CH_DBG_ENABLE_STACK_CHECK is enabled.
  95:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The use of this option has an overhead of 32 bytes for each
  96:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          thread.
  97:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  98:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_ENABLE_GUARD_PAGES) || defined(__DOXYGEN__)
  99:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ENABLE_GUARD_PAGES         FALSE
 100:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 101:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 102:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 103:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   MPU region to be used to stack guards.
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Make sure this region is not included in the
 105:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p PORT_SWITCHED_REGIONS_NUMBER regions range.
 106:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 107:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_USE_GUARD_MPU_REGION) || defined(__DOXYGEN__)
 108:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_USE_GUARD_MPU_REGION       MPU_REGION_7
 109:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 110:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 111:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 112:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Stack size for the system idle thread.
 113:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This size depends on the idle thread implementation, usually
 114:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          the idle thread should take no more space than those reserved
 115:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 116:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port it is set to 16 because the idle thread does have
 117:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          a stack frame when compiling without optimizations. You may
 118:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          reduce this value to zero when compiling with optimizations.
 119:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 120:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 121:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IDLE_THREAD_STACK_SIZE     16
 122:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 123:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 124:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 125:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 126:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This constant is used in the calculation of the correct working
 127:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          area size.
 128:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port this value is conservatively set to 64 because the
 129:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          function @p chSchDoReschedule() can have a stack frame, especially
 130:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          with compiler optimizations disabled. The value can be reduced
 131:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          when compiler optimizations are enabled.
 132:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 133:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 134:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INT_REQUIRED_STACK         64
 135:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 136:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 137:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 138:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables the use of the WFI instruction in the idle thread loop.
 139:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 140:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_ENABLE_WFI_IDLE)
 141:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_ENABLE_WFI_IDLE          FALSE
 142:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 143:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 144:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 145:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   FPU support in context switch.
 146:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details Activating this option activates the FPU support in the kernel.
 147:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 148:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_USE_FPU)
 149:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_USE_FPU                  CORTEX_HAS_FPU
 150:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_USE_FPU == TRUE) && (CORTEX_HAS_FPU == FALSE)
 151:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* This setting requires an FPU presence check in case it is externally
 152:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    redefined.*/
 153:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "the selected core does not have an FPU"
 154:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 155:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 156:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 157:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Simplified priority handling flag.
 158:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details Activating this option makes the Kernel work in compact mode.
 159:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          In compact mode interrupts are disabled globally instead of
 160:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          raising the priority mask to some intermediate level.
 161:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 162:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_SIMPLIFIED_PRIORITY)
 163:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_SIMPLIFIED_PRIORITY      FALSE
 164:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 165:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 166:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 167:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   SVCALL handler priority.
 168:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The default SVCALL handler priority is defaulted to
 169:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAXIMUM_PRIORITY+1, this reserves the
 170:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAXIMUM_PRIORITY priority level as fast interrupts
 171:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          priority level.
 172:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 173:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_PRIORITY_SVCALL)
 174:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIORITY_SVCALL          (CORTEX_MAXIMUM_PRIORITY + 1U)
 175:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif !PORT_IRQ_IS_VALID_PRIORITY(CORTEX_PRIORITY_SVCALL)
 176:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* If it is externally redefined then better perform a validity check on it.*/
 177:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "invalid priority level specified for CORTEX_PRIORITY_SVCALL"
 178:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 179:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 180:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 181:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   NVIC PRIGROUP initialization expression.
 182:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details The default assigns all available priority bits as preemption
 183:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          priority with no sub-priority.
 184:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 185:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_PRIGROUP_INIT) || defined(__DOXYGEN__)
 186:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIGROUP_INIT            (7 - CORTEX_PRIORITY_BITS)
 187:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 188:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 189:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 190:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Derived constants and error checks.                                       */
 191:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 192:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 193:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER < 0) || (PORT_SWITCHED_REGIONS_NUMBER > 4)
 194:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "invalid PORT_SWITCHED_REGIONS_NUMBER value"
 195:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 196:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 197:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(_FROM_ASM_)
 198:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 199:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   MPU guard page size.
 200:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 201:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == TRUE) || defined(__DOXYGEN__)
 202:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_DBG_ENABLE_STACK_CHECK == FALSE
 203:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "PORT_ENABLE_GUARD_PAGES requires CH_DBG_ENABLE_STACK_CHECK"
 204:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 205:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if __MPU_PRESENT == 0
 206:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "MPU not present in current device"
 207:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 208:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_GUARD_PAGE_SIZE          32U
 209:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 210:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_GUARD_PAGE_SIZE          0U
 211:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 212:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* !defined(_FROM_ASM_) */
 213:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 214:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 215:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @name    Architecture and Compiler
 216:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
 217:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 218:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_MODEL == 3) || defined(__DOXYGEN__)
 219:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 220:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM3)
 221:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM3 not defined"
 222:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 223:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 224:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM3 == FALSE
 225:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "ChibiOS Cortex-M3 port not licensed"
 226:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 227:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 228:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 229:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Macro defining the specific ARM architecture.
 230:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 231:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_ARM_v7M
 232:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 233:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 234:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Name of the implemented architecture.
 235:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 236:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_NAME          "ARMv7-M"
 237:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 238:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 239:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Name of the architecture variant.
 240:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 241:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == FALSE) || defined(__DOXYGEN__)
 242:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_CORE_VARIANT_NAME        "Cortex-M3"
 243:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 244:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_CORE_VARIANT_NAME        "Cortex-M3 (MPU)"
 245:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 246:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 247:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_MODEL == 4)
 248:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 249:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM4)
 250:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM4 not defined"
 251:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 252:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 253:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM4 == FALSE
 254:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #error "ChibiOS Cortex-M4 port not licensed"
 255:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 256:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 257:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_ARM_v7ME
 258:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_NAME        "ARMv7E-M"
 259:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CORTEX_USE_FPU
 260:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 261:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4F"
 262:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 263:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4F (MPU)"
 264:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 265:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #else
 266:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 267:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4"
 268:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 269:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4 (MPU)"
 270:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 271:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 272:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 273:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_MODEL == 7)
 274:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 275:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM7)
 276:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM7 not defined"
 277:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 278:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 279:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM7 == FALSE
 280:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "ChibiOS Cortex-M7 port not licensed"
 281:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 282:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 283:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_ARM_v7ME
 284:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_NAME        "ARMv7E-M"
 285:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CORTEX_USE_FPU
 286:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 287:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7F"
 288:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 289:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7F (MPU)"
 290:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 291:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #else
 292:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 293:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7"
 294:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 295:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7 (MPU)"
 296:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 297:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 298:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 299:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 300:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 301:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Port-specific information string.
 302:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 303:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 304:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INFO                       "Advanced kernel mode"
 305:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 306:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INFO                       "Compact kernel mode"
 307:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 308:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /** @} */
 309:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 310:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 311:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 312:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Maximum usable priority for normal ISRs.
 313:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 314:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      (CORTEX_PRIORITY_SVCALL + 1U)
 315:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 316:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 317:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   BASEPRI level within kernel lock.
 318:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 319:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_BASEPRI_KERNEL                                               \
 320:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   CORTEX_PRIO_MASK(CORTEX_MAX_KERNEL_PRIORITY)
 321:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 322:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 323:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      0U
 324:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 325:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 326:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 327:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   PendSV priority level.
 328:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    This priority is enforced to be equal to
 329:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAX_KERNEL_PRIORITY, this handler always have the
 330:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          highest priority that cannot preempt the kernel.
 331:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 332:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIORITY_PENDSV          CORTEX_MAX_KERNEL_PRIORITY
 333:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 334:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 335:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module data structures and types.                                         */
 336:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 337:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 338:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* The following code is not processed when the file is included from an
 339:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    asm module.*/
 340:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(_FROM_ASM_)
 341:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 342:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* The documentation of the following declarations is in chconf.h in order
 343:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    to not have duplicated structure names into the documentation.*/
 344:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(__DOXYGEN__)
 345:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_extctx {
 346:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r0;
 347:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r1;
 348:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r2;
 349:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r3;
 350:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r12;
 351:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      lr_thd;
 352:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      pc;
 353:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      xpsr;
 354:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_USE_FPU
 355:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s0;
 356:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s1;
 357:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s2;
 358:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s3;
 359:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s4;
 360:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s5;
 361:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s6;
 362:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s7;
 363:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s8;
 364:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s9;
 365:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s10;
 366:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s11;
 367:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s12;
 368:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s13;
 369:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s14;
 370:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s15;
 371:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      fpscr;
 372:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      reserved;
 373:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_USE_FPU */
 374:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 375:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 376:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 377:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 378:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Link context structure.
 379:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This structure is used when there is the need to save extra
 380:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          context information that is not part of the registers stacked
 381:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          in HW.
 382:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 383:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_linkctx {
 384:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t              control;
 385:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_extctx    *ectxp;
 386:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 388:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_intctx {
 390:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER > 0) || defined(__DOXYGEN__)
 391:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct {
 392:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t    rbar;
 393:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t    rasr;
 394:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   } regions[PORT_SWITCHED_REGIONS_NUMBER];
 395:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_USE_FPU
 397:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s16;
 398:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s17;
 399:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s18;
 400:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s19;
 401:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s20;
 402:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s21;
 403:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s22;
 404:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s23;
 405:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s24;
 406:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s25;
 407:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s26;
 408:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s27;
 409:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s28;
 410:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s29;
 411:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s30;
 412:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s31;
 413:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_USE_FPU */
 414:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r4;
 415:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r5;
 416:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r6;
 417:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r7;
 418:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r8;
 419:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r9;
 420:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r10;
 421:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r11;
 422:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      lr;
 423:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 424:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 425:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_context {
 426:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_intctx    *sp;
 427:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 428:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct {
 429:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t            psp;
 430:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     const void          *p;
 431:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   } syscall;
 432:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 433:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 434:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* !defined(__DOXYGEN__) */
 435:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 436:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 437:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module macros.                                                            */
 438:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 439:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 440:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* By default threads have no syscall context information.*/
 441:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 442:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop)                              \
 443:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.syscall.psp = (uint32_t)(wtop);                                 \
 444:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.syscall.p   = NULL;
 445:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 446:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop)
 447:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 448:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 449:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* By default threads have all regions disabled.*/
 450:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER == 0) || defined(__DOXYGEN__)
 451:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)
 452:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 1) || defined(__DOXYGEN__)
 453:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 454:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 455:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U
 456:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 2) || defined(__DOXYGEN__)
 457:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 458:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 459:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 460:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 461:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U
 462:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 3) || defined(__DOXYGEN__)
 463:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 464:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 465:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 466:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 467:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U;                                      \
 468:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rbar  = 0U;                                      \
 469:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rasr  = 0U
 470:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 4) || defined(__DOXYGEN__)
 471:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 472:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 473:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 474:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 475:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U;                                      \
 476:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rbar  = 0U;                                      \
 477:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rasr  = 0U;                                      \
 478:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[3].rbar  = 0U;                                      \
 479:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[3].rasr  = 0U
 480:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 481:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 482:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 483:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 484:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 485:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This code usually setup the context switching frame represented
 486:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          by an @p port_intctx structure.
 487:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 488:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 489:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                 \
 490:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                         sizeof (struct port_intctx));       \
 491:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->r4 = (uint32_t)(pf);                                        \
 492:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->r5 = (uint32_t)(arg);                                       \
 493:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->lr = (uint32_t)_port_thread_start;                          \
 494:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __PORT_SETUP_CONTEXT_MPU(tp);                                             \
 495:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop);                                   \
 496:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 497:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 498:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** //  __PORT_SETUP_CONTEXT_MPU(tp)
 499:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 500:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 501:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Computes the thread working area global size.
 502:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    There is no need to perform alignments in this macro.
 503:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 504:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WA_SIZE(n) ((size_t)PORT_GUARD_PAGE_SIZE +                     \
 505:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          sizeof (struct port_intctx) +                      \
 506:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          sizeof (struct port_extctx) +                      \
 507:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          (size_t)(n) +                                      \
 508:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          (size_t)PORT_INT_REQUIRED_STACK)
 509:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 510:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 511:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Static working area allocation.
 512:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro is used to allocate a static thread working area
 513:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          aligned as both position and size.
 514:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 515:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] s         the name to be assigned to the stack array
 516:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] n         the stack size to be assigned to the thread
 517:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 518:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == FALSE) || defined(__DOXYGEN__)
 519:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 520:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 521:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 522:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 523:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   ALIGNED_VAR(32) stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 524:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 525:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 526:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 527:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ prologue code.
 528:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 529:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          enabled to invoke system APIs.
 530:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 531:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_PROLOGUE()
 532:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 533:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 534:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ epilogue code.
 535:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 536:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          enabled to invoke system APIs.
 537:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 538:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_EPILOGUE() _port_irq_epilogue()
 539:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 540:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 541:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ handler function declaration.
 542:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    @p id can be a function name or a vector number depending on the
 543:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          port implementation.
 544:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 545:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 546:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_HANDLER(id) extern "C" void id(void)
 547:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 548:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_HANDLER(id) void id(void)
 549:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 550:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 551:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 552:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Fast IRQ handler function declaration.
 553:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    @p id can be a function name or a vector number depending on the
 554:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          port implementation.
 555:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 556:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 557:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_FAST_IRQ_HANDLER(id) extern "C" void id(void)
 558:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 559:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_FAST_IRQ_HANDLER(id) void id(void)
 560:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 561:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 562:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 563:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Performs a context switch between two threads.
 564:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This is the most critical code in any port, this function
 565:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          is responsible for the context switch between 2 threads.
 566:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 567:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          switch performance so optimize here as much as you can.
 568:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 569:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] ntp       the thread to be switched in
 570:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] otp       the thread to be switched out
 571:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 572:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CH_DBG_ENABLE_STACK_CHECK == FALSE) || defined(__DOXYGEN__)
 573:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) _port_switch(ntp, otp)
 574:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 575:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if PORT_ENABLE_GUARD_PAGES == FALSE
 576:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) {                                             \
 577:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_intctx *r13 = (struct port_intctx *)__get_PSP();              \
 578:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   if ((stkalign_t *)(r13 - 1) < (otp)->wabase) {                            \
 579:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     chSysHalt("stack overflow");                                            \
 580:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   }                                                                         \
 581:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   _port_switch(ntp, otp);                                                   \
 582:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 583:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 584:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) {                                             \
 585:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   _port_switch(ntp, otp);                                                   \
 586:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                                                             \
 587:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   /* Setting up the guard page for the switched-in thread.*/                \
 588:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   mpuSetRegionAddress(PORT_USE_GUARD_MPU_REGION,                            \
 589:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                       chThdGetSelfX()->wabase);                             \
 590:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 591:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 592:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 593:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 594:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 595:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* External declarations.                                                    */
 596:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 597:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 598:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 599:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** extern "C" {
 600:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 601:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void port_init(void);
 602:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_irq_epilogue(void);
 603:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 604:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_thread_start(void);
 605:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_switch_from_isr(void);
 606:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_exit_from_isr(void);
 607:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if PORT_USE_SYSCALL == TRUE
 608:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void port_unprivileged_jump(uint32_t pc, uint32_t psp);
 609:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 610:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 611:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 612:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 613:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 614:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 615:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module inline functions.                                                  */
 616:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 617:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 618:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 619:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Returns a word encoding the current interrupts status.
 620:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 621:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The interrupts status.
 622:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 623:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE syssts_t port_get_irq_status(void) {
 624:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   syssts_t sts;
 625:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 626:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 627:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   sts = (syssts_t)__get_BASEPRI();
 628:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 629:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   sts = (syssts_t)__get_PRIMASK();
 630:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 631:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return sts;
 632:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 633:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 634:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 635:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Checks the interrupt status.
 636:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 637:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] sts       the interrupt status word
 638:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 639:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The interrupt status.
 640:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval false        the word specified a disabled interrupts status.
 641:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval true         the word specified an enabled interrupts status.
 642:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 643:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE bool port_irq_enabled(syssts_t sts) {
 644:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 645:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 646:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 647:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 648:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return (sts & (syssts_t)1) == (syssts_t)0;
 649:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 650:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 651:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 652:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 653:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Determines the current execution context.
 654:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 655:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The execution context.
 656:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval false        not running in ISR mode.
 657:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval true         running in ISR mode.
 658:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 659:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE bool port_is_isr_context(void) {
 660:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 661:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 662:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 663:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 664:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 665:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-lock action.
 666:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function raises the base priority to kernel
 667:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 668:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_lock(void) {
 317              		.loc 4 669 27 view .LVU100
 318              	.LBE106:
 319              	.LBE113:
 670:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 671:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 672:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 673:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if __CM7_REV <= 1
 674:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 675:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 676:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
 320              		.loc 4 677 3 view .LVU101
 321              	.LBB114:
 322              	.LBB111:
 323              	.LBB107:
 324              	.LBI107:
 325              		.file 5 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 117:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 118:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 122:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 123:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 133:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 134:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 135:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 136:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 142:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 144:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 145:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 146:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 147:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 150:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 151:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 153:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 154:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 155:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 157:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 158:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 159:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 160:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 162:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 166:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 168:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 169:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 170:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 172:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 173:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 174:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 175:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 176:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 177:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 181:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 183:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 185:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 187:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 189:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 193:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 195:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 197:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 198:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 199:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 200:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 201:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 205:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 207:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 208:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 209:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 211:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 212:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 214:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 215:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 219:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 221:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 222:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 223:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 225:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 226:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 228:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 241:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 243:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 247:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 249:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 250:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 251:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 253:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 254:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 255:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 265:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 268:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 269:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 270:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 271:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 272:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 273:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 277:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 279:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 281:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 282:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 283:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 285:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 289:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 291:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 294:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 296:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 297:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 301:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 303:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 304:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 305:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 307:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 308:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 310:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 312:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 316:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 318:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 319:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 320:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 322:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 323:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 324:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 325:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 326:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 327:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 331:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 333:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 335:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 336:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 337:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 339:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 343:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 345:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 347:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 348:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 355:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 359:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 360:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 362:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 363:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 364:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 365:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 366:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 370:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 372:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 374:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 375:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 378:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 382:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 384:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 385:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 386:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 388:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 389:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 390:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 391:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 393:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 397:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 399:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 400:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 401:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 403:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 404:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 405:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 406:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 407:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 408:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 412:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 414:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 416:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 418:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 420:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 424:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 426:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 428:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 429:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 430:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 435:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 439:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 441:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 443:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 445:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 446:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 450:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 452:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 454:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 455:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 456:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 457:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 461:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 463:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 464:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 465:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 467:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 468:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 469:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 470:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 472:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 476:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 478:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 479:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 480:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 482:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 484:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 486:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 326              		.loc 5 491 27 view .LVU102
 327              	.LBB108:
 492:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 328              		.loc 5 493 3 view .LVU103
 329              	.LBE108:
 330              	.LBE107:
 331              	.LBE111:
 332              	.LBE114:
 123:lib/chibios/os/rt/src/chmtx.c **** 
 333              		.loc 2 123 29 is_stmt 0 view .LVU104
 334 0000 08B5     		push	{r3, lr}
 335              		.cfi_def_cfa_offset 8
 336              		.cfi_offset 3, -8
 337              		.cfi_offset 14, -4
 338              	.LBB115:
 339              	.LBB112:
 340              	.LBB110:
 341              	.LBB109:
 342              		.loc 5 493 3 view .LVU105
 343 0002 2023     		movs	r3, #32
 344              		.syntax unified
 345              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 346 0004 83F31188 		MSR basepri, r3
 347              	@ 0 "" 2
 348              	.LVL20:
 349              		.loc 5 493 3 view .LVU106
 350              		.thumb
 351              		.syntax unified
 352              	.LBE109:
 353              	.LBE110:
 354              	.LBE112:
 355              	.LBE115:
 356:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 356              		.loc 3 356 34 is_stmt 1 view .LVU107
 357:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 357              		.loc 3 357 20 view .LVU108
 126:lib/chibios/os/rt/src/chmtx.c ****   chSysUnlock();
 358              		.loc 2 126 3 view .LVU109
 359 0008 FFF7FEFF 		bl	chMtxLockS
 360              	.LVL21:
 127:lib/chibios/os/rt/src/chmtx.c **** }
 361              		.loc 2 127 3 view .LVU110
 362              	.LBB116:
 363              	.LBI116:
 358:./lib/chibios/os/rt/include/chsys.h **** }
 359:./lib/chibios/os/rt/include/chsys.h **** 
 360:./lib/chibios/os/rt/include/chsys.h **** /**
 361:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 362:./lib/chibios/os/rt/include/chsys.h ****  *
 363:./lib/chibios/os/rt/include/chsys.h ****  * @special
 364:./lib/chibios/os/rt/include/chsys.h ****  */
 365:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 364              		.loc 3 365 20 view .LVU111
 365              	.LBB117:
 366:./lib/chibios/os/rt/include/chsys.h **** 
 367:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_unlock();
 366              		.loc 3 367 22 view .LVU112
 368:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 367              		.loc 3 368 33 view .LVU113
 369:./lib/chibios/os/rt/include/chsys.h **** 
 370:./lib/chibios/os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 371:./lib/chibios/os/rt/include/chsys.h ****      in a critical section not followed by a chSchRescheduleS(), this means
 372:./lib/chibios/os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 373:./lib/chibios/os/rt/include/chsys.h ****      the ready list.*/
 374:./lib/chibios/os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 368              		.loc 3 374 3 view .LVU114
 369              		.loc 3 374 3 view .LVU115
 370              		.loc 3 374 3 view .LVU116
 375:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 376:./lib/chibios/os/rt/include/chsys.h ****               "priority order violation");
 377:./lib/chibios/os/rt/include/chsys.h **** 
 378:./lib/chibios/os/rt/include/chsys.h ****   port_unlock();
 371              		.loc 3 378 3 view .LVU117
 372              	.LBB118:
 373              	.LBI118:
 678:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 679:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if __CM7_REV <= 1
 680:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __enable_irq();
 681:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 682:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 683:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 684:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 685:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 686:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 687:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 688:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 689:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-unlock action.
 690:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function lowers the base priority to user
 691:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 692:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_unlock(void) {
 374              		.loc 4 693 27 view .LVU118
 375              	.LBE118:
 376              	.LBE117:
 377              	.LBE116:
 694:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 695:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 696:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
 378              		.loc 4 696 3 view .LVU119
 379              	.LBB123:
 380              	.LBB122:
 381              	.LBB121:
 382              	.LBB119:
 383              	.LBI119:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 384              		.loc 5 491 27 view .LVU120
 385              	.LBB120:
 386              		.loc 5 493 3 view .LVU121
 387 000c 0023     		movs	r3, #0
 388              		.syntax unified
 389              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 390 000e 83F31188 		MSR basepri, r3
 391              	@ 0 "" 2
 392              	.LVL22:
 393              		.loc 5 493 3 is_stmt 0 view .LVU122
 394              		.thumb
 395              		.syntax unified
 396              	.LBE120:
 397              	.LBE119:
 398              	.LBE121:
 399              	.LBE122:
 400              	.LBE123:
 128:lib/chibios/os/rt/src/chmtx.c **** 
 401              		.loc 2 128 1 view .LVU123
 402 0012 08BD     		pop	{r3, pc}
 403              		.cfi_endproc
 404              	.LFE240:
 406              		.section	.text.chMtxTryLockS,"ax",%progbits
 407              		.align	1
 408              		.global	chMtxTryLockS
 409              		.syntax unified
 410              		.thumb
 411              		.thumb_func
 412              		.fpu fpv4-sp-d16
 414              	chMtxTryLockS:
 415              	.LVL23:
 416              	.LFB243:
 237:lib/chibios/os/rt/src/chmtx.c **** 
 238:lib/chibios/os/rt/src/chmtx.c **** /**
 239:lib/chibios/os/rt/src/chmtx.c ****  * @brief   Tries to lock a mutex.
 240:lib/chibios/os/rt/src/chmtx.c ****  * @details This function attempts to lock a mutex, if the mutex is already
 241:lib/chibios/os/rt/src/chmtx.c ****  *          locked by another thread then the function exits without waiting.
 242:lib/chibios/os/rt/src/chmtx.c ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
 243:lib/chibios/os/rt/src/chmtx.c ****  *          mutexes.
 244:lib/chibios/os/rt/src/chmtx.c ****  * @note    This function does not have any overhead related to the
 245:lib/chibios/os/rt/src/chmtx.c ****  *          priority inheritance mechanism because it does not try to
 246:lib/chibios/os/rt/src/chmtx.c ****  *          enter a sleep state.
 247:lib/chibios/os/rt/src/chmtx.c ****  *
 248:lib/chibios/os/rt/src/chmtx.c ****  * @param[in] mp        pointer to the @p mutex_t structure
 249:lib/chibios/os/rt/src/chmtx.c ****  * @return              The operation status.
 250:lib/chibios/os/rt/src/chmtx.c ****  * @retval true         if the mutex has been successfully acquired
 251:lib/chibios/os/rt/src/chmtx.c ****  * @retval false        if the lock attempt failed.
 252:lib/chibios/os/rt/src/chmtx.c ****  *
 253:lib/chibios/os/rt/src/chmtx.c ****  * @api
 254:lib/chibios/os/rt/src/chmtx.c ****  */
 255:lib/chibios/os/rt/src/chmtx.c **** bool chMtxTryLock(mutex_t *mp) {
 256:lib/chibios/os/rt/src/chmtx.c ****   bool b;
 257:lib/chibios/os/rt/src/chmtx.c **** 
 258:lib/chibios/os/rt/src/chmtx.c ****   chSysLock();
 259:lib/chibios/os/rt/src/chmtx.c ****   b = chMtxTryLockS(mp);
 260:lib/chibios/os/rt/src/chmtx.c ****   chSysUnlock();
 261:lib/chibios/os/rt/src/chmtx.c **** 
 262:lib/chibios/os/rt/src/chmtx.c ****   return b;
 263:lib/chibios/os/rt/src/chmtx.c **** }
 264:lib/chibios/os/rt/src/chmtx.c **** 
 265:lib/chibios/os/rt/src/chmtx.c **** /**
 266:lib/chibios/os/rt/src/chmtx.c ****  * @brief   Tries to lock a mutex.
 267:lib/chibios/os/rt/src/chmtx.c ****  * @details This function attempts to lock a mutex, if the mutex is already
 268:lib/chibios/os/rt/src/chmtx.c ****  *          taken by another thread then the function exits without waiting.
 269:lib/chibios/os/rt/src/chmtx.c ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
 270:lib/chibios/os/rt/src/chmtx.c ****  *          mutexes.
 271:lib/chibios/os/rt/src/chmtx.c ****  * @note    This function does not have any overhead related to the
 272:lib/chibios/os/rt/src/chmtx.c ****  *          priority inheritance mechanism because it does not try to
 273:lib/chibios/os/rt/src/chmtx.c ****  *          enter a sleep state.
 274:lib/chibios/os/rt/src/chmtx.c ****  *
 275:lib/chibios/os/rt/src/chmtx.c ****  * @param[in] mp        pointer to the @p mutex_t structure
 276:lib/chibios/os/rt/src/chmtx.c ****  * @return              The operation status.
 277:lib/chibios/os/rt/src/chmtx.c ****  * @retval true         if the mutex has been successfully acquired
 278:lib/chibios/os/rt/src/chmtx.c ****  * @retval false        if the lock attempt failed.
 279:lib/chibios/os/rt/src/chmtx.c ****  *
 280:lib/chibios/os/rt/src/chmtx.c ****  * @sclass
 281:lib/chibios/os/rt/src/chmtx.c ****  */
 282:lib/chibios/os/rt/src/chmtx.c **** bool chMtxTryLockS(mutex_t *mp) {
 417              		.loc 2 282 33 is_stmt 1 view -0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 0
 420              		@ frame_needed = 0, uses_anonymous_args = 0
 421              		@ link register save eliminated.
 283:lib/chibios/os/rt/src/chmtx.c **** 
 284:lib/chibios/os/rt/src/chmtx.c ****   chDbgCheckClassS();
 422              		.loc 2 284 21 view .LVU125
 285:lib/chibios/os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 423              		.loc 2 285 3 view .LVU126
 424              		.loc 2 285 3 view .LVU127
 425              		.loc 2 285 3 view .LVU128
 286:lib/chibios/os/rt/src/chmtx.c **** 
 287:lib/chibios/os/rt/src/chmtx.c ****   if (mp->owner != NULL) {
 426              		.loc 2 287 3 view .LVU129
 427              		.loc 2 287 6 is_stmt 0 view .LVU130
 428 0000 8368     		ldr	r3, [r0, #8]
 429 0002 3BB9     		cbnz	r3, .L19
 430              	.LVL24:
 431              	.LBB126:
 432              	.LBI126:
 282:lib/chibios/os/rt/src/chmtx.c **** 
 433              		.loc 2 282 6 is_stmt 1 view .LVU131
 434              	.LBB127:
 288:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 289:lib/chibios/os/rt/src/chmtx.c **** 
 290:lib/chibios/os/rt/src/chmtx.c ****     chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");
 291:lib/chibios/os/rt/src/chmtx.c **** 
 292:lib/chibios/os/rt/src/chmtx.c ****     if (mp->owner == currp) {
 293:lib/chibios/os/rt/src/chmtx.c ****       mp->cnt++;
 294:lib/chibios/os/rt/src/chmtx.c ****       return true;
 295:lib/chibios/os/rt/src/chmtx.c ****     }
 296:lib/chibios/os/rt/src/chmtx.c **** #endif
 297:lib/chibios/os/rt/src/chmtx.c ****     return false;
 298:lib/chibios/os/rt/src/chmtx.c ****   }
 299:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 300:lib/chibios/os/rt/src/chmtx.c **** 
 301:lib/chibios/os/rt/src/chmtx.c ****   chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");
 302:lib/chibios/os/rt/src/chmtx.c **** 
 303:lib/chibios/os/rt/src/chmtx.c ****   mp->cnt++;
 304:lib/chibios/os/rt/src/chmtx.c **** #endif
 305:lib/chibios/os/rt/src/chmtx.c ****   mp->owner = currp;
 435              		.loc 2 305 3 view .LVU132
 436              		.loc 2 305 15 is_stmt 0 view .LVU133
 437 0004 044B     		ldr	r3, .L20
 438 0006 1B69     		ldr	r3, [r3, #16]
 439              		.loc 2 305 13 view .LVU134
 440 0008 8360     		str	r3, [r0, #8]
 306:lib/chibios/os/rt/src/chmtx.c ****   mp->next = currp->mtxlist;
 441              		.loc 2 306 3 is_stmt 1 view .LVU135
 442              		.loc 2 306 12 is_stmt 0 view .LVU136
 443 000a DA69     		ldr	r2, [r3, #28]
 444 000c C260     		str	r2, [r0, #12]
 307:lib/chibios/os/rt/src/chmtx.c ****   currp->mtxlist = mp;
 445              		.loc 2 307 3 is_stmt 1 view .LVU137
 446              		.loc 2 307 18 is_stmt 0 view .LVU138
 447 000e D861     		str	r0, [r3, #28]
 308:lib/chibios/os/rt/src/chmtx.c ****   return true;
 448              		.loc 2 308 3 is_stmt 1 view .LVU139
 449              	.LVL25:
 307:lib/chibios/os/rt/src/chmtx.c ****   currp->mtxlist = mp;
 450              		.loc 2 307 18 is_stmt 0 view .LVU140
 451 0010 0120     		movs	r0, #1
 452              	.LVL26:
 307:lib/chibios/os/rt/src/chmtx.c ****   currp->mtxlist = mp;
 453              		.loc 2 307 18 view .LVU141
 454 0012 7047     		bx	lr
 455              	.LVL27:
 456              	.L19:
 307:lib/chibios/os/rt/src/chmtx.c ****   currp->mtxlist = mp;
 457              		.loc 2 307 18 view .LVU142
 458              	.LBE127:
 459              	.LBE126:
 297:lib/chibios/os/rt/src/chmtx.c ****   }
 460              		.loc 2 297 12 view .LVU143
 461 0014 0020     		movs	r0, #0
 462              	.LVL28:
 309:lib/chibios/os/rt/src/chmtx.c **** }
 463              		.loc 2 309 1 view .LVU144
 464 0016 7047     		bx	lr
 465              	.L21:
 466              		.align	2
 467              	.L20:
 468 0018 00000000 		.word	ch
 469              		.cfi_endproc
 470              	.LFE243:
 472              		.section	.text.chMtxTryLock,"ax",%progbits
 473              		.align	1
 474              		.global	chMtxTryLock
 475              		.syntax unified
 476              		.thumb
 477              		.thumb_func
 478              		.fpu fpv4-sp-d16
 480              	chMtxTryLock:
 481              	.LVL29:
 482              	.LFB242:
 255:lib/chibios/os/rt/src/chmtx.c ****   bool b;
 483              		.loc 2 255 32 is_stmt 1 view -0
 484              		.cfi_startproc
 485              		@ args = 0, pretend = 0, frame = 0
 486              		@ frame_needed = 0, uses_anonymous_args = 0
 256:lib/chibios/os/rt/src/chmtx.c **** 
 487              		.loc 2 256 3 view .LVU146
 258:lib/chibios/os/rt/src/chmtx.c ****   b = chMtxTryLockS(mp);
 488              		.loc 2 258 3 view .LVU147
 489              	.LBB128:
 490              	.LBI128:
 353:./lib/chibios/os/rt/include/chsys.h **** 
 491              		.loc 3 353 20 view .LVU148
 492              	.LBE128:
 355:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 493              		.loc 3 355 3 view .LVU149
 494              	.LBB136:
 495              	.LBB129:
 496              	.LBI129:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 497              		.loc 4 669 27 view .LVU150
 498              	.LBE129:
 499              	.LBE136:
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 500              		.loc 4 677 3 view .LVU151
 501              	.LBB137:
 502              	.LBB134:
 503              	.LBB130:
 504              	.LBI130:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 505              		.loc 5 491 27 view .LVU152
 506              	.LBB131:
 507              		.loc 5 493 3 view .LVU153
 508              	.LBE131:
 509              	.LBE130:
 510              	.LBE134:
 511              	.LBE137:
 255:lib/chibios/os/rt/src/chmtx.c ****   bool b;
 512              		.loc 2 255 32 is_stmt 0 view .LVU154
 513 0000 08B5     		push	{r3, lr}
 514              		.cfi_def_cfa_offset 8
 515              		.cfi_offset 3, -8
 516              		.cfi_offset 14, -4
 517              	.LBB138:
 518              	.LBB135:
 519              	.LBB133:
 520              	.LBB132:
 521              		.loc 5 493 3 view .LVU155
 522 0002 2023     		movs	r3, #32
 523              		.syntax unified
 524              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 525 0004 83F31188 		MSR basepri, r3
 526              	@ 0 "" 2
 527              	.LVL30:
 528              		.loc 5 493 3 view .LVU156
 529              		.thumb
 530              		.syntax unified
 531              	.LBE132:
 532              	.LBE133:
 533              	.LBE135:
 534              	.LBE138:
 356:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 535              		.loc 3 356 34 is_stmt 1 view .LVU157
 357:./lib/chibios/os/rt/include/chsys.h **** }
 536              		.loc 3 357 20 view .LVU158
 259:lib/chibios/os/rt/src/chmtx.c ****   chSysUnlock();
 537              		.loc 2 259 3 view .LVU159
 259:lib/chibios/os/rt/src/chmtx.c ****   chSysUnlock();
 538              		.loc 2 259 7 is_stmt 0 view .LVU160
 539 0008 FFF7FEFF 		bl	chMtxTryLockS
 540              	.LVL31:
 260:lib/chibios/os/rt/src/chmtx.c **** 
 541              		.loc 2 260 3 is_stmt 1 view .LVU161
 542              	.LBB139:
 543              	.LBI139:
 365:./lib/chibios/os/rt/include/chsys.h **** 
 544              		.loc 3 365 20 view .LVU162
 545              	.LBB140:
 367:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 546              		.loc 3 367 22 view .LVU163
 368:./lib/chibios/os/rt/include/chsys.h **** 
 547              		.loc 3 368 33 view .LVU164
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 548              		.loc 3 374 3 view .LVU165
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 549              		.loc 3 374 3 view .LVU166
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 550              		.loc 3 374 3 view .LVU167
 551              		.loc 3 378 3 view .LVU168
 552              	.LBB141:
 553              	.LBI141:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 554              		.loc 4 693 27 view .LVU169
 555              	.LBE141:
 556              	.LBE140:
 557              	.LBE139:
 558              		.loc 4 696 3 view .LVU170
 559              	.LBB146:
 560              	.LBB145:
 561              	.LBB144:
 562              	.LBB142:
 563              	.LBI142:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 564              		.loc 5 491 27 view .LVU171
 565              	.LBB143:
 566              		.loc 5 493 3 view .LVU172
 567 000c 0023     		movs	r3, #0
 568              		.syntax unified
 569              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 570 000e 83F31188 		MSR basepri, r3
 571              	@ 0 "" 2
 572              	.LVL32:
 573              		.loc 5 493 3 is_stmt 0 view .LVU173
 574              		.thumb
 575              		.syntax unified
 576              	.LBE143:
 577              	.LBE142:
 578              	.LBE144:
 579              	.LBE145:
 580              	.LBE146:
 262:lib/chibios/os/rt/src/chmtx.c **** }
 581              		.loc 2 262 3 is_stmt 1 view .LVU174
 263:lib/chibios/os/rt/src/chmtx.c **** 
 582              		.loc 2 263 1 is_stmt 0 view .LVU175
 583 0012 08BD     		pop	{r3, pc}
 584              		.cfi_endproc
 585              	.LFE242:
 587              		.section	.text.chMtxUnlock,"ax",%progbits
 588              		.align	1
 589              		.global	chMtxUnlock
 590              		.syntax unified
 591              		.thumb
 592              		.thumb_func
 593              		.fpu fpv4-sp-d16
 595              	chMtxUnlock:
 596              	.LVL33:
 597              	.LFB244:
 310:lib/chibios/os/rt/src/chmtx.c **** 
 311:lib/chibios/os/rt/src/chmtx.c **** /**
 312:lib/chibios/os/rt/src/chmtx.c ****  * @brief   Unlocks the specified mutex.
 313:lib/chibios/os/rt/src/chmtx.c ****  * @note    Mutexes must be unlocked in reverse lock order. Violating this
 314:lib/chibios/os/rt/src/chmtx.c ****  *          rules will result in a panic if assertions are enabled.
 315:lib/chibios/os/rt/src/chmtx.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 316:lib/chibios/os/rt/src/chmtx.c ****  * @post    The mutex is unlocked and removed from the per-thread stack of
 317:lib/chibios/os/rt/src/chmtx.c ****  *          owned mutexes.
 318:lib/chibios/os/rt/src/chmtx.c ****  *
 319:lib/chibios/os/rt/src/chmtx.c ****  * @param[in] mp        pointer to the @p mutex_t structure
 320:lib/chibios/os/rt/src/chmtx.c ****  *
 321:lib/chibios/os/rt/src/chmtx.c ****  * @api
 322:lib/chibios/os/rt/src/chmtx.c ****  */
 323:lib/chibios/os/rt/src/chmtx.c **** void chMtxUnlock(mutex_t *mp) {
 598              		.loc 2 323 31 is_stmt 1 view -0
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 0
 601              		@ frame_needed = 0, uses_anonymous_args = 0
 324:lib/chibios/os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 602              		.loc 2 324 3 view .LVU177
 323:lib/chibios/os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 603              		.loc 2 323 31 is_stmt 0 view .LVU178
 604 0000 38B5     		push	{r3, r4, r5, lr}
 605              		.cfi_def_cfa_offset 16
 606              		.cfi_offset 3, -16
 607              		.cfi_offset 4, -12
 608              		.cfi_offset 5, -8
 609              		.cfi_offset 14, -4
 610              		.loc 2 324 13 view .LVU179
 611 0002 144B     		ldr	r3, .L29
 612 0004 1969     		ldr	r1, [r3, #16]
 613              	.LVL34:
 325:lib/chibios/os/rt/src/chmtx.c ****   mutex_t *lmp;
 614              		.loc 2 325 3 is_stmt 1 view .LVU180
 326:lib/chibios/os/rt/src/chmtx.c **** 
 327:lib/chibios/os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 615              		.loc 2 327 3 view .LVU181
 616              		.loc 2 327 3 view .LVU182
 617              		.loc 2 327 3 view .LVU183
 328:lib/chibios/os/rt/src/chmtx.c **** 
 329:lib/chibios/os/rt/src/chmtx.c ****   chSysLock();
 618              		.loc 2 329 3 view .LVU184
 619              	.LBB147:
 620              	.LBI147:
 353:./lib/chibios/os/rt/include/chsys.h **** 
 621              		.loc 3 353 20 view .LVU185
 622              	.LBE147:
 355:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 623              		.loc 3 355 3 view .LVU186
 624              	.LBB152:
 625              	.LBB148:
 626              	.LBI148:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 627              		.loc 4 669 27 view .LVU187
 628              	.LBE148:
 629              	.LBE152:
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 630              		.loc 4 677 3 view .LVU188
 631              	.LBB153:
 632              	.LBB151:
 633              	.LBB149:
 634              	.LBI149:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 635              		.loc 5 491 27 view .LVU189
 636              	.LBB150:
 637              		.loc 5 493 3 view .LVU190
 638 0006 2023     		movs	r3, #32
 639              		.syntax unified
 640              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 641 0008 83F31188 		MSR basepri, r3
 642              	@ 0 "" 2
 643              	.LVL35:
 644              		.loc 5 493 3 is_stmt 0 view .LVU191
 645              		.thumb
 646              		.syntax unified
 647              	.LBE150:
 648              	.LBE149:
 649              	.LBE151:
 650              	.LBE153:
 356:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 651              		.loc 3 356 34 is_stmt 1 view .LVU192
 357:./lib/chibios/os/rt/include/chsys.h **** }
 652              		.loc 3 357 20 view .LVU193
 330:lib/chibios/os/rt/src/chmtx.c **** 
 331:lib/chibios/os/rt/src/chmtx.c ****   chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 653              		.loc 2 331 3 view .LVU194
 654              		.loc 2 331 3 view .LVU195
 655              		.loc 2 331 3 view .LVU196
 332:lib/chibios/os/rt/src/chmtx.c ****   chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 656              		.loc 2 332 3 view .LVU197
 657              		.loc 2 332 3 view .LVU198
 658              		.loc 2 332 3 view .LVU199
 333:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 334:lib/chibios/os/rt/src/chmtx.c ****   chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");
 335:lib/chibios/os/rt/src/chmtx.c **** 
 336:lib/chibios/os/rt/src/chmtx.c ****   if (--mp->cnt == (cnt_t)0) {
 337:lib/chibios/os/rt/src/chmtx.c **** #endif
 338:lib/chibios/os/rt/src/chmtx.c **** 
 339:lib/chibios/os/rt/src/chmtx.c ****     chDbgAssert(ctp->mtxlist == mp, "not next in list");
 659              		.loc 2 339 5 view .LVU200
 660              		.loc 2 339 5 view .LVU201
 661              		.loc 2 339 5 view .LVU202
 340:lib/chibios/os/rt/src/chmtx.c **** 
 341:lib/chibios/os/rt/src/chmtx.c ****     /* Removes the top mutex from the thread's owned mutexes list and marks
 342:lib/chibios/os/rt/src/chmtx.c ****        it as not owned. Note, it is assumed to be the same mutex passed as
 343:lib/chibios/os/rt/src/chmtx.c ****        parameter of this function.*/
 344:lib/chibios/os/rt/src/chmtx.c ****     ctp->mtxlist = mp->next;
 662              		.loc 2 344 5 view .LVU203
 663              	.LBB154:
 664              	.LBB155:
 665              	.LBB156:
 666              	.LBB157:
 566:./lib/chibios/os/rt/include/chschd.h **** }
 667              		.loc 1 566 20 is_stmt 0 view .LVU204
 668 000c 0368     		ldr	r3, [r0]
 669              	.LBE157:
 670              	.LBE156:
 671              	.LBE155:
 672              	.LBE154:
 673              		.loc 2 344 22 view .LVU205
 674 000e C268     		ldr	r2, [r0, #12]
 675              		.loc 2 344 18 view .LVU206
 676 0010 CA61     		str	r2, [r1, #28]
 345:lib/chibios/os/rt/src/chmtx.c **** 
 346:lib/chibios/os/rt/src/chmtx.c ****     /* If a thread is waiting on the mutex then the fun part begins.*/
 347:lib/chibios/os/rt/src/chmtx.c ****     if (chMtxQueueNotEmptyS(mp)) {
 677              		.loc 2 347 5 is_stmt 1 view .LVU207
 678              	.LVL36:
 679              	.LBB161:
 680              	.LBI154:
 681              		.file 6 "./lib/chibios/os/rt/include/chmtx.h"
   1:./lib/chibios/os/rt/include/chmtx.h **** /*
   2:./lib/chibios/os/rt/include/chmtx.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chmtx.h **** 
   4:./lib/chibios/os/rt/include/chmtx.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chmtx.h **** 
   6:./lib/chibios/os/rt/include/chmtx.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chmtx.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chmtx.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chmtx.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chmtx.h **** 
  11:./lib/chibios/os/rt/include/chmtx.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chmtx.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chmtx.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chmtx.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chmtx.h **** 
  16:./lib/chibios/os/rt/include/chmtx.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chmtx.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chmtx.h **** */
  19:./lib/chibios/os/rt/include/chmtx.h **** 
  20:./lib/chibios/os/rt/include/chmtx.h **** /**
  21:./lib/chibios/os/rt/include/chmtx.h ****  * @file    rt/include/chmtx.h
  22:./lib/chibios/os/rt/include/chmtx.h ****  * @brief   Mutexes macros and structures.
  23:./lib/chibios/os/rt/include/chmtx.h ****  *
  24:./lib/chibios/os/rt/include/chmtx.h ****  * @addtogroup mutexes
  25:./lib/chibios/os/rt/include/chmtx.h ****  * @{
  26:./lib/chibios/os/rt/include/chmtx.h ****  */
  27:./lib/chibios/os/rt/include/chmtx.h **** 
  28:./lib/chibios/os/rt/include/chmtx.h **** #ifndef CHMTX_H
  29:./lib/chibios/os/rt/include/chmtx.h **** #define CHMTX_H
  30:./lib/chibios/os/rt/include/chmtx.h **** 
  31:./lib/chibios/os/rt/include/chmtx.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  32:./lib/chibios/os/rt/include/chmtx.h **** 
  33:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chmtx.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chmtx.h **** 
  37:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  38:./lib/chibios/os/rt/include/chmtx.h **** /* Module pre-compile time settings.                                         */
  39:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  40:./lib/chibios/os/rt/include/chmtx.h **** 
  41:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  42:./lib/chibios/os/rt/include/chmtx.h **** /* Derived constants and error checks.                                       */
  43:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  44:./lib/chibios/os/rt/include/chmtx.h **** 
  45:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  46:./lib/chibios/os/rt/include/chmtx.h **** /* Module data structures and types.                                         */
  47:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  48:./lib/chibios/os/rt/include/chmtx.h **** 
  49:./lib/chibios/os/rt/include/chmtx.h **** /**
  50:./lib/chibios/os/rt/include/chmtx.h ****  * @brief   Type of a mutex structure.
  51:./lib/chibios/os/rt/include/chmtx.h ****  */
  52:./lib/chibios/os/rt/include/chmtx.h **** typedef struct ch_mutex mutex_t;
  53:./lib/chibios/os/rt/include/chmtx.h **** 
  54:./lib/chibios/os/rt/include/chmtx.h **** /**
  55:./lib/chibios/os/rt/include/chmtx.h ****  * @brief   Mutex structure.
  56:./lib/chibios/os/rt/include/chmtx.h ****  */
  57:./lib/chibios/os/rt/include/chmtx.h **** struct ch_mutex {
  58:./lib/chibios/os/rt/include/chmtx.h ****   threads_queue_t       queue;      /**< @brief Queue of the threads sleeping
  59:./lib/chibios/os/rt/include/chmtx.h ****                                                 on this mutex.              */
  60:./lib/chibios/os/rt/include/chmtx.h ****   thread_t              *owner;     /**< @brief Owner @p thread_t pointer or
  61:./lib/chibios/os/rt/include/chmtx.h ****                                                 @p NULL.                    */
  62:./lib/chibios/os/rt/include/chmtx.h ****   mutex_t               *next;      /**< @brief Next @p mutex_t into an
  63:./lib/chibios/os/rt/include/chmtx.h ****                                                 owner-list or @p NULL.      */
  64:./lib/chibios/os/rt/include/chmtx.h **** #if (CH_CFG_USE_MUTEXES_RECURSIVE == TRUE) || defined(__DOXYGEN__)
  65:./lib/chibios/os/rt/include/chmtx.h ****   cnt_t                 cnt;        /**< @brief Mutex recursion counter.    */
  66:./lib/chibios/os/rt/include/chmtx.h **** #endif
  67:./lib/chibios/os/rt/include/chmtx.h **** };
  68:./lib/chibios/os/rt/include/chmtx.h **** 
  69:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  70:./lib/chibios/os/rt/include/chmtx.h **** /* Module macros.                                                            */
  71:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  72:./lib/chibios/os/rt/include/chmtx.h **** 
  73:./lib/chibios/os/rt/include/chmtx.h **** /**
  74:./lib/chibios/os/rt/include/chmtx.h ****  * @brief   Data part of a static mutex initializer.
  75:./lib/chibios/os/rt/include/chmtx.h ****  * @details This macro should be used when statically initializing a mutex
  76:./lib/chibios/os/rt/include/chmtx.h ****  *          that is part of a bigger structure.
  77:./lib/chibios/os/rt/include/chmtx.h ****  *
  78:./lib/chibios/os/rt/include/chmtx.h ****  * @param[in] name      the name of the mutex variable
  79:./lib/chibios/os/rt/include/chmtx.h ****  */
  80:./lib/chibios/os/rt/include/chmtx.h **** #if (CH_CFG_USE_MUTEXES_RECURSIVE == TRUE) || defined(__DOXYGEN__)
  81:./lib/chibios/os/rt/include/chmtx.h **** #define _MUTEX_DATA(name) {_THREADS_QUEUE_DATA(name.queue), NULL, NULL, 0}
  82:./lib/chibios/os/rt/include/chmtx.h **** #else
  83:./lib/chibios/os/rt/include/chmtx.h **** #define _MUTEX_DATA(name) {_THREADS_QUEUE_DATA(name.queue), NULL, NULL}
  84:./lib/chibios/os/rt/include/chmtx.h **** #endif
  85:./lib/chibios/os/rt/include/chmtx.h **** 
  86:./lib/chibios/os/rt/include/chmtx.h **** /**
  87:./lib/chibios/os/rt/include/chmtx.h ****  * @brief   Static mutex initializer.
  88:./lib/chibios/os/rt/include/chmtx.h ****  * @details Statically initialized mutexes require no explicit initialization
  89:./lib/chibios/os/rt/include/chmtx.h ****  *          using @p chMtxInit().
  90:./lib/chibios/os/rt/include/chmtx.h ****  *
  91:./lib/chibios/os/rt/include/chmtx.h ****  * @param[in] name      the name of the mutex variable
  92:./lib/chibios/os/rt/include/chmtx.h ****  */
  93:./lib/chibios/os/rt/include/chmtx.h **** #define MUTEX_DECL(name) mutex_t name = _MUTEX_DATA(name)
  94:./lib/chibios/os/rt/include/chmtx.h **** 
  95:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  96:./lib/chibios/os/rt/include/chmtx.h **** /* External declarations.                                                    */
  97:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
  98:./lib/chibios/os/rt/include/chmtx.h **** 
  99:./lib/chibios/os/rt/include/chmtx.h **** #ifdef __cplusplus
 100:./lib/chibios/os/rt/include/chmtx.h **** extern "C" {
 101:./lib/chibios/os/rt/include/chmtx.h **** #endif
 102:./lib/chibios/os/rt/include/chmtx.h ****   void chMtxObjectInit(mutex_t *mp);
 103:./lib/chibios/os/rt/include/chmtx.h ****   void chMtxLock(mutex_t *mp);
 104:./lib/chibios/os/rt/include/chmtx.h ****   void chMtxLockS(mutex_t *mp);
 105:./lib/chibios/os/rt/include/chmtx.h ****   bool chMtxTryLock(mutex_t *mp);
 106:./lib/chibios/os/rt/include/chmtx.h ****   bool chMtxTryLockS(mutex_t *mp);
 107:./lib/chibios/os/rt/include/chmtx.h ****   void chMtxUnlock(mutex_t *mp);
 108:./lib/chibios/os/rt/include/chmtx.h ****   void chMtxUnlockS(mutex_t *mp);
 109:./lib/chibios/os/rt/include/chmtx.h ****   void chMtxUnlockAll(void);
 110:./lib/chibios/os/rt/include/chmtx.h ****   void chMtxUnlockAllS(void);
 111:./lib/chibios/os/rt/include/chmtx.h **** #ifdef __cplusplus
 112:./lib/chibios/os/rt/include/chmtx.h **** }
 113:./lib/chibios/os/rt/include/chmtx.h **** #endif
 114:./lib/chibios/os/rt/include/chmtx.h **** 
 115:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
 116:./lib/chibios/os/rt/include/chmtx.h **** /* Module inline functions.                                                  */
 117:./lib/chibios/os/rt/include/chmtx.h **** /*===========================================================================*/
 118:./lib/chibios/os/rt/include/chmtx.h **** 
 119:./lib/chibios/os/rt/include/chmtx.h **** /**
 120:./lib/chibios/os/rt/include/chmtx.h ****  * @brief   Returns @p true if the mutex queue contains at least a waiting
 121:./lib/chibios/os/rt/include/chmtx.h ****  *          thread.
 122:./lib/chibios/os/rt/include/chmtx.h ****  *
 123:./lib/chibios/os/rt/include/chmtx.h ****  * @param[out] mp       pointer to a @p mutex_t structure
 124:./lib/chibios/os/rt/include/chmtx.h ****  * @return              The mutex queue status.
 125:./lib/chibios/os/rt/include/chmtx.h ****  *
 126:./lib/chibios/os/rt/include/chmtx.h ****  * @sclass
 127:./lib/chibios/os/rt/include/chmtx.h ****  */
 128:./lib/chibios/os/rt/include/chmtx.h **** static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {
 682              		.loc 6 128 20 view .LVU208
 683              	.LBB160:
 129:./lib/chibios/os/rt/include/chmtx.h **** 
 130:./lib/chibios/os/rt/include/chmtx.h ****   chDbgCheckClassS();
 684              		.loc 6 130 21 view .LVU209
 131:./lib/chibios/os/rt/include/chmtx.h **** 
 132:./lib/chibios/os/rt/include/chmtx.h ****   return queue_notempty(&mp->queue);
 685              		.loc 6 132 3 view .LVU210
 686              	.LBB159:
 687              	.LBI156:
 564:./lib/chibios/os/rt/include/chschd.h **** 
 688              		.loc 1 564 20 view .LVU211
 689              	.LBB158:
 566:./lib/chibios/os/rt/include/chschd.h **** }
 690              		.loc 1 566 3 view .LVU212
 566:./lib/chibios/os/rt/include/chschd.h **** }
 691              		.loc 1 566 3 is_stmt 0 view .LVU213
 692              	.LBE158:
 693              	.LBE159:
 694              	.LBE160:
 695              	.LBE161:
 696              		.loc 2 347 8 view .LVU214
 697 0012 8342     		cmp	r3, r0
 698 0014 1BD0     		beq	.L24
 699              	.LBB162:
 348:lib/chibios/os/rt/src/chmtx.c ****       thread_t *tp;
 700              		.loc 2 348 7 is_stmt 1 view .LVU215
 349:lib/chibios/os/rt/src/chmtx.c **** 
 350:lib/chibios/os/rt/src/chmtx.c ****       /* Recalculates the optimal thread priority by scanning the owned
 351:lib/chibios/os/rt/src/chmtx.c ****          mutexes list.*/
 352:lib/chibios/os/rt/src/chmtx.c ****       tprio_t newprio = ctp->realprio;
 701              		.loc 2 352 7 view .LVU216
 702              		.loc 2 352 15 is_stmt 0 view .LVU217
 703 0016 0C6A     		ldr	r4, [r1, #32]
 704              	.LVL37:
 353:lib/chibios/os/rt/src/chmtx.c ****       lmp = ctp->mtxlist;
 705              		.loc 2 353 7 is_stmt 1 view .LVU218
 354:lib/chibios/os/rt/src/chmtx.c ****       while (lmp != NULL) {
 706              		.loc 2 354 7 view .LVU219
 707              	.L25:
 708              		.loc 2 354 13 view .LVU220
 709 0018 82B9     		cbnz	r2, .L27
 355:lib/chibios/os/rt/src/chmtx.c ****         /* If the highest priority thread waiting in the mutexes list has a
 356:lib/chibios/os/rt/src/chmtx.c ****            greater priority than the current thread base priority then the
 357:lib/chibios/os/rt/src/chmtx.c ****            final priority will have at least that priority.*/
 358:lib/chibios/os/rt/src/chmtx.c ****         if (chMtxQueueNotEmptyS(lmp) &&
 359:lib/chibios/os/rt/src/chmtx.c ****             (lmp->queue.next->prio > newprio)) {
 360:lib/chibios/os/rt/src/chmtx.c ****           newprio = lmp->queue.next->prio;
 361:lib/chibios/os/rt/src/chmtx.c ****         }
 362:lib/chibios/os/rt/src/chmtx.c ****         lmp = lmp->next;
 363:lib/chibios/os/rt/src/chmtx.c ****       }
 364:lib/chibios/os/rt/src/chmtx.c **** 
 365:lib/chibios/os/rt/src/chmtx.c ****       /* Assigns to the current thread the highest priority among all the
 366:lib/chibios/os/rt/src/chmtx.c ****          waiting threads.*/
 367:lib/chibios/os/rt/src/chmtx.c ****       ctp->prio = newprio;
 710              		.loc 2 367 7 view .LVU221
 711              	.LBB163:
 712              	.LBB164:
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 713              		.loc 1 609 36 is_stmt 0 view .LVU222
 714 001a 1A68     		ldr	r2, [r3]
 715              	.LVL38:
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 716              		.loc 1 609 36 view .LVU223
 717              	.LBE164:
 718              	.LBE163:
 719              		.loc 2 367 17 view .LVU224
 720 001c 8C60     		str	r4, [r1, #8]
 368:lib/chibios/os/rt/src/chmtx.c **** 
 369:lib/chibios/os/rt/src/chmtx.c ****       /* Awakens the highest priority thread waiting for the unlocked mutex and
 370:lib/chibios/os/rt/src/chmtx.c ****          assigns the mutex to it.*/
 371:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 372:lib/chibios/os/rt/src/chmtx.c ****       mp->cnt = (cnt_t)1;
 373:lib/chibios/os/rt/src/chmtx.c **** #endif
 374:lib/chibios/os/rt/src/chmtx.c ****       tp = queue_fifo_remove(&mp->queue);
 721              		.loc 2 374 7 is_stmt 1 view .LVU225
 722              	.LVL39:
 723              	.LBB166:
 724              	.LBI163:
 606:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 725              		.loc 1 606 25 view .LVU226
 726              	.LBB165:
 607:./lib/chibios/os/rt/include/chschd.h **** 
 727              		.loc 1 607 3 view .LVU227
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 728              		.loc 1 609 3 view .LVU228
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 729              		.loc 1 609 25 is_stmt 0 view .LVU229
 730 001e 0260     		str	r2, [r0]
 610:./lib/chibios/os/rt/include/chschd.h **** 
 731              		.loc 1 610 3 is_stmt 1 view .LVU230
 610:./lib/chibios/os/rt/include/chschd.h **** 
 732              		.loc 1 610 25 is_stmt 0 view .LVU231
 733 0020 5060     		str	r0, [r2, #4]
 612:./lib/chibios/os/rt/include/chschd.h **** }
 734              		.loc 1 612 3 is_stmt 1 view .LVU232
 735              	.LVL40:
 612:./lib/chibios/os/rt/include/chschd.h **** }
 736              		.loc 1 612 3 is_stmt 0 view .LVU233
 737              	.LBE165:
 738              	.LBE166:
 375:lib/chibios/os/rt/src/chmtx.c ****       mp->owner = tp;
 739              		.loc 2 375 7 is_stmt 1 view .LVU234
 376:lib/chibios/os/rt/src/chmtx.c ****       mp->next = tp->mtxlist;
 740              		.loc 2 376 16 is_stmt 0 view .LVU235
 741 0022 DA69     		ldr	r2, [r3, #28]
 375:lib/chibios/os/rt/src/chmtx.c ****       mp->owner = tp;
 742              		.loc 2 375 17 view .LVU236
 743 0024 8360     		str	r3, [r0, #8]
 744              		.loc 2 376 7 is_stmt 1 view .LVU237
 745              		.loc 2 376 16 is_stmt 0 view .LVU238
 746 0026 C260     		str	r2, [r0, #12]
 377:lib/chibios/os/rt/src/chmtx.c ****       tp->mtxlist = mp;
 747              		.loc 2 377 7 is_stmt 1 view .LVU239
 748              		.loc 2 377 19 is_stmt 0 view .LVU240
 749 0028 D861     		str	r0, [r3, #28]
 378:lib/chibios/os/rt/src/chmtx.c **** 
 379:lib/chibios/os/rt/src/chmtx.c ****       /* Note, not using chSchWakeupS() because that function expects the
 380:lib/chibios/os/rt/src/chmtx.c ****          current thread to have the higher or equal priority than the ones
 381:lib/chibios/os/rt/src/chmtx.c ****          in the ready list. This is not necessarily true here because we
 382:lib/chibios/os/rt/src/chmtx.c ****          just changed priority.*/
 383:lib/chibios/os/rt/src/chmtx.c ****       (void) chSchReadyI(tp);
 750              		.loc 2 383 7 is_stmt 1 view .LVU241
 751              		.loc 2 383 14 is_stmt 0 view .LVU242
 752 002a 1846     		mov	r0, r3
 753              	.LVL41:
 754              		.loc 2 383 14 view .LVU243
 755 002c FFF7FEFF 		bl	chSchReadyI
 756              	.LVL42:
 384:lib/chibios/os/rt/src/chmtx.c ****       chSchRescheduleS();
 757              		.loc 2 384 7 is_stmt 1 view .LVU244
 758 0030 FFF7FEFF 		bl	chSchRescheduleS
 759              	.LVL43:
 760              	.L28:
 761              		.loc 2 384 7 is_stmt 0 view .LVU245
 762              	.LBE162:
 385:lib/chibios/os/rt/src/chmtx.c ****     }
 386:lib/chibios/os/rt/src/chmtx.c ****     else {
 387:lib/chibios/os/rt/src/chmtx.c ****       mp->owner = NULL;
 388:lib/chibios/os/rt/src/chmtx.c ****     }
 389:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 390:lib/chibios/os/rt/src/chmtx.c ****   }
 391:lib/chibios/os/rt/src/chmtx.c **** #endif
 392:lib/chibios/os/rt/src/chmtx.c **** 
 393:lib/chibios/os/rt/src/chmtx.c ****   chSysUnlock();
 763              		.loc 2 393 3 is_stmt 1 view .LVU246
 764              	.LBB171:
 765              	.LBI171:
 365:./lib/chibios/os/rt/include/chsys.h **** 
 766              		.loc 3 365 20 view .LVU247
 767              	.LBB172:
 367:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 768              		.loc 3 367 22 view .LVU248
 368:./lib/chibios/os/rt/include/chsys.h **** 
 769              		.loc 3 368 33 view .LVU249
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 770              		.loc 3 374 3 view .LVU250
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 771              		.loc 3 374 3 view .LVU251
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 772              		.loc 3 374 3 view .LVU252
 773              		.loc 3 378 3 view .LVU253
 774              	.LBB173:
 775              	.LBI173:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 776              		.loc 4 693 27 view .LVU254
 777              	.LBE173:
 778              	.LBE172:
 779              	.LBE171:
 780              		.loc 4 696 3 view .LVU255
 781              	.LBB178:
 782              	.LBB177:
 783              	.LBB176:
 784              	.LBB174:
 785              	.LBI174:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 786              		.loc 5 491 27 view .LVU256
 787              	.LBB175:
 788              		.loc 5 493 3 view .LVU257
 789 0034 0023     		movs	r3, #0
 790              		.syntax unified
 791              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 792 0036 83F31188 		MSR basepri, r3
 793              	@ 0 "" 2
 794              	.LVL44:
 795              		.loc 5 493 3 is_stmt 0 view .LVU258
 796              		.thumb
 797              		.syntax unified
 798              	.LBE175:
 799              	.LBE174:
 800              	.LBE176:
 801              	.LBE177:
 802              	.LBE178:
 394:lib/chibios/os/rt/src/chmtx.c **** }
 803              		.loc 2 394 1 view .LVU259
 804 003a 38BD     		pop	{r3, r4, r5, pc}
 805              	.LVL45:
 806              	.L27:
 807              	.LBB179:
 358:lib/chibios/os/rt/src/chmtx.c ****             (lmp->queue.next->prio > newprio)) {
 808              		.loc 2 358 9 is_stmt 1 view .LVU260
 809              	.LBB167:
 810              	.LBI167:
 128:./lib/chibios/os/rt/include/chmtx.h **** 
 811              		.loc 6 128 20 view .LVU261
 812              	.LBB168:
 130:./lib/chibios/os/rt/include/chmtx.h **** 
 813              		.loc 6 130 21 view .LVU262
 814              		.loc 6 132 3 view .LVU263
 815              	.LBB169:
 816              	.LBI169:
 564:./lib/chibios/os/rt/include/chschd.h **** 
 817              		.loc 1 564 20 view .LVU264
 818              	.LBB170:
 566:./lib/chibios/os/rt/include/chschd.h **** }
 819              		.loc 1 566 3 view .LVU265
 566:./lib/chibios/os/rt/include/chschd.h **** }
 820              		.loc 1 566 20 is_stmt 0 view .LVU266
 821 003c 1568     		ldr	r5, [r2]
 822              	.LVL46:
 566:./lib/chibios/os/rt/include/chschd.h **** }
 823              		.loc 1 566 20 view .LVU267
 824              	.LBE170:
 825              	.LBE169:
 826              	.LBE168:
 827              	.LBE167:
 358:lib/chibios/os/rt/src/chmtx.c ****             (lmp->queue.next->prio > newprio)) {
 828              		.loc 2 358 12 view .LVU268
 829 003e AA42     		cmp	r2, r5
 830 0040 03D0     		beq	.L26
 831 0042 AD68     		ldr	r5, [r5, #8]
 832 0044 AC42     		cmp	r4, r5
 833 0046 38BF     		it	cc
 834 0048 2C46     		movcc	r4, r5
 835              	.LVL47:
 836              	.L26:
 362:lib/chibios/os/rt/src/chmtx.c ****       }
 837              		.loc 2 362 9 is_stmt 1 view .LVU269
 362:lib/chibios/os/rt/src/chmtx.c ****       }
 838              		.loc 2 362 13 is_stmt 0 view .LVU270
 839 004a D268     		ldr	r2, [r2, #12]
 840              	.LVL48:
 362:lib/chibios/os/rt/src/chmtx.c ****       }
 841              		.loc 2 362 13 view .LVU271
 842 004c E4E7     		b	.L25
 843              	.LVL49:
 844              	.L24:
 362:lib/chibios/os/rt/src/chmtx.c ****       }
 845              		.loc 2 362 13 view .LVU272
 846              	.LBE179:
 387:lib/chibios/os/rt/src/chmtx.c ****     }
 847              		.loc 2 387 7 is_stmt 1 view .LVU273
 387:lib/chibios/os/rt/src/chmtx.c ****     }
 848              		.loc 2 387 17 is_stmt 0 view .LVU274
 849 004e 0022     		movs	r2, #0
 850 0050 9A60     		str	r2, [r3, #8]
 851 0052 EFE7     		b	.L28
 852              	.L30:
 853              		.align	2
 854              	.L29:
 855 0054 00000000 		.word	ch
 856              		.cfi_endproc
 857              	.LFE244:
 859              		.section	.text.chMtxUnlockS,"ax",%progbits
 860              		.align	1
 861              		.global	chMtxUnlockS
 862              		.syntax unified
 863              		.thumb
 864              		.thumb_func
 865              		.fpu fpv4-sp-d16
 867              	chMtxUnlockS:
 868              	.LVL50:
 869              	.LFB245:
 395:lib/chibios/os/rt/src/chmtx.c **** 
 396:lib/chibios/os/rt/src/chmtx.c **** /**
 397:lib/chibios/os/rt/src/chmtx.c ****  * @brief   Unlocks the specified mutex.
 398:lib/chibios/os/rt/src/chmtx.c ****  * @note    Mutexes must be unlocked in reverse lock order. Violating this
 399:lib/chibios/os/rt/src/chmtx.c ****  *          rules will result in a panic if assertions are enabled.
 400:lib/chibios/os/rt/src/chmtx.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 401:lib/chibios/os/rt/src/chmtx.c ****  * @post    The mutex is unlocked and removed from the per-thread stack of
 402:lib/chibios/os/rt/src/chmtx.c ****  *          owned mutexes.
 403:lib/chibios/os/rt/src/chmtx.c ****  * @post    This function does not reschedule so a call to a rescheduling
 404:lib/chibios/os/rt/src/chmtx.c ****  *          function must be performed before unlocking the kernel.
 405:lib/chibios/os/rt/src/chmtx.c ****  *
 406:lib/chibios/os/rt/src/chmtx.c ****  * @param[in] mp        pointer to the @p mutex_t structure
 407:lib/chibios/os/rt/src/chmtx.c ****  *
 408:lib/chibios/os/rt/src/chmtx.c ****  * @sclass
 409:lib/chibios/os/rt/src/chmtx.c ****  */
 410:lib/chibios/os/rt/src/chmtx.c **** void chMtxUnlockS(mutex_t *mp) {
 870              		.loc 2 410 32 is_stmt 1 view -0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 0
 873              		@ frame_needed = 0, uses_anonymous_args = 0
 874              		@ link register save eliminated.
 411:lib/chibios/os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 875              		.loc 2 411 3 view .LVU276
 876              		.loc 2 411 13 is_stmt 0 view .LVU277
 877 0000 114B     		ldr	r3, .L36
 412:lib/chibios/os/rt/src/chmtx.c ****   mutex_t *lmp;
 413:lib/chibios/os/rt/src/chmtx.c **** 
 414:lib/chibios/os/rt/src/chmtx.c ****   chDbgCheckClassS();
 415:lib/chibios/os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 416:lib/chibios/os/rt/src/chmtx.c **** 
 417:lib/chibios/os/rt/src/chmtx.c ****   chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 418:lib/chibios/os/rt/src/chmtx.c ****   chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 419:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 420:lib/chibios/os/rt/src/chmtx.c ****   chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");
 421:lib/chibios/os/rt/src/chmtx.c **** 
 422:lib/chibios/os/rt/src/chmtx.c ****   if (--mp->cnt == (cnt_t)0) {
 423:lib/chibios/os/rt/src/chmtx.c **** #endif
 424:lib/chibios/os/rt/src/chmtx.c **** 
 425:lib/chibios/os/rt/src/chmtx.c ****     chDbgAssert(ctp->mtxlist == mp, "not next in list");
 426:lib/chibios/os/rt/src/chmtx.c **** 
 427:lib/chibios/os/rt/src/chmtx.c ****     /* Removes the top mutex from the thread's owned mutexes list and marks
 428:lib/chibios/os/rt/src/chmtx.c ****        it as not owned. Note, it is assumed to be the same mutex passed as
 429:lib/chibios/os/rt/src/chmtx.c ****        parameter of this function.*/
 430:lib/chibios/os/rt/src/chmtx.c ****     ctp->mtxlist = mp->next;
 878              		.loc 2 430 22 view .LVU278
 879 0002 C268     		ldr	r2, [r0, #12]
 411:lib/chibios/os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 880              		.loc 2 411 13 view .LVU279
 881 0004 1969     		ldr	r1, [r3, #16]
 882              	.LVL51:
 412:lib/chibios/os/rt/src/chmtx.c ****   mutex_t *lmp;
 883              		.loc 2 412 3 is_stmt 1 view .LVU280
 414:lib/chibios/os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 884              		.loc 2 414 21 view .LVU281
 415:lib/chibios/os/rt/src/chmtx.c **** 
 885              		.loc 2 415 3 view .LVU282
 415:lib/chibios/os/rt/src/chmtx.c **** 
 886              		.loc 2 415 3 view .LVU283
 415:lib/chibios/os/rt/src/chmtx.c **** 
 887              		.loc 2 415 3 view .LVU284
 417:lib/chibios/os/rt/src/chmtx.c ****   chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 888              		.loc 2 417 3 view .LVU285
 417:lib/chibios/os/rt/src/chmtx.c ****   chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 889              		.loc 2 417 3 view .LVU286
 417:lib/chibios/os/rt/src/chmtx.c ****   chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 890              		.loc 2 417 3 view .LVU287
 418:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 891              		.loc 2 418 3 view .LVU288
 418:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 892              		.loc 2 418 3 view .LVU289
 418:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 893              		.loc 2 418 3 view .LVU290
 425:lib/chibios/os/rt/src/chmtx.c **** 
 894              		.loc 2 425 5 view .LVU291
 425:lib/chibios/os/rt/src/chmtx.c **** 
 895              		.loc 2 425 5 view .LVU292
 425:lib/chibios/os/rt/src/chmtx.c **** 
 896              		.loc 2 425 5 view .LVU293
 897              		.loc 2 430 5 view .LVU294
 898              	.LBB180:
 899              	.LBB181:
 900              	.LBB182:
 901              	.LBB183:
 566:./lib/chibios/os/rt/include/chschd.h **** }
 902              		.loc 1 566 20 is_stmt 0 view .LVU295
 903 0006 0368     		ldr	r3, [r0]
 904              	.LBE183:
 905              	.LBE182:
 906              	.LBE181:
 907              	.LBE180:
 431:lib/chibios/os/rt/src/chmtx.c **** 
 432:lib/chibios/os/rt/src/chmtx.c ****     /* If a thread is waiting on the mutex then the fun part begins.*/
 433:lib/chibios/os/rt/src/chmtx.c ****     if (chMtxQueueNotEmptyS(mp)) {
 908              		.loc 2 433 8 view .LVU296
 909 0008 8342     		cmp	r3, r0
 410:lib/chibios/os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 910              		.loc 2 410 32 view .LVU297
 911 000a 30B4     		push	{r4, r5}
 912              		.cfi_def_cfa_offset 8
 913              		.cfi_offset 4, -8
 914              		.cfi_offset 5, -4
 430:lib/chibios/os/rt/src/chmtx.c **** 
 915              		.loc 2 430 18 view .LVU298
 916 000c CA61     		str	r2, [r1, #28]
 917              		.loc 2 433 5 is_stmt 1 view .LVU299
 918              	.LVL52:
 919              	.LBB187:
 920              	.LBI180:
 128:./lib/chibios/os/rt/include/chmtx.h **** 
 921              		.loc 6 128 20 view .LVU300
 922              	.LBB186:
 130:./lib/chibios/os/rt/include/chmtx.h **** 
 923              		.loc 6 130 21 view .LVU301
 924              		.loc 6 132 3 view .LVU302
 925              	.LBB185:
 926              	.LBI182:
 564:./lib/chibios/os/rt/include/chschd.h **** 
 927              		.loc 1 564 20 view .LVU303
 928              	.LBB184:
 566:./lib/chibios/os/rt/include/chschd.h **** }
 929              		.loc 1 566 3 view .LVU304
 566:./lib/chibios/os/rt/include/chschd.h **** }
 930              		.loc 1 566 3 is_stmt 0 view .LVU305
 931              	.LBE184:
 932              	.LBE185:
 933              	.LBE186:
 934              	.LBE187:
 935              		.loc 2 433 8 view .LVU306
 936 000e 16D0     		beq	.L32
 937              	.LBB188:
 434:lib/chibios/os/rt/src/chmtx.c ****       thread_t *tp;
 938              		.loc 2 434 7 is_stmt 1 view .LVU307
 435:lib/chibios/os/rt/src/chmtx.c **** 
 436:lib/chibios/os/rt/src/chmtx.c ****       /* Recalculates the optimal thread priority by scanning the owned
 437:lib/chibios/os/rt/src/chmtx.c ****          mutexes list.*/
 438:lib/chibios/os/rt/src/chmtx.c ****       tprio_t newprio = ctp->realprio;
 939              		.loc 2 438 7 view .LVU308
 940              		.loc 2 438 15 is_stmt 0 view .LVU309
 941 0010 0C6A     		ldr	r4, [r1, #32]
 942              	.LVL53:
 439:lib/chibios/os/rt/src/chmtx.c ****       lmp = ctp->mtxlist;
 943              		.loc 2 439 7 is_stmt 1 view .LVU310
 440:lib/chibios/os/rt/src/chmtx.c ****       while (lmp != NULL) {
 944              		.loc 2 440 7 view .LVU311
 945              	.L33:
 946              		.loc 2 440 13 view .LVU312
 947 0012 5AB9     		cbnz	r2, .L35
 441:lib/chibios/os/rt/src/chmtx.c ****         /* If the highest priority thread waiting in the mutexes list has a
 442:lib/chibios/os/rt/src/chmtx.c ****            greater priority than the current thread base priority then the
 443:lib/chibios/os/rt/src/chmtx.c ****            final priority will have at least that priority.*/
 444:lib/chibios/os/rt/src/chmtx.c ****         if (chMtxQueueNotEmptyS(lmp) &&
 445:lib/chibios/os/rt/src/chmtx.c ****             (lmp->queue.next->prio > newprio)) {
 446:lib/chibios/os/rt/src/chmtx.c ****           newprio = lmp->queue.next->prio;
 447:lib/chibios/os/rt/src/chmtx.c ****         }
 448:lib/chibios/os/rt/src/chmtx.c ****         lmp = lmp->next;
 449:lib/chibios/os/rt/src/chmtx.c ****       }
 450:lib/chibios/os/rt/src/chmtx.c **** 
 451:lib/chibios/os/rt/src/chmtx.c ****       /* Assigns to the current thread the highest priority among all the
 452:lib/chibios/os/rt/src/chmtx.c ****          waiting threads.*/
 453:lib/chibios/os/rt/src/chmtx.c ****       ctp->prio = newprio;
 948              		.loc 2 453 7 view .LVU313
 949              	.LBB189:
 950              	.LBB190:
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 951              		.loc 1 609 36 is_stmt 0 view .LVU314
 952 0014 1A68     		ldr	r2, [r3]
 953              	.LVL54:
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 954              		.loc 1 609 36 view .LVU315
 955              	.LBE190:
 956              	.LBE189:
 957              		.loc 2 453 17 view .LVU316
 958 0016 8C60     		str	r4, [r1, #8]
 454:lib/chibios/os/rt/src/chmtx.c **** 
 455:lib/chibios/os/rt/src/chmtx.c ****       /* Awakens the highest priority thread waiting for the unlocked mutex and
 456:lib/chibios/os/rt/src/chmtx.c ****          assigns the mutex to it.*/
 457:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 458:lib/chibios/os/rt/src/chmtx.c ****       mp->cnt = (cnt_t)1;
 459:lib/chibios/os/rt/src/chmtx.c **** #endif
 460:lib/chibios/os/rt/src/chmtx.c ****       tp = queue_fifo_remove(&mp->queue);
 959              		.loc 2 460 7 is_stmt 1 view .LVU317
 960              	.LVL55:
 961              	.LBB192:
 962              	.LBI189:
 606:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 963              		.loc 1 606 25 view .LVU318
 964              	.LBB191:
 607:./lib/chibios/os/rt/include/chschd.h **** 
 965              		.loc 1 607 3 view .LVU319
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 966              		.loc 1 609 3 view .LVU320
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 967              		.loc 1 609 25 is_stmt 0 view .LVU321
 968 0018 0260     		str	r2, [r0]
 610:./lib/chibios/os/rt/include/chschd.h **** 
 969              		.loc 1 610 3 is_stmt 1 view .LVU322
 610:./lib/chibios/os/rt/include/chschd.h **** 
 970              		.loc 1 610 25 is_stmt 0 view .LVU323
 971 001a 5060     		str	r0, [r2, #4]
 612:./lib/chibios/os/rt/include/chschd.h **** }
 972              		.loc 1 612 3 is_stmt 1 view .LVU324
 973              	.LVL56:
 612:./lib/chibios/os/rt/include/chschd.h **** }
 974              		.loc 1 612 3 is_stmt 0 view .LVU325
 975              	.LBE191:
 976              	.LBE192:
 461:lib/chibios/os/rt/src/chmtx.c ****       mp->owner = tp;
 977              		.loc 2 461 7 is_stmt 1 view .LVU326
 462:lib/chibios/os/rt/src/chmtx.c ****       mp->next = tp->mtxlist;
 978              		.loc 2 462 16 is_stmt 0 view .LVU327
 979 001c DA69     		ldr	r2, [r3, #28]
 461:lib/chibios/os/rt/src/chmtx.c ****       mp->owner = tp;
 980              		.loc 2 461 17 view .LVU328
 981 001e 8360     		str	r3, [r0, #8]
 982              		.loc 2 462 7 is_stmt 1 view .LVU329
 983              		.loc 2 462 16 is_stmt 0 view .LVU330
 984 0020 C260     		str	r2, [r0, #12]
 463:lib/chibios/os/rt/src/chmtx.c ****       tp->mtxlist = mp;
 985              		.loc 2 463 7 is_stmt 1 view .LVU331
 986              	.LBE188:
 464:lib/chibios/os/rt/src/chmtx.c ****       (void) chSchReadyI(tp);
 465:lib/chibios/os/rt/src/chmtx.c ****     }
 466:lib/chibios/os/rt/src/chmtx.c ****     else {
 467:lib/chibios/os/rt/src/chmtx.c ****       mp->owner = NULL;
 468:lib/chibios/os/rt/src/chmtx.c ****     }
 469:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 470:lib/chibios/os/rt/src/chmtx.c ****   }
 471:lib/chibios/os/rt/src/chmtx.c **** #endif
 472:lib/chibios/os/rt/src/chmtx.c **** }
 987              		.loc 2 472 1 is_stmt 0 view .LVU332
 988 0022 30BC     		pop	{r4, r5}
 989              		.cfi_remember_state
 990              		.cfi_restore 5
 991              		.cfi_restore 4
 992              		.cfi_def_cfa_offset 0
 993              	.LVL57:
 994              	.LBB197:
 463:lib/chibios/os/rt/src/chmtx.c ****       tp->mtxlist = mp;
 995              		.loc 2 463 19 view .LVU333
 996 0024 D861     		str	r0, [r3, #28]
 464:lib/chibios/os/rt/src/chmtx.c ****       (void) chSchReadyI(tp);
 997              		.loc 2 464 7 is_stmt 1 view .LVU334
 464:lib/chibios/os/rt/src/chmtx.c ****       (void) chSchReadyI(tp);
 998              		.loc 2 464 14 is_stmt 0 view .LVU335
 999 0026 1846     		mov	r0, r3
 1000              	.LVL58:
 464:lib/chibios/os/rt/src/chmtx.c ****       (void) chSchReadyI(tp);
 1001              		.loc 2 464 14 view .LVU336
 1002 0028 FFF7FEBF 		b	chSchReadyI
 1003              	.LVL59:
 1004              	.L35:
 1005              		.cfi_restore_state
 444:lib/chibios/os/rt/src/chmtx.c ****             (lmp->queue.next->prio > newprio)) {
 1006              		.loc 2 444 9 is_stmt 1 view .LVU337
 1007              	.LBB193:
 1008              	.LBI193:
 128:./lib/chibios/os/rt/include/chmtx.h **** 
 1009              		.loc 6 128 20 view .LVU338
 1010              	.LBB194:
 130:./lib/chibios/os/rt/include/chmtx.h **** 
 1011              		.loc 6 130 21 view .LVU339
 1012              		.loc 6 132 3 view .LVU340
 1013              	.LBB195:
 1014              	.LBI195:
 564:./lib/chibios/os/rt/include/chschd.h **** 
 1015              		.loc 1 564 20 view .LVU341
 1016              	.LBB196:
 566:./lib/chibios/os/rt/include/chschd.h **** }
 1017              		.loc 1 566 3 view .LVU342
 566:./lib/chibios/os/rt/include/chschd.h **** }
 1018              		.loc 1 566 20 is_stmt 0 view .LVU343
 1019 002c 1568     		ldr	r5, [r2]
 1020              	.LVL60:
 566:./lib/chibios/os/rt/include/chschd.h **** }
 1021              		.loc 1 566 20 view .LVU344
 1022              	.LBE196:
 1023              	.LBE195:
 1024              	.LBE194:
 1025              	.LBE193:
 444:lib/chibios/os/rt/src/chmtx.c ****             (lmp->queue.next->prio > newprio)) {
 1026              		.loc 2 444 12 view .LVU345
 1027 002e AA42     		cmp	r2, r5
 1028 0030 03D0     		beq	.L34
 1029 0032 AD68     		ldr	r5, [r5, #8]
 1030 0034 AC42     		cmp	r4, r5
 1031 0036 38BF     		it	cc
 1032 0038 2C46     		movcc	r4, r5
 1033              	.LVL61:
 1034              	.L34:
 448:lib/chibios/os/rt/src/chmtx.c ****       }
 1035              		.loc 2 448 9 is_stmt 1 view .LVU346
 448:lib/chibios/os/rt/src/chmtx.c ****       }
 1036              		.loc 2 448 13 is_stmt 0 view .LVU347
 1037 003a D268     		ldr	r2, [r2, #12]
 1038              	.LVL62:
 448:lib/chibios/os/rt/src/chmtx.c ****       }
 1039              		.loc 2 448 13 view .LVU348
 1040 003c E9E7     		b	.L33
 1041              	.LVL63:
 1042              	.L32:
 448:lib/chibios/os/rt/src/chmtx.c ****       }
 1043              		.loc 2 448 13 view .LVU349
 1044              	.LBE197:
 467:lib/chibios/os/rt/src/chmtx.c ****     }
 1045              		.loc 2 467 7 is_stmt 1 view .LVU350
 467:lib/chibios/os/rt/src/chmtx.c ****     }
 1046              		.loc 2 467 17 is_stmt 0 view .LVU351
 1047 003e 0022     		movs	r2, #0
 1048              		.loc 2 472 1 view .LVU352
 1049 0040 30BC     		pop	{r4, r5}
 1050              		.cfi_restore 5
 1051              		.cfi_restore 4
 1052              		.cfi_def_cfa_offset 0
 467:lib/chibios/os/rt/src/chmtx.c ****     }
 1053              		.loc 2 467 17 view .LVU353
 1054 0042 9A60     		str	r2, [r3, #8]
 1055              		.loc 2 472 1 view .LVU354
 1056 0044 7047     		bx	lr
 1057              	.L37:
 1058 0046 00BF     		.align	2
 1059              	.L36:
 1060 0048 00000000 		.word	ch
 1061              		.cfi_endproc
 1062              	.LFE245:
 1064              		.section	.text.chMtxUnlockAllS,"ax",%progbits
 1065              		.align	1
 1066              		.global	chMtxUnlockAllS
 1067              		.syntax unified
 1068              		.thumb
 1069              		.thumb_func
 1070              		.fpu fpv4-sp-d16
 1072              	chMtxUnlockAllS:
 1073              	.LFB246:
 473:lib/chibios/os/rt/src/chmtx.c **** 
 474:lib/chibios/os/rt/src/chmtx.c **** /**
 475:lib/chibios/os/rt/src/chmtx.c ****  * @brief   Unlocks all mutexes owned by the invoking thread.
 476:lib/chibios/os/rt/src/chmtx.c ****  * @post    The stack of owned mutexes is emptied and all the found
 477:lib/chibios/os/rt/src/chmtx.c ****  *          mutexes are unlocked.
 478:lib/chibios/os/rt/src/chmtx.c ****  * @post    This function does not reschedule so a call to a rescheduling
 479:lib/chibios/os/rt/src/chmtx.c ****  *          function must be performed before unlocking the kernel.
 480:lib/chibios/os/rt/src/chmtx.c ****  * @note    This function is <b>MUCH MORE</b> efficient than releasing the
 481:lib/chibios/os/rt/src/chmtx.c ****  *          mutexes one by one and not just because the call overhead,
 482:lib/chibios/os/rt/src/chmtx.c ****  *          this function does not have any overhead related to the priority
 483:lib/chibios/os/rt/src/chmtx.c ****  *          inheritance mechanism.
 484:lib/chibios/os/rt/src/chmtx.c ****  *
 485:lib/chibios/os/rt/src/chmtx.c ****  * @sclass
 486:lib/chibios/os/rt/src/chmtx.c ****  */
 487:lib/chibios/os/rt/src/chmtx.c **** void chMtxUnlockAllS(void) {
 1074              		.loc 2 487 28 is_stmt 1 view -0
 1075              		.cfi_startproc
 1076              		@ args = 0, pretend = 0, frame = 0
 1077              		@ frame_needed = 0, uses_anonymous_args = 0
 488:lib/chibios/os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 1078              		.loc 2 488 3 view .LVU356
 487:lib/chibios/os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 1079              		.loc 2 487 28 is_stmt 0 view .LVU357
 1080 0000 38B5     		push	{r3, r4, r5, lr}
 1081              		.cfi_def_cfa_offset 16
 1082              		.cfi_offset 3, -16
 1083              		.cfi_offset 4, -12
 1084              		.cfi_offset 5, -8
 1085              		.cfi_offset 14, -4
 1086              		.loc 2 488 13 view .LVU358
 1087 0002 104B     		ldr	r3, .L44
 1088 0004 1C69     		ldr	r4, [r3, #16]
 1089              	.LVL64:
 489:lib/chibios/os/rt/src/chmtx.c **** 
 490:lib/chibios/os/rt/src/chmtx.c ****   if (ctp->mtxlist != NULL) {
 1090              		.loc 2 490 3 is_stmt 1 view .LVU359
 1091              		.loc 2 490 6 is_stmt 0 view .LVU360
 1092 0006 E369     		ldr	r3, [r4, #28]
 1093 0008 D3B1     		cbz	r3, .L38
 1094              	.LBB198:
 491:lib/chibios/os/rt/src/chmtx.c ****     do {
 492:lib/chibios/os/rt/src/chmtx.c ****       mutex_t *mp = ctp->mtxlist;
 493:lib/chibios/os/rt/src/chmtx.c ****       ctp->mtxlist = mp->next;
 494:lib/chibios/os/rt/src/chmtx.c ****       if (chMtxQueueNotEmptyS(mp)) {
 495:lib/chibios/os/rt/src/chmtx.c ****         thread_t *tp;
 496:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 497:lib/chibios/os/rt/src/chmtx.c ****         mp->cnt = (cnt_t)1;
 498:lib/chibios/os/rt/src/chmtx.c **** #endif
 499:lib/chibios/os/rt/src/chmtx.c ****         tp = queue_fifo_remove(&mp->queue);
 500:lib/chibios/os/rt/src/chmtx.c ****         mp->owner   = tp;
 501:lib/chibios/os/rt/src/chmtx.c ****         mp->next    = tp->mtxlist;
 502:lib/chibios/os/rt/src/chmtx.c ****         tp->mtxlist = mp;
 503:lib/chibios/os/rt/src/chmtx.c ****         (void) chSchReadyI(tp);
 504:lib/chibios/os/rt/src/chmtx.c ****       }
 505:lib/chibios/os/rt/src/chmtx.c ****       else {
 506:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 507:lib/chibios/os/rt/src/chmtx.c ****         mp->cnt = (cnt_t)0;
 508:lib/chibios/os/rt/src/chmtx.c **** #endif
 509:lib/chibios/os/rt/src/chmtx.c ****         mp->owner = NULL;
 1095              		.loc 2 509 19 view .LVU361
 1096 000a 0025     		movs	r5, #0
 1097              	.L42:
 1098              		.loc 2 509 19 view .LVU362
 1099              	.LBE198:
 491:lib/chibios/os/rt/src/chmtx.c ****     do {
 1100              		.loc 2 491 5 is_stmt 1 view .LVU363
 1101              	.LBB210:
 492:lib/chibios/os/rt/src/chmtx.c ****       ctp->mtxlist = mp->next;
 1102              		.loc 2 492 7 view .LVU364
 492:lib/chibios/os/rt/src/chmtx.c ****       ctp->mtxlist = mp->next;
 1103              		.loc 2 492 16 is_stmt 0 view .LVU365
 1104 000c E369     		ldr	r3, [r4, #28]
 1105              	.LVL65:
 493:lib/chibios/os/rt/src/chmtx.c ****       if (chMtxQueueNotEmptyS(mp)) {
 1106              		.loc 2 493 7 is_stmt 1 view .LVU366
 1107              	.LBB199:
 1108              	.LBB200:
 1109              	.LBB201:
 1110              	.LBB202:
 566:./lib/chibios/os/rt/include/chschd.h **** }
 1111              		.loc 1 566 20 is_stmt 0 view .LVU367
 1112 000e 1868     		ldr	r0, [r3]
 1113              	.LBE202:
 1114              	.LBE201:
 1115              	.LBE200:
 1116              	.LBE199:
 493:lib/chibios/os/rt/src/chmtx.c ****       if (chMtxQueueNotEmptyS(mp)) {
 1117              		.loc 2 493 20 view .LVU368
 1118 0010 DA68     		ldr	r2, [r3, #12]
 1119 0012 E261     		str	r2, [r4, #28]
 494:lib/chibios/os/rt/src/chmtx.c ****         thread_t *tp;
 1120              		.loc 2 494 7 is_stmt 1 view .LVU369
 1121              	.LVL66:
 1122              	.LBB206:
 1123              	.LBI199:
 128:./lib/chibios/os/rt/include/chmtx.h **** 
 1124              		.loc 6 128 20 view .LVU370
 1125              	.LBB205:
 130:./lib/chibios/os/rt/include/chmtx.h **** 
 1126              		.loc 6 130 21 view .LVU371
 1127              		.loc 6 132 3 view .LVU372
 1128              	.LBB204:
 1129              	.LBI201:
 564:./lib/chibios/os/rt/include/chschd.h **** 
 1130              		.loc 1 564 20 view .LVU373
 1131              	.LBB203:
 566:./lib/chibios/os/rt/include/chschd.h **** }
 1132              		.loc 1 566 3 view .LVU374
 566:./lib/chibios/os/rt/include/chschd.h **** }
 1133              		.loc 1 566 3 is_stmt 0 view .LVU375
 1134              	.LBE203:
 1135              	.LBE204:
 1136              	.LBE205:
 1137              	.LBE206:
 494:lib/chibios/os/rt/src/chmtx.c ****         thread_t *tp;
 1138              		.loc 2 494 10 view .LVU376
 1139 0014 8342     		cmp	r3, r0
 1140 0016 11D0     		beq	.L40
 1141              	.LBB207:
 495:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 1142              		.loc 2 495 9 is_stmt 1 view .LVU377
 499:lib/chibios/os/rt/src/chmtx.c ****         mp->owner   = tp;
 1143              		.loc 2 499 9 view .LVU378
 1144              	.LVL67:
 1145              	.LBB208:
 1146              	.LBI208:
 606:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 1147              		.loc 1 606 25 view .LVU379
 1148              	.LBB209:
 607:./lib/chibios/os/rt/include/chschd.h **** 
 1149              		.loc 1 607 3 view .LVU380
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 1150              		.loc 1 609 3 view .LVU381
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 1151              		.loc 1 609 36 is_stmt 0 view .LVU382
 1152 0018 0268     		ldr	r2, [r0]
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 1153              		.loc 1 609 25 view .LVU383
 1154 001a 1A60     		str	r2, [r3]
 610:./lib/chibios/os/rt/include/chschd.h **** 
 1155              		.loc 1 610 3 is_stmt 1 view .LVU384
 610:./lib/chibios/os/rt/include/chschd.h **** 
 1156              		.loc 1 610 25 is_stmt 0 view .LVU385
 1157 001c 5360     		str	r3, [r2, #4]
 612:./lib/chibios/os/rt/include/chschd.h **** }
 1158              		.loc 1 612 3 is_stmt 1 view .LVU386
 1159              	.LVL68:
 612:./lib/chibios/os/rt/include/chschd.h **** }
 1160              		.loc 1 612 3 is_stmt 0 view .LVU387
 1161              	.LBE209:
 1162              	.LBE208:
 500:lib/chibios/os/rt/src/chmtx.c ****         mp->next    = tp->mtxlist;
 1163              		.loc 2 500 9 is_stmt 1 view .LVU388
 501:lib/chibios/os/rt/src/chmtx.c ****         tp->mtxlist = mp;
 1164              		.loc 2 501 21 is_stmt 0 view .LVU389
 1165 001e C269     		ldr	r2, [r0, #28]
 500:lib/chibios/os/rt/src/chmtx.c ****         mp->next    = tp->mtxlist;
 1166              		.loc 2 500 21 view .LVU390
 1167 0020 9860     		str	r0, [r3, #8]
 501:lib/chibios/os/rt/src/chmtx.c ****         tp->mtxlist = mp;
 1168              		.loc 2 501 9 is_stmt 1 view .LVU391
 501:lib/chibios/os/rt/src/chmtx.c ****         tp->mtxlist = mp;
 1169              		.loc 2 501 21 is_stmt 0 view .LVU392
 1170 0022 DA60     		str	r2, [r3, #12]
 502:lib/chibios/os/rt/src/chmtx.c ****         (void) chSchReadyI(tp);
 1171              		.loc 2 502 9 is_stmt 1 view .LVU393
 502:lib/chibios/os/rt/src/chmtx.c ****         (void) chSchReadyI(tp);
 1172              		.loc 2 502 21 is_stmt 0 view .LVU394
 1173 0024 C361     		str	r3, [r0, #28]
 503:lib/chibios/os/rt/src/chmtx.c ****       }
 1174              		.loc 2 503 9 is_stmt 1 view .LVU395
 503:lib/chibios/os/rt/src/chmtx.c ****       }
 1175              		.loc 2 503 16 is_stmt 0 view .LVU396
 1176 0026 FFF7FEFF 		bl	chSchReadyI
 1177              	.LVL69:
 1178              	.L41:
 503:lib/chibios/os/rt/src/chmtx.c ****       }
 1179              		.loc 2 503 16 view .LVU397
 1180              	.LBE207:
 1181              	.LBE210:
 510:lib/chibios/os/rt/src/chmtx.c ****       }
 511:lib/chibios/os/rt/src/chmtx.c ****     } while (ctp->mtxlist != NULL);
 1182              		.loc 2 511 13 is_stmt 1 view .LVU398
 1183              		.loc 2 511 5 is_stmt 0 view .LVU399
 1184 002a E369     		ldr	r3, [r4, #28]
 1185 002c 002B     		cmp	r3, #0
 1186 002e EDD1     		bne	.L42
 512:lib/chibios/os/rt/src/chmtx.c ****     ctp->prio = ctp->realprio;
 1187              		.loc 2 512 5 is_stmt 1 view .LVU400
 1188              		.loc 2 512 15 is_stmt 0 view .LVU401
 1189 0030 236A     		ldr	r3, [r4, #32]
 1190 0032 A360     		str	r3, [r4, #8]
 513:lib/chibios/os/rt/src/chmtx.c ****     chSchRescheduleS();
 1191              		.loc 2 513 5 is_stmt 1 view .LVU402
 514:lib/chibios/os/rt/src/chmtx.c ****   }
 515:lib/chibios/os/rt/src/chmtx.c **** }
 1192              		.loc 2 515 1 is_stmt 0 view .LVU403
 1193 0034 BDE83840 		pop	{r3, r4, r5, lr}
 1194              		.cfi_remember_state
 1195              		.cfi_restore 14
 1196              		.cfi_restore 5
 1197              		.cfi_restore 4
 1198              		.cfi_restore 3
 1199              		.cfi_def_cfa_offset 0
 1200              	.LVL70:
 513:lib/chibios/os/rt/src/chmtx.c ****     chSchRescheduleS();
 1201              		.loc 2 513 5 view .LVU404
 1202 0038 FFF7FEBF 		b	chSchRescheduleS
 1203              	.LVL71:
 1204              	.L40:
 1205              		.cfi_restore_state
 1206              	.LBB211:
 509:lib/chibios/os/rt/src/chmtx.c ****       }
 1207              		.loc 2 509 9 is_stmt 1 view .LVU405
 509:lib/chibios/os/rt/src/chmtx.c ****       }
 1208              		.loc 2 509 19 is_stmt 0 view .LVU406
 1209 003c 9D60     		str	r5, [r3, #8]
 1210 003e F4E7     		b	.L41
 1211              	.LVL72:
 1212              	.L38:
 509:lib/chibios/os/rt/src/chmtx.c ****       }
 1213              		.loc 2 509 19 view .LVU407
 1214              	.LBE211:
 1215              		.loc 2 515 1 view .LVU408
 1216 0040 38BD     		pop	{r3, r4, r5, pc}
 1217              	.LVL73:
 1218              	.L45:
 1219              		.loc 2 515 1 view .LVU409
 1220 0042 00BF     		.align	2
 1221              	.L44:
 1222 0044 00000000 		.word	ch
 1223              		.cfi_endproc
 1224              	.LFE246:
 1226              		.section	.text.chMtxUnlockAll,"ax",%progbits
 1227              		.align	1
 1228              		.global	chMtxUnlockAll
 1229              		.syntax unified
 1230              		.thumb
 1231              		.thumb_func
 1232              		.fpu fpv4-sp-d16
 1234              	chMtxUnlockAll:
 1235              	.LFB247:
 516:lib/chibios/os/rt/src/chmtx.c **** 
 517:lib/chibios/os/rt/src/chmtx.c **** /**
 518:lib/chibios/os/rt/src/chmtx.c ****  * @brief   Unlocks all mutexes owned by the invoking thread.
 519:lib/chibios/os/rt/src/chmtx.c ****  * @post    The stack of owned mutexes is emptied and all the found
 520:lib/chibios/os/rt/src/chmtx.c ****  *          mutexes are unlocked.
 521:lib/chibios/os/rt/src/chmtx.c ****  * @note    This function is <b>MUCH MORE</b> efficient than releasing the
 522:lib/chibios/os/rt/src/chmtx.c ****  *          mutexes one by one and not just because the call overhead,
 523:lib/chibios/os/rt/src/chmtx.c ****  *          this function does not have any overhead related to the priority
 524:lib/chibios/os/rt/src/chmtx.c ****  *          inheritance mechanism.
 525:lib/chibios/os/rt/src/chmtx.c ****  *
 526:lib/chibios/os/rt/src/chmtx.c ****  * @api
 527:lib/chibios/os/rt/src/chmtx.c ****  */
 528:lib/chibios/os/rt/src/chmtx.c **** void chMtxUnlockAll(void) {
 1236              		.loc 2 528 27 is_stmt 1 view -0
 1237              		.cfi_startproc
 1238              		@ args = 0, pretend = 0, frame = 0
 1239              		@ frame_needed = 0, uses_anonymous_args = 0
 529:lib/chibios/os/rt/src/chmtx.c **** 
 530:lib/chibios/os/rt/src/chmtx.c ****   chSysLock();
 1240              		.loc 2 530 3 view .LVU411
 1241              	.LBB212:
 1242              	.LBI212:
 353:./lib/chibios/os/rt/include/chsys.h **** 
 1243              		.loc 3 353 20 view .LVU412
 1244              	.LBE212:
 355:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 1245              		.loc 3 355 3 view .LVU413
 1246              	.LBB220:
 1247              	.LBB213:
 1248              	.LBI213:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 1249              		.loc 4 669 27 view .LVU414
 1250              	.LBE213:
 1251              	.LBE220:
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 1252              		.loc 4 677 3 view .LVU415
 1253              	.LVL74:
 1254              	.LBB221:
 1255              	.LBB218:
 1256              	.LBB214:
 1257              	.LBI214:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 1258              		.loc 5 491 27 view .LVU416
 1259              	.LBB215:
 1260              		.loc 5 493 3 view .LVU417
 1261              	.LBE215:
 1262              	.LBE214:
 1263              	.LBE218:
 1264              	.LBE221:
 528:lib/chibios/os/rt/src/chmtx.c **** 
 1265              		.loc 2 528 27 is_stmt 0 view .LVU418
 1266 0000 08B5     		push	{r3, lr}
 1267              		.cfi_def_cfa_offset 8
 1268              		.cfi_offset 3, -8
 1269              		.cfi_offset 14, -4
 1270              	.LBB222:
 1271              	.LBB219:
 1272              	.LBB217:
 1273              	.LBB216:
 1274              		.loc 5 493 3 view .LVU419
 1275 0002 2023     		movs	r3, #32
 1276              		.syntax unified
 1277              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 1278 0004 83F31188 		MSR basepri, r3
 1279              	@ 0 "" 2
 1280              	.LVL75:
 1281              		.loc 5 493 3 view .LVU420
 1282              		.thumb
 1283              		.syntax unified
 1284              	.LBE216:
 1285              	.LBE217:
 1286              	.LBE219:
 1287              	.LBE222:
 356:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 1288              		.loc 3 356 34 is_stmt 1 view .LVU421
 357:./lib/chibios/os/rt/include/chsys.h **** }
 1289              		.loc 3 357 20 view .LVU422
 531:lib/chibios/os/rt/src/chmtx.c ****   chMtxUnlockAllS();
 1290              		.loc 2 531 3 view .LVU423
 1291 0008 FFF7FEFF 		bl	chMtxUnlockAllS
 1292              	.LVL76:
 532:lib/chibios/os/rt/src/chmtx.c ****   chSysUnlock();
 1293              		.loc 2 532 3 view .LVU424
 1294              	.LBB223:
 1295              	.LBI223:
 365:./lib/chibios/os/rt/include/chsys.h **** 
 1296              		.loc 3 365 20 view .LVU425
 1297              	.LBB224:
 367:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 1298              		.loc 3 367 22 view .LVU426
 368:./lib/chibios/os/rt/include/chsys.h **** 
 1299              		.loc 3 368 33 view .LVU427
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1300              		.loc 3 374 3 view .LVU428
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1301              		.loc 3 374 3 view .LVU429
 374:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 1302              		.loc 3 374 3 view .LVU430
 1303              		.loc 3 378 3 view .LVU431
 1304              	.LBB225:
 1305              	.LBI225:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 1306              		.loc 4 693 27 view .LVU432
 1307              	.LBE225:
 1308              	.LBE224:
 1309              	.LBE223:
 1310              		.loc 4 696 3 view .LVU433
 1311              	.LBB230:
 1312              	.LBB229:
 1313              	.LBB228:
 1314              	.LBB226:
 1315              	.LBI226:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 1316              		.loc 5 491 27 view .LVU434
 1317              	.LBB227:
 1318              		.loc 5 493 3 view .LVU435
 1319 000c 0023     		movs	r3, #0
 1320              		.syntax unified
 1321              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 1322 000e 83F31188 		MSR basepri, r3
 1323              	@ 0 "" 2
 1324              	.LVL77:
 1325              		.loc 5 493 3 is_stmt 0 view .LVU436
 1326              		.thumb
 1327              		.syntax unified
 1328              	.LBE227:
 1329              	.LBE226:
 1330              	.LBE228:
 1331              	.LBE229:
 1332              	.LBE230:
 533:lib/chibios/os/rt/src/chmtx.c **** }
 1333              		.loc 2 533 1 view .LVU437
 1334 0012 08BD     		pop	{r3, pc}
 1335              		.cfi_endproc
 1336              	.LFE247:
 1338              		.text
 1339              	.Letext0:
 1340              		.file 7 "c:\\qmk_msys\\mingw64\\arm-none-eabi\\include\\machine\\_default_types.h"
 1341              		.file 8 "c:\\qmk_msys\\mingw64\\arm-none-eabi\\include\\sys\\_stdint.h"
 1342              		.file 9 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 1343              		.file 10 "./lib/chibios/os/rt/include/chsystypes.h"
 1344              		.file 11 "./lib/chibios/os/rt/include/chtime.h"
 1345              		.file 12 "./lib/chibios/os/rt/include/chsem.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmtx.c
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:18     .text.queue_prio_insert:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:25     .text.queue_prio_insert:0000000000000000 queue_prio_insert
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:78     .text.chMtxObjectInit:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:85     .text.chMtxObjectInit:0000000000000000 chMtxObjectInit
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:124    .text.chMtxLockS:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:131    .text.chMtxLockS:0000000000000000 chMtxLockS
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:286    .text.chMtxLockS:000000000000005c $d
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:292    .text.chMtxLock:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:299    .text.chMtxLock:0000000000000000 chMtxLock
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:407    .text.chMtxTryLockS:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:414    .text.chMtxTryLockS:0000000000000000 chMtxTryLockS
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:468    .text.chMtxTryLockS:0000000000000018 $d
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:473    .text.chMtxTryLock:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:480    .text.chMtxTryLock:0000000000000000 chMtxTryLock
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:588    .text.chMtxUnlock:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:595    .text.chMtxUnlock:0000000000000000 chMtxUnlock
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:855    .text.chMtxUnlock:0000000000000054 $d
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:860    .text.chMtxUnlockS:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:867    .text.chMtxUnlockS:0000000000000000 chMtxUnlockS
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:1060   .text.chMtxUnlockS:0000000000000048 $d
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:1065   .text.chMtxUnlockAllS:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:1072   .text.chMtxUnlockAllS:0000000000000000 chMtxUnlockAllS
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:1222   .text.chMtxUnlockAllS:0000000000000044 $d
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:1227   .text.chMtxUnlockAll:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\ccHEXfT3.s:1234   .text.chMtxUnlockAll:0000000000000000 chMtxUnlockAll

UNDEFINED SYMBOLS
chSchReadyI
chSchGoSleepS
ch
chSchRescheduleS

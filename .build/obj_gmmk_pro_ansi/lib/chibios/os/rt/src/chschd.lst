   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 2
  13              		.file	"chschd.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._scheduler_init,"ax",%progbits
  18              		.align	1
  19              		.global	_scheduler_init
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	_scheduler_init:
  27              	.LFB239:
  28              		.file 1 "lib/chibios/os/rt/src/chschd.c"
   1:lib/chibios/os/rt/src/chschd.c **** /*
   2:lib/chibios/os/rt/src/chschd.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:lib/chibios/os/rt/src/chschd.c **** 
   4:lib/chibios/os/rt/src/chschd.c ****     This file is part of ChibiOS.
   5:lib/chibios/os/rt/src/chschd.c **** 
   6:lib/chibios/os/rt/src/chschd.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:lib/chibios/os/rt/src/chschd.c ****     it under the terms of the GNU General Public License as published by
   8:lib/chibios/os/rt/src/chschd.c ****     the Free Software Foundation; either version 3 of the License, or
   9:lib/chibios/os/rt/src/chschd.c ****     (at your option) any later version.
  10:lib/chibios/os/rt/src/chschd.c **** 
  11:lib/chibios/os/rt/src/chschd.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:lib/chibios/os/rt/src/chschd.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:lib/chibios/os/rt/src/chschd.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:lib/chibios/os/rt/src/chschd.c ****     GNU General Public License for more details.
  15:lib/chibios/os/rt/src/chschd.c **** 
  16:lib/chibios/os/rt/src/chschd.c ****     You should have received a copy of the GNU General Public License
  17:lib/chibios/os/rt/src/chschd.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:lib/chibios/os/rt/src/chschd.c **** */
  19:lib/chibios/os/rt/src/chschd.c **** 
  20:lib/chibios/os/rt/src/chschd.c **** /**
  21:lib/chibios/os/rt/src/chschd.c ****  * @file    rt/src/chschd.c
  22:lib/chibios/os/rt/src/chschd.c ****  * @brief   Scheduler code.
  23:lib/chibios/os/rt/src/chschd.c ****  *
  24:lib/chibios/os/rt/src/chschd.c ****  * @addtogroup scheduler
  25:lib/chibios/os/rt/src/chschd.c ****  * @details This module provides the default portable scheduler code.
  26:lib/chibios/os/rt/src/chschd.c ****  * @{
  27:lib/chibios/os/rt/src/chschd.c ****  */
  28:lib/chibios/os/rt/src/chschd.c **** 
  29:lib/chibios/os/rt/src/chschd.c **** #include "ch.h"
  30:lib/chibios/os/rt/src/chschd.c **** 
  31:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  32:lib/chibios/os/rt/src/chschd.c **** /* Module local definitions.                                                 */
  33:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  34:lib/chibios/os/rt/src/chschd.c **** 
  35:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  36:lib/chibios/os/rt/src/chschd.c **** /* Module exported variables.                                                */
  37:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  38:lib/chibios/os/rt/src/chschd.c **** 
  39:lib/chibios/os/rt/src/chschd.c **** /**
  40:lib/chibios/os/rt/src/chschd.c ****  * @brief   System data structures.
  41:lib/chibios/os/rt/src/chschd.c ****  */
  42:lib/chibios/os/rt/src/chschd.c **** ch_system_t ch;
  43:lib/chibios/os/rt/src/chschd.c **** 
  44:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  45:lib/chibios/os/rt/src/chschd.c **** /* Module local types.                                                       */
  46:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  47:lib/chibios/os/rt/src/chschd.c **** 
  48:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  49:lib/chibios/os/rt/src/chschd.c **** /* Module local variables.                                                   */
  50:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  51:lib/chibios/os/rt/src/chschd.c **** 
  52:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  53:lib/chibios/os/rt/src/chschd.c **** /* Module local functions.                                                   */
  54:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  55:lib/chibios/os/rt/src/chschd.c **** 
  56:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  57:lib/chibios/os/rt/src/chschd.c **** /* Module exported functions.                                                */
  58:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  59:lib/chibios/os/rt/src/chschd.c **** 
  60:lib/chibios/os/rt/src/chschd.c **** /**
  61:lib/chibios/os/rt/src/chschd.c ****  * @brief   Scheduler initialization.
  62:lib/chibios/os/rt/src/chschd.c ****  *
  63:lib/chibios/os/rt/src/chschd.c ****  * @notapi
  64:lib/chibios/os/rt/src/chschd.c ****  */
  65:lib/chibios/os/rt/src/chschd.c **** void _scheduler_init(void) {
  29              		.loc 1 65 28 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  66:lib/chibios/os/rt/src/chschd.c **** 
  67:lib/chibios/os/rt/src/chschd.c ****   queue_init(&ch.rlist.queue);
  34              		.loc 1 67 3 view .LVU1
  35              	.LVL0:
  36              	.LBB57:
  37              	.LBI57:
  38              		.file 2 "./lib/chibios/os/rt/include/chschd.h"
   1:./lib/chibios/os/rt/include/chschd.h **** /*
   2:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chschd.h **** 
   4:./lib/chibios/os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chschd.h **** 
   6:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chschd.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chschd.h **** 
  11:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chschd.h **** 
  16:./lib/chibios/os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chschd.h **** */
  19:./lib/chibios/os/rt/include/chschd.h **** 
  20:./lib/chibios/os/rt/include/chschd.h **** /**
  21:./lib/chibios/os/rt/include/chschd.h ****  * @file    rt/include/chschd.h
  22:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:./lib/chibios/os/rt/include/chschd.h ****  *
  24:./lib/chibios/os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:./lib/chibios/os/rt/include/chschd.h ****  * @{
  26:./lib/chibios/os/rt/include/chschd.h ****  */
  27:./lib/chibios/os/rt/include/chschd.h **** 
  28:./lib/chibios/os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:./lib/chibios/os/rt/include/chschd.h **** #define CHSCHD_H
  30:./lib/chibios/os/rt/include/chschd.h **** 
  31:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chschd.h **** 
  35:./lib/chibios/os/rt/include/chschd.h **** /**
  36:./lib/chibios/os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:./lib/chibios/os/rt/include/chschd.h ****  * @{
  38:./lib/chibios/os/rt/include/chschd.h ****  */
  39:./lib/chibios/os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:./lib/chibios/os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  42:./lib/chibios/os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  44:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  45:./lib/chibios/os/rt/include/chschd.h **** 
  46:./lib/chibios/os/rt/include/chschd.h **** /**
  47:./lib/chibios/os/rt/include/chschd.h ****  * @name    Priority constants
  48:./lib/chibios/os/rt/include/chschd.h ****  * @{
  49:./lib/chibios/os/rt/include/chschd.h ****  */
  50:./lib/chibios/os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:./lib/chibios/os/rt/include/chschd.h ****                                                  priority.                  */
  52:./lib/chibios/os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:./lib/chibios/os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:./lib/chibios/os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:./lib/chibios/os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  57:./lib/chibios/os/rt/include/chschd.h **** 
  58:./lib/chibios/os/rt/include/chschd.h **** /**
  59:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread states
  60:./lib/chibios/os/rt/include/chschd.h ****  * @{
  61:./lib/chibios/os/rt/include/chschd.h ****  */
  62:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:./lib/chibios/os/rt/include/chschd.h ****                                                   ready list.               */
  64:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On a queue.        */
  68:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:./lib/chibios/os/rt/include/chschd.h ****                                                   in queue.                 */
  77:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:./lib/chibios/os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:./lib/chibios/os/rt/include/chschd.h ****                                                   message.                  */
  81:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:./lib/chibios/os/rt/include/chschd.h **** 
  83:./lib/chibios/os/rt/include/chschd.h **** /**
  84:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:./lib/chibios/os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:./lib/chibios/os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:./lib/chibios/os/rt/include/chschd.h ****  */
  88:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:./lib/chibios/os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:./lib/chibios/os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:./lib/chibios/os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  93:./lib/chibios/os/rt/include/chschd.h **** 
  94:./lib/chibios/os/rt/include/chschd.h **** /**
  95:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:./lib/chibios/os/rt/include/chschd.h ****  * @{
  97:./lib/chibios/os/rt/include/chschd.h ****  */
  98:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:./lib/chibios/os/rt/include/chschd.h ****                                                  mask.                      */
 100:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:./lib/chibios/os/rt/include/chschd.h ****                                                  flag.                      */
 107:./lib/chibios/os/rt/include/chschd.h **** /** @} */
 108:./lib/chibios/os/rt/include/chschd.h **** 
 109:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 110:./lib/chibios/os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 112:./lib/chibios/os/rt/include/chschd.h **** 
 113:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 114:./lib/chibios/os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 116:./lib/chibios/os/rt/include/chschd.h **** 
 117:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 118:./lib/chibios/os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 119:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 120:./lib/chibios/os/rt/include/chschd.h **** 
 121:./lib/chibios/os/rt/include/chschd.h **** /**
 122:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 123:./lib/chibios/os/rt/include/chschd.h ****  */
 124:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_list {
 125:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 126:./lib/chibios/os/rt/include/chschd.h **** };
 127:./lib/chibios/os/rt/include/chschd.h **** 
 128:./lib/chibios/os/rt/include/chschd.h **** /**
 129:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 130:./lib/chibios/os/rt/include/chschd.h ****  */
 131:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_queue {
 132:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 133:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 134:./lib/chibios/os/rt/include/chschd.h **** };
 135:./lib/chibios/os/rt/include/chschd.h **** 
 136:./lib/chibios/os/rt/include/chschd.h **** /**
 137:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 138:./lib/chibios/os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 139:./lib/chibios/os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 140:./lib/chibios/os/rt/include/chschd.h ****  *          by shrinking this structure.
 141:./lib/chibios/os/rt/include/chschd.h ****  */
 142:./lib/chibios/os/rt/include/chschd.h **** struct ch_thread {
 143:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 144:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 145:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 146:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 147:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 148:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 149:./lib/chibios/os/rt/include/chschd.h **** #endif
 150:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 151:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 152:./lib/chibios/os/rt/include/chschd.h ****   /**
 153:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 154:./lib/chibios/os/rt/include/chschd.h ****    */
 155:./lib/chibios/os/rt/include/chschd.h ****   const char            *name;
 156:./lib/chibios/os/rt/include/chschd.h **** #endif
 157:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 158:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 159:./lib/chibios/os/rt/include/chschd.h ****   /**
 160:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Working area base address.
 161:./lib/chibios/os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 162:./lib/chibios/os/rt/include/chschd.h ****    *          dynamic threading.
 163:./lib/chibios/os/rt/include/chschd.h ****    */
 164:./lib/chibios/os/rt/include/chschd.h ****   stkalign_t            *wabase;
 165:./lib/chibios/os/rt/include/chschd.h **** #endif
 166:./lib/chibios/os/rt/include/chschd.h ****   /**
 167:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Current thread state.
 168:./lib/chibios/os/rt/include/chschd.h ****    */
 169:./lib/chibios/os/rt/include/chschd.h ****   tstate_t              state;
 170:./lib/chibios/os/rt/include/chschd.h ****   /**
 171:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Various thread flags.
 172:./lib/chibios/os/rt/include/chschd.h ****    */
 173:./lib/chibios/os/rt/include/chschd.h ****   tmode_t               flags;
 174:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 175:./lib/chibios/os/rt/include/chschd.h ****   /**
 176:./lib/chibios/os/rt/include/chschd.h ****    * @brief   References to this thread.
 177:./lib/chibios/os/rt/include/chschd.h ****    */
 178:./lib/chibios/os/rt/include/chschd.h ****   trefs_t               refs;
 179:./lib/chibios/os/rt/include/chschd.h **** #endif
 180:./lib/chibios/os/rt/include/chschd.h ****   /**
 181:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 182:./lib/chibios/os/rt/include/chschd.h ****    */
 183:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 184:./lib/chibios/os/rt/include/chschd.h ****   tslices_t             ticks;
 185:./lib/chibios/os/rt/include/chschd.h **** #endif
 186:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 187:./lib/chibios/os/rt/include/chschd.h ****   /**
 188:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 189:./lib/chibios/os/rt/include/chschd.h ****    * @note    This field can overflow.
 190:./lib/chibios/os/rt/include/chschd.h ****    */
 191:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    time;
 192:./lib/chibios/os/rt/include/chschd.h **** #endif
 193:./lib/chibios/os/rt/include/chschd.h ****   /**
 194:./lib/chibios/os/rt/include/chschd.h ****    * @brief   State-specific fields.
 195:./lib/chibios/os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 196:./lib/chibios/os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 197:./lib/chibios/os/rt/include/chschd.h ****    */
 198:./lib/chibios/os/rt/include/chschd.h ****   union {
 199:./lib/chibios/os/rt/include/chschd.h ****     /**
 200:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 201:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 202:./lib/chibios/os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 203:./lib/chibios/os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 204:./lib/chibios/os/rt/include/chschd.h ****      */
 205:./lib/chibios/os/rt/include/chschd.h ****     msg_t               rdymsg;
 206:./lib/chibios/os/rt/include/chschd.h ****     /**
 207:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread exit code.
 208:./lib/chibios/os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 209:./lib/chibios/os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 210:./lib/chibios/os/rt/include/chschd.h ****      *          this thread.
 211:./lib/chibios/os/rt/include/chschd.h ****      */
 212:./lib/chibios/os/rt/include/chschd.h ****     msg_t               exitcode;
 213:./lib/chibios/os/rt/include/chschd.h ****     /**
 214:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 215:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 216:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 217:./lib/chibios/os/rt/include/chschd.h ****      *          states.
 218:./lib/chibios/os/rt/include/chschd.h ****      */
 219:./lib/chibios/os/rt/include/chschd.h ****     void                *wtobjp;
 220:./lib/chibios/os/rt/include/chschd.h ****     /**
 221:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 222:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 223:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 224:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 225:./lib/chibios/os/rt/include/chschd.h ****      */
 226:./lib/chibios/os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 227:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 228:./lib/chibios/os/rt/include/chschd.h ****     /**
 229:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread sent message.
 230:./lib/chibios/os/rt/include/chschd.h ****      */
 231:./lib/chibios/os/rt/include/chschd.h ****     msg_t               sentmsg;
 232:./lib/chibios/os/rt/include/chschd.h **** #endif
 233:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 234:./lib/chibios/os/rt/include/chschd.h ****     /**
 235:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 236:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 237:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 238:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 239:./lib/chibios/os/rt/include/chschd.h ****      */
 240:./lib/chibios/os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 241:./lib/chibios/os/rt/include/chschd.h **** #endif
 242:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 243:./lib/chibios/os/rt/include/chschd.h ****     /**
 244:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 245:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 246:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 247:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 248:./lib/chibios/os/rt/include/chschd.h ****      */
 249:./lib/chibios/os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 250:./lib/chibios/os/rt/include/chschd.h **** #endif
 251:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 252:./lib/chibios/os/rt/include/chschd.h ****     /**
 253:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 254:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 255:./lib/chibios/os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 256:./lib/chibios/os/rt/include/chschd.h ****      */
 257:./lib/chibios/os/rt/include/chschd.h ****     eventmask_t         ewmask;
 258:./lib/chibios/os/rt/include/chschd.h **** #endif
 259:./lib/chibios/os/rt/include/chschd.h ****   }                     u;
 260:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 261:./lib/chibios/os/rt/include/chschd.h ****   /**
 262:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 263:./lib/chibios/os/rt/include/chschd.h ****    */
 264:./lib/chibios/os/rt/include/chschd.h ****   threads_list_t        waiting;
 265:./lib/chibios/os/rt/include/chschd.h **** #endif
 266:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 267:./lib/chibios/os/rt/include/chschd.h ****   /**
 268:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Messages queue.
 269:./lib/chibios/os/rt/include/chschd.h ****    */
 270:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 271:./lib/chibios/os/rt/include/chschd.h **** #endif
 272:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 273:./lib/chibios/os/rt/include/chschd.h ****   /**
 274:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pending events mask.
 275:./lib/chibios/os/rt/include/chschd.h ****    */
 276:./lib/chibios/os/rt/include/chschd.h ****   eventmask_t           epending;
 277:./lib/chibios/os/rt/include/chschd.h **** #endif
 278:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 279:./lib/chibios/os/rt/include/chschd.h ****   /**
 280:./lib/chibios/os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 281:./lib/chibios/os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 282:./lib/chibios/os/rt/include/chschd.h ****    */
 283:./lib/chibios/os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 284:./lib/chibios/os/rt/include/chschd.h ****   /**
 285:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 286:./lib/chibios/os/rt/include/chschd.h ****    */
 287:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               realprio;
 288:./lib/chibios/os/rt/include/chschd.h **** #endif
 289:./lib/chibios/os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 290:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 291:./lib/chibios/os/rt/include/chschd.h ****   /**
 292:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 293:./lib/chibios/os/rt/include/chschd.h ****    */
 294:./lib/chibios/os/rt/include/chschd.h ****   void                  *mpool;
 295:./lib/chibios/os/rt/include/chschd.h **** #endif
 296:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 297:./lib/chibios/os/rt/include/chschd.h ****   /**
 298:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread statistics.
 299:./lib/chibios/os/rt/include/chschd.h ****    */
 300:./lib/chibios/os/rt/include/chschd.h ****   time_measurement_t    stats;
 301:./lib/chibios/os/rt/include/chschd.h **** #endif
 302:./lib/chibios/os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 303:./lib/chibios/os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 304:./lib/chibios/os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 305:./lib/chibios/os/rt/include/chschd.h **** #endif
 306:./lib/chibios/os/rt/include/chschd.h **** };
 307:./lib/chibios/os/rt/include/chschd.h **** 
 308:./lib/chibios/os/rt/include/chschd.h **** /**
 309:./lib/chibios/os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 310:./lib/chibios/os/rt/include/chschd.h ****  *
 311:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 312:./lib/chibios/os/rt/include/chschd.h ****  */
 313:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timer {
 314:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 315:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 316:./lib/chibios/os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Time delta before timeout.  */
 317:./lib/chibios/os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 318:./lib/chibios/os/rt/include/chschd.h ****                                                 pointer.                    */
 319:./lib/chibios/os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 320:./lib/chibios/os/rt/include/chschd.h ****                                                 parameter.                  */
 321:./lib/chibios/os/rt/include/chschd.h **** };
 322:./lib/chibios/os/rt/include/chschd.h **** 
 323:./lib/chibios/os/rt/include/chschd.h **** /**
 324:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 325:./lib/chibios/os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 326:./lib/chibios/os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 327:./lib/chibios/os/rt/include/chschd.h ****  *          timer is often used in the code.
 328:./lib/chibios/os/rt/include/chschd.h ****  */
 329:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 330:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 331:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 332:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 333:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 334:./lib/chibios/os/rt/include/chschd.h ****   sysinterval_t         delta;      /**< @brief Must be initialized to -1.  */
 335:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 336:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 337:./lib/chibios/os/rt/include/chschd.h **** #endif
 338:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 339:./lib/chibios/os/rt/include/chschd.h ****   /**
 340:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 341:./lib/chibios/os/rt/include/chschd.h ****    */
 342:./lib/chibios/os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 343:./lib/chibios/os/rt/include/chschd.h ****                                                 tick event.                 */
 344:./lib/chibios/os/rt/include/chschd.h **** #endif
 345:./lib/chibios/os/rt/include/chschd.h **** };
 346:./lib/chibios/os/rt/include/chschd.h **** 
 347:./lib/chibios/os/rt/include/chschd.h **** /**
 348:./lib/chibios/os/rt/include/chschd.h ****  * @extends threads_queue_t
 349:./lib/chibios/os/rt/include/chschd.h ****  */
 350:./lib/chibios/os/rt/include/chschd.h **** struct ch_ready_list {
 351:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 352:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 353:./lib/chibios/os/rt/include/chschd.h ****                                                 initialized to zero.        */
 354:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 355:./lib/chibios/os/rt/include/chschd.h ****                                                 offsets.                    */
 356:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 357:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 358:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 359:./lib/chibios/os/rt/include/chschd.h **** #endif
 360:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 361:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 362:./lib/chibios/os/rt/include/chschd.h ****                                                 thread.                     */
 363:./lib/chibios/os/rt/include/chschd.h **** };
 364:./lib/chibios/os/rt/include/chschd.h **** 
 365:./lib/chibios/os/rt/include/chschd.h **** /**
 366:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System debug data structure.
 367:./lib/chibios/os/rt/include/chschd.h ****  */
 368:./lib/chibios/os/rt/include/chschd.h **** struct ch_system_debug {
 369:./lib/chibios/os/rt/include/chschd.h ****   /**
 370:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 371:./lib/chibios/os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 372:./lib/chibios/os/rt/include/chschd.h ****    *          written once and then the system is halted.
 373:./lib/chibios/os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 374:./lib/chibios/os/rt/include/chschd.h ****    *          field itself is declared volatile.
 375:./lib/chibios/os/rt/include/chschd.h ****    */
 376:./lib/chibios/os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 377:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 378:./lib/chibios/os/rt/include/chschd.h ****   /**
 379:./lib/chibios/os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 380:./lib/chibios/os/rt/include/chschd.h ****    */
 381:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 382:./lib/chibios/os/rt/include/chschd.h ****   /**
 383:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 384:./lib/chibios/os/rt/include/chschd.h ****    */
 385:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 386:./lib/chibios/os/rt/include/chschd.h **** #endif
 387:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 388:./lib/chibios/os/rt/include/chschd.h ****   /**
 389:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 390:./lib/chibios/os/rt/include/chschd.h ****    */
 391:./lib/chibios/os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 392:./lib/chibios/os/rt/include/chschd.h **** #endif
 393:./lib/chibios/os/rt/include/chschd.h **** };
 394:./lib/chibios/os/rt/include/chschd.h **** 
 395:./lib/chibios/os/rt/include/chschd.h **** /**
 396:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System data structure.
 397:./lib/chibios/os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 398:./lib/chibios/os/rt/include/chschd.h ****  *          stacks.
 399:./lib/chibios/os/rt/include/chschd.h ****  */
 400:./lib/chibios/os/rt/include/chschd.h **** struct ch_system {
 401:./lib/chibios/os/rt/include/chschd.h ****   /**
 402:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Ready list header.
 403:./lib/chibios/os/rt/include/chschd.h ****    */
 404:./lib/chibios/os/rt/include/chschd.h ****   ready_list_t          rlist;
 405:./lib/chibios/os/rt/include/chschd.h ****   /**
 406:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 407:./lib/chibios/os/rt/include/chschd.h ****    */
 408:./lib/chibios/os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 409:./lib/chibios/os/rt/include/chschd.h ****   /**
 410:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System debug.
 411:./lib/chibios/os/rt/include/chschd.h ****    */
 412:./lib/chibios/os/rt/include/chschd.h ****   system_debug_t        dbg;
 413:./lib/chibios/os/rt/include/chschd.h ****   /**
 414:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 415:./lib/chibios/os/rt/include/chschd.h ****    */
 416:./lib/chibios/os/rt/include/chschd.h ****   thread_t              mainthread;
 417:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 418:./lib/chibios/os/rt/include/chschd.h ****   /**
 419:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 420:./lib/chibios/os/rt/include/chschd.h ****    */
 421:./lib/chibios/os/rt/include/chschd.h ****   tm_calibration_t      tm;
 422:./lib/chibios/os/rt/include/chschd.h **** #endif
 423:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 424:./lib/chibios/os/rt/include/chschd.h ****   /**
 425:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 426:./lib/chibios/os/rt/include/chschd.h ****    */
 427:./lib/chibios/os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 428:./lib/chibios/os/rt/include/chschd.h **** #endif
 429:./lib/chibios/os/rt/include/chschd.h ****   CH_CFG_SYSTEM_EXTRA_FIELDS
 430:./lib/chibios/os/rt/include/chschd.h **** };
 431:./lib/chibios/os/rt/include/chschd.h **** 
 432:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 433:./lib/chibios/os/rt/include/chschd.h **** /* Module macros.                                                            */
 434:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 435:./lib/chibios/os/rt/include/chschd.h **** 
 436:./lib/chibios/os/rt/include/chschd.h **** /**
 437:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 438:./lib/chibios/os/rt/include/chschd.h ****  *
 439:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 440:./lib/chibios/os/rt/include/chschd.h ****  */
 441:./lib/chibios/os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 442:./lib/chibios/os/rt/include/chschd.h **** 
 443:./lib/chibios/os/rt/include/chschd.h **** /**
 444:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 445:./lib/chibios/os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 446:./lib/chibios/os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 447:./lib/chibios/os/rt/include/chschd.h ****  */
 448:./lib/chibios/os/rt/include/chschd.h **** #define currp ch.rlist.current
 449:./lib/chibios/os/rt/include/chschd.h **** 
 450:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 451:./lib/chibios/os/rt/include/chschd.h **** /* External declarations.                                                    */
 452:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 453:./lib/chibios/os/rt/include/chschd.h **** 
 454:./lib/chibios/os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 455:./lib/chibios/os/rt/include/chschd.h **** extern ch_system_t ch;
 456:./lib/chibios/os/rt/include/chschd.h **** #endif
 457:./lib/chibios/os/rt/include/chschd.h **** 
 458:./lib/chibios/os/rt/include/chschd.h **** /*
 459:./lib/chibios/os/rt/include/chschd.h ****  * Scheduler APIs.
 460:./lib/chibios/os/rt/include/chschd.h ****  */
 461:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 462:./lib/chibios/os/rt/include/chschd.h **** extern "C" {
 463:./lib/chibios/os/rt/include/chschd.h **** #endif
 464:./lib/chibios/os/rt/include/chschd.h ****   void _scheduler_init(void);
 465:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 466:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 467:./lib/chibios/os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 468:./lib/chibios/os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout);
 469:./lib/chibios/os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 470:./lib/chibios/os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 471:./lib/chibios/os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 472:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 473:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 474:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 475:./lib/chibios/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 476:./lib/chibios/os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 477:./lib/chibios/os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 478:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 479:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 480:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 481:./lib/chibios/os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 482:./lib/chibios/os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 483:./lib/chibios/os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 484:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 485:./lib/chibios/os/rt/include/chschd.h **** }
 486:./lib/chibios/os/rt/include/chschd.h **** #endif
 487:./lib/chibios/os/rt/include/chschd.h **** 
 488:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 489:./lib/chibios/os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 490:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 491:./lib/chibios/os/rt/include/chschd.h **** 
 492:./lib/chibios/os/rt/include/chschd.h **** /**
 493:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 494:./lib/chibios/os/rt/include/chschd.h ****  *
 495:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 496:./lib/chibios/os/rt/include/chschd.h ****  *
 497:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 498:./lib/chibios/os/rt/include/chschd.h ****  */
 499:./lib/chibios/os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 500:./lib/chibios/os/rt/include/chschd.h **** 
 501:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 502:./lib/chibios/os/rt/include/chschd.h **** }
 503:./lib/chibios/os/rt/include/chschd.h **** 
 504:./lib/chibios/os/rt/include/chschd.h **** /**
 505:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 506:./lib/chibios/os/rt/include/chschd.h ****  *
 507:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 508:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 509:./lib/chibios/os/rt/include/chschd.h ****  *
 510:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 511:./lib/chibios/os/rt/include/chschd.h ****  */
 512:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 513:./lib/chibios/os/rt/include/chschd.h **** 
 514:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 515:./lib/chibios/os/rt/include/chschd.h **** }
 516:./lib/chibios/os/rt/include/chschd.h **** 
 517:./lib/chibios/os/rt/include/chschd.h **** /**
 518:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 519:./lib/chibios/os/rt/include/chschd.h ****  *
 520:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 521:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 522:./lib/chibios/os/rt/include/chschd.h ****  *
 523:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 524:./lib/chibios/os/rt/include/chschd.h ****  */
 525:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 526:./lib/chibios/os/rt/include/chschd.h **** 
 527:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 528:./lib/chibios/os/rt/include/chschd.h **** }
 529:./lib/chibios/os/rt/include/chschd.h **** 
 530:./lib/chibios/os/rt/include/chschd.h **** /**
 531:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 532:./lib/chibios/os/rt/include/chschd.h ****  *
 533:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 534:./lib/chibios/os/rt/include/chschd.h ****  *
 535:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 536:./lib/chibios/os/rt/include/chschd.h ****  */
 537:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
  39              		.loc 2 537 20 view .LVU2
  40              	.LBB58:
 538:./lib/chibios/os/rt/include/chschd.h **** 
 539:./lib/chibios/os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
  41              		.loc 2 539 3 view .LVU3
  42              		.loc 2 539 13 is_stmt 0 view .LVU4
  43 0000 024B     		ldr	r3, .L2
  44              	.LBE58:
  45              	.LBE57:
  68:lib/chibios/os/rt/src/chschd.c ****   ch.rlist.prio = NOPRIO;
  46              		.loc 1 68 17 view .LVU5
  47 0002 0022     		movs	r2, #0
  48              	.LBB60:
  49              	.LBB59:
 540:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  50              		.loc 2 540 13 view .LVU6
  51 0004 C3E90033 		strd	r3, r3, [r3]
  52              	.LVL1:
  53              		.loc 2 540 13 view .LVU7
  54              	.LBE59:
  55              	.LBE60:
  56              		.loc 1 68 3 is_stmt 1 view .LVU8
  57              		.loc 1 68 17 is_stmt 0 view .LVU9
  58 0008 9A60     		str	r2, [r3, #8]
  69:lib/chibios/os/rt/src/chschd.c **** #if CH_CFG_USE_REGISTRY == TRUE
  70:lib/chibios/os/rt/src/chschd.c ****   ch.rlist.newer = (thread_t *)&ch.rlist;
  71:lib/chibios/os/rt/src/chschd.c ****   ch.rlist.older = (thread_t *)&ch.rlist;
  72:lib/chibios/os/rt/src/chschd.c **** #endif
  73:lib/chibios/os/rt/src/chschd.c **** }
  59              		.loc 1 73 1 view .LVU10
  60 000a 7047     		bx	lr
  61              	.L3:
  62              		.align	2
  63              	.L2:
  64 000c 00000000 		.word	ch
  65              		.cfi_endproc
  66              	.LFE239:
  68              		.section	.text.chSchReadyI,"ax",%progbits
  69              		.align	1
  70              		.global	chSchReadyI
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  74              		.fpu fpv4-sp-d16
  76              	chSchReadyI:
  77              	.LVL2:
  78              	.LFB240:
  74:lib/chibios/os/rt/src/chschd.c **** 
  75:lib/chibios/os/rt/src/chschd.c **** #if (CH_CFG_OPTIMIZE_SPEED == FALSE) || defined(__DOXYGEN__)
  76:lib/chibios/os/rt/src/chschd.c **** /**
  77:lib/chibios/os/rt/src/chschd.c ****  * @brief   Inserts a thread into a priority ordered queue.
  78:lib/chibios/os/rt/src/chschd.c ****  * @note    The insertion is done by scanning the list from the highest
  79:lib/chibios/os/rt/src/chschd.c ****  *          priority toward the lowest.
  80:lib/chibios/os/rt/src/chschd.c ****  *
  81:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tp        the pointer to the thread to be inserted in the list
  82:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tqp       the pointer to the threads list header
  83:lib/chibios/os/rt/src/chschd.c ****  *
  84:lib/chibios/os/rt/src/chschd.c ****  * @notapi
  85:lib/chibios/os/rt/src/chschd.c ****  */
  86:lib/chibios/os/rt/src/chschd.c **** void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
  87:lib/chibios/os/rt/src/chschd.c **** 
  88:lib/chibios/os/rt/src/chschd.c ****   thread_t *cp = (thread_t *)tqp;
  89:lib/chibios/os/rt/src/chschd.c ****   do {
  90:lib/chibios/os/rt/src/chschd.c ****     cp = cp->queue.next;
  91:lib/chibios/os/rt/src/chschd.c ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  92:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next             = cp;
  93:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
  94:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
  95:lib/chibios/os/rt/src/chschd.c ****   cp->queue.prev             = tp;
  96:lib/chibios/os/rt/src/chschd.c **** }
  97:lib/chibios/os/rt/src/chschd.c **** 
  98:lib/chibios/os/rt/src/chschd.c **** /**
  99:lib/chibios/os/rt/src/chschd.c ****  * @brief   Inserts a thread into a queue.
 100:lib/chibios/os/rt/src/chschd.c ****  *
 101:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tp        the pointer to the thread to be inserted in the list
 102:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tqp       the pointer to the threads list header
 103:lib/chibios/os/rt/src/chschd.c ****  *
 104:lib/chibios/os/rt/src/chschd.c ****  * @notapi
 105:lib/chibios/os/rt/src/chschd.c ****  */
 106:lib/chibios/os/rt/src/chschd.c **** void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 107:lib/chibios/os/rt/src/chschd.c **** 
 108:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next             = (thread_t *)tqp;
 109:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev             = tqp->prev;
 110:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 111:lib/chibios/os/rt/src/chschd.c ****   tqp->prev                  = tp;
 112:lib/chibios/os/rt/src/chschd.c **** }
 113:lib/chibios/os/rt/src/chschd.c **** 
 114:lib/chibios/os/rt/src/chschd.c **** /**
 115:lib/chibios/os/rt/src/chschd.c ****  * @brief   Removes the first-out thread from a queue and returns it.
 116:lib/chibios/os/rt/src/chschd.c ****  * @note    If the queue is priority ordered then this function returns the
 117:lib/chibios/os/rt/src/chschd.c ****  *          thread with the highest priority.
 118:lib/chibios/os/rt/src/chschd.c ****  *
 119:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tqp       the pointer to the threads list header
 120:lib/chibios/os/rt/src/chschd.c ****  * @return              The removed thread pointer.
 121:lib/chibios/os/rt/src/chschd.c ****  *
 122:lib/chibios/os/rt/src/chschd.c ****  * @notapi
 123:lib/chibios/os/rt/src/chschd.c ****  */
 124:lib/chibios/os/rt/src/chschd.c **** thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 125:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = tqp->next;
 126:lib/chibios/os/rt/src/chschd.c **** 
 127:lib/chibios/os/rt/src/chschd.c ****   tqp->next             = tp->queue.next;
 128:lib/chibios/os/rt/src/chschd.c ****   tqp->next->queue.prev = (thread_t *)tqp;
 129:lib/chibios/os/rt/src/chschd.c **** 
 130:lib/chibios/os/rt/src/chschd.c ****   return tp;
 131:lib/chibios/os/rt/src/chschd.c **** }
 132:lib/chibios/os/rt/src/chschd.c **** 
 133:lib/chibios/os/rt/src/chschd.c **** /**
 134:lib/chibios/os/rt/src/chschd.c ****  * @brief   Removes the last-out thread from a queue and returns it.
 135:lib/chibios/os/rt/src/chschd.c ****  * @note    If the queue is priority ordered then this function returns the
 136:lib/chibios/os/rt/src/chschd.c ****  *          thread with the lowest priority.
 137:lib/chibios/os/rt/src/chschd.c ****  *
 138:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tqp   the pointer to the threads list header
 139:lib/chibios/os/rt/src/chschd.c ****  * @return          The removed thread pointer.
 140:lib/chibios/os/rt/src/chschd.c ****  *
 141:lib/chibios/os/rt/src/chschd.c ****  * @notapi
 142:lib/chibios/os/rt/src/chschd.c ****  */
 143:lib/chibios/os/rt/src/chschd.c **** thread_t *queue_lifo_remove(threads_queue_t *tqp) {
 144:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = tqp->prev;
 145:lib/chibios/os/rt/src/chschd.c **** 
 146:lib/chibios/os/rt/src/chschd.c ****   tqp->prev             = tp->queue.prev;
 147:lib/chibios/os/rt/src/chschd.c ****   tqp->prev->queue.next = (thread_t *)tqp;
 148:lib/chibios/os/rt/src/chschd.c **** 
 149:lib/chibios/os/rt/src/chschd.c ****   return tp;
 150:lib/chibios/os/rt/src/chschd.c **** }
 151:lib/chibios/os/rt/src/chschd.c **** 
 152:lib/chibios/os/rt/src/chschd.c **** /**
 153:lib/chibios/os/rt/src/chschd.c ****  * @brief   Removes a thread from a queue and returns it.
 154:lib/chibios/os/rt/src/chschd.c ****  * @details The thread is removed from the queue regardless of its relative
 155:lib/chibios/os/rt/src/chschd.c ****  *          position and regardless the used insertion method.
 156:lib/chibios/os/rt/src/chschd.c ****  *
 157:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tp        the pointer to the thread to be removed from the queue
 158:lib/chibios/os/rt/src/chschd.c ****  * @return              The removed thread pointer.
 159:lib/chibios/os/rt/src/chschd.c ****  *
 160:lib/chibios/os/rt/src/chschd.c ****  * @notapi
 161:lib/chibios/os/rt/src/chschd.c ****  */
 162:lib/chibios/os/rt/src/chschd.c **** thread_t *queue_dequeue(thread_t *tp) {
 163:lib/chibios/os/rt/src/chschd.c **** 
 164:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp->queue.next;
 165:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next->queue.prev = tp->queue.prev;
 166:lib/chibios/os/rt/src/chschd.c **** 
 167:lib/chibios/os/rt/src/chschd.c ****   return tp;
 168:lib/chibios/os/rt/src/chschd.c **** }
 169:lib/chibios/os/rt/src/chschd.c **** 
 170:lib/chibios/os/rt/src/chschd.c **** /**
 171:lib/chibios/os/rt/src/chschd.c ****  * @brief   Pushes a thread_t on top of a stack list.
 172:lib/chibios/os/rt/src/chschd.c ****  *
 173:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tp    the pointer to the thread to be inserted in the list
 174:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tlp   the pointer to the threads list header
 175:lib/chibios/os/rt/src/chschd.c ****  *
 176:lib/chibios/os/rt/src/chschd.c ****  * @notapi
 177:lib/chibios/os/rt/src/chschd.c ****  */
 178:lib/chibios/os/rt/src/chschd.c **** void list_insert(thread_t *tp, threads_list_t *tlp) {
 179:lib/chibios/os/rt/src/chschd.c **** 
 180:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next = tlp->next;
 181:lib/chibios/os/rt/src/chschd.c ****   tlp->next      = tp;
 182:lib/chibios/os/rt/src/chschd.c **** }
 183:lib/chibios/os/rt/src/chschd.c **** 
 184:lib/chibios/os/rt/src/chschd.c **** /**
 185:lib/chibios/os/rt/src/chschd.c ****  * @brief   Pops a thread from the top of a stack list and returns it.
 186:lib/chibios/os/rt/src/chschd.c ****  * @pre     The list must be non-empty before calling this function.
 187:lib/chibios/os/rt/src/chschd.c ****  *
 188:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tlp       the pointer to the threads list header
 189:lib/chibios/os/rt/src/chschd.c ****  * @return              The removed thread pointer.
 190:lib/chibios/os/rt/src/chschd.c ****  *
 191:lib/chibios/os/rt/src/chschd.c ****  * @notapi
 192:lib/chibios/os/rt/src/chschd.c ****  */
 193:lib/chibios/os/rt/src/chschd.c **** thread_t *list_remove(threads_list_t *tlp) {
 194:lib/chibios/os/rt/src/chschd.c **** 
 195:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = tlp->next;
 196:lib/chibios/os/rt/src/chschd.c ****   tlp->next = tp->queue.next;
 197:lib/chibios/os/rt/src/chschd.c **** 
 198:lib/chibios/os/rt/src/chschd.c ****   return tp;
 199:lib/chibios/os/rt/src/chschd.c **** }
 200:lib/chibios/os/rt/src/chschd.c **** #endif /* CH_CFG_OPTIMIZE_SPEED */
 201:lib/chibios/os/rt/src/chschd.c **** 
 202:lib/chibios/os/rt/src/chschd.c **** /**
 203:lib/chibios/os/rt/src/chschd.c ****  * @brief   Inserts a thread in the Ready List placing it behind its peers.
 204:lib/chibios/os/rt/src/chschd.c ****  * @details The thread is positioned behind all threads with higher or equal
 205:lib/chibios/os/rt/src/chschd.c ****  *          priority.
 206:lib/chibios/os/rt/src/chschd.c ****  * @pre     The thread must not be already inserted in any list through its
 207:lib/chibios/os/rt/src/chschd.c ****  *          @p next and @p prev or list corruption would occur.
 208:lib/chibios/os/rt/src/chschd.c ****  * @post    This function does not reschedule so a call to a rescheduling
 209:lib/chibios/os/rt/src/chschd.c ****  *          function must be performed before unlocking the kernel. Note that
 210:lib/chibios/os/rt/src/chschd.c ****  *          interrupt handlers always reschedule on exit so an explicit
 211:lib/chibios/os/rt/src/chschd.c ****  *          reschedule must not be performed in ISRs.
 212:lib/chibios/os/rt/src/chschd.c ****  *
 213:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tp        the thread to be made ready
 214:lib/chibios/os/rt/src/chschd.c ****  * @return              The thread pointer.
 215:lib/chibios/os/rt/src/chschd.c ****  *
 216:lib/chibios/os/rt/src/chschd.c ****  * @iclass
 217:lib/chibios/os/rt/src/chschd.c ****  */
 218:lib/chibios/os/rt/src/chschd.c **** thread_t *chSchReadyI(thread_t *tp) {
  79              		.loc 1 218 37 is_stmt 1 view -0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              		@ link register save eliminated.
 219:lib/chibios/os/rt/src/chschd.c ****   thread_t *cp;
  84              		.loc 1 219 3 view .LVU12
 220:lib/chibios/os/rt/src/chschd.c **** 
 221:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassI();
  85              		.loc 1 221 21 view .LVU13
 222:lib/chibios/os/rt/src/chschd.c ****   chDbgCheck(tp != NULL);
  86              		.loc 1 222 3 view .LVU14
  87              		.loc 1 222 3 view .LVU15
  88              		.loc 1 222 3 view .LVU16
 223:lib/chibios/os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
  89              		.loc 1 223 3 view .LVU17
  90              		.loc 1 223 3 view .LVU18
  91              		.loc 1 223 3 view .LVU19
 224:lib/chibios/os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 225:lib/chibios/os/rt/src/chschd.c ****               "invalid state");
 226:lib/chibios/os/rt/src/chschd.c **** 
 227:lib/chibios/os/rt/src/chschd.c ****   tp->state = CH_STATE_READY;
  92              		.loc 1 227 3 view .LVU20
  93              		.loc 1 227 13 is_stmt 0 view .LVU21
  94 0000 0023     		movs	r3, #0
  95 0002 0374     		strb	r3, [r0, #16]
 228:lib/chibios/os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
  96              		.loc 1 228 3 is_stmt 1 view .LVU22
  97              	.LVL3:
 229:lib/chibios/os/rt/src/chschd.c ****   do {
 230:lib/chibios/os/rt/src/chschd.c ****     cp = cp->queue.next;
 231:lib/chibios/os/rt/src/chschd.c ****   } while (cp->prio >= tp->prio);
  98              		.loc 1 231 26 is_stmt 0 view .LVU23
  99 0004 8268     		ldr	r2, [r0, #8]
 228:lib/chibios/os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 100              		.loc 1 228 6 view .LVU24
 101 0006 054B     		ldr	r3, .L7
 102              	.LVL4:
 103              	.L5:
 229:lib/chibios/os/rt/src/chschd.c ****   do {
 104              		.loc 1 229 3 is_stmt 1 discriminator 1 view .LVU25
 230:lib/chibios/os/rt/src/chschd.c ****   } while (cp->prio >= tp->prio);
 105              		.loc 1 230 5 discriminator 1 view .LVU26
 230:lib/chibios/os/rt/src/chschd.c ****   } while (cp->prio >= tp->prio);
 106              		.loc 1 230 8 is_stmt 0 discriminator 1 view .LVU27
 107 0008 1B68     		ldr	r3, [r3]
 108              	.LVL5:
 109              		.loc 1 231 11 is_stmt 1 discriminator 1 view .LVU28
 110              		.loc 1 231 3 is_stmt 0 discriminator 1 view .LVU29
 111 000a 9968     		ldr	r1, [r3, #8]
 112 000c 9142     		cmp	r1, r2
 113 000e FBD2     		bcs	.L5
 232:lib/chibios/os/rt/src/chschd.c ****   /* Insertion on prev.*/
 233:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next             = cp;
 114              		.loc 1 233 3 is_stmt 1 view .LVU30
 234:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 115              		.loc 1 234 41 is_stmt 0 view .LVU31
 116 0010 5A68     		ldr	r2, [r3, #4]
 233:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 117              		.loc 1 233 30 view .LVU32
 118 0012 0360     		str	r3, [r0]
 119              		.loc 1 234 3 is_stmt 1 view .LVU33
 120              		.loc 1 234 30 is_stmt 0 view .LVU34
 121 0014 4260     		str	r2, [r0, #4]
 235:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 122              		.loc 1 235 3 is_stmt 1 view .LVU35
 123              		.loc 1 235 30 is_stmt 0 view .LVU36
 124 0016 1060     		str	r0, [r2]
 236:lib/chibios/os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 125              		.loc 1 236 3 is_stmt 1 view .LVU37
 126              		.loc 1 236 30 is_stmt 0 view .LVU38
 127 0018 5860     		str	r0, [r3, #4]
 237:lib/chibios/os/rt/src/chschd.c **** 
 238:lib/chibios/os/rt/src/chschd.c ****   return tp;
 128              		.loc 1 238 3 is_stmt 1 view .LVU39
 239:lib/chibios/os/rt/src/chschd.c **** }
 129              		.loc 1 239 1 is_stmt 0 view .LVU40
 130 001a 7047     		bx	lr
 131              	.L8:
 132              		.align	2
 133              	.L7:
 134 001c 00000000 		.word	ch
 135              		.cfi_endproc
 136              	.LFE240:
 138              		.section	.text.wakeup,"ax",%progbits
 139              		.align	1
 140              		.syntax unified
 141              		.thumb
 142              		.thumb_func
 143              		.fpu fpv4-sp-d16
 145              	wakeup:
 146              	.LVL6:
 147              	.LFB243:
 240:lib/chibios/os/rt/src/chschd.c **** 
 241:lib/chibios/os/rt/src/chschd.c **** /**
 242:lib/chibios/os/rt/src/chschd.c ****  * @brief   Inserts a thread in the Ready List placing it ahead its peers.
 243:lib/chibios/os/rt/src/chschd.c ****  * @details The thread is positioned ahead all threads with higher or equal
 244:lib/chibios/os/rt/src/chschd.c ****  *          priority.
 245:lib/chibios/os/rt/src/chschd.c ****  * @pre     The thread must not be already inserted in any list through its
 246:lib/chibios/os/rt/src/chschd.c ****  *          @p next and @p prev or list corruption would occur.
 247:lib/chibios/os/rt/src/chschd.c ****  * @post    This function does not reschedule so a call to a rescheduling
 248:lib/chibios/os/rt/src/chschd.c ****  *          function must be performed before unlocking the kernel. Note that
 249:lib/chibios/os/rt/src/chschd.c ****  *          interrupt handlers always reschedule on exit so an explicit
 250:lib/chibios/os/rt/src/chschd.c ****  *          reschedule must not be performed in ISRs.
 251:lib/chibios/os/rt/src/chschd.c ****  *
 252:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tp        the thread to be made ready
 253:lib/chibios/os/rt/src/chschd.c ****  * @return              The thread pointer.
 254:lib/chibios/os/rt/src/chschd.c ****  *
 255:lib/chibios/os/rt/src/chschd.c ****  * @iclass
 256:lib/chibios/os/rt/src/chschd.c ****  */
 257:lib/chibios/os/rt/src/chschd.c **** thread_t *chSchReadyAheadI(thread_t *tp) {
 258:lib/chibios/os/rt/src/chschd.c ****   thread_t *cp;
 259:lib/chibios/os/rt/src/chschd.c **** 
 260:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassI();
 261:lib/chibios/os/rt/src/chschd.c ****   chDbgCheck(tp != NULL);
 262:lib/chibios/os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 263:lib/chibios/os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 264:lib/chibios/os/rt/src/chschd.c ****               "invalid state");
 265:lib/chibios/os/rt/src/chschd.c **** 
 266:lib/chibios/os/rt/src/chschd.c ****   tp->state = CH_STATE_READY;
 267:lib/chibios/os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 268:lib/chibios/os/rt/src/chschd.c ****   do {
 269:lib/chibios/os/rt/src/chschd.c ****     cp = cp->queue.next;
 270:lib/chibios/os/rt/src/chschd.c ****   } while (cp->prio > tp->prio);
 271:lib/chibios/os/rt/src/chschd.c ****   /* Insertion on prev.*/
 272:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next             = cp;
 273:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 274:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 275:lib/chibios/os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 276:lib/chibios/os/rt/src/chschd.c **** 
 277:lib/chibios/os/rt/src/chschd.c ****   return tp;
 278:lib/chibios/os/rt/src/chschd.c **** }
 279:lib/chibios/os/rt/src/chschd.c **** 
 280:lib/chibios/os/rt/src/chschd.c **** /**
 281:lib/chibios/os/rt/src/chschd.c ****  * @brief   Puts the current thread to sleep into the specified state.
 282:lib/chibios/os/rt/src/chschd.c ****  * @details The thread goes into a sleeping state. The possible
 283:lib/chibios/os/rt/src/chschd.c ****  *          @ref thread_states are defined into @p threads.h.
 284:lib/chibios/os/rt/src/chschd.c ****  *
 285:lib/chibios/os/rt/src/chschd.c ****  * @param[in] newstate  the new thread state
 286:lib/chibios/os/rt/src/chschd.c ****  *
 287:lib/chibios/os/rt/src/chschd.c ****  * @sclass
 288:lib/chibios/os/rt/src/chschd.c ****  */
 289:lib/chibios/os/rt/src/chschd.c **** void chSchGoSleepS(tstate_t newstate) {
 290:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 291:lib/chibios/os/rt/src/chschd.c **** 
 292:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassS();
 293:lib/chibios/os/rt/src/chschd.c **** 
 294:lib/chibios/os/rt/src/chschd.c ****   /* New state.*/
 295:lib/chibios/os/rt/src/chschd.c ****   otp->state = newstate;
 296:lib/chibios/os/rt/src/chschd.c **** 
 297:lib/chibios/os/rt/src/chschd.c **** #if CH_CFG_TIME_QUANTUM > 0
 298:lib/chibios/os/rt/src/chschd.c ****   /* The thread is renouncing its remaining time slices so it will have a new
 299:lib/chibios/os/rt/src/chschd.c ****      time quantum when it will wakeup.*/
 300:lib/chibios/os/rt/src/chschd.c ****   otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
 301:lib/chibios/os/rt/src/chschd.c **** #endif
 302:lib/chibios/os/rt/src/chschd.c **** 
 303:lib/chibios/os/rt/src/chschd.c ****   /* Next thread in ready list becomes current.*/
 304:lib/chibios/os/rt/src/chschd.c ****   currp = queue_fifo_remove(&ch.rlist.queue);
 305:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 306:lib/chibios/os/rt/src/chschd.c **** 
 307:lib/chibios/os/rt/src/chschd.c ****   /* Handling idle-enter hook.*/
 308:lib/chibios/os/rt/src/chschd.c ****   if (currp->prio == IDLEPRIO) {
 309:lib/chibios/os/rt/src/chschd.c ****     CH_CFG_IDLE_ENTER_HOOK();
 310:lib/chibios/os/rt/src/chschd.c ****   }
 311:lib/chibios/os/rt/src/chschd.c **** 
 312:lib/chibios/os/rt/src/chschd.c ****   /* Swap operation as tail call.*/
 313:lib/chibios/os/rt/src/chschd.c ****   chSysSwitch(currp, otp);
 314:lib/chibios/os/rt/src/chschd.c **** }
 315:lib/chibios/os/rt/src/chschd.c **** 
 316:lib/chibios/os/rt/src/chschd.c **** /*
 317:lib/chibios/os/rt/src/chschd.c ****  * Timeout wakeup callback.
 318:lib/chibios/os/rt/src/chschd.c ****  */
 319:lib/chibios/os/rt/src/chschd.c **** static void wakeup(void *p) {
 148              		.loc 1 319 29 is_stmt 1 view -0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 320:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = (thread_t *)p;
 152              		.loc 1 320 3 view .LVU42
 321:lib/chibios/os/rt/src/chschd.c **** 
 322:lib/chibios/os/rt/src/chschd.c ****   chSysLockFromISR();
 153              		.loc 1 322 3 view .LVU43
 154              	.LBB82:
 155              	.LBI82:
 156              		.file 3 "./lib/chibios/os/rt/include/chsys.h"
   1:./lib/chibios/os/rt/include/chsys.h **** /*
   2:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chsys.h **** 
   4:./lib/chibios/os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chsys.h **** 
   6:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chsys.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chsys.h **** 
  11:./lib/chibios/os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chsys.h **** 
  16:./lib/chibios/os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chsys.h **** */
  19:./lib/chibios/os/rt/include/chsys.h **** 
  20:./lib/chibios/os/rt/include/chsys.h **** /**
  21:./lib/chibios/os/rt/include/chsys.h ****  * @file    rt/include/chsys.h
  22:./lib/chibios/os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:./lib/chibios/os/rt/include/chsys.h ****  *
  24:./lib/chibios/os/rt/include/chsys.h ****  * @addtogroup system
  25:./lib/chibios/os/rt/include/chsys.h ****  * @{
  26:./lib/chibios/os/rt/include/chsys.h ****  */
  27:./lib/chibios/os/rt/include/chsys.h **** 
  28:./lib/chibios/os/rt/include/chsys.h **** #ifndef CHSYS_H
  29:./lib/chibios/os/rt/include/chsys.h **** #define CHSYS_H
  30:./lib/chibios/os/rt/include/chsys.h **** 
  31:./lib/chibios/os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:./lib/chibios/os/rt/include/chsys.h **** 
  33:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chsys.h **** 
  37:./lib/chibios/os/rt/include/chsys.h **** /**
  38:./lib/chibios/os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:./lib/chibios/os/rt/include/chsys.h ****  * @{
  40:./lib/chibios/os/rt/include/chsys.h ****  */
  41:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:./lib/chibios/os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:./lib/chibios/os/rt/include/chsys.h **** /** @} */
  46:./lib/chibios/os/rt/include/chsys.h **** 
  47:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  48:./lib/chibios/os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  50:./lib/chibios/os/rt/include/chsys.h **** 
  51:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  52:./lib/chibios/os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  54:./lib/chibios/os/rt/include/chsys.h **** 
  55:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  56:./lib/chibios/os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  58:./lib/chibios/os/rt/include/chsys.h **** 
  59:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  60:./lib/chibios/os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
  62:./lib/chibios/os/rt/include/chsys.h **** 
  63:./lib/chibios/os/rt/include/chsys.h **** /**
  64:./lib/chibios/os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:./lib/chibios/os/rt/include/chsys.h ****  */
  66:./lib/chibios/os/rt/include/chsys.h **** /**
  67:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  68:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  69:./lib/chibios/os/rt/include/chsys.h ****  *          level for the underlying architecture.
  70:./lib/chibios/os/rt/include/chsys.h ****  *
  71:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  72:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  73:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  74:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  75:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  76:./lib/chibios/os/rt/include/chsys.h ****  */
  77:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  78:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  79:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  80:./lib/chibios/os/rt/include/chsys.h **** #else
  81:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  82:./lib/chibios/os/rt/include/chsys.h **** #endif
  83:./lib/chibios/os/rt/include/chsys.h **** 
  84:./lib/chibios/os/rt/include/chsys.h **** /**
  85:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  86:./lib/chibios/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  87:./lib/chibios/os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  88:./lib/chibios/os/rt/include/chsys.h ****  *
  89:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  90:./lib/chibios/os/rt/include/chsys.h ****  * @return              Priority range result.
  91:./lib/chibios/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  92:./lib/chibios/os/rt/include/chsys.h ****  *                      does not support priorities.
  93:./lib/chibios/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  94:./lib/chibios/os/rt/include/chsys.h ****  */
  95:./lib/chibios/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  96:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  97:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  98:./lib/chibios/os/rt/include/chsys.h **** #else
  99:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 100:./lib/chibios/os/rt/include/chsys.h **** #endif
 101:./lib/chibios/os/rt/include/chsys.h **** 
 102:./lib/chibios/os/rt/include/chsys.h **** /**
 103:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 104:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 105:./lib/chibios/os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 106:./lib/chibios/os/rt/include/chsys.h ****  *
 107:./lib/chibios/os/rt/include/chsys.h ****  * @special
 108:./lib/chibios/os/rt/include/chsys.h ****  */
 109:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 110:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 111:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_PROLOGUE_HOOK();                                               \
 112:./lib/chibios/os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 113:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_enter(__func__);                                               \
 114:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 115:./lib/chibios/os/rt/include/chsys.h **** 
 116:./lib/chibios/os/rt/include/chsys.h **** /**
 117:./lib/chibios/os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 118:./lib/chibios/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 119:./lib/chibios/os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 120:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 121:./lib/chibios/os/rt/include/chsys.h ****  *
 122:./lib/chibios/os/rt/include/chsys.h ****  * @special
 123:./lib/chibios/os/rt/include/chsys.h ****  */
 124:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 125:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 126:./lib/chibios/os/rt/include/chsys.h ****   _trace_isr_leave(__func__);                                               \
 127:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_IRQ_EPILOGUE_HOOK();                                               \
 128:./lib/chibios/os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 129:./lib/chibios/os/rt/include/chsys.h **** 
 130:./lib/chibios/os/rt/include/chsys.h **** /**
 131:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 132:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 133:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 134:./lib/chibios/os/rt/include/chsys.h ****  *
 135:./lib/chibios/os/rt/include/chsys.h ****  * @special
 136:./lib/chibios/os/rt/include/chsys.h ****  */
 137:./lib/chibios/os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 138:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 139:./lib/chibios/os/rt/include/chsys.h **** 
 140:./lib/chibios/os/rt/include/chsys.h **** /**
 141:./lib/chibios/os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 142:./lib/chibios/os/rt/include/chsys.h ****  */
 143:./lib/chibios/os/rt/include/chsys.h **** /**
 144:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 145:./lib/chibios/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 146:./lib/chibios/os/rt/include/chsys.h ****  *          port implementation.
 147:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 148:./lib/chibios/os/rt/include/chsys.h ****  *
 149:./lib/chibios/os/rt/include/chsys.h ****  * @special
 150:./lib/chibios/os/rt/include/chsys.h ****  */
 151:./lib/chibios/os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 152:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 153:./lib/chibios/os/rt/include/chsys.h **** 
 154:./lib/chibios/os/rt/include/chsys.h **** /**
 155:./lib/chibios/os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 156:./lib/chibios/os/rt/include/chsys.h ****  * @{
 157:./lib/chibios/os/rt/include/chsys.h ****  */
 158:./lib/chibios/os/rt/include/chsys.h **** /**
 159:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 160:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 161:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 162:./lib/chibios/os/rt/include/chsys.h ****  *
 163:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 164:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 165:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 166:./lib/chibios/os/rt/include/chsys.h ****  *
 167:./lib/chibios/os/rt/include/chsys.h ****  * @api
 168:./lib/chibios/os/rt/include/chsys.h ****  */
 169:./lib/chibios/os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 170:./lib/chibios/os/rt/include/chsys.h **** 
 171:./lib/chibios/os/rt/include/chsys.h **** /**
 172:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 173:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 174:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 175:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 176:./lib/chibios/os/rt/include/chsys.h ****  *
 177:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 178:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 179:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 180:./lib/chibios/os/rt/include/chsys.h ****  *
 181:./lib/chibios/os/rt/include/chsys.h ****  * @api
 182:./lib/chibios/os/rt/include/chsys.h ****  */
 183:./lib/chibios/os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 184:./lib/chibios/os/rt/include/chsys.h **** 
 185:./lib/chibios/os/rt/include/chsys.h **** /**
 186:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 187:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 188:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 189:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 190:./lib/chibios/os/rt/include/chsys.h ****  *
 191:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 192:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 193:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of cycles.
 194:./lib/chibios/os/rt/include/chsys.h ****  *
 195:./lib/chibios/os/rt/include/chsys.h ****  * @api
 196:./lib/chibios/os/rt/include/chsys.h ****  */
 197:./lib/chibios/os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 198:./lib/chibios/os/rt/include/chsys.h **** 
 199:./lib/chibios/os/rt/include/chsys.h **** /**
 200:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 201:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 202:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 203:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 204:./lib/chibios/os/rt/include/chsys.h ****  *
 205:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 206:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 207:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of seconds.
 208:./lib/chibios/os/rt/include/chsys.h ****  *
 209:./lib/chibios/os/rt/include/chsys.h ****  * @api
 210:./lib/chibios/os/rt/include/chsys.h ****  */
 211:./lib/chibios/os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 212:./lib/chibios/os/rt/include/chsys.h **** 
 213:./lib/chibios/os/rt/include/chsys.h **** /**
 214:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 215:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 216:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 217:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 218:./lib/chibios/os/rt/include/chsys.h ****  *
 219:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 220:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 221:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 222:./lib/chibios/os/rt/include/chsys.h ****  *
 223:./lib/chibios/os/rt/include/chsys.h ****  * @api
 224:./lib/chibios/os/rt/include/chsys.h ****  */
 225:./lib/chibios/os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 226:./lib/chibios/os/rt/include/chsys.h **** 
 227:./lib/chibios/os/rt/include/chsys.h **** /**
 228:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 229:./lib/chibios/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 230:./lib/chibios/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 231:./lib/chibios/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 232:./lib/chibios/os/rt/include/chsys.h ****  *
 233:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 234:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 235:./lib/chibios/os/rt/include/chsys.h ****  * @return              The number of microseconds.
 236:./lib/chibios/os/rt/include/chsys.h ****  *
 237:./lib/chibios/os/rt/include/chsys.h ****  * @api
 238:./lib/chibios/os/rt/include/chsys.h ****  */
 239:./lib/chibios/os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 240:./lib/chibios/os/rt/include/chsys.h **** /** @} */
 241:./lib/chibios/os/rt/include/chsys.h **** 
 242:./lib/chibios/os/rt/include/chsys.h **** /**
 243:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 244:./lib/chibios/os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 245:./lib/chibios/os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 246:./lib/chibios/os/rt/include/chsys.h ****  *
 247:./lib/chibios/os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 248:./lib/chibios/os/rt/include/chsys.h ****  *                      type rtcnt_t.
 249:./lib/chibios/os/rt/include/chsys.h ****  *
 250:./lib/chibios/os/rt/include/chsys.h ****  * @xclass
 251:./lib/chibios/os/rt/include/chsys.h ****  */
 252:./lib/chibios/os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 253:./lib/chibios/os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 254:./lib/chibios/os/rt/include/chsys.h **** #endif
 255:./lib/chibios/os/rt/include/chsys.h **** 
 256:./lib/chibios/os/rt/include/chsys.h **** /**
 257:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 258:./lib/chibios/os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 259:./lib/chibios/os/rt/include/chsys.h ****  *          itself or from within the port layer.
 260:./lib/chibios/os/rt/include/chsys.h ****  *
 261:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 262:./lib/chibios/os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 263:./lib/chibios/os/rt/include/chsys.h ****  *
 264:./lib/chibios/os/rt/include/chsys.h ****  * @special
 265:./lib/chibios/os/rt/include/chsys.h ****  */
 266:./lib/chibios/os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 267:./lib/chibios/os/rt/include/chsys.h ****                                                                             \
 268:./lib/chibios/os/rt/include/chsys.h ****   _trace_switch(ntp, otp);                                                  \
 269:./lib/chibios/os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 270:./lib/chibios/os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 271:./lib/chibios/os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 272:./lib/chibios/os/rt/include/chsys.h **** }
 273:./lib/chibios/os/rt/include/chsys.h **** 
 274:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 275:./lib/chibios/os/rt/include/chsys.h **** /* External declarations.                                                    */
 276:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 277:./lib/chibios/os/rt/include/chsys.h **** 
 278:./lib/chibios/os/rt/include/chsys.h **** #if !defined(__DOXYGEN__)
 279:./lib/chibios/os/rt/include/chsys.h **** extern stkalign_t ch_idle_thread_wa[];
 280:./lib/chibios/os/rt/include/chsys.h **** #endif
 281:./lib/chibios/os/rt/include/chsys.h **** 
 282:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 283:./lib/chibios/os/rt/include/chsys.h **** extern "C" {
 284:./lib/chibios/os/rt/include/chsys.h **** #endif
 285:./lib/chibios/os/rt/include/chsys.h ****   void chSysInit(void);
 286:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 287:./lib/chibios/os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 288:./lib/chibios/os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 289:./lib/chibios/os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 290:./lib/chibios/os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT == TRUE
 291:./lib/chibios/os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 292:./lib/chibios/os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 293:./lib/chibios/os/rt/include/chsys.h **** #endif
 294:./lib/chibios/os/rt/include/chsys.h **** #ifdef __cplusplus
 295:./lib/chibios/os/rt/include/chsys.h **** }
 296:./lib/chibios/os/rt/include/chsys.h **** #endif
 297:./lib/chibios/os/rt/include/chsys.h **** 
 298:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 299:./lib/chibios/os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 300:./lib/chibios/os/rt/include/chsys.h **** /*===========================================================================*/
 301:./lib/chibios/os/rt/include/chsys.h **** 
 302:./lib/chibios/os/rt/include/chsys.h **** /**
 303:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 304:./lib/chibios/os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 305:./lib/chibios/os/rt/include/chsys.h ****  *          hardware priority.
 306:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 307:./lib/chibios/os/rt/include/chsys.h ****  *
 308:./lib/chibios/os/rt/include/chsys.h ****  * @special
 309:./lib/chibios/os/rt/include/chsys.h ****  */
 310:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 311:./lib/chibios/os/rt/include/chsys.h **** 
 312:./lib/chibios/os/rt/include/chsys.h ****   port_disable();
 313:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_disable();
 314:./lib/chibios/os/rt/include/chsys.h **** }
 315:./lib/chibios/os/rt/include/chsys.h **** 
 316:./lib/chibios/os/rt/include/chsys.h **** /**
 317:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 318:./lib/chibios/os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 319:./lib/chibios/os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 320:./lib/chibios/os/rt/include/chsys.h ****  *          enabled.
 321:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 322:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 323:./lib/chibios/os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 324:./lib/chibios/os/rt/include/chsys.h ****  *
 325:./lib/chibios/os/rt/include/chsys.h ****  * @special
 326:./lib/chibios/os/rt/include/chsys.h ****  */
 327:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 328:./lib/chibios/os/rt/include/chsys.h **** 
 329:./lib/chibios/os/rt/include/chsys.h ****   port_suspend();
 330:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_suspend();
 331:./lib/chibios/os/rt/include/chsys.h **** }
 332:./lib/chibios/os/rt/include/chsys.h **** 
 333:./lib/chibios/os/rt/include/chsys.h **** /**
 334:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 335:./lib/chibios/os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 336:./lib/chibios/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 337:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 338:./lib/chibios/os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 339:./lib/chibios/os/rt/include/chsys.h ****  *
 340:./lib/chibios/os/rt/include/chsys.h ****  * @special
 341:./lib/chibios/os/rt/include/chsys.h ****  */
 342:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 343:./lib/chibios/os/rt/include/chsys.h **** 
 344:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_enable();
 345:./lib/chibios/os/rt/include/chsys.h ****   port_enable();
 346:./lib/chibios/os/rt/include/chsys.h **** }
 347:./lib/chibios/os/rt/include/chsys.h **** 
 348:./lib/chibios/os/rt/include/chsys.h **** /**
 349:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 350:./lib/chibios/os/rt/include/chsys.h ****  *
 351:./lib/chibios/os/rt/include/chsys.h ****  * @special
 352:./lib/chibios/os/rt/include/chsys.h ****  */
 353:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysLock(void) {
 354:./lib/chibios/os/rt/include/chsys.h **** 
 355:./lib/chibios/os/rt/include/chsys.h ****   port_lock();
 356:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 357:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock();
 358:./lib/chibios/os/rt/include/chsys.h **** }
 359:./lib/chibios/os/rt/include/chsys.h **** 
 360:./lib/chibios/os/rt/include/chsys.h **** /**
 361:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 362:./lib/chibios/os/rt/include/chsys.h ****  *
 363:./lib/chibios/os/rt/include/chsys.h ****  * @special
 364:./lib/chibios/os/rt/include/chsys.h ****  */
 365:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 366:./lib/chibios/os/rt/include/chsys.h **** 
 367:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_unlock();
 368:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 369:./lib/chibios/os/rt/include/chsys.h **** 
 370:./lib/chibios/os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 371:./lib/chibios/os/rt/include/chsys.h ****      in a critical section not followed by a chSchRescheduleS(), this means
 372:./lib/chibios/os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 373:./lib/chibios/os/rt/include/chsys.h ****      the ready list.*/
 374:./lib/chibios/os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 375:./lib/chibios/os/rt/include/chsys.h ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 376:./lib/chibios/os/rt/include/chsys.h ****               "priority order violation");
 377:./lib/chibios/os/rt/include/chsys.h **** 
 378:./lib/chibios/os/rt/include/chsys.h ****   port_unlock();
 379:./lib/chibios/os/rt/include/chsys.h **** }
 380:./lib/chibios/os/rt/include/chsys.h **** 
 381:./lib/chibios/os/rt/include/chsys.h **** /**
 382:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state from within an interrupt handler.
 383:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API may do nothing on some architectures, it is required
 384:./lib/chibios/os/rt/include/chsys.h ****  *          because on ports that support preemptable interrupt handlers
 385:./lib/chibios/os/rt/include/chsys.h ****  *          it is required to raise the interrupt mask to the same level of
 386:./lib/chibios/os/rt/include/chsys.h ****  *          the system mutual exclusion zone.<br>
 387:./lib/chibios/os/rt/include/chsys.h ****  *          It is good practice to invoke this API before invoking any I-class
 388:./lib/chibios/os/rt/include/chsys.h ****  *          syscall from an interrupt handler.
 389:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API must be invoked exclusively from interrupt handlers.
 390:./lib/chibios/os/rt/include/chsys.h ****  *
 391:./lib/chibios/os/rt/include/chsys.h ****  * @special
 392:./lib/chibios/os/rt/include/chsys.h ****  */
 393:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysLockFromISR(void) {
 157              		.loc 3 393 20 view .LVU44
 158              	.LBE82:
 394:./lib/chibios/os/rt/include/chsys.h **** 
 395:./lib/chibios/os/rt/include/chsys.h ****   port_lock_from_isr();
 159              		.loc 3 395 3 view .LVU45
 160              	.LBB94:
 161              	.LBB83:
 162              	.LBI83:
 163              		.file 4 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
   1:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*
   2:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
   4:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
   6:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     (at your option) any later version.
  10:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  11:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  16:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** */
  19:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  20:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  21:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @file    chcore_v7m.h
  22:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   ARMv7-M architecture port macros and structures.
  23:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
  24:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @addtogroup ARMCMx_V7M_CORE
  25:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
  26:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  27:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  28:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifndef CHCORE_V7M_H
  29:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CHCORE_V7M_H
  30:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  31:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  32:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  34:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  35:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  36:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @name    Port Capabilities and Constants
  37:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
  38:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  39:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  40:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   This port supports a realtime counter.
  41:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  42:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SUPPORTS_RT                TRUE
  43:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  44:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  45:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Natural alignment constant.
  46:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the minimum alignment for pointer-size variables.
  47:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  48:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_NATURAL_ALIGN              sizeof (void *)
  49:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  50:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  51:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Stack alignment constant.
  52:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the alignment required for the stack pointer.
  53:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  54:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_STACK_ALIGN                sizeof (stkalign_t)
  55:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  56:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  57:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Working Areas alignment constant.
  58:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    It is the alignment to be enforced for thread working areas.
  59:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  60:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA_ALIGN         ((PORT_ENABLE_GUARD_PAGES == TRUE) ?\
  61:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                          32U : PORT_STACK_ALIGN)
  62:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /** @} */
  63:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  64:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  65:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Disabled value for BASEPRI register.
  66:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  67:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_BASEPRI_DISABLED         0U
  68:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  69:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  70:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module pre-compile time settings.                                         */
  71:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
  72:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  73:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  74:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Implements a syscall interface on SVC.
  75:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  76:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_USE_SYSCALL) || defined(__DOXYGEN__)
  77:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_USE_SYSCALL                FALSE
  78:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
  79:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  80:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  81:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Number of MPU regions to be saved/restored during context switch.
  82:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The first region is always region zero.
  83:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The use of this option has an overhead of 8 bytes for each
  84:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          region for each thread.
  85:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Allowed values are 0..4, zero means none.
  86:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  87:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_SWITCHED_REGIONS_NUMBER) || defined(__DOXYGEN__)
  88:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SWITCHED_REGIONS_NUMBER    0
  89:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
  90:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
  91:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
  92:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables stack overflow guard pages using MPU.
  93:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    This option can only be enabled if also option
  94:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CH_DBG_ENABLE_STACK_CHECK is enabled.
  95:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The use of this option has an overhead of 32 bytes for each
  96:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          thread.
  97:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
  98:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_ENABLE_GUARD_PAGES) || defined(__DOXYGEN__)
  99:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ENABLE_GUARD_PAGES         FALSE
 100:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 101:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 102:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 103:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   MPU region to be used to stack guards.
 104:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Make sure this region is not included in the
 105:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p PORT_SWITCHED_REGIONS_NUMBER regions range.
 106:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 107:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_USE_GUARD_MPU_REGION) || defined(__DOXYGEN__)
 108:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_USE_GUARD_MPU_REGION       MPU_REGION_7
 109:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 110:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 111:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 112:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Stack size for the system idle thread.
 113:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This size depends on the idle thread implementation, usually
 114:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          the idle thread should take no more space than those reserved
 115:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 116:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port it is set to 16 because the idle thread does have
 117:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          a stack frame when compiling without optimizations. You may
 118:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          reduce this value to zero when compiling with optimizations.
 119:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 120:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 121:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IDLE_THREAD_STACK_SIZE     16
 122:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 123:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 124:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 125:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 126:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This constant is used in the calculation of the correct working
 127:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          area size.
 128:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    In this port this value is conservatively set to 64 because the
 129:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          function @p chSchDoReschedule() can have a stack frame, especially
 130:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          with compiler optimizations disabled. The value can be reduced
 131:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          when compiler optimizations are enabled.
 132:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 133:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 134:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INT_REQUIRED_STACK         64
 135:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 136:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 137:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 138:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Enables the use of the WFI instruction in the idle thread loop.
 139:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 140:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_ENABLE_WFI_IDLE)
 141:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_ENABLE_WFI_IDLE          FALSE
 142:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 143:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 144:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 145:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   FPU support in context switch.
 146:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details Activating this option activates the FPU support in the kernel.
 147:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 148:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_USE_FPU)
 149:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_USE_FPU                  CORTEX_HAS_FPU
 150:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_USE_FPU == TRUE) && (CORTEX_HAS_FPU == FALSE)
 151:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* This setting requires an FPU presence check in case it is externally
 152:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    redefined.*/
 153:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "the selected core does not have an FPU"
 154:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 155:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 156:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 157:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Simplified priority handling flag.
 158:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details Activating this option makes the Kernel work in compact mode.
 159:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          In compact mode interrupts are disabled globally instead of
 160:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          raising the priority mask to some intermediate level.
 161:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 162:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_SIMPLIFIED_PRIORITY)
 163:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_SIMPLIFIED_PRIORITY      FALSE
 164:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 165:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 166:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 167:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   SVCALL handler priority.
 168:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The default SVCALL handler priority is defaulted to
 169:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAXIMUM_PRIORITY+1, this reserves the
 170:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAXIMUM_PRIORITY priority level as fast interrupts
 171:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          priority level.
 172:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 173:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_PRIORITY_SVCALL)
 174:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIORITY_SVCALL          (CORTEX_MAXIMUM_PRIORITY + 1U)
 175:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif !PORT_IRQ_IS_VALID_PRIORITY(CORTEX_PRIORITY_SVCALL)
 176:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* If it is externally redefined then better perform a validity check on it.*/
 177:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "invalid priority level specified for CORTEX_PRIORITY_SVCALL"
 178:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 179:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 180:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 181:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   NVIC PRIGROUP initialization expression.
 182:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details The default assigns all available priority bits as preemption
 183:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          priority with no sub-priority.
 184:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 185:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(CORTEX_PRIGROUP_INIT) || defined(__DOXYGEN__)
 186:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIGROUP_INIT            (7 - CORTEX_PRIORITY_BITS)
 187:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 188:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 189:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 190:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Derived constants and error checks.                                       */
 191:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 192:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 193:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER < 0) || (PORT_SWITCHED_REGIONS_NUMBER > 4)
 194:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #error "invalid PORT_SWITCHED_REGIONS_NUMBER value"
 195:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 196:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 197:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(_FROM_ASM_)
 198:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 199:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   MPU guard page size.
 200:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 201:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == TRUE) || defined(__DOXYGEN__)
 202:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_DBG_ENABLE_STACK_CHECK == FALSE
 203:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "PORT_ENABLE_GUARD_PAGES requires CH_DBG_ENABLE_STACK_CHECK"
 204:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 205:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if __MPU_PRESENT == 0
 206:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "MPU not present in current device"
 207:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 208:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_GUARD_PAGE_SIZE          32U
 209:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 210:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_GUARD_PAGE_SIZE          0U
 211:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 212:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* !defined(_FROM_ASM_) */
 213:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 214:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 215:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @name    Architecture and Compiler
 216:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @{
 217:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 218:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_MODEL == 3) || defined(__DOXYGEN__)
 219:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 220:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM3)
 221:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM3 not defined"
 222:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 223:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 224:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM3 == FALSE
 225:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "ChibiOS Cortex-M3 port not licensed"
 226:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 227:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 228:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 229:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Macro defining the specific ARM architecture.
 230:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 231:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_ARM_v7M
 232:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 233:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 234:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Name of the implemented architecture.
 235:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 236:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_NAME          "ARMv7-M"
 237:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 238:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 239:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Name of the architecture variant.
 240:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 241:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == FALSE) || defined(__DOXYGEN__)
 242:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_CORE_VARIANT_NAME        "Cortex-M3"
 243:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 244:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_CORE_VARIANT_NAME        "Cortex-M3 (MPU)"
 245:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 246:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 247:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_MODEL == 4)
 248:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 249:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM4)
 250:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM4 not defined"
 251:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 252:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 253:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM4 == FALSE
 254:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #error "ChibiOS Cortex-M4 port not licensed"
 255:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 256:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 257:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_ARM_v7ME
 258:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_NAME        "ARMv7E-M"
 259:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CORTEX_USE_FPU
 260:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 261:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4F"
 262:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 263:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4F (MPU)"
 264:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 265:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #else
 266:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 267:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4"
 268:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 269:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M4 (MPU)"
 270:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 271:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 272:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 273:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (CORTEX_MODEL == 7)
 274:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 275:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if !defined(CH_CUSTOMER_LIC_PORT_CM7)
 276:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "CH_CUSTOMER_LIC_PORT_CM7 not defined"
 277:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 278:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 279:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CH_CUSTOMER_LIC_PORT_CM7 == FALSE
 280:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #error "ChibiOS Cortex-M7 port not licensed"
 281:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 282:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 283:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_ARCHITECTURE_ARM_v7ME
 284:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #define PORT_ARCHITECTURE_NAME        "ARMv7E-M"
 285:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #if CORTEX_USE_FPU
 286:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 287:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7F"
 288:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 289:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7F (MPU)"
 290:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 291:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #else
 292:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #if PORT_ENABLE_GUARD_PAGES == FALSE
 293:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7"
 294:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #else
 295:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****       #define PORT_CORE_VARIANT_NAME    "Cortex-M7 (MPU)"
 296:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     #endif
 297:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   #endif
 298:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 299:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 300:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 301:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Port-specific information string.
 302:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 303:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 304:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INFO                       "Advanced kernel mode"
 305:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 306:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_INFO                       "Compact kernel mode"
 307:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 308:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /** @} */
 309:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 310:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
 311:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 312:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Maximum usable priority for normal ISRs.
 313:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 314:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      (CORTEX_PRIORITY_SVCALL + 1U)
 315:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 316:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 317:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   BASEPRI level within kernel lock.
 318:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 319:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_BASEPRI_KERNEL                                               \
 320:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   CORTEX_PRIO_MASK(CORTEX_MAX_KERNEL_PRIORITY)
 321:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 322:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 323:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_MAX_KERNEL_PRIORITY      0U
 324:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 325:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 326:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 327:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   PendSV priority level.
 328:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    This priority is enforced to be equal to
 329:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          @p CORTEX_MAX_KERNEL_PRIORITY, this handler always have the
 330:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          highest priority that cannot preempt the kernel.
 331:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 332:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define CORTEX_PRIORITY_PENDSV          CORTEX_MAX_KERNEL_PRIORITY
 333:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 334:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 335:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module data structures and types.                                         */
 336:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 337:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 338:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* The following code is not processed when the file is included from an
 339:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    asm module.*/
 340:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(_FROM_ASM_)
 341:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 342:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* The documentation of the following declarations is in chconf.h in order
 343:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****    to not have duplicated structure names into the documentation.*/
 344:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if !defined(__DOXYGEN__)
 345:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_extctx {
 346:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r0;
 347:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r1;
 348:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r2;
 349:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r3;
 350:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r12;
 351:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      lr_thd;
 352:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      pc;
 353:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      xpsr;
 354:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_USE_FPU
 355:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s0;
 356:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s1;
 357:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s2;
 358:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s3;
 359:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s4;
 360:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s5;
 361:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s6;
 362:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s7;
 363:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s8;
 364:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s9;
 365:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s10;
 366:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s11;
 367:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s12;
 368:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s13;
 369:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s14;
 370:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s15;
 371:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      fpscr;
 372:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      reserved;
 373:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_USE_FPU */
 374:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 375:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 376:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 377:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 378:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Link context structure.
 379:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This structure is used when there is the need to save extra
 380:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          context information that is not part of the registers stacked
 381:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          in HW.
 382:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 383:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_linkctx {
 384:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t              control;
 385:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_extctx    *ectxp;
 386:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 387:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 388:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 389:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_intctx {
 390:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER > 0) || defined(__DOXYGEN__)
 391:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct {
 392:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t    rbar;
 393:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t    rasr;
 394:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   } regions[PORT_SWITCHED_REGIONS_NUMBER];
 395:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 396:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_USE_FPU
 397:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s16;
 398:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s17;
 399:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s18;
 400:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s19;
 401:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s20;
 402:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s21;
 403:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s22;
 404:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s23;
 405:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s24;
 406:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s25;
 407:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s26;
 408:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s27;
 409:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s28;
 410:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s29;
 411:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s30;
 412:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      s31;
 413:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_USE_FPU */
 414:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r4;
 415:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r5;
 416:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r6;
 417:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r7;
 418:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r8;
 419:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r9;
 420:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r10;
 421:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      r11;
 422:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   uint32_t      lr;
 423:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 424:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 425:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** struct port_context {
 426:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_intctx    *sp;
 427:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 428:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct {
 429:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     uint32_t            psp;
 430:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     const void          *p;
 431:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   } syscall;
 432:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 433:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** };
 434:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* !defined(__DOXYGEN__) */
 435:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 436:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 437:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module macros.                                                            */
 438:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 439:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 440:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* By default threads have no syscall context information.*/
 441:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_USE_SYSCALL == TRUE) || defined(__DOXYGEN__)
 442:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop)                              \
 443:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.syscall.psp = (uint32_t)(wtop);                                 \
 444:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.syscall.p   = NULL;
 445:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 446:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop)
 447:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 448:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 449:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* By default threads have all regions disabled.*/
 450:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_SWITCHED_REGIONS_NUMBER == 0) || defined(__DOXYGEN__)
 451:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)
 452:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 1) || defined(__DOXYGEN__)
 453:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 454:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 455:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U
 456:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 2) || defined(__DOXYGEN__)
 457:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 458:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 459:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 460:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 461:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U
 462:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 3) || defined(__DOXYGEN__)
 463:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 464:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 465:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 466:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 467:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U;                                      \
 468:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rbar  = 0U;                                      \
 469:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rasr  = 0U
 470:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #elif (PORT_SWITCHED_REGIONS_NUMBER == 4) || defined(__DOXYGEN__)
 471:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define __PORT_SETUP_CONTEXT_MPU(tp)                                        \
 472:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rbar  = 0U;                                      \
 473:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[0].rasr  = 0U;                                      \
 474:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rbar  = 0U;                                      \
 475:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[1].rasr  = 0U;                                      \
 476:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rbar  = 0U;                                      \
 477:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[2].rasr  = 0U;                                      \
 478:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[3].rbar  = 0U;                                      \
 479:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->regions[3].rasr  = 0U
 480:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 481:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 482:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 483:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 484:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 485:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This code usually setup the context switching frame represented
 486:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          by an @p port_intctx structure.
 487:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 488:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 489:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                 \
 490:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                         sizeof (struct port_intctx));       \
 491:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->r4 = (uint32_t)(pf);                                        \
 492:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->r5 = (uint32_t)(arg);                                       \
 493:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   (tp)->ctx.sp->lr = (uint32_t)_port_thread_start;                          \
 494:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __PORT_SETUP_CONTEXT_MPU(tp);                                             \
 495:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __PORT_SETUP_CONTEXT_SYSCALL(tp, wtop);                                   \
 496:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 497:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 498:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** //  __PORT_SETUP_CONTEXT_MPU(tp)
 499:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 500:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 501:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Computes the thread working area global size.
 502:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    There is no need to perform alignments in this macro.
 503:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 504:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WA_SIZE(n) ((size_t)PORT_GUARD_PAGE_SIZE +                     \
 505:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          sizeof (struct port_intctx) +                      \
 506:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          sizeof (struct port_extctx) +                      \
 507:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          (size_t)(n) +                                      \
 508:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                          (size_t)PORT_INT_REQUIRED_STACK)
 509:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 510:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 511:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Static working area allocation.
 512:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro is used to allocate a static thread working area
 513:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          aligned as both position and size.
 514:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 515:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] s         the name to be assigned to the stack array
 516:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] n         the stack size to be assigned to the thread
 517:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 518:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (PORT_ENABLE_GUARD_PAGES == FALSE) || defined(__DOXYGEN__)
 519:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 520:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 521:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 522:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_WORKING_AREA(s, n)                                             \
 523:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   ALIGNED_VAR(32) stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 524:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 525:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 526:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 527:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ prologue code.
 528:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 529:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          enabled to invoke system APIs.
 530:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 531:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_PROLOGUE()
 532:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 533:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 534:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ epilogue code.
 535:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 536:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          enabled to invoke system APIs.
 537:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 538:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_EPILOGUE() _port_irq_epilogue()
 539:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 540:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 541:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   IRQ handler function declaration.
 542:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    @p id can be a function name or a vector number depending on the
 543:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          port implementation.
 544:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 545:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 546:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_HANDLER(id) extern "C" void id(void)
 547:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 548:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_IRQ_HANDLER(id) void id(void)
 549:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 550:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 551:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 552:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Fast IRQ handler function declaration.
 553:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    @p id can be a function name or a vector number depending on the
 554:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          port implementation.
 555:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 556:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 557:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_FAST_IRQ_HANDLER(id) extern "C" void id(void)
 558:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 559:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define PORT_FAST_IRQ_HANDLER(id) void id(void)
 560:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 561:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 562:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 563:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Performs a context switch between two threads.
 564:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details This is the most critical code in any port, this function
 565:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          is responsible for the context switch between 2 threads.
 566:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 567:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          switch performance so optimize here as much as you can.
 568:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 569:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] ntp       the thread to be switched in
 570:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] otp       the thread to be switched out
 571:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 572:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if (CH_DBG_ENABLE_STACK_CHECK == FALSE) || defined(__DOXYGEN__)
 573:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) _port_switch(ntp, otp)
 574:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 575:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if PORT_ENABLE_GUARD_PAGES == FALSE
 576:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) {                                             \
 577:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   struct port_intctx *r13 = (struct port_intctx *)__get_PSP();              \
 578:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   if ((stkalign_t *)(r13 - 1) < (otp)->wabase) {                            \
 579:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****     chSysHalt("stack overflow");                                            \
 580:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   }                                                                         \
 581:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   _port_switch(ntp, otp);                                                   \
 582:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 583:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else
 584:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #define port_switch(ntp, otp) {                                             \
 585:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   _port_switch(ntp, otp);                                                   \
 586:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                                                                             \
 587:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   /* Setting up the guard page for the switched-in thread.*/                \
 588:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   mpuSetRegionAddress(PORT_USE_GUARD_MPU_REGION,                            \
 589:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****                       chThdGetSelfX()->wabase);                             \
 590:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 591:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 592:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 593:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 594:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 595:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* External declarations.                                                    */
 596:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 597:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 598:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 599:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** extern "C" {
 600:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 601:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void port_init(void);
 602:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_irq_epilogue(void);
 603:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 604:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_thread_start(void);
 605:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_switch_from_isr(void);
 606:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void _port_exit_from_isr(void);
 607:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if PORT_USE_SYSCALL == TRUE
 608:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   void port_unprivileged_jump(uint32_t pc, uint32_t psp);
 609:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 610:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #ifdef __cplusplus
 611:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 612:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 613:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 614:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 615:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /* Module inline functions.                                                  */
 616:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /*===========================================================================*/
 617:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 618:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 619:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Returns a word encoding the current interrupts status.
 620:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 621:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The interrupts status.
 622:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 623:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE syssts_t port_get_irq_status(void) {
 624:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   syssts_t sts;
 625:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 626:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 627:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   sts = (syssts_t)__get_BASEPRI();
 628:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 629:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   sts = (syssts_t)__get_PRIMASK();
 630:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 631:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return sts;
 632:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 633:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 634:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 635:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Checks the interrupt status.
 636:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 637:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @param[in] sts       the interrupt status word
 638:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 639:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The interrupt status.
 640:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval false        the word specified a disabled interrupts status.
 641:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval true         the word specified an enabled interrupts status.
 642:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 643:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE bool port_irq_enabled(syssts_t sts) {
 644:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 645:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 646:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 647:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 648:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return (sts & (syssts_t)1) == (syssts_t)0;
 649:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 650:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 651:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 652:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 653:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Determines the current execution context.
 654:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *
 655:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @return              The execution context.
 656:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval false        not running in ISR mode.
 657:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @retval true         running in ISR mode.
 658:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 659:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE bool port_is_isr_context(void) {
 660:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 661:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 662:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 663:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 664:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 665:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-lock action.
 666:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function raises the base priority to kernel
 667:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 668:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_lock(void) {
 670:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 671:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 672:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 673:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if __CM7_REV <= 1
 674:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 675:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 676:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_KERNEL);
 678:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 679:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if __CM7_REV <= 1
 680:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __enable_irq();
 681:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 682:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif
 683:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 684:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __disable_irq();
 685:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 686:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 687:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 688:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 689:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-unlock action.
 690:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function lowers the base priority to user
 691:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 692:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_unlock(void) {
 694:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 695:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if CORTEX_SIMPLIFIED_PRIORITY == FALSE
 696:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
 697:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 698:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   __enable_irq();
 699:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #endif /* CORTEX_SIMPLIFIED_PRIORITY */
 700:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 701:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 702:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 703:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-lock action from an interrupt handler.
 704:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function raises the base priority to kernel
 705:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 706:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Same as @p port_lock() in this port.
 707:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 708:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_lock_from_isr(void) {
 164              		.loc 4 708 27 view .LVU46
 165              	.LBE83:
 166              	.LBE94:
 709:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 710:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   port_lock();
 167              		.loc 4 710 3 view .LVU47
 168              	.LBB95:
 169              	.LBB91:
 170              	.LBB84:
 171              	.LBI84:
 669:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 172              		.loc 4 669 27 view .LVU48
 173              	.LBE84:
 174              	.LBE91:
 175              	.LBE95:
 677:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #if defined(__CM7_REV)
 176              		.loc 4 677 3 view .LVU49
 177              	.LBB96:
 178              	.LBB92:
 179              	.LBB89:
 180              	.LBB85:
 181              	.LBI85:
 182              		.file 5 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /*
   8:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  10:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  12:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  16:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  *
  18:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  * limitations under the License.
  23:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
  24:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  25:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  28:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  38:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
  39:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  43:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  46:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  49:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif                                           
  52:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  55:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __USED
  56:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  58:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  61:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  64:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  67:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  70:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  78:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  86:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
  94:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 102:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 110:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 113:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 116:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 117:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 118:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   @{
 122:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 123:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 124:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 125:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 129:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 131:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 133:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 134:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 135:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 136:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 140:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 142:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 144:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 145:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 146:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 147:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Control Register value
 150:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 151:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 153:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 154:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 155:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 157:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 158:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 159:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 160:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 162:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 166:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 168:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 169:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 170:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 172:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 173:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 174:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 175:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 176:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 177:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 181:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 183:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 185:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 187:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 189:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 193:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 195:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 197:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 198:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 199:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 200:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 201:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 205:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 207:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 208:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 209:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 211:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 212:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 213:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 214:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 215:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 219:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 221:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 222:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 223:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 225:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 226:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 227:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 228:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 229:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 233:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 235:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 236:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 237:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 239:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 240:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 241:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 243:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 247:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 249:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 250:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 251:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 253:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 254:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 255:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 265:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 266:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 268:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 269:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 270:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 271:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 272:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 273:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 277:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 279:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 281:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 282:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 283:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 285:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 289:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 291:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 293:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 294:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 295:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 296:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 297:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 301:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 303:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 304:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 305:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 307:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 308:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 309:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 310:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 312:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 316:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 318:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 319:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 320:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 322:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 323:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 324:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 325:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 326:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 327:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 331:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 333:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 335:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 336:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 337:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 339:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 343:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 345:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 347:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 348:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 349:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 350:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 352:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               SP Register value
 355:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 356:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 358:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 359:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 360:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 362:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 363:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 364:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 365:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 366:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 370:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 372:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 374:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 375:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 376:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 377:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 378:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 382:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 384:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 385:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 386:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 388:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 389:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 390:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 391:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 393:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 397:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 399:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 400:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 401:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 403:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 404:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 405:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 406:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 407:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 408:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 412:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 414:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 416:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 417:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 418:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 420:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 424:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 426:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 428:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 429:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 430:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 431:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 435:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 439:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 441:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 443:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 444:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 445:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 446:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 450:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 452:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 454:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 455:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 456:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 457:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 461:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 463:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 464:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 465:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 467:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 468:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 469:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 470:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 472:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 476:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 478:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   uint32_t result;
 479:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 480:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   return(result);
 482:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** }
 483:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** #endif
 484:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 485:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** 
 486:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** /**
 487:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****  */
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 183              		.loc 5 491 27 view .LVU50
 184              	.LBB86:
 492:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 493:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 185              		.loc 5 493 3 view .LVU51
 186              	.LBE86:
 187              	.LBE85:
 188              	.LBE89:
 189              	.LBE92:
 190              	.LBE96:
 319:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = (thread_t *)p;
 191              		.loc 1 319 29 is_stmt 0 view .LVU52
 192 0000 08B5     		push	{r3, lr}
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 3, -8
 195              		.cfi_offset 14, -4
 196              	.LBB97:
 197              	.LBB93:
 198              	.LBB90:
 199              	.LBB88:
 200              	.LBB87:
 201              		.loc 5 493 3 view .LVU53
 202 0002 2023     		movs	r3, #32
 203              		.syntax unified
 204              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 205 0004 83F31188 		MSR basepri, r3
 206              	@ 0 "" 2
 207              	.LVL7:
 208              		.loc 5 493 3 view .LVU54
 209              		.thumb
 210              		.syntax unified
 211              	.LBE87:
 212              	.LBE88:
 213              	.LBE90:
 214              	.LBE93:
 215              	.LBE97:
 396:./lib/chibios/os/rt/include/chsys.h ****   _stats_start_measure_crit_isr();
 216              		.loc 3 396 34 is_stmt 1 view .LVU55
 397:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_lock_from_isr();
 217              		.loc 3 397 29 view .LVU56
 323:lib/chibios/os/rt/src/chschd.c ****   switch (tp->state) {
 218              		.loc 1 323 3 view .LVU57
 219 0008 027C     		ldrb	r2, [r0, #16]	@ zero_extendqisi2
 220 000a 0023     		movs	r3, #0
 221 000c 052A     		cmp	r2, #5
 222 000e 06D8     		bhi	.L10
 223 0010 DFE802F0 		tbb	[pc, r2]
 224              	.L12:
 225 0014 0B       		.byte	(.L17-.L12)/2
 226 0015 05       		.byte	(.L10-.L12)/2
 227 0016 05       		.byte	(.L10-.L12)/2
 228 0017 03       		.byte	(.L14-.L12)/2
 229 0018 12       		.byte	(.L13-.L12)/2
 230 0019 0E       		.byte	(.L11-.L12)/2
 231              		.p2align 1
 232              	.L14:
 324:lib/chibios/os/rt/src/chschd.c ****   case CH_STATE_READY:
 325:lib/chibios/os/rt/src/chschd.c ****     /* Handling the special case where the thread has been made ready by
 326:lib/chibios/os/rt/src/chschd.c ****        another thread with higher priority.*/
 327:lib/chibios/os/rt/src/chschd.c ****     chSysUnlockFromISR();
 328:lib/chibios/os/rt/src/chschd.c ****     return;
 329:lib/chibios/os/rt/src/chschd.c ****   case CH_STATE_SUSPENDED:
 330:lib/chibios/os/rt/src/chschd.c ****     *tp->u.wttrp = NULL;
 233              		.loc 1 330 5 view .LVU58
 234              		.loc 1 330 11 is_stmt 0 view .LVU59
 235 001a 4269     		ldr	r2, [r0, #20]
 236              		.loc 1 330 18 view .LVU60
 237 001c 1360     		str	r3, [r2]
 331:lib/chibios/os/rt/src/chschd.c ****     break;
 238              		.loc 1 331 5 is_stmt 1 view .LVU61
 239              	.L10:
 332:lib/chibios/os/rt/src/chschd.c **** #if CH_CFG_USE_SEMAPHORES == TRUE
 333:lib/chibios/os/rt/src/chschd.c ****   case CH_STATE_WTSEM:
 334:lib/chibios/os/rt/src/chschd.c ****     chSemFastSignalI(tp->u.wtsemp);
 335:lib/chibios/os/rt/src/chschd.c **** #endif
 336:lib/chibios/os/rt/src/chschd.c ****     /* Falls through.*/
 337:lib/chibios/os/rt/src/chschd.c ****   case CH_STATE_QUEUED:
 338:lib/chibios/os/rt/src/chschd.c ****     /* Falls through.*/
 339:lib/chibios/os/rt/src/chschd.c **** #if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
 340:lib/chibios/os/rt/src/chschd.c ****   case CH_STATE_WTCOND:
 341:lib/chibios/os/rt/src/chschd.c **** #endif
 342:lib/chibios/os/rt/src/chschd.c ****     /* States requiring dequeuing.*/
 343:lib/chibios/os/rt/src/chschd.c ****     (void) queue_dequeue(tp);
 344:lib/chibios/os/rt/src/chschd.c ****     break;
 345:lib/chibios/os/rt/src/chschd.c ****   default:
 346:lib/chibios/os/rt/src/chschd.c ****     /* Any other state, nothing to do.*/
 347:lib/chibios/os/rt/src/chschd.c ****     break;
 348:lib/chibios/os/rt/src/chschd.c ****   }
 349:lib/chibios/os/rt/src/chschd.c ****   tp->u.rdymsg = MSG_TIMEOUT;
 240              		.loc 1 349 3 view .LVU62
 241              		.loc 1 349 16 is_stmt 0 view .LVU63
 242 001e 4FF0FF33 		mov	r3, #-1
 243 0022 4361     		str	r3, [r0, #20]
 350:lib/chibios/os/rt/src/chschd.c ****   (void) chSchReadyI(tp);
 244              		.loc 1 350 3 is_stmt 1 view .LVU64
 245              		.loc 1 350 10 is_stmt 0 view .LVU65
 246 0024 FFF7FEFF 		bl	chSchReadyI
 247              	.LVL8:
 351:lib/chibios/os/rt/src/chschd.c ****   chSysUnlockFromISR();
 248              		.loc 1 351 3 is_stmt 1 view .LVU66
 249              	.LBB98:
 250              	.LBI98:
 398:./lib/chibios/os/rt/include/chsys.h **** }
 399:./lib/chibios/os/rt/include/chsys.h **** 
 400:./lib/chibios/os/rt/include/chsys.h **** /**
 401:./lib/chibios/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state from within an interrupt handler.
 402:./lib/chibios/os/rt/include/chsys.h ****  *
 403:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API may do nothing on some architectures, it is required
 404:./lib/chibios/os/rt/include/chsys.h ****  *          because on ports that support preemptable interrupt handlers
 405:./lib/chibios/os/rt/include/chsys.h ****  *          it is required to raise the interrupt mask to the same level of
 406:./lib/chibios/os/rt/include/chsys.h ****  *          the system mutual exclusion zone.<br>
 407:./lib/chibios/os/rt/include/chsys.h ****  *          It is good practice to invoke this API after invoking any I-class
 408:./lib/chibios/os/rt/include/chsys.h ****  *          syscall from an interrupt handler.
 409:./lib/chibios/os/rt/include/chsys.h ****  * @note    This API must be invoked exclusively from interrupt handlers.
 410:./lib/chibios/os/rt/include/chsys.h ****  *
 411:./lib/chibios/os/rt/include/chsys.h ****  * @special
 412:./lib/chibios/os/rt/include/chsys.h ****  */
 413:./lib/chibios/os/rt/include/chsys.h **** static inline void chSysUnlockFromISR(void) {
 251              		.loc 3 413 20 view .LVU67
 252              	.LBB99:
 414:./lib/chibios/os/rt/include/chsys.h **** 
 415:./lib/chibios/os/rt/include/chsys.h ****   _dbg_check_unlock_from_isr();
 253              		.loc 3 415 31 view .LVU68
 416:./lib/chibios/os/rt/include/chsys.h ****   _stats_stop_measure_crit_isr();
 254              		.loc 3 416 33 view .LVU69
 417:./lib/chibios/os/rt/include/chsys.h ****   port_unlock_from_isr();
 255              		.loc 3 417 3 view .LVU70
 256              	.LBB100:
 257              	.LBI100:
 711:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** }
 712:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 713:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** /**
 714:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @brief   Kernel-unlock action from an interrupt handler.
 715:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @details In this port this function lowers the base priority to user
 716:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  *          level.
 717:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  * @note    Same as @p port_unlock() in this port.
 718:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****  */
 719:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** __STATIC_FORCEINLINE void port_unlock_from_isr(void) {
 258              		.loc 4 719 27 view .LVU71
 259              	.LBE100:
 260              	.LBE99:
 261              	.LBE98:
 720:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 721:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h ****   port_unlock();
 262              		.loc 4 721 3 view .LVU72
 263              	.LBB109:
 264              	.LBB107:
 265              	.LBB105:
 266              	.LBB101:
 267              	.LBI101:
 693:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** 
 268              		.loc 4 693 27 view .LVU73
 269              	.LBE101:
 270              	.LBE105:
 271              	.LBE107:
 272              	.LBE109:
 696:./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h **** #else /* CORTEX_SIMPLIFIED_PRIORITY */
 273              		.loc 4 696 3 view .LVU74
 274              	.LBB110:
 275              	.LBB108:
 276              	.LBB106:
 277              	.LBB104:
 278              	.LBB102:
 279              	.LBI102:
 491:./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h **** {
 280              		.loc 5 491 27 view .LVU75
 281              	.LBB103:
 282              		.loc 5 493 3 view .LVU76
 283 0028 0023     		movs	r3, #0
 284              	.LVL9:
 285              	.L17:
 286              		.loc 5 493 3 is_stmt 0 view .LVU77
 287              		.syntax unified
 288              	@ 493 "./lib/chibios/os/common/ext/ARM/CMSIS/Core/Include/cmsis_gcc.h" 1
 289 002a 83F31188 		MSR basepri, r3
 290              	@ 0 "" 2
 291              		.thumb
 292              		.syntax unified
 293              	.LBE103:
 294              	.LBE102:
 295              	.LBE104:
 296              	.LBE106:
 297              	.LBE108:
 298              	.LBE110:
 352:lib/chibios/os/rt/src/chschd.c **** }
 299              		.loc 1 352 1 view .LVU78
 300 002e 08BD     		pop	{r3, pc}
 301              	.LVL10:
 302              	.L11:
 334:lib/chibios/os/rt/src/chschd.c **** #endif
 303              		.loc 1 334 5 is_stmt 1 view .LVU79
 334:lib/chibios/os/rt/src/chschd.c **** #endif
 304              		.loc 1 334 27 is_stmt 0 view .LVU80
 305 0030 4269     		ldr	r2, [r0, #20]
 306              	.LVL11:
 307              	.LBB111:
 308              	.LBI111:
 309              		.file 6 "./lib/chibios/os/rt/include/chsem.h"
   1:./lib/chibios/os/rt/include/chsem.h **** /*
   2:./lib/chibios/os/rt/include/chsem.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chsem.h **** 
   4:./lib/chibios/os/rt/include/chsem.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chsem.h **** 
   6:./lib/chibios/os/rt/include/chsem.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chsem.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chsem.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chsem.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chsem.h **** 
  11:./lib/chibios/os/rt/include/chsem.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chsem.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chsem.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chsem.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chsem.h **** 
  16:./lib/chibios/os/rt/include/chsem.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chsem.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chsem.h **** */
  19:./lib/chibios/os/rt/include/chsem.h **** 
  20:./lib/chibios/os/rt/include/chsem.h **** /**
  21:./lib/chibios/os/rt/include/chsem.h ****  * @file    rt/include/chsem.h
  22:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Semaphores macros and structures.
  23:./lib/chibios/os/rt/include/chsem.h ****  *
  24:./lib/chibios/os/rt/include/chsem.h ****  * @addtogroup semaphores
  25:./lib/chibios/os/rt/include/chsem.h ****  * @{
  26:./lib/chibios/os/rt/include/chsem.h ****  */
  27:./lib/chibios/os/rt/include/chsem.h **** 
  28:./lib/chibios/os/rt/include/chsem.h **** #ifndef CHSEM_H
  29:./lib/chibios/os/rt/include/chsem.h **** #define CHSEM_H
  30:./lib/chibios/os/rt/include/chsem.h **** 
  31:./lib/chibios/os/rt/include/chsem.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
  32:./lib/chibios/os/rt/include/chsem.h **** 
  33:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chsem.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chsem.h **** 
  37:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  38:./lib/chibios/os/rt/include/chsem.h **** /* Module pre-compile time settings.                                         */
  39:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  40:./lib/chibios/os/rt/include/chsem.h **** 
  41:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  42:./lib/chibios/os/rt/include/chsem.h **** /* Derived constants and error checks.                                       */
  43:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  44:./lib/chibios/os/rt/include/chsem.h **** 
  45:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  46:./lib/chibios/os/rt/include/chsem.h **** /* Module data structures and types.                                         */
  47:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  48:./lib/chibios/os/rt/include/chsem.h **** 
  49:./lib/chibios/os/rt/include/chsem.h **** /**
  50:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Semaphore structure.
  51:./lib/chibios/os/rt/include/chsem.h ****  */
  52:./lib/chibios/os/rt/include/chsem.h **** typedef struct ch_semaphore {
  53:./lib/chibios/os/rt/include/chsem.h ****   threads_queue_t       queue;      /**< @brief Queue of the threads sleeping
  54:./lib/chibios/os/rt/include/chsem.h ****                                                 on this semaphore.          */
  55:./lib/chibios/os/rt/include/chsem.h ****   cnt_t                 cnt;        /**< @brief The semaphore counter.      */
  56:./lib/chibios/os/rt/include/chsem.h **** } semaphore_t;
  57:./lib/chibios/os/rt/include/chsem.h **** 
  58:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  59:./lib/chibios/os/rt/include/chsem.h **** /* Module macros.                                                            */
  60:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  61:./lib/chibios/os/rt/include/chsem.h **** 
  62:./lib/chibios/os/rt/include/chsem.h **** /**
  63:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Data part of a static semaphore initializer.
  64:./lib/chibios/os/rt/include/chsem.h ****  * @details This macro should be used when statically initializing a semaphore
  65:./lib/chibios/os/rt/include/chsem.h ****  *          that is part of a bigger structure.
  66:./lib/chibios/os/rt/include/chsem.h ****  *
  67:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] name      the name of the semaphore variable
  68:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] n         the counter initial value, this value must be
  69:./lib/chibios/os/rt/include/chsem.h ****  *                      non-negative
  70:./lib/chibios/os/rt/include/chsem.h ****  */
  71:./lib/chibios/os/rt/include/chsem.h **** #define _SEMAPHORE_DATA(name, n) {_THREADS_QUEUE_DATA(name.queue), n}
  72:./lib/chibios/os/rt/include/chsem.h **** 
  73:./lib/chibios/os/rt/include/chsem.h **** /**
  74:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Static semaphore initializer.
  75:./lib/chibios/os/rt/include/chsem.h ****  * @details Statically initialized semaphores require no explicit
  76:./lib/chibios/os/rt/include/chsem.h ****  *          initialization using @p chSemInit().
  77:./lib/chibios/os/rt/include/chsem.h ****  *
  78:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] name      the name of the semaphore variable
  79:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] n         the counter initial value, this value must be
  80:./lib/chibios/os/rt/include/chsem.h ****  *                      non-negative
  81:./lib/chibios/os/rt/include/chsem.h ****  */
  82:./lib/chibios/os/rt/include/chsem.h **** #define SEMAPHORE_DECL(name, n) semaphore_t name = _SEMAPHORE_DATA(name, n)
  83:./lib/chibios/os/rt/include/chsem.h **** 
  84:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  85:./lib/chibios/os/rt/include/chsem.h **** /* External declarations.                                                    */
  86:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  87:./lib/chibios/os/rt/include/chsem.h **** 
  88:./lib/chibios/os/rt/include/chsem.h **** #ifdef __cplusplus
  89:./lib/chibios/os/rt/include/chsem.h **** extern "C" {
  90:./lib/chibios/os/rt/include/chsem.h **** #endif
  91:./lib/chibios/os/rt/include/chsem.h ****   void chSemObjectInit(semaphore_t *sp, cnt_t n);
  92:./lib/chibios/os/rt/include/chsem.h ****   void chSemResetWithMessage(semaphore_t *sp, cnt_t n, msg_t msg);
  93:./lib/chibios/os/rt/include/chsem.h ****   void chSemResetWithMessageI(semaphore_t *sp, cnt_t n, msg_t msg);
  94:./lib/chibios/os/rt/include/chsem.h ****   msg_t chSemWait(semaphore_t *sp);
  95:./lib/chibios/os/rt/include/chsem.h ****   msg_t chSemWaitS(semaphore_t *sp);
  96:./lib/chibios/os/rt/include/chsem.h ****   msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout);
  97:./lib/chibios/os/rt/include/chsem.h ****   msg_t chSemWaitTimeoutS(semaphore_t *sp, sysinterval_t timeout);
  98:./lib/chibios/os/rt/include/chsem.h ****   void chSemSignal(semaphore_t *sp);
  99:./lib/chibios/os/rt/include/chsem.h ****   void chSemSignalI(semaphore_t *sp);
 100:./lib/chibios/os/rt/include/chsem.h ****   void chSemAddCounterI(semaphore_t *sp, cnt_t n);
 101:./lib/chibios/os/rt/include/chsem.h ****   msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw);
 102:./lib/chibios/os/rt/include/chsem.h **** #ifdef __cplusplus
 103:./lib/chibios/os/rt/include/chsem.h **** }
 104:./lib/chibios/os/rt/include/chsem.h **** #endif
 105:./lib/chibios/os/rt/include/chsem.h **** 
 106:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
 107:./lib/chibios/os/rt/include/chsem.h **** /* Module inline functions.                                                  */
 108:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
 109:./lib/chibios/os/rt/include/chsem.h **** 
 110:./lib/chibios/os/rt/include/chsem.h **** /**
 111:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Performs a reset operation on the semaphore.
 112:./lib/chibios/os/rt/include/chsem.h ****  * @post    After invoking this function all the threads waiting on the
 113:./lib/chibios/os/rt/include/chsem.h ****  *          semaphore, if any, are released and the semaphore counter is set
 114:./lib/chibios/os/rt/include/chsem.h ****  *          to the specified, non negative, value.
 115:./lib/chibios/os/rt/include/chsem.h ****  * @note    This function implicitly sends @p MSG_RESET as message.
 116:./lib/chibios/os/rt/include/chsem.h ****  *
 117:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] sp        pointer to a @p semaphore_t structure
 118:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] n         the new value of the semaphore counter. The value must
 119:./lib/chibios/os/rt/include/chsem.h ****  *                      be non-negative.
 120:./lib/chibios/os/rt/include/chsem.h ****  *
 121:./lib/chibios/os/rt/include/chsem.h ****  * @api
 122:./lib/chibios/os/rt/include/chsem.h ****  */
 123:./lib/chibios/os/rt/include/chsem.h **** static inline void chSemReset(semaphore_t *sp, cnt_t n) {
 124:./lib/chibios/os/rt/include/chsem.h **** 
 125:./lib/chibios/os/rt/include/chsem.h ****   chSemResetWithMessage(sp, n, MSG_RESET);
 126:./lib/chibios/os/rt/include/chsem.h **** }
 127:./lib/chibios/os/rt/include/chsem.h **** 
 128:./lib/chibios/os/rt/include/chsem.h **** /**
 129:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Performs a reset operation on the semaphore.
 130:./lib/chibios/os/rt/include/chsem.h ****  * @post    After invoking this function all the threads waiting on the
 131:./lib/chibios/os/rt/include/chsem.h ****  *          semaphore, if any, are released and the semaphore counter is set
 132:./lib/chibios/os/rt/include/chsem.h ****  *          to the specified, non negative, value.
 133:./lib/chibios/os/rt/include/chsem.h ****  * @post    This function does not reschedule so a call to a rescheduling
 134:./lib/chibios/os/rt/include/chsem.h ****  *          function must be performed before unlocking the kernel. Note that
 135:./lib/chibios/os/rt/include/chsem.h ****  *          interrupt handlers always reschedule on exit so an explicit
 136:./lib/chibios/os/rt/include/chsem.h ****  *          reschedule must not be performed in ISRs.
 137:./lib/chibios/os/rt/include/chsem.h ****  * @note    This function implicitly sends @p MSG_RESET as message.
 138:./lib/chibios/os/rt/include/chsem.h ****  *
 139:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] sp        pointer to a @p semaphore_t structure
 140:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] n         the new value of the semaphore counter. The value must
 141:./lib/chibios/os/rt/include/chsem.h ****  *                      be non-negative.
 142:./lib/chibios/os/rt/include/chsem.h ****  *
 143:./lib/chibios/os/rt/include/chsem.h ****  * @iclass
 144:./lib/chibios/os/rt/include/chsem.h ****  */
 145:./lib/chibios/os/rt/include/chsem.h **** static inline void chSemResetI(semaphore_t *sp, cnt_t n) {
 146:./lib/chibios/os/rt/include/chsem.h **** 
 147:./lib/chibios/os/rt/include/chsem.h ****   chSemResetWithMessageI(sp, n, MSG_RESET);
 148:./lib/chibios/os/rt/include/chsem.h **** }
 149:./lib/chibios/os/rt/include/chsem.h **** 
 150:./lib/chibios/os/rt/include/chsem.h **** /**
 151:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Decreases the semaphore counter.
 152:./lib/chibios/os/rt/include/chsem.h ****  * @details This macro can be used when the counter is known to be positive.
 153:./lib/chibios/os/rt/include/chsem.h ****  *
 154:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] sp        pointer to a @p semaphore_t structure
 155:./lib/chibios/os/rt/include/chsem.h ****  *
 156:./lib/chibios/os/rt/include/chsem.h ****  * @iclass
 157:./lib/chibios/os/rt/include/chsem.h ****  */
 158:./lib/chibios/os/rt/include/chsem.h **** static inline void chSemFastWaitI(semaphore_t *sp) {
 159:./lib/chibios/os/rt/include/chsem.h **** 
 160:./lib/chibios/os/rt/include/chsem.h ****   chDbgCheckClassI();
 161:./lib/chibios/os/rt/include/chsem.h **** 
 162:./lib/chibios/os/rt/include/chsem.h ****   sp->cnt--;
 163:./lib/chibios/os/rt/include/chsem.h **** }
 164:./lib/chibios/os/rt/include/chsem.h **** 
 165:./lib/chibios/os/rt/include/chsem.h **** /**
 166:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Increases the semaphore counter.
 167:./lib/chibios/os/rt/include/chsem.h ****  * @details This macro can be used when the counter is known to be not
 168:./lib/chibios/os/rt/include/chsem.h ****  *          negative.
 169:./lib/chibios/os/rt/include/chsem.h ****  *
 170:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] sp        pointer to a @p semaphore_t structure
 171:./lib/chibios/os/rt/include/chsem.h ****  *
 172:./lib/chibios/os/rt/include/chsem.h ****  * @iclass
 173:./lib/chibios/os/rt/include/chsem.h ****  */
 174:./lib/chibios/os/rt/include/chsem.h **** static inline void chSemFastSignalI(semaphore_t *sp) {
 310              		.loc 6 174 20 is_stmt 1 view .LVU81
 311              	.LBB112:
 175:./lib/chibios/os/rt/include/chsem.h **** 
 176:./lib/chibios/os/rt/include/chsem.h ****   chDbgCheckClassI();
 312              		.loc 6 176 21 view .LVU82
 177:./lib/chibios/os/rt/include/chsem.h **** 
 178:./lib/chibios/os/rt/include/chsem.h ****   sp->cnt++;
 313              		.loc 6 178 3 view .LVU83
 314              		.loc 6 178 10 is_stmt 0 view .LVU84
 315 0032 9368     		ldr	r3, [r2, #8]
 316 0034 0133     		adds	r3, r3, #1
 317 0036 9360     		str	r3, [r2, #8]
 318              	.LVL12:
 319              	.L13:
 320              		.loc 6 178 10 view .LVU85
 321              	.LBE112:
 322              	.LBE111:
 343:lib/chibios/os/rt/src/chschd.c ****     break;
 323              		.loc 1 343 5 is_stmt 1 view .LVU86
 324              	.LBB113:
 325              	.LBI113:
 541:./lib/chibios/os/rt/include/chschd.h **** }
 542:./lib/chibios/os/rt/include/chschd.h **** 
 543:./lib/chibios/os/rt/include/chschd.h **** /**
 544:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is empty.
 545:./lib/chibios/os/rt/include/chschd.h ****  *
 546:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 547:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the queue.
 548:./lib/chibios/os/rt/include/chschd.h ****  *
 549:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 550:./lib/chibios/os/rt/include/chschd.h ****  */
 551:./lib/chibios/os/rt/include/chschd.h **** static inline bool queue_isempty(const threads_queue_t *tqp) {
 552:./lib/chibios/os/rt/include/chschd.h **** 
 553:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tqp->next == (const thread_t *)tqp);
 554:./lib/chibios/os/rt/include/chschd.h **** }
 555:./lib/chibios/os/rt/include/chschd.h **** 
 556:./lib/chibios/os/rt/include/chschd.h **** /**
 557:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is not empty.
 558:./lib/chibios/os/rt/include/chschd.h ****  *
 559:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 560:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the queue.
 561:./lib/chibios/os/rt/include/chschd.h ****  *
 562:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 563:./lib/chibios/os/rt/include/chschd.h ****  */
 564:./lib/chibios/os/rt/include/chschd.h **** static inline bool queue_notempty(const threads_queue_t *tqp) {
 565:./lib/chibios/os/rt/include/chschd.h **** 
 566:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tqp->next != (const thread_t *)tqp);
 567:./lib/chibios/os/rt/include/chschd.h **** }
 568:./lib/chibios/os/rt/include/chschd.h **** 
 569:./lib/chibios/os/rt/include/chschd.h **** /* If the performance code path has been chosen then all the following
 570:./lib/chibios/os/rt/include/chschd.h ****    functions are inlined into the various kernel modules.*/
 571:./lib/chibios/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == TRUE
 572:./lib/chibios/os/rt/include/chschd.h **** static inline void list_insert(thread_t *tp, threads_list_t *tlp) {
 573:./lib/chibios/os/rt/include/chschd.h **** 
 574:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next = tlp->next;
 575:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = tp;
 576:./lib/chibios/os/rt/include/chschd.h **** }
 577:./lib/chibios/os/rt/include/chschd.h **** 
 578:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *list_remove(threads_list_t *tlp) {
 579:./lib/chibios/os/rt/include/chschd.h **** 
 580:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tlp->next;
 581:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = tp->queue.next;
 582:./lib/chibios/os/rt/include/chschd.h **** 
 583:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 584:./lib/chibios/os/rt/include/chschd.h **** }
 585:./lib/chibios/os/rt/include/chschd.h **** 
 586:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
 587:./lib/chibios/os/rt/include/chschd.h **** 
 588:./lib/chibios/os/rt/include/chschd.h ****   thread_t *cp = (thread_t *)tqp;
 589:./lib/chibios/os/rt/include/chschd.h ****   do {
 590:./lib/chibios/os/rt/include/chschd.h ****     cp = cp->queue.next;
 591:./lib/chibios/os/rt/include/chschd.h ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 592:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next             = cp;
 593:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev             = cp->queue.prev;
 594:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 595:./lib/chibios/os/rt/include/chschd.h ****   cp->queue.prev             = tp;
 596:./lib/chibios/os/rt/include/chschd.h **** }
 597:./lib/chibios/os/rt/include/chschd.h **** 
 598:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 599:./lib/chibios/os/rt/include/chschd.h **** 
 600:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next             = (thread_t *)tqp;
 601:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 602:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 603:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev                  = tp;
 604:./lib/chibios/os/rt/include/chschd.h **** }
 605:./lib/chibios/os/rt/include/chschd.h **** 
 606:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 607:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 608:./lib/chibios/os/rt/include/chschd.h **** 
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next             = tp->queue.next;
 610:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 611:./lib/chibios/os/rt/include/chschd.h **** 
 612:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 613:./lib/chibios/os/rt/include/chschd.h **** }
 614:./lib/chibios/os/rt/include/chschd.h **** 
 615:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
 616:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->prev;
 617:./lib/chibios/os/rt/include/chschd.h **** 
 618:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev             = tp->queue.prev;
 619:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev->queue.next = (thread_t *)tqp;
 620:./lib/chibios/os/rt/include/chschd.h **** 
 621:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 622:./lib/chibios/os/rt/include/chschd.h **** }
 623:./lib/chibios/os/rt/include/chschd.h **** 
 624:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *queue_dequeue(thread_t *tp) {
 326              		.loc 2 624 25 view .LVU87
 327              	.LBB114:
 625:./lib/chibios/os/rt/include/chschd.h **** 
 626:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp->queue.next;
 328              		.loc 2 626 3 view .LVU88
 329              		.loc 2 626 41 is_stmt 0 view .LVU89
 330 0038 D0E90032 		ldrd	r3, r2, [r0]
 331              		.loc 2 626 30 view .LVU90
 332 003c 1360     		str	r3, [r2]
 627:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next->queue.prev = tp->queue.prev;
 333              		.loc 2 627 3 is_stmt 1 view .LVU91
 334              		.loc 2 627 30 is_stmt 0 view .LVU92
 335 003e 5A60     		str	r2, [r3, #4]
 628:./lib/chibios/os/rt/include/chschd.h **** 
 629:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 336              		.loc 2 629 3 is_stmt 1 view .LVU93
 337              		.loc 2 629 10 is_stmt 0 view .LVU94
 338 0040 EDE7     		b	.L10
 339              	.LBE114:
 340              	.LBE113:
 341              		.cfi_endproc
 342              	.LFE243:
 344              		.section	.text.chSchReadyAheadI,"ax",%progbits
 345              		.align	1
 346              		.global	chSchReadyAheadI
 347              		.syntax unified
 348              		.thumb
 349              		.thumb_func
 350              		.fpu fpv4-sp-d16
 352              	chSchReadyAheadI:
 353              	.LVL13:
 354              	.LFB241:
 257:lib/chibios/os/rt/src/chschd.c ****   thread_t *cp;
 355              		.loc 1 257 42 is_stmt 1 view -0
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 0
 358              		@ frame_needed = 0, uses_anonymous_args = 0
 359              		@ link register save eliminated.
 258:lib/chibios/os/rt/src/chschd.c **** 
 360              		.loc 1 258 3 view .LVU96
 260:lib/chibios/os/rt/src/chschd.c ****   chDbgCheck(tp != NULL);
 361              		.loc 1 260 21 view .LVU97
 261:lib/chibios/os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 362              		.loc 1 261 3 view .LVU98
 261:lib/chibios/os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 363              		.loc 1 261 3 view .LVU99
 261:lib/chibios/os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 364              		.loc 1 261 3 view .LVU100
 262:lib/chibios/os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 365              		.loc 1 262 3 view .LVU101
 262:lib/chibios/os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 366              		.loc 1 262 3 view .LVU102
 262:lib/chibios/os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 367              		.loc 1 262 3 view .LVU103
 266:lib/chibios/os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 368              		.loc 1 266 3 view .LVU104
 266:lib/chibios/os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 369              		.loc 1 266 13 is_stmt 0 view .LVU105
 370 0000 0023     		movs	r3, #0
 371 0002 0374     		strb	r3, [r0, #16]
 267:lib/chibios/os/rt/src/chschd.c ****   do {
 372              		.loc 1 267 3 is_stmt 1 view .LVU106
 373              	.LVL14:
 270:lib/chibios/os/rt/src/chschd.c ****   /* Insertion on prev.*/
 374              		.loc 1 270 25 is_stmt 0 view .LVU107
 375 0004 8268     		ldr	r2, [r0, #8]
 267:lib/chibios/os/rt/src/chschd.c ****   do {
 376              		.loc 1 267 6 view .LVU108
 377 0006 054B     		ldr	r3, .L21
 378              	.LVL15:
 379              	.L19:
 268:lib/chibios/os/rt/src/chschd.c ****     cp = cp->queue.next;
 380              		.loc 1 268 3 is_stmt 1 discriminator 1 view .LVU109
 269:lib/chibios/os/rt/src/chschd.c ****   } while (cp->prio > tp->prio);
 381              		.loc 1 269 5 discriminator 1 view .LVU110
 269:lib/chibios/os/rt/src/chschd.c ****   } while (cp->prio > tp->prio);
 382              		.loc 1 269 8 is_stmt 0 discriminator 1 view .LVU111
 383 0008 1B68     		ldr	r3, [r3]
 384              	.LVL16:
 270:lib/chibios/os/rt/src/chschd.c ****   /* Insertion on prev.*/
 385              		.loc 1 270 11 is_stmt 1 discriminator 1 view .LVU112
 270:lib/chibios/os/rt/src/chschd.c ****   /* Insertion on prev.*/
 386              		.loc 1 270 3 is_stmt 0 discriminator 1 view .LVU113
 387 000a 9968     		ldr	r1, [r3, #8]
 388 000c 9142     		cmp	r1, r2
 389 000e FBD8     		bhi	.L19
 272:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 390              		.loc 1 272 3 is_stmt 1 view .LVU114
 273:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 391              		.loc 1 273 41 is_stmt 0 view .LVU115
 392 0010 5A68     		ldr	r2, [r3, #4]
 272:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 393              		.loc 1 272 30 view .LVU116
 394 0012 0360     		str	r3, [r0]
 273:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 395              		.loc 1 273 3 is_stmt 1 view .LVU117
 273:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 396              		.loc 1 273 30 is_stmt 0 view .LVU118
 397 0014 4260     		str	r2, [r0, #4]
 274:lib/chibios/os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 398              		.loc 1 274 3 is_stmt 1 view .LVU119
 274:lib/chibios/os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 399              		.loc 1 274 30 is_stmt 0 view .LVU120
 400 0016 1060     		str	r0, [r2]
 275:lib/chibios/os/rt/src/chschd.c **** 
 401              		.loc 1 275 3 is_stmt 1 view .LVU121
 275:lib/chibios/os/rt/src/chschd.c **** 
 402              		.loc 1 275 30 is_stmt 0 view .LVU122
 403 0018 5860     		str	r0, [r3, #4]
 277:lib/chibios/os/rt/src/chschd.c **** }
 404              		.loc 1 277 3 is_stmt 1 view .LVU123
 278:lib/chibios/os/rt/src/chschd.c **** 
 405              		.loc 1 278 1 is_stmt 0 view .LVU124
 406 001a 7047     		bx	lr
 407              	.L22:
 408              		.align	2
 409              	.L21:
 410 001c 00000000 		.word	ch
 411              		.cfi_endproc
 412              	.LFE241:
 414              		.section	.text.chSchGoSleepS,"ax",%progbits
 415              		.align	1
 416              		.global	chSchGoSleepS
 417              		.syntax unified
 418              		.thumb
 419              		.thumb_func
 420              		.fpu fpv4-sp-d16
 422              	chSchGoSleepS:
 423              	.LVL17:
 424              	.LFB242:
 289:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 425              		.loc 1 289 39 is_stmt 1 view -0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 0
 428              		@ frame_needed = 0, uses_anonymous_args = 0
 429              		@ link register save eliminated.
 290:lib/chibios/os/rt/src/chschd.c **** 
 430              		.loc 1 290 3 view .LVU126
 290:lib/chibios/os/rt/src/chschd.c **** 
 431              		.loc 1 290 13 is_stmt 0 view .LVU127
 432 0000 054B     		ldr	r3, .L24
 433 0002 1969     		ldr	r1, [r3, #16]
 434              	.LVL18:
 292:lib/chibios/os/rt/src/chschd.c **** 
 435              		.loc 1 292 21 is_stmt 1 view .LVU128
 295:lib/chibios/os/rt/src/chschd.c **** 
 436              		.loc 1 295 3 view .LVU129
 295:lib/chibios/os/rt/src/chschd.c **** 
 437              		.loc 1 295 14 is_stmt 0 view .LVU130
 438 0004 0874     		strb	r0, [r1, #16]
 304:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 439              		.loc 1 304 3 is_stmt 1 view .LVU131
 440              	.LVL19:
 441              	.LBB115:
 442              	.LBI115:
 606:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 443              		.loc 2 606 25 view .LVU132
 444              	.LBB116:
 607:./lib/chibios/os/rt/include/chschd.h **** 
 445              		.loc 2 607 3 view .LVU133
 607:./lib/chibios/os/rt/include/chschd.h **** 
 446              		.loc 2 607 13 is_stmt 0 view .LVU134
 447 0006 1868     		ldr	r0, [r3]
 448              	.LVL20:
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 449              		.loc 2 609 3 is_stmt 1 view .LVU135
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 450              		.loc 2 609 36 is_stmt 0 view .LVU136
 451 0008 0268     		ldr	r2, [r0]
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 452              		.loc 2 609 25 view .LVU137
 453 000a 1A60     		str	r2, [r3]
 610:./lib/chibios/os/rt/include/chschd.h **** 
 454              		.loc 2 610 3 is_stmt 1 view .LVU138
 610:./lib/chibios/os/rt/include/chschd.h **** 
 455              		.loc 2 610 25 is_stmt 0 view .LVU139
 456 000c 5360     		str	r3, [r2, #4]
 457              	.LVL21:
 612:./lib/chibios/os/rt/include/chschd.h **** }
 458              		.loc 2 612 3 is_stmt 1 view .LVU140
 612:./lib/chibios/os/rt/include/chschd.h **** }
 459              		.loc 2 612 3 is_stmt 0 view .LVU141
 460              	.LBE116:
 461              	.LBE115:
 304:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 462              		.loc 1 304 9 view .LVU142
 463 000e 1861     		str	r0, [r3, #16]
 305:lib/chibios/os/rt/src/chschd.c **** 
 464              		.loc 1 305 3 is_stmt 1 view .LVU143
 305:lib/chibios/os/rt/src/chschd.c **** 
 465              		.loc 1 305 16 is_stmt 0 view .LVU144
 466 0010 0123     		movs	r3, #1
 467 0012 0374     		strb	r3, [r0, #16]
 308:lib/chibios/os/rt/src/chschd.c ****     CH_CFG_IDLE_ENTER_HOOK();
 468              		.loc 1 308 3 is_stmt 1 view .LVU145
 309:lib/chibios/os/rt/src/chschd.c ****   }
 469              		.loc 1 309 5 view .LVU146
 309:lib/chibios/os/rt/src/chschd.c ****   }
 470              		.loc 1 309 29 view .LVU147
 313:lib/chibios/os/rt/src/chschd.c **** }
 471              		.loc 1 313 3 view .LVU148
 313:lib/chibios/os/rt/src/chschd.c **** }
 472              		.loc 1 313 3 view .LVU149
 313:lib/chibios/os/rt/src/chschd.c **** }
 473              		.loc 1 313 3 view .LVU150
 313:lib/chibios/os/rt/src/chschd.c **** }
 474              		.loc 1 313 3 view .LVU151
 313:lib/chibios/os/rt/src/chschd.c **** }
 475              		.loc 1 313 3 view .LVU152
 476 0014 FFF7FEBF 		b	_port_switch
 477              	.LVL22:
 478              	.L25:
 313:lib/chibios/os/rt/src/chschd.c **** }
 479              		.loc 1 313 3 is_stmt 0 view .LVU153
 480              		.align	2
 481              	.L24:
 482 0018 00000000 		.word	ch
 483              		.cfi_endproc
 484              	.LFE242:
 486              		.section	.text.chSchGoSleepTimeoutS,"ax",%progbits
 487              		.align	1
 488              		.global	chSchGoSleepTimeoutS
 489              		.syntax unified
 490              		.thumb
 491              		.thumb_func
 492              		.fpu fpv4-sp-d16
 494              	chSchGoSleepTimeoutS:
 495              	.LVL23:
 496              	.LFB244:
 353:lib/chibios/os/rt/src/chschd.c **** 
 354:lib/chibios/os/rt/src/chschd.c **** /**
 355:lib/chibios/os/rt/src/chschd.c ****  * @brief   Puts the current thread to sleep into the specified state with
 356:lib/chibios/os/rt/src/chschd.c ****  *          timeout specification.
 357:lib/chibios/os/rt/src/chschd.c ****  * @details The thread goes into a sleeping state, if it is not awakened
 358:lib/chibios/os/rt/src/chschd.c ****  *          explicitly within the specified timeout then it is forcibly
 359:lib/chibios/os/rt/src/chschd.c ****  *          awakened with a @p MSG_TIMEOUT low level message. The possible
 360:lib/chibios/os/rt/src/chschd.c ****  *          @ref thread_states are defined into @p threads.h.
 361:lib/chibios/os/rt/src/chschd.c ****  *
 362:lib/chibios/os/rt/src/chschd.c ****  * @param[in] newstate  the new thread state
 363:lib/chibios/os/rt/src/chschd.c ****  * @param[in] timeout   the number of ticks before the operation timeouts, the
 364:lib/chibios/os/rt/src/chschd.c ****  *                      special values are handled as follow:
 365:lib/chibios/os/rt/src/chschd.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 366:lib/chibios/os/rt/src/chschd.c ****  *                        state, this is equivalent to invoking
 367:lib/chibios/os/rt/src/chschd.c ****  *                        @p chSchGoSleepS() but, of course, less efficient.
 368:lib/chibios/os/rt/src/chschd.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 369:lib/chibios/os/rt/src/chschd.c ****  *                      .
 370:lib/chibios/os/rt/src/chschd.c ****  * @return              The wakeup message.
 371:lib/chibios/os/rt/src/chschd.c ****  * @retval MSG_TIMEOUT  if a timeout occurs.
 372:lib/chibios/os/rt/src/chschd.c ****  *
 373:lib/chibios/os/rt/src/chschd.c ****  * @sclass
 374:lib/chibios/os/rt/src/chschd.c ****  */
 375:lib/chibios/os/rt/src/chschd.c **** msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 497              		.loc 1 375 70 is_stmt 1 view -0
 498              		.cfi_startproc
 499              		@ args = 0, pretend = 0, frame = 24
 500              		@ frame_needed = 0, uses_anonymous_args = 0
 376:lib/chibios/os/rt/src/chschd.c **** 
 377:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassS();
 501              		.loc 1 377 21 view .LVU155
 378:lib/chibios/os/rt/src/chschd.c **** 
 379:lib/chibios/os/rt/src/chschd.c ****   if (TIME_INFINITE != timeout) {
 502              		.loc 1 379 3 view .LVU156
 375:lib/chibios/os/rt/src/chschd.c **** 
 503              		.loc 1 375 70 is_stmt 0 view .LVU157
 504 0000 30B5     		push	{r4, r5, lr}
 505              		.cfi_def_cfa_offset 12
 506              		.cfi_offset 4, -12
 507              		.cfi_offset 5, -8
 508              		.cfi_offset 14, -4
 509              		.loc 1 379 6 view .LVU158
 510 0002 4B1C     		adds	r3, r1, #1
 511 0004 0B4D     		ldr	r5, .L33
 375:lib/chibios/os/rt/src/chschd.c **** 
 512              		.loc 1 375 70 view .LVU159
 513 0006 87B0     		sub	sp, sp, #28
 514              		.cfi_def_cfa_offset 40
 375:lib/chibios/os/rt/src/chschd.c **** 
 515              		.loc 1 375 70 view .LVU160
 516 0008 0446     		mov	r4, r0
 517              		.loc 1 379 6 view .LVU161
 518 000a 10D0     		beq	.L27
 519              	.LBB117:
 380:lib/chibios/os/rt/src/chschd.c ****     virtual_timer_t vt;
 520              		.loc 1 380 5 is_stmt 1 view .LVU162
 381:lib/chibios/os/rt/src/chschd.c **** 
 382:lib/chibios/os/rt/src/chschd.c ****     chVTDoSetI(&vt, timeout, wakeup, currp);
 521              		.loc 1 382 5 view .LVU163
 522 000c 2B69     		ldr	r3, [r5, #16]
 523 000e 0A4A     		ldr	r2, .L33+4
 524 0010 01A8     		add	r0, sp, #4
 525              	.LVL24:
 526              		.loc 1 382 5 is_stmt 0 view .LVU164
 527 0012 FFF7FEFF 		bl	chVTDoSetI
 528              	.LVL25:
 383:lib/chibios/os/rt/src/chschd.c ****     chSchGoSleepS(newstate);
 529              		.loc 1 383 5 is_stmt 1 view .LVU165
 530 0016 2046     		mov	r0, r4
 531 0018 FFF7FEFF 		bl	chSchGoSleepS
 532              	.LVL26:
 384:lib/chibios/os/rt/src/chschd.c ****     if (chVTIsArmedI(&vt)) {
 533              		.loc 1 384 5 view .LVU166
 534              	.LBB118:
 535              	.LBI118:
 536              		.file 7 "./lib/chibios/os/rt/include/chvt.h"
   1:./lib/chibios/os/rt/include/chvt.h **** /*
   2:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chvt.h **** 
   4:./lib/chibios/os/rt/include/chvt.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chvt.h **** 
   6:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chvt.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chvt.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chvt.h **** 
  11:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chvt.h **** 
  16:./lib/chibios/os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chvt.h **** */
  19:./lib/chibios/os/rt/include/chvt.h **** 
  20:./lib/chibios/os/rt/include/chvt.h **** /**
  21:./lib/chibios/os/rt/include/chvt.h ****  * @file    rt/include/chvt.h
  22:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:./lib/chibios/os/rt/include/chvt.h ****  *
  24:./lib/chibios/os/rt/include/chvt.h ****  * @addtogroup time
  25:./lib/chibios/os/rt/include/chvt.h ****  * @{
  26:./lib/chibios/os/rt/include/chvt.h ****  */
  27:./lib/chibios/os/rt/include/chvt.h **** 
  28:./lib/chibios/os/rt/include/chvt.h **** #ifndef CHVT_H
  29:./lib/chibios/os/rt/include/chvt.h **** #define CHVT_H
  30:./lib/chibios/os/rt/include/chvt.h **** 
  31:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chvt.h **** 
  35:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  38:./lib/chibios/os/rt/include/chvt.h **** 
  39:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  40:./lib/chibios/os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  42:./lib/chibios/os/rt/include/chvt.h **** 
  43:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:./lib/chibios/os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:./lib/chibios/os/rt/include/chvt.h ****        "be zero or greater than one"
  46:./lib/chibios/os/rt/include/chvt.h **** #endif
  47:./lib/chibios/os/rt/include/chvt.h **** 
  48:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:./lib/chibios/os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:./lib/chibios/os/rt/include/chvt.h **** #endif
  51:./lib/chibios/os/rt/include/chvt.h **** 
  52:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:./lib/chibios/os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:./lib/chibios/os/rt/include/chvt.h **** #endif
  55:./lib/chibios/os/rt/include/chvt.h **** 
  56:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  57:./lib/chibios/os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  59:./lib/chibios/os/rt/include/chvt.h **** 
  60:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  61:./lib/chibios/os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  63:./lib/chibios/os/rt/include/chvt.h **** 
  64:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  65:./lib/chibios/os/rt/include/chvt.h **** /* External declarations.                                                    */
  66:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  67:./lib/chibios/os/rt/include/chvt.h **** 
  68:./lib/chibios/os/rt/include/chvt.h **** /*
  69:./lib/chibios/os/rt/include/chvt.h ****  * Virtual Timers APIs.
  70:./lib/chibios/os/rt/include/chvt.h ****  */
  71:./lib/chibios/os/rt/include/chvt.h **** #ifdef __cplusplus
  72:./lib/chibios/os/rt/include/chvt.h **** extern "C" {
  73:./lib/chibios/os/rt/include/chvt.h **** #endif
  74:./lib/chibios/os/rt/include/chvt.h ****   void _vt_init(void);
  75:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
  76:./lib/chibios/os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
  77:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
  78:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoTickI(void);
  79:./lib/chibios/os/rt/include/chvt.h **** #ifdef __cplusplus
  80:./lib/chibios/os/rt/include/chvt.h **** }
  81:./lib/chibios/os/rt/include/chvt.h **** #endif
  82:./lib/chibios/os/rt/include/chvt.h **** 
  83:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  84:./lib/chibios/os/rt/include/chvt.h **** /* Module inline functions.                                                  */
  85:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  86:./lib/chibios/os/rt/include/chvt.h **** 
  87:./lib/chibios/os/rt/include/chvt.h **** /**
  88:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
  89:./lib/chibios/os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
  90:./lib/chibios/os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
  91:./lib/chibios/os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
  92:./lib/chibios/os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
  93:./lib/chibios/os/rt/include/chvt.h ****  *
  94:./lib/chibios/os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
  95:./lib/chibios/os/rt/include/chvt.h ****  *
  96:./lib/chibios/os/rt/include/chvt.h ****  * @init
  97:./lib/chibios/os/rt/include/chvt.h ****  */
  98:./lib/chibios/os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
  99:./lib/chibios/os/rt/include/chvt.h **** 
 100:./lib/chibios/os/rt/include/chvt.h ****   vtp->func = NULL;
 101:./lib/chibios/os/rt/include/chvt.h **** }
 102:./lib/chibios/os/rt/include/chvt.h **** 
 103:./lib/chibios/os/rt/include/chvt.h **** /**
 104:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Current system time.
 105:./lib/chibios/os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 106:./lib/chibios/os/rt/include/chvt.h ****  *          invocation.
 107:./lib/chibios/os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 108:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 109:./lib/chibios/os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 110:./lib/chibios/os/rt/include/chvt.h ****  *          @p systime_t size.
 111:./lib/chibios/os/rt/include/chvt.h ****  *
 112:./lib/chibios/os/rt/include/chvt.h ****  * @return              The system time in ticks.
 113:./lib/chibios/os/rt/include/chvt.h ****  *
 114:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 115:./lib/chibios/os/rt/include/chvt.h ****  */
 116:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 117:./lib/chibios/os/rt/include/chvt.h **** 
 118:./lib/chibios/os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 119:./lib/chibios/os/rt/include/chvt.h ****   return ch.vtlist.systime;
 120:./lib/chibios/os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 121:./lib/chibios/os/rt/include/chvt.h ****   return port_timer_get_time();
 122:./lib/chibios/os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 123:./lib/chibios/os/rt/include/chvt.h **** }
 124:./lib/chibios/os/rt/include/chvt.h **** 
 125:./lib/chibios/os/rt/include/chvt.h **** /**
 126:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Current system time.
 127:./lib/chibios/os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 128:./lib/chibios/os/rt/include/chvt.h ****  *          invocation.
 129:./lib/chibios/os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 130:./lib/chibios/os/rt/include/chvt.h ****  *
 131:./lib/chibios/os/rt/include/chvt.h ****  * @return              The system time in ticks.
 132:./lib/chibios/os/rt/include/chvt.h ****  *
 133:./lib/chibios/os/rt/include/chvt.h ****  * @api
 134:./lib/chibios/os/rt/include/chvt.h ****  */
 135:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTime(void) {
 136:./lib/chibios/os/rt/include/chvt.h ****   systime_t systime;
 137:./lib/chibios/os/rt/include/chvt.h **** 
 138:./lib/chibios/os/rt/include/chvt.h ****   chSysLock();
 139:./lib/chibios/os/rt/include/chvt.h ****   systime = chVTGetSystemTimeX();
 140:./lib/chibios/os/rt/include/chvt.h ****   chSysUnlock();
 141:./lib/chibios/os/rt/include/chvt.h **** 
 142:./lib/chibios/os/rt/include/chvt.h ****   return systime;
 143:./lib/chibios/os/rt/include/chvt.h **** }
 144:./lib/chibios/os/rt/include/chvt.h **** 
 145:./lib/chibios/os/rt/include/chvt.h **** /**
 146:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Returns the elapsed time since the specified start time.
 147:./lib/chibios/os/rt/include/chvt.h ****  *
 148:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] start     start time
 149:./lib/chibios/os/rt/include/chvt.h ****  * @return              The elapsed time.
 150:./lib/chibios/os/rt/include/chvt.h ****  *
 151:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 152:./lib/chibios/os/rt/include/chvt.h ****  */
 153:./lib/chibios/os/rt/include/chvt.h **** static inline sysinterval_t chVTTimeElapsedSinceX(systime_t start) {
 154:./lib/chibios/os/rt/include/chvt.h **** 
 155:./lib/chibios/os/rt/include/chvt.h ****   return chTimeDiffX(start, chVTGetSystemTimeX());
 156:./lib/chibios/os/rt/include/chvt.h **** }
 157:./lib/chibios/os/rt/include/chvt.h **** 
 158:./lib/chibios/os/rt/include/chvt.h **** /**
 159:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 160:./lib/chibios/os/rt/include/chvt.h ****  *          window.
 161:./lib/chibios/os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 162:./lib/chibios/os/rt/include/chvt.h ****  *          time window has zero size.
 163:./lib/chibios/os/rt/include/chvt.h ****  *
 164:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 165:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 166:./lib/chibios/os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 167:./lib/chibios/os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 168:./lib/chibios/os/rt/include/chvt.h ****  *
 169:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 170:./lib/chibios/os/rt/include/chvt.h ****  */
 171:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithinX(systime_t start, systime_t end) {
 172:./lib/chibios/os/rt/include/chvt.h **** 
 173:./lib/chibios/os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTimeX(), start, end);
 174:./lib/chibios/os/rt/include/chvt.h **** }
 175:./lib/chibios/os/rt/include/chvt.h **** 
 176:./lib/chibios/os/rt/include/chvt.h **** /**
 177:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 178:./lib/chibios/os/rt/include/chvt.h ****  *          window.
 179:./lib/chibios/os/rt/include/chvt.h ****  * @note    When start==end then the function returns always false because the
 180:./lib/chibios/os/rt/include/chvt.h ****  *          time window has zero size.
 181:./lib/chibios/os/rt/include/chvt.h ****  *
 182:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 183:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 184:./lib/chibios/os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 185:./lib/chibios/os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 186:./lib/chibios/os/rt/include/chvt.h ****  *
 187:./lib/chibios/os/rt/include/chvt.h ****  * @api
 188:./lib/chibios/os/rt/include/chvt.h ****  */
 189:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithin(systime_t start, systime_t end) {
 190:./lib/chibios/os/rt/include/chvt.h **** 
 191:./lib/chibios/os/rt/include/chvt.h ****   return chTimeIsInRangeX(chVTGetSystemTime(), start, end);
 192:./lib/chibios/os/rt/include/chvt.h **** }
 193:./lib/chibios/os/rt/include/chvt.h **** 
 194:./lib/chibios/os/rt/include/chvt.h **** /**
 195:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Returns the time interval until the next timer event.
 196:./lib/chibios/os/rt/include/chvt.h ****  * @note    The return value is not perfectly accurate and can report values
 197:./lib/chibios/os/rt/include/chvt.h ****  *          in excess of @p CH_CFG_ST_TIMEDELTA ticks.
 198:./lib/chibios/os/rt/include/chvt.h ****  * @note    The interval returned by this function is only meaningful if
 199:./lib/chibios/os/rt/include/chvt.h ****  *          more timers are not added to the list until the returned time.
 200:./lib/chibios/os/rt/include/chvt.h ****  *
 201:./lib/chibios/os/rt/include/chvt.h ****  * @param[out] timep    pointer to a variable that will contain the time
 202:./lib/chibios/os/rt/include/chvt.h ****  *                      interval until the next timer elapses. This pointer
 203:./lib/chibios/os/rt/include/chvt.h ****  *                      can be @p NULL if the information is not required.
 204:./lib/chibios/os/rt/include/chvt.h ****  * @return              The time, in ticks, until next time event.
 205:./lib/chibios/os/rt/include/chvt.h ****  * @retval false        if the timers list is empty.
 206:./lib/chibios/os/rt/include/chvt.h ****  * @retval true         if the timers list contains at least one timer.
 207:./lib/chibios/os/rt/include/chvt.h ****  *
 208:./lib/chibios/os/rt/include/chvt.h ****  * @iclass
 209:./lib/chibios/os/rt/include/chvt.h ****  */
 210:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTGetTimersStateI(sysinterval_t *timep) {
 211:./lib/chibios/os/rt/include/chvt.h **** 
 212:./lib/chibios/os/rt/include/chvt.h ****   chDbgCheckClassI();
 213:./lib/chibios/os/rt/include/chvt.h **** 
 214:./lib/chibios/os/rt/include/chvt.h ****   if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 215:./lib/chibios/os/rt/include/chvt.h ****     return false;
 216:./lib/chibios/os/rt/include/chvt.h ****   }
 217:./lib/chibios/os/rt/include/chvt.h **** 
 218:./lib/chibios/os/rt/include/chvt.h ****   if (timep != NULL) {
 219:./lib/chibios/os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 220:./lib/chibios/os/rt/include/chvt.h ****     *timep = ch.vtlist.next->delta;
 221:./lib/chibios/os/rt/include/chvt.h **** #else
 222:./lib/chibios/os/rt/include/chvt.h ****     *timep = (ch.vtlist.next->delta + (sysinterval_t)CH_CFG_ST_TIMEDELTA) -
 223:./lib/chibios/os/rt/include/chvt.h ****              chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 224:./lib/chibios/os/rt/include/chvt.h **** #endif
 225:./lib/chibios/os/rt/include/chvt.h ****   }
 226:./lib/chibios/os/rt/include/chvt.h **** 
 227:./lib/chibios/os/rt/include/chvt.h ****   return true;
 228:./lib/chibios/os/rt/include/chvt.h **** }
 229:./lib/chibios/os/rt/include/chvt.h **** 
 230:./lib/chibios/os/rt/include/chvt.h **** /**
 231:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 232:./lib/chibios/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 233:./lib/chibios/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 234:./lib/chibios/os/rt/include/chvt.h ****  *
 235:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 236:./lib/chibios/os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 237:./lib/chibios/os/rt/include/chvt.h ****  *
 238:./lib/chibios/os/rt/include/chvt.h ****  * @iclass
 239:./lib/chibios/os/rt/include/chvt.h ****  */
 240:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 537              		.loc 7 240 20 view .LVU167
 538              	.LBB119:
 241:./lib/chibios/os/rt/include/chvt.h **** 
 242:./lib/chibios/os/rt/include/chvt.h ****   chDbgCheckClassI();
 539              		.loc 7 242 21 view .LVU168
 243:./lib/chibios/os/rt/include/chvt.h **** 
 244:./lib/chibios/os/rt/include/chvt.h ****   return (bool)(vtp->func != NULL);
 540              		.loc 7 244 3 view .LVU169
 541              		.loc 7 244 3 is_stmt 0 view .LVU170
 542              	.LBE119:
 543              	.LBE118:
 544              		.loc 1 384 8 view .LVU171
 545 001c 049B     		ldr	r3, [sp, #16]
 546 001e 13B1     		cbz	r3, .L29
 385:lib/chibios/os/rt/src/chschd.c ****       chVTDoResetI(&vt);
 547              		.loc 1 385 7 is_stmt 1 view .LVU172
 548 0020 01A8     		add	r0, sp, #4
 549 0022 FFF7FEFF 		bl	chVTDoResetI
 550              	.LVL27:
 551              	.L29:
 552              	.LBE117:
 386:lib/chibios/os/rt/src/chschd.c ****     }
 387:lib/chibios/os/rt/src/chschd.c ****   }
 388:lib/chibios/os/rt/src/chschd.c ****   else {
 389:lib/chibios/os/rt/src/chschd.c ****     chSchGoSleepS(newstate);
 390:lib/chibios/os/rt/src/chschd.c ****   }
 391:lib/chibios/os/rt/src/chschd.c **** 
 392:lib/chibios/os/rt/src/chschd.c ****   return currp->u.rdymsg;
 553              		.loc 1 392 3 view .LVU173
 554              		.loc 1 392 18 is_stmt 0 view .LVU174
 555 0026 2B69     		ldr	r3, [r5, #16]
 393:lib/chibios/os/rt/src/chschd.c **** }
 556              		.loc 1 393 1 view .LVU175
 557 0028 5869     		ldr	r0, [r3, #20]
 558 002a 07B0     		add	sp, sp, #28
 559              		.cfi_remember_state
 560              		.cfi_def_cfa_offset 12
 561              		@ sp needed
 562 002c 30BD     		pop	{r4, r5, pc}
 563              	.LVL28:
 564              	.L27:
 565              		.cfi_restore_state
 389:lib/chibios/os/rt/src/chschd.c ****   }
 566              		.loc 1 389 5 is_stmt 1 view .LVU176
 567 002e FFF7FEFF 		bl	chSchGoSleepS
 568              	.LVL29:
 389:lib/chibios/os/rt/src/chschd.c ****   }
 569              		.loc 1 389 5 is_stmt 0 view .LVU177
 570 0032 F8E7     		b	.L29
 571              	.L34:
 572              		.align	2
 573              	.L33:
 574 0034 00000000 		.word	ch
 575 0038 00000000 		.word	wakeup
 576              		.cfi_endproc
 577              	.LFE244:
 579              		.section	.text.chSchWakeupS,"ax",%progbits
 580              		.align	1
 581              		.global	chSchWakeupS
 582              		.syntax unified
 583              		.thumb
 584              		.thumb_func
 585              		.fpu fpv4-sp-d16
 587              	chSchWakeupS:
 588              	.LVL30:
 589              	.LFB245:
 394:lib/chibios/os/rt/src/chschd.c **** 
 395:lib/chibios/os/rt/src/chschd.c **** /**
 396:lib/chibios/os/rt/src/chschd.c ****  * @brief   Wakes up a thread.
 397:lib/chibios/os/rt/src/chschd.c ****  * @details The thread is inserted into the ready list or immediately made
 398:lib/chibios/os/rt/src/chschd.c ****  *          running depending on its relative priority compared to the current
 399:lib/chibios/os/rt/src/chschd.c ****  *          thread.
 400:lib/chibios/os/rt/src/chschd.c ****  * @pre     The thread must not be already inserted in any list through its
 401:lib/chibios/os/rt/src/chschd.c ****  *          @p next and @p prev or list corruption would occur.
 402:lib/chibios/os/rt/src/chschd.c ****  * @note    It is equivalent to a @p chSchReadyI() followed by a
 403:lib/chibios/os/rt/src/chschd.c ****  *          @p chSchRescheduleS() but much more efficient.
 404:lib/chibios/os/rt/src/chschd.c ****  * @note    The function assumes that the current thread has the highest
 405:lib/chibios/os/rt/src/chschd.c ****  *          priority.
 406:lib/chibios/os/rt/src/chschd.c ****  *
 407:lib/chibios/os/rt/src/chschd.c ****  * @param[in] ntp       the thread to be made ready
 408:lib/chibios/os/rt/src/chschd.c ****  * @param[in] msg       the wakeup message
 409:lib/chibios/os/rt/src/chschd.c ****  *
 410:lib/chibios/os/rt/src/chschd.c ****  * @sclass
 411:lib/chibios/os/rt/src/chschd.c ****  */
 412:lib/chibios/os/rt/src/chschd.c **** void chSchWakeupS(thread_t *ntp, msg_t msg) {
 590              		.loc 1 412 45 is_stmt 1 view -0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 0
 593              		@ frame_needed = 0, uses_anonymous_args = 0
 413:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 594              		.loc 1 413 3 view .LVU179
 412:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 595              		.loc 1 412 45 is_stmt 0 view .LVU180
 596 0000 38B5     		push	{r3, r4, r5, lr}
 597              		.cfi_def_cfa_offset 16
 598              		.cfi_offset 3, -16
 599              		.cfi_offset 4, -12
 600              		.cfi_offset 5, -8
 601              		.cfi_offset 14, -4
 602              		.loc 1 413 13 view .LVU181
 603 0002 0C4D     		ldr	r5, .L37
 414:lib/chibios/os/rt/src/chschd.c **** 
 415:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassS();
 416:lib/chibios/os/rt/src/chschd.c **** 
 417:lib/chibios/os/rt/src/chschd.c ****   chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 418:lib/chibios/os/rt/src/chschd.c ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 419:lib/chibios/os/rt/src/chschd.c ****               "priority order violation");
 420:lib/chibios/os/rt/src/chschd.c **** 
 421:lib/chibios/os/rt/src/chschd.c ****   /* Storing the message to be retrieved by the target thread when it will
 422:lib/chibios/os/rt/src/chschd.c ****      restart execution.*/
 423:lib/chibios/os/rt/src/chschd.c ****   ntp->u.rdymsg = msg;
 604              		.loc 1 423 17 view .LVU182
 605 0004 4161     		str	r1, [r0, #20]
 413:lib/chibios/os/rt/src/chschd.c **** 
 606              		.loc 1 413 13 view .LVU183
 607 0006 2B69     		ldr	r3, [r5, #16]
 608              	.LVL31:
 415:lib/chibios/os/rt/src/chschd.c **** 
 609              		.loc 1 415 21 is_stmt 1 view .LVU184
 417:lib/chibios/os/rt/src/chschd.c ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 610              		.loc 1 417 3 view .LVU185
 417:lib/chibios/os/rt/src/chschd.c ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 611              		.loc 1 417 3 view .LVU186
 417:lib/chibios/os/rt/src/chschd.c ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 612              		.loc 1 417 3 view .LVU187
 613              		.loc 1 423 3 view .LVU188
 424:lib/chibios/os/rt/src/chschd.c **** 
 425:lib/chibios/os/rt/src/chschd.c ****   /* If the waken thread has a not-greater priority than the current
 426:lib/chibios/os/rt/src/chschd.c ****      one then it is just inserted in the ready list else it made
 427:lib/chibios/os/rt/src/chschd.c ****      running immediately and the invoking thread goes in the ready
 428:lib/chibios/os/rt/src/chschd.c ****      list instead.*/
 429:lib/chibios/os/rt/src/chschd.c ****   if (ntp->prio <= otp->prio) {
 614              		.loc 1 429 3 view .LVU189
 615              		.loc 1 429 6 is_stmt 0 view .LVU190
 616 0008 8168     		ldr	r1, [r0, #8]
 617              	.LVL32:
 618              		.loc 1 429 6 view .LVU191
 619 000a 9A68     		ldr	r2, [r3, #8]
 620 000c 9142     		cmp	r1, r2
 412:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 621              		.loc 1 412 45 view .LVU192
 622 000e 0446     		mov	r4, r0
 623              		.loc 1 429 6 view .LVU193
 624 0010 03D8     		bhi	.L36
 430:lib/chibios/os/rt/src/chschd.c ****     (void) chSchReadyI(ntp);
 625              		.loc 1 430 5 is_stmt 1 view .LVU194
 431:lib/chibios/os/rt/src/chschd.c ****   }
 432:lib/chibios/os/rt/src/chschd.c ****   else {
 433:lib/chibios/os/rt/src/chschd.c ****     otp = chSchReadyAheadI(otp);
 434:lib/chibios/os/rt/src/chschd.c **** 
 435:lib/chibios/os/rt/src/chschd.c ****     /* Handling idle-leave hook.*/
 436:lib/chibios/os/rt/src/chschd.c ****     if (otp->prio == IDLEPRIO) {
 437:lib/chibios/os/rt/src/chschd.c ****       CH_CFG_IDLE_LEAVE_HOOK();
 438:lib/chibios/os/rt/src/chschd.c ****     }
 439:lib/chibios/os/rt/src/chschd.c **** 
 440:lib/chibios/os/rt/src/chschd.c ****     /* The extracted thread is marked as current.*/
 441:lib/chibios/os/rt/src/chschd.c ****     currp = ntp;
 442:lib/chibios/os/rt/src/chschd.c ****     ntp->state = CH_STATE_CURRENT;
 443:lib/chibios/os/rt/src/chschd.c **** 
 444:lib/chibios/os/rt/src/chschd.c ****     /* Swap operation as tail call.*/
 445:lib/chibios/os/rt/src/chschd.c ****     chSysSwitch(ntp, otp);
 446:lib/chibios/os/rt/src/chschd.c ****   }
 447:lib/chibios/os/rt/src/chschd.c **** }
 626              		.loc 1 447 1 is_stmt 0 view .LVU195
 627 0012 BDE83840 		pop	{r3, r4, r5, lr}
 628              		.cfi_remember_state
 629              		.cfi_restore 14
 630              		.cfi_restore 5
 631              		.cfi_restore 4
 632              		.cfi_restore 3
 633              		.cfi_def_cfa_offset 0
 634              	.LVL33:
 430:lib/chibios/os/rt/src/chschd.c ****     (void) chSchReadyI(ntp);
 635              		.loc 1 430 12 view .LVU196
 636 0016 FFF7FEBF 		b	chSchReadyI
 637              	.LVL34:
 638              	.L36:
 639              		.cfi_restore_state
 433:lib/chibios/os/rt/src/chschd.c **** 
 640              		.loc 1 433 5 is_stmt 1 view .LVU197
 433:lib/chibios/os/rt/src/chschd.c **** 
 641              		.loc 1 433 11 is_stmt 0 view .LVU198
 642 001a 1846     		mov	r0, r3
 643              	.LVL35:
 433:lib/chibios/os/rt/src/chschd.c **** 
 644              		.loc 1 433 11 view .LVU199
 645 001c FFF7FEFF 		bl	chSchReadyAheadI
 646              	.LVL36:
 442:lib/chibios/os/rt/src/chschd.c **** 
 647              		.loc 1 442 16 view .LVU200
 648 0020 0123     		movs	r3, #1
 441:lib/chibios/os/rt/src/chschd.c ****     ntp->state = CH_STATE_CURRENT;
 649              		.loc 1 441 11 view .LVU201
 650 0022 2C61     		str	r4, [r5, #16]
 433:lib/chibios/os/rt/src/chschd.c **** 
 651              		.loc 1 433 11 view .LVU202
 652 0024 0146     		mov	r1, r0
 653              	.LVL37:
 436:lib/chibios/os/rt/src/chschd.c ****       CH_CFG_IDLE_LEAVE_HOOK();
 654              		.loc 1 436 5 is_stmt 1 view .LVU203
 437:lib/chibios/os/rt/src/chschd.c ****     }
 655              		.loc 1 437 7 view .LVU204
 437:lib/chibios/os/rt/src/chschd.c ****     }
 656              		.loc 1 437 31 view .LVU205
 441:lib/chibios/os/rt/src/chschd.c ****     ntp->state = CH_STATE_CURRENT;
 657              		.loc 1 441 5 view .LVU206
 442:lib/chibios/os/rt/src/chschd.c **** 
 658              		.loc 1 442 5 view .LVU207
 442:lib/chibios/os/rt/src/chschd.c **** 
 659              		.loc 1 442 16 is_stmt 0 view .LVU208
 660 0026 2374     		strb	r3, [r4, #16]
 445:lib/chibios/os/rt/src/chschd.c ****   }
 661              		.loc 1 445 5 is_stmt 1 view .LVU209
 445:lib/chibios/os/rt/src/chschd.c ****   }
 662              		.loc 1 445 5 view .LVU210
 445:lib/chibios/os/rt/src/chschd.c ****   }
 663              		.loc 1 445 5 view .LVU211
 445:lib/chibios/os/rt/src/chschd.c ****   }
 664              		.loc 1 445 5 view .LVU212
 445:lib/chibios/os/rt/src/chschd.c ****   }
 665              		.loc 1 445 5 view .LVU213
 666 0028 2046     		mov	r0, r4
 667              	.LVL38:
 668              		.loc 1 447 1 is_stmt 0 view .LVU214
 669 002a BDE83840 		pop	{r3, r4, r5, lr}
 670              		.cfi_restore 14
 671              		.cfi_restore 5
 672              		.cfi_restore 4
 673              		.cfi_restore 3
 674              		.cfi_def_cfa_offset 0
 675              	.LVL39:
 445:lib/chibios/os/rt/src/chschd.c ****   }
 676              		.loc 1 445 5 view .LVU215
 677 002e FFF7FEBF 		b	_port_switch
 678              	.LVL40:
 679              	.L38:
 445:lib/chibios/os/rt/src/chschd.c ****   }
 680              		.loc 1 445 5 view .LVU216
 681 0032 00BF     		.align	2
 682              	.L37:
 683 0034 00000000 		.word	ch
 684              		.cfi_endproc
 685              	.LFE245:
 687              		.section	.text.chSchIsPreemptionRequired,"ax",%progbits
 688              		.align	1
 689              		.global	chSchIsPreemptionRequired
 690              		.syntax unified
 691              		.thumb
 692              		.thumb_func
 693              		.fpu fpv4-sp-d16
 695              	chSchIsPreemptionRequired:
 696              	.LFB247:
 448:lib/chibios/os/rt/src/chschd.c **** 
 449:lib/chibios/os/rt/src/chschd.c **** /**
 450:lib/chibios/os/rt/src/chschd.c ****  * @brief   Performs a reschedule if a higher priority thread is runnable.
 451:lib/chibios/os/rt/src/chschd.c ****  * @details If a thread with a higher priority than the current thread is in
 452:lib/chibios/os/rt/src/chschd.c ****  *          the ready list then make the higher priority thread running.
 453:lib/chibios/os/rt/src/chschd.c ****  *
 454:lib/chibios/os/rt/src/chschd.c ****  * @sclass
 455:lib/chibios/os/rt/src/chschd.c ****  */
 456:lib/chibios/os/rt/src/chschd.c **** void chSchRescheduleS(void) {
 457:lib/chibios/os/rt/src/chschd.c **** 
 458:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassS();
 459:lib/chibios/os/rt/src/chschd.c **** 
 460:lib/chibios/os/rt/src/chschd.c ****   if (chSchIsRescRequiredI()) {
 461:lib/chibios/os/rt/src/chschd.c ****     chSchDoRescheduleAhead();
 462:lib/chibios/os/rt/src/chschd.c ****   }
 463:lib/chibios/os/rt/src/chschd.c **** }
 464:lib/chibios/os/rt/src/chschd.c **** 
 465:lib/chibios/os/rt/src/chschd.c **** #if !defined(CH_SCH_IS_PREEMPTION_REQUIRED_HOOKED)
 466:lib/chibios/os/rt/src/chschd.c **** /**
 467:lib/chibios/os/rt/src/chschd.c ****  * @brief   Evaluates if preemption is required.
 468:lib/chibios/os/rt/src/chschd.c ****  * @details The decision is taken by comparing the relative priorities and
 469:lib/chibios/os/rt/src/chschd.c ****  *          depending on the state of the round robin timeout counter.
 470:lib/chibios/os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 471:lib/chibios/os/rt/src/chschd.c ****  *          itself or from within the port layer.
 472:lib/chibios/os/rt/src/chschd.c ****  *
 473:lib/chibios/os/rt/src/chschd.c ****  * @retval true         if there is a thread that must go in running state
 474:lib/chibios/os/rt/src/chschd.c ****  *                      immediately.
 475:lib/chibios/os/rt/src/chschd.c ****  * @retval false        if preemption is not required.
 476:lib/chibios/os/rt/src/chschd.c ****  *
 477:lib/chibios/os/rt/src/chschd.c ****  * @special
 478:lib/chibios/os/rt/src/chschd.c ****  */
 479:lib/chibios/os/rt/src/chschd.c **** bool chSchIsPreemptionRequired(void) {
 697              		.loc 1 479 38 is_stmt 1 view -0
 698              		.cfi_startproc
 699              		@ args = 0, pretend = 0, frame = 0
 700              		@ frame_needed = 0, uses_anonymous_args = 0
 701              		@ link register save eliminated.
 480:lib/chibios/os/rt/src/chschd.c ****   tprio_t p1 = firstprio(&ch.rlist.queue);
 702              		.loc 1 480 3 view .LVU218
 703              	.LVL41:
 481:lib/chibios/os/rt/src/chschd.c ****   tprio_t p2 = currp->prio;
 704              		.loc 1 481 3 view .LVU219
 482:lib/chibios/os/rt/src/chschd.c **** 
 483:lib/chibios/os/rt/src/chschd.c **** #if CH_CFG_TIME_QUANTUM > 0
 484:lib/chibios/os/rt/src/chschd.c ****   /* If the running thread has not reached its time quantum, reschedule only
 485:lib/chibios/os/rt/src/chschd.c ****      if the first thread on the ready queue has a higher priority.
 486:lib/chibios/os/rt/src/chschd.c ****      Otherwise, if the running thread has used up its time quantum, reschedule
 487:lib/chibios/os/rt/src/chschd.c ****      if the first thread on the ready queue has equal or higher priority.*/
 488:lib/chibios/os/rt/src/chschd.c ****   return (currp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 489:lib/chibios/os/rt/src/chschd.c **** #else
 490:lib/chibios/os/rt/src/chschd.c ****   /* If the round robin preemption feature is not enabled then performs a
 491:lib/chibios/os/rt/src/chschd.c ****      simpler comparison.*/
 492:lib/chibios/os/rt/src/chschd.c ****   return p1 > p2;
 705              		.loc 1 492 3 view .LVU220
 480:lib/chibios/os/rt/src/chschd.c ****   tprio_t p2 = currp->prio;
 706              		.loc 1 480 16 is_stmt 0 view .LVU221
 707 0000 044B     		ldr	r3, .L40
 708              	.LVL42:
 480:lib/chibios/os/rt/src/chschd.c ****   tprio_t p2 = currp->prio;
 709              		.loc 1 480 11 view .LVU222
 710 0002 1A68     		ldr	r2, [r3]
 481:lib/chibios/os/rt/src/chschd.c ****   tprio_t p2 = currp->prio;
 711              		.loc 1 481 11 view .LVU223
 712 0004 1B69     		ldr	r3, [r3, #16]
 713              	.LVL43:
 714              		.loc 1 492 13 view .LVU224
 715 0006 9068     		ldr	r0, [r2, #8]
 716 0008 9B68     		ldr	r3, [r3, #8]
 493:lib/chibios/os/rt/src/chschd.c **** #endif
 494:lib/chibios/os/rt/src/chschd.c **** }
 717              		.loc 1 494 1 view .LVU225
 718 000a 9842     		cmp	r0, r3
 719 000c 94BF     		ite	ls
 720 000e 0020     		movls	r0, #0
 721 0010 0120     		movhi	r0, #1
 722 0012 7047     		bx	lr
 723              	.L41:
 724              		.align	2
 725              	.L40:
 726 0014 00000000 		.word	ch
 727              		.cfi_endproc
 728              	.LFE247:
 730              		.thumb_set chSchIsRescRequiredI,chSchIsPreemptionRequired
 731              		.section	.text.chSchDoRescheduleBehind,"ax",%progbits
 732              		.align	1
 733              		.global	chSchDoRescheduleBehind
 734              		.syntax unified
 735              		.thumb
 736              		.thumb_func
 737              		.fpu fpv4-sp-d16
 739              	chSchDoRescheduleBehind:
 740              	.LFB248:
 495:lib/chibios/os/rt/src/chschd.c **** #endif /* !defined(CH_SCH_IS_PREEMPTION_REQUIRED_HOOKED) */
 496:lib/chibios/os/rt/src/chschd.c **** 
 497:lib/chibios/os/rt/src/chschd.c **** /**
 498:lib/chibios/os/rt/src/chschd.c ****  * @brief   Switches to the first thread on the runnable queue.
 499:lib/chibios/os/rt/src/chschd.c ****  * @details The current thread is positioned in the ready list behind all
 500:lib/chibios/os/rt/src/chschd.c ****  *          threads having the same priority. The thread regains its time
 501:lib/chibios/os/rt/src/chschd.c ****  *          quantum.
 502:lib/chibios/os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 503:lib/chibios/os/rt/src/chschd.c ****  *          itself.
 504:lib/chibios/os/rt/src/chschd.c ****  *
 505:lib/chibios/os/rt/src/chschd.c ****  * @special
 506:lib/chibios/os/rt/src/chschd.c ****  */
 507:lib/chibios/os/rt/src/chschd.c **** void chSchDoRescheduleBehind(void) {
 741              		.loc 1 507 36 is_stmt 1 view -0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 0
 744              		@ frame_needed = 0, uses_anonymous_args = 0
 508:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 745              		.loc 1 508 3 view .LVU227
 507:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 746              		.loc 1 507 36 is_stmt 0 view .LVU228
 747 0000 10B5     		push	{r4, lr}
 748              		.cfi_def_cfa_offset 8
 749              		.cfi_offset 4, -8
 750              		.cfi_offset 14, -4
 751              		.loc 1 508 13 view .LVU229
 752 0002 084C     		ldr	r4, .L43
 753              	.LBB120:
 754              	.LBB121:
 607:./lib/chibios/os/rt/include/chschd.h **** 
 755              		.loc 2 607 13 view .LVU230
 756 0004 2368     		ldr	r3, [r4]
 757              	.LBE121:
 758              	.LBE120:
 759              		.loc 1 508 13 view .LVU231
 760 0006 2069     		ldr	r0, [r4, #16]
 761              	.LVL44:
 509:lib/chibios/os/rt/src/chschd.c **** 
 510:lib/chibios/os/rt/src/chschd.c ****   /* Picks the first thread from the ready queue and makes it current.*/
 511:lib/chibios/os/rt/src/chschd.c ****   currp = queue_fifo_remove(&ch.rlist.queue);
 762              		.loc 1 511 3 is_stmt 1 view .LVU232
 763              	.LBB123:
 764              	.LBI120:
 606:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 765              		.loc 2 606 25 view .LVU233
 766              	.LBB122:
 607:./lib/chibios/os/rt/include/chschd.h **** 
 767              		.loc 2 607 3 view .LVU234
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 768              		.loc 2 609 3 view .LVU235
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 769              		.loc 2 609 36 is_stmt 0 view .LVU236
 770 0008 1A68     		ldr	r2, [r3]
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 771              		.loc 2 609 25 view .LVU237
 772 000a 2260     		str	r2, [r4]
 610:./lib/chibios/os/rt/include/chschd.h **** 
 773              		.loc 2 610 3 is_stmt 1 view .LVU238
 610:./lib/chibios/os/rt/include/chschd.h **** 
 774              		.loc 2 610 25 is_stmt 0 view .LVU239
 775 000c 5460     		str	r4, [r2, #4]
 612:./lib/chibios/os/rt/include/chschd.h **** }
 776              		.loc 2 612 3 is_stmt 1 view .LVU240
 777              	.LVL45:
 612:./lib/chibios/os/rt/include/chschd.h **** }
 778              		.loc 2 612 3 is_stmt 0 view .LVU241
 779              	.LBE122:
 780              	.LBE123:
 512:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 781              		.loc 1 512 16 view .LVU242
 782 000e 0122     		movs	r2, #1
 511:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 783              		.loc 1 511 9 view .LVU243
 784 0010 2361     		str	r3, [r4, #16]
 785              		.loc 1 512 3 is_stmt 1 view .LVU244
 786              		.loc 1 512 16 is_stmt 0 view .LVU245
 787 0012 1A74     		strb	r2, [r3, #16]
 513:lib/chibios/os/rt/src/chschd.c **** 
 514:lib/chibios/os/rt/src/chschd.c ****   /* Handling idle-leave hook.*/
 515:lib/chibios/os/rt/src/chschd.c ****   if (otp->prio == IDLEPRIO) {
 788              		.loc 1 515 3 is_stmt 1 view .LVU246
 516:lib/chibios/os/rt/src/chschd.c ****     CH_CFG_IDLE_LEAVE_HOOK();
 789              		.loc 1 516 5 view .LVU247
 790              		.loc 1 516 29 view .LVU248
 517:lib/chibios/os/rt/src/chschd.c ****   }
 518:lib/chibios/os/rt/src/chschd.c **** 
 519:lib/chibios/os/rt/src/chschd.c **** #if CH_CFG_TIME_QUANTUM > 0
 520:lib/chibios/os/rt/src/chschd.c ****   /* It went behind peers so it gets a new time quantum.*/
 521:lib/chibios/os/rt/src/chschd.c ****   otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
 522:lib/chibios/os/rt/src/chschd.c **** #endif
 523:lib/chibios/os/rt/src/chschd.c **** 
 524:lib/chibios/os/rt/src/chschd.c ****   /* Placing in ready list behind peers.*/
 525:lib/chibios/os/rt/src/chschd.c ****   otp = chSchReadyI(otp);
 791              		.loc 1 525 3 view .LVU249
 792              		.loc 1 525 9 is_stmt 0 view .LVU250
 793 0014 FFF7FEFF 		bl	chSchReadyI
 794              	.LVL46:
 795              		.loc 1 525 9 view .LVU251
 796 0018 0146     		mov	r1, r0
 797              	.LVL47:
 526:lib/chibios/os/rt/src/chschd.c **** 
 527:lib/chibios/os/rt/src/chschd.c ****   /* Swap operation as tail call.*/
 528:lib/chibios/os/rt/src/chschd.c ****   chSysSwitch(currp, otp);
 798              		.loc 1 528 3 is_stmt 1 view .LVU252
 799              		.loc 1 528 3 view .LVU253
 800              		.loc 1 528 3 view .LVU254
 801              		.loc 1 528 3 view .LVU255
 802              		.loc 1 528 3 view .LVU256
 803 001a 2069     		ldr	r0, [r4, #16]
 804              	.LVL48:
 529:lib/chibios/os/rt/src/chschd.c **** }
 805              		.loc 1 529 1 is_stmt 0 view .LVU257
 806 001c BDE81040 		pop	{r4, lr}
 807              		.cfi_restore 14
 808              		.cfi_restore 4
 809              		.cfi_def_cfa_offset 0
 528:lib/chibios/os/rt/src/chschd.c **** }
 810              		.loc 1 528 3 view .LVU258
 811 0020 FFF7FEBF 		b	_port_switch
 812              	.LVL49:
 813              	.L44:
 528:lib/chibios/os/rt/src/chschd.c **** }
 814              		.loc 1 528 3 view .LVU259
 815              		.align	2
 816              	.L43:
 817 0024 00000000 		.word	ch
 818              		.cfi_endproc
 819              	.LFE248:
 821              		.section	.text.chSchDoRescheduleAhead,"ax",%progbits
 822              		.align	1
 823              		.global	chSchDoRescheduleAhead
 824              		.syntax unified
 825              		.thumb
 826              		.thumb_func
 827              		.fpu fpv4-sp-d16
 829              	chSchDoRescheduleAhead:
 830              	.LFB249:
 530:lib/chibios/os/rt/src/chschd.c **** 
 531:lib/chibios/os/rt/src/chschd.c **** /**
 532:lib/chibios/os/rt/src/chschd.c ****  * @brief   Switches to the first thread on the runnable queue.
 533:lib/chibios/os/rt/src/chschd.c ****  * @details The current thread is positioned in the ready list ahead of all
 534:lib/chibios/os/rt/src/chschd.c ****  *          threads having the same priority.
 535:lib/chibios/os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 536:lib/chibios/os/rt/src/chschd.c ****  *          itself.
 537:lib/chibios/os/rt/src/chschd.c ****  *
 538:lib/chibios/os/rt/src/chschd.c ****  * @special
 539:lib/chibios/os/rt/src/chschd.c ****  */
 540:lib/chibios/os/rt/src/chschd.c **** void chSchDoRescheduleAhead(void) {
 831              		.loc 1 540 35 is_stmt 1 view -0
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 0
 834              		@ frame_needed = 0, uses_anonymous_args = 0
 541:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 835              		.loc 1 541 3 view .LVU261
 540:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 836              		.loc 1 540 35 is_stmt 0 view .LVU262
 837 0000 10B5     		push	{r4, lr}
 838              		.cfi_def_cfa_offset 8
 839              		.cfi_offset 4, -8
 840              		.cfi_offset 14, -4
 841              		.loc 1 541 13 view .LVU263
 842 0002 084C     		ldr	r4, .L46
 843              	.LBB124:
 844              	.LBB125:
 607:./lib/chibios/os/rt/include/chschd.h **** 
 845              		.loc 2 607 13 view .LVU264
 846 0004 2368     		ldr	r3, [r4]
 847              	.LBE125:
 848              	.LBE124:
 849              		.loc 1 541 13 view .LVU265
 850 0006 2069     		ldr	r0, [r4, #16]
 851              	.LVL50:
 542:lib/chibios/os/rt/src/chschd.c **** 
 543:lib/chibios/os/rt/src/chschd.c ****   /* Picks the first thread from the ready queue and makes it current.*/
 544:lib/chibios/os/rt/src/chschd.c ****   currp = queue_fifo_remove(&ch.rlist.queue);
 852              		.loc 1 544 3 is_stmt 1 view .LVU266
 853              	.LBB127:
 854              	.LBI124:
 606:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 855              		.loc 2 606 25 view .LVU267
 856              	.LBB126:
 607:./lib/chibios/os/rt/include/chschd.h **** 
 857              		.loc 2 607 3 view .LVU268
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 858              		.loc 2 609 3 view .LVU269
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 859              		.loc 2 609 36 is_stmt 0 view .LVU270
 860 0008 1A68     		ldr	r2, [r3]
 609:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 861              		.loc 2 609 25 view .LVU271
 862 000a 2260     		str	r2, [r4]
 610:./lib/chibios/os/rt/include/chschd.h **** 
 863              		.loc 2 610 3 is_stmt 1 view .LVU272
 610:./lib/chibios/os/rt/include/chschd.h **** 
 864              		.loc 2 610 25 is_stmt 0 view .LVU273
 865 000c 5460     		str	r4, [r2, #4]
 612:./lib/chibios/os/rt/include/chschd.h **** }
 866              		.loc 2 612 3 is_stmt 1 view .LVU274
 867              	.LVL51:
 612:./lib/chibios/os/rt/include/chschd.h **** }
 868              		.loc 2 612 3 is_stmt 0 view .LVU275
 869              	.LBE126:
 870              	.LBE127:
 545:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 871              		.loc 1 545 16 view .LVU276
 872 000e 0122     		movs	r2, #1
 544:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 873              		.loc 1 544 9 view .LVU277
 874 0010 2361     		str	r3, [r4, #16]
 875              		.loc 1 545 3 is_stmt 1 view .LVU278
 876              		.loc 1 545 16 is_stmt 0 view .LVU279
 877 0012 1A74     		strb	r2, [r3, #16]
 546:lib/chibios/os/rt/src/chschd.c **** 
 547:lib/chibios/os/rt/src/chschd.c ****   /* Handling idle-leave hook.*/
 548:lib/chibios/os/rt/src/chschd.c ****   if (otp->prio == IDLEPRIO) {
 878              		.loc 1 548 3 is_stmt 1 view .LVU280
 549:lib/chibios/os/rt/src/chschd.c ****     CH_CFG_IDLE_LEAVE_HOOK();
 879              		.loc 1 549 5 view .LVU281
 880              		.loc 1 549 29 view .LVU282
 550:lib/chibios/os/rt/src/chschd.c ****   }
 551:lib/chibios/os/rt/src/chschd.c **** 
 552:lib/chibios/os/rt/src/chschd.c ****   /* Placing in ready list ahead of peers.*/
 553:lib/chibios/os/rt/src/chschd.c ****   otp = chSchReadyAheadI(otp);
 881              		.loc 1 553 3 view .LVU283
 882              		.loc 1 553 9 is_stmt 0 view .LVU284
 883 0014 FFF7FEFF 		bl	chSchReadyAheadI
 884              	.LVL52:
 885              		.loc 1 553 9 view .LVU285
 886 0018 0146     		mov	r1, r0
 887              	.LVL53:
 554:lib/chibios/os/rt/src/chschd.c **** 
 555:lib/chibios/os/rt/src/chschd.c ****   /* Swap operation as tail call.*/
 556:lib/chibios/os/rt/src/chschd.c ****   chSysSwitch(currp, otp);
 888              		.loc 1 556 3 is_stmt 1 view .LVU286
 889              		.loc 1 556 3 view .LVU287
 890              		.loc 1 556 3 view .LVU288
 891              		.loc 1 556 3 view .LVU289
 892              		.loc 1 556 3 view .LVU290
 893 001a 2069     		ldr	r0, [r4, #16]
 894              	.LVL54:
 557:lib/chibios/os/rt/src/chschd.c **** }
 895              		.loc 1 557 1 is_stmt 0 view .LVU291
 896 001c BDE81040 		pop	{r4, lr}
 897              		.cfi_restore 14
 898              		.cfi_restore 4
 899              		.cfi_def_cfa_offset 0
 556:lib/chibios/os/rt/src/chschd.c **** }
 900              		.loc 1 556 3 view .LVU292
 901 0020 FFF7FEBF 		b	_port_switch
 902              	.LVL55:
 903              	.L47:
 556:lib/chibios/os/rt/src/chschd.c **** }
 904              		.loc 1 556 3 view .LVU293
 905              		.align	2
 906              	.L46:
 907 0024 00000000 		.word	ch
 908              		.cfi_endproc
 909              	.LFE249:
 911              		.section	.text.chSchRescheduleS,"ax",%progbits
 912              		.align	1
 913              		.global	chSchRescheduleS
 914              		.syntax unified
 915              		.thumb
 916              		.thumb_func
 917              		.fpu fpv4-sp-d16
 919              	chSchRescheduleS:
 920              	.LFB246:
 456:lib/chibios/os/rt/src/chschd.c **** 
 921              		.loc 1 456 29 is_stmt 1 view -0
 922              		.cfi_startproc
 923              		@ args = 0, pretend = 0, frame = 0
 924              		@ frame_needed = 0, uses_anonymous_args = 0
 458:lib/chibios/os/rt/src/chschd.c **** 
 925              		.loc 1 458 21 view .LVU295
 460:lib/chibios/os/rt/src/chschd.c ****     chSchDoRescheduleAhead();
 926              		.loc 1 460 3 view .LVU296
 456:lib/chibios/os/rt/src/chschd.c **** 
 927              		.loc 1 456 29 is_stmt 0 view .LVU297
 928 0000 08B5     		push	{r3, lr}
 929              		.cfi_def_cfa_offset 8
 930              		.cfi_offset 3, -8
 931              		.cfi_offset 14, -4
 460:lib/chibios/os/rt/src/chschd.c ****     chSchDoRescheduleAhead();
 932              		.loc 1 460 7 view .LVU298
 933 0002 FFF7FEFF 		bl	chSchIsRescRequiredI
 934              	.LVL56:
 460:lib/chibios/os/rt/src/chschd.c ****     chSchDoRescheduleAhead();
 935              		.loc 1 460 6 view .LVU299
 936 0006 18B1     		cbz	r0, .L48
 461:lib/chibios/os/rt/src/chschd.c ****   }
 937              		.loc 1 461 5 is_stmt 1 view .LVU300
 463:lib/chibios/os/rt/src/chschd.c **** 
 938              		.loc 1 463 1 is_stmt 0 view .LVU301
 939 0008 BDE80840 		pop	{r3, lr}
 940              		.cfi_remember_state
 941              		.cfi_restore 14
 942              		.cfi_restore 3
 943              		.cfi_def_cfa_offset 0
 461:lib/chibios/os/rt/src/chschd.c ****   }
 944              		.loc 1 461 5 view .LVU302
 945 000c FFF7FEBF 		b	chSchDoRescheduleAhead
 946              	.LVL57:
 947              	.L48:
 948              		.cfi_restore_state
 463:lib/chibios/os/rt/src/chschd.c **** 
 949              		.loc 1 463 1 view .LVU303
 950 0010 08BD     		pop	{r3, pc}
 951              		.cfi_endproc
 952              	.LFE246:
 954              		.section	.text.chSchDoReschedule,"ax",%progbits
 955              		.align	1
 956              		.global	chSchDoReschedule
 957              		.syntax unified
 958              		.thumb
 959              		.thumb_func
 960              		.fpu fpv4-sp-d16
 962              	chSchDoReschedule:
 963              	.LFB252:
 964              		.cfi_startproc
 965              		@ args = 0, pretend = 0, frame = 0
 966              		@ frame_needed = 0, uses_anonymous_args = 0
 967              		@ link register save eliminated.
 968 0000 FFF7FEBF 		b	chSchDoRescheduleAhead
 969              		.cfi_endproc
 970              	.LFE252:
 972              		.comm	ch,76,4
 973              		.text
 974              	.Letext0:
 975              		.file 8 "c:\\qmk_msys\\mingw64\\arm-none-eabi\\include\\machine\\_default_types.h"
 976              		.file 9 "c:\\qmk_msys\\mingw64\\arm-none-eabi\\include\\sys\\_stdint.h"
 977              		.file 10 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 978              		.file 11 "./lib/chibios/os/rt/include/chsystypes.h"
 979              		.file 12 "./lib/chibios/os/rt/include/chtime.h"
 980              		.file 13 "./lib/chibios/os/rt/include/chmtx.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chschd.c
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:18     .text._scheduler_init:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:26     .text._scheduler_init:0000000000000000 _scheduler_init
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:64     .text._scheduler_init:000000000000000c $d
                            *COM*:000000000000004c ch
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:69     .text.chSchReadyI:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:76     .text.chSchReadyI:0000000000000000 chSchReadyI
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:134    .text.chSchReadyI:000000000000001c $d
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:139    .text.wakeup:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:145    .text.wakeup:0000000000000000 wakeup
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:225    .text.wakeup:0000000000000014 $d
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:231    .text.wakeup:000000000000001a $t
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:345    .text.chSchReadyAheadI:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:352    .text.chSchReadyAheadI:0000000000000000 chSchReadyAheadI
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:410    .text.chSchReadyAheadI:000000000000001c $d
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:415    .text.chSchGoSleepS:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:422    .text.chSchGoSleepS:0000000000000000 chSchGoSleepS
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:482    .text.chSchGoSleepS:0000000000000018 $d
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:487    .text.chSchGoSleepTimeoutS:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:494    .text.chSchGoSleepTimeoutS:0000000000000000 chSchGoSleepTimeoutS
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:574    .text.chSchGoSleepTimeoutS:0000000000000034 $d
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:580    .text.chSchWakeupS:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:587    .text.chSchWakeupS:0000000000000000 chSchWakeupS
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:683    .text.chSchWakeupS:0000000000000034 $d
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:688    .text.chSchIsPreemptionRequired:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:695    .text.chSchIsPreemptionRequired:0000000000000000 chSchIsPreemptionRequired
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:726    .text.chSchIsPreemptionRequired:0000000000000014 $d
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:695    .text.chSchIsPreemptionRequired:0000000000000000 chSchIsRescRequiredI
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:732    .text.chSchDoRescheduleBehind:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:739    .text.chSchDoRescheduleBehind:0000000000000000 chSchDoRescheduleBehind
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:817    .text.chSchDoRescheduleBehind:0000000000000024 $d
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:822    .text.chSchDoRescheduleAhead:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:829    .text.chSchDoRescheduleAhead:0000000000000000 chSchDoRescheduleAhead
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:907    .text.chSchDoRescheduleAhead:0000000000000024 $d
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:912    .text.chSchRescheduleS:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:919    .text.chSchRescheduleS:0000000000000000 chSchRescheduleS
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:955    .text.chSchDoReschedule:0000000000000000 $t
C:\Users\lhanj\AppData\Local\Temp\cc3WuIgf.s:962    .text.chSchDoReschedule:0000000000000000 chSchDoReschedule

UNDEFINED SYMBOLS
_port_switch
chVTDoSetI
chVTDoResetI
